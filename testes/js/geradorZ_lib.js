var geradorZ = (() => {
  var _scriptName = typeof document != 'undefined' ? document.currentScript?.src : undefined;
  if (typeof __filename != 'undefined') _scriptName = _scriptName || __filename;
  return (
async function(moduleArg = {}) {
  var moduleRtn;

// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(moduleArg) => Promise<Module>
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = moduleArg;

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
var readyPromise = new Promise((resolve, reject) => {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window == 'object';
var ENVIRONMENT_IS_WORKER = typeof WorkerGlobalScope != 'undefined';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process == 'object' && typeof process.versions == 'object' && typeof process.versions.node == 'string' && process.type != 'renderer';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {

}

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {...Module};

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var readAsync, readBinary;

if (ENVIRONMENT_IS_NODE) {
  if (typeof process == 'undefined' || !process.release || process.release.name !== 'node') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  var nodeVersion = process.versions.node;
  var numericVersion = nodeVersion.split('.').slice(0, 3);
  numericVersion = (numericVersion[0] * 10000) + (numericVersion[1] * 100) + (numericVersion[2].split('-')[0] * 1);
  var minVersion = 160000;
  if (numericVersion < 160000) {
    throw new Error('This emscripten-generated code requires node v16.0.0 (detected v' + nodeVersion + ')');
  }

  // These modules will usually be used on Node.js. Load them eagerly to avoid
  // the complexity of lazy-loading.
  var fs = require('fs');
  var nodePath = require('path');

  scriptDirectory = __dirname + '/';

// include: node_shell_read.js
readBinary = (filename) => {
  // We need to re-wrap `file://` strings to URLs.
  filename = isFileURI(filename) ? new URL(filename) : filename;
  var ret = fs.readFileSync(filename);
  assert(Buffer.isBuffer(ret));
  return ret;
};

readAsync = async (filename, binary = true) => {
  // See the comment in the `readBinary` function.
  filename = isFileURI(filename) ? new URL(filename) : filename;
  var ret = fs.readFileSync(filename, binary ? undefined : 'utf8');
  assert(binary ? Buffer.isBuffer(ret) : typeof ret == 'string');
  return ret;
};
// end include: node_shell_read.js
  if (!Module['thisProgram'] && process.argv.length > 1) {
    thisProgram = process.argv[1].replace(/\\/g, '/');
  }

  arguments_ = process.argv.slice(2);

  // MODULARIZE will export the module in the proper place outside, we don't need to export here

  quit_ = (status, toThrow) => {
    process.exitCode = status;
    throw toThrow;
  };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process == 'object' && typeof require === 'function') || typeof window == 'object' || typeof WorkerGlobalScope != 'undefined') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptName) {
    scriptDirectory = _scriptName;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.startsWith('blob:')) {
    scriptDirectory = '';
  } else {
    scriptDirectory = scriptDirectory.slice(0, scriptDirectory.replace(/[?#].*/, '').lastIndexOf('/')+1);
  }

  if (!(typeof window == 'object' || typeof WorkerGlobalScope != 'undefined')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  {
// include: web_or_worker_shell_read.js
if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
    };
  }

  readAsync = async (url) => {
    // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
    // See https://github.com/github/fetch/pull/92#issuecomment-140665932
    // Cordova or Electron apps are typically loaded from a file:// url.
    // So use XHR on webview if URL is a file URL.
    if (isFileURI(url)) {
      return new Promise((resolve, reject) => {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = () => {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            resolve(xhr.response);
            return;
          }
          reject(xhr.status);
        };
        xhr.onerror = reject;
        xhr.send(null);
      });
    }
    var response = await fetch(url, { credentials: 'same-origin' });
    if (response.ok) {
      return response.arrayBuffer();
    }
    throw new Error(response.status + ' : ' + response.url);
  };
// end include: web_or_worker_shell_read.js
  }
} else
{
  throw new Error('environment detection error');
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.error.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used.
moduleOverrides = null;
checkIncomingModuleAPI();

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];legacyModuleProp('arguments', 'arguments_');

if (Module['thisProgram']) thisProgram = Module['thisProgram'];legacyModuleProp('thisProgram', 'thisProgram');

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] == 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] == 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] == 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] == 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] == 'undefined', 'Module.read option was removed');
assert(typeof Module['readAsync'] == 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] == 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] == 'undefined', 'Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)');
assert(typeof Module['TOTAL_MEMORY'] == 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');
legacyModuleProp('asm', 'wasmExports');
legacyModuleProp('readAsync', 'readAsync');
legacyModuleProp('readBinary', 'readBinary');
legacyModuleProp('setWindowTitle', 'setWindowTitle');
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var FETCHFS = 'FETCHFS is no longer included by default; build with -lfetchfs.js';
var ICASEFS = 'ICASEFS is no longer included by default; build with -licasefs.js';
var JSFILEFS = 'JSFILEFS is no longer included by default; build with -ljsfilefs.js';
var OPFS = 'OPFS is no longer included by default; build with -lopfs.js';

var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';

assert(!ENVIRONMENT_IS_SHELL, 'shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.');

// end include: shell.js

// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary = Module['wasmBinary'];legacyModuleProp('wasmBinary', 'wasmBinary');

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
    return uint8Array;
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 67108864, "");
  base64DecodeToExistingUint8Array(bufferView, 67135184, "ACAAAAAAAAAFAAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAABQAAALB6AAQAAAAAAAAAAAAAAAACAAAAAAAAAAAAAAAAAAAA//////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADYZgAEAAAAAAUAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAHAAAAuHoABAAEAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAD/////CgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHBnAARgkQAECQAAAAAAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAA8AAAAAAAAAAUAAAC4gAAEAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJW0vJWQvJXkAAAAIJUg6JU06JVMAAAAI");
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_memory_fill(dest, value, size) {
    dest = dest >>> 0;
    size = size >>> 0;
    if (dest + size > bufferView.length) throw "trap: invalid memory.fill";
    bufferView.fill(value, dest, dest + size);
  }
      
  function wasm2js_memory_copy(dest, source, size) {
    // TODO: traps on invalid things
    bufferView.copyWithin(dest, source, source + size);
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var buffer = new ArrayBuffer(134217728);
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var env = imports.env;
 var fimport$0 = env.exit;
 var fimport$1 = env.__cxa_throw;
 var fimport$2 = env.emscripten_date_now;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var fimport$3 = wasi_snapshot_preview1.fd_close;
 var fimport$4 = wasi_snapshot_preview1.fd_write;
 var fimport$5 = env._abort_js;
 var fimport$6 = env.emscripten_resize_heap;
 var fimport$7 = wasi_snapshot_preview1.fd_read;
 var fimport$8 = wasi_snapshot_preview1.environ_sizes_get;
 var fimport$9 = wasi_snapshot_preview1.environ_get;
 var fimport$10 = env._tzset_js;
 var fimport$11 = env._embind_register_void;
 var fimport$12 = env._embind_register_bool;
 var fimport$13 = env._embind_register_integer;
 var fimport$14 = env._embind_register_float;
 var fimport$15 = env._embind_register_std_string;
 var fimport$16 = env._embind_register_std_wstring;
 var fimport$17 = env._embind_register_emval;
 var fimport$18 = env._embind_register_memory_view;
 var fimport$19 = wasi_snapshot_preview1.fd_seek;
 var fimport$20 = env._embind_register_bigint;
 var global$0 = 67108864;
 var global$1 = 0;
 var global$2 = 0;
 var global$3 = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $1995();
  $700();
  $710();
  $226();
  $275();
  $2005();
 }
 
 function $1($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  $8_1 = $0_1 + 4 | 0;
  $9_1 = 128;
  $10_1 = 0;
  block : {
   if (!$9_1) {
    break block
   }
   wasm2js_memory_fill($8_1, $10_1, $9_1);
  }
  $288($0_1 + 4 | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $2() {
  var $2_1 = 0, $9_1 = 0, $36_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $340(8 | 0) | 0;
  HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($2_1 + 12 | 0) >> 2] | 0) >> 2] = 0;
  $9_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $3($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $26_1 = 0, $15_1 = 0, $25_1 = 0, $28_1 = 0, $95_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 1 | 0;
  $15_1 = $343(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0, 132) | 0) | 0;
  HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = $15_1;
  $25_1 = (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0, 132) | 0;
  $26_1 = 132;
  block : {
   if (!$26_1) {
    break block
   }
   wasm2js_memory_copy($25_1, $1_1, $26_1);
  }
  $28_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $28_1 | 0;
 }
 
 function $4($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block
    }
    break block1;
   }
   block2 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break block2
    }
    $342(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   }
   $342(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $5() {
  var $2_1 = 0, $9_1 = 0, $36_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $340(8 | 0) | 0;
  HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($2_1 + 12 | 0) >> 2] | 0) >> 2] = 0;
  $9_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $6($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $21_1 = 0, $39_1 = 0, $61_1 = 0, $69_1 = 0, $228_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + 1 | 0;
  block1 : {
   block : {
    if (!((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block
    }
    $21_1 = $343(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = $21_1;
    HEAP8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] = HEAPU8[($4_1 + 11 | 0) >> 0] | 0;
    $39_1 = $343(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + 1 | 0) << 0 | 0 | 0) | 0;
    HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = $39_1;
    HEAP8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 0] = 0;
    break block1;
   }
   HEAP8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] = HEAPU8[($4_1 + 11 | 0) >> 0] | 0;
   $61_1 = $343(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
   HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = $61_1;
   HEAP8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 0] = 0;
  }
  $69_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $69_1 | 0;
 }
 
 function $7($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $51_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
  block8 : {
   block7 : {
    switch ($6_1 | 0) {
    case 1:
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     break block8;
    case 0:
     HEAP32[($3_1 + 12 | 0) >> 2] = 1;
     break block8;
    case 4:
    case 5:
     HEAP32[($3_1 + 12 | 0) >> 2] = 2;
     break block8;
    case 6:
    case 7:
     HEAP32[($3_1 + 12 | 0) >> 2] = 3;
     break block8;
    case 2:
    case 3:
     HEAP32[($3_1 + 12 | 0) >> 2] = 5;
     break block8;
    case 8:
     HEAP32[($3_1 + 12 | 0) >> 2] = 4;
     break block8;
    case 9:
    case 10:
     HEAP32[($3_1 + 12 | 0) >> 2] = 6;
     break block8;
    default:
     break block7;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $8($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $45_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -1 | 0;
  block6 : {
   block5 : {
    switch ($6_1 | 0) {
    case 0:
    case 1:
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     break block6;
    case 4:
    case 5:
    case 6:
    case 7:
     HEAP32[($3_1 + 12 | 0) >> 2] = 1;
     break block6;
    case 2:
    case 3:
     HEAP32[($3_1 + 12 | 0) >> 2] = 0;
     break block6;
    case 8:
     HEAP32[($3_1 + 12 | 0) >> 2] = 1;
     break block6;
    case 9:
    case 10:
     HEAP32[($3_1 + 12 | 0) >> 2] = 1;
     break block6;
    default:
     break block5;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $9($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $36_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -5 | 0;
  block3 : {
   block2 : {
    switch ($6_1 | 0) {
    case 0:
    case 1:
    case 2:
    case 3:
     HEAP32[($3_1 + 12 | 0) >> 2] = 1;
     break block3;
    case 4:
     HEAP32[($3_1 + 12 | 0) >> 2] = 1;
     break block3;
    default:
     break block2;
    };
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $10($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $34_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if (((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + -10 | 0) >>> 0 > 1 >>> 0) {
     break block
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 1;
    break block1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $342(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = 0;
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $12($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0, $59_1 = 0, $86_1 = 0, $102_1 = 0, $113_1 = 0, $124_1 = 0, $135_1 = 0, $146_1 = 0, $157_1 = 0, $168_1 = 0, $179_1 = 0, $202_1 = 0, $245_1 = 0, $255_1 = 0, $268_1 = 0, $368_1 = 0, $391_1 = 0, $409_1 = 0, $422_1 = 0, $525_1 = 0, $539_1 = 0, $550_1 = 0, $564_1 = 0, $588_1 = 0, $610_1 = 0, $632_1 = 0, $654_1 = 0, $676_1 = 0, $698_1 = 0, $720_1 = 0, $190_1 = 0, $248_1 = 0, $353_1 = 0, $402_1 = 0, $511_1 = 0, $532_1 = 0, $557_1 = 0, $581_1 = 0, $603_1 = 0, $625_1 = 0, $647_1 = 0, $669_1 = 0, $691_1 = 0, $713_1 = 0, $732_1 = 0, $2301 = 0;
  $3_1 = global$0 - 2992 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 2988 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 2984 | 0) >> 2] = $2() | 0;
  HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
  HEAP32[($3_1 + 2976 | 0) >> 2] = 0;
  HEAP32[($3_1 + 2972 | 0) >> 2] = $5() | 0;
  HEAP32[($3_1 + 1488 | 0) >> 2] = HEAP32[($3_1 + 2988 | 0) >> 2] | 0;
  $271(67111567 | 0, $3_1 + 1488 | 0 | 0) | 0;
  HEAP32[($3_1 + 2968 | 0) >> 2] = 0;
  HEAP32[($3_1 + 2964 | 0) >> 2] = $291(HEAP32[($3_1 + 2988 | 0) >> 2] | 0 | 0) | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($3_1 + 2968 | 0) >> 2] | 0 | 0) <= (HEAP32[($3_1 + 2964 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    block30 : {
     block1 : {
      if (HEAP32[($3_1 + 2980 | 0) >> 2] | 0) {
       break block1
      }
      HEAP32[($3_1 + 2976 | 0) >> 2] = 0;
      $26_1 = 24;
      HEAP32[($3_1 + 2960 | 0) >> 2] = ((HEAPU8[((HEAP32[($3_1 + 2988 | 0) >> 2] | 0) + (HEAP32[($3_1 + 2968 | 0) >> 2] | 0) | 0) >> 0] | 0) << $26_1 | 0) >> $26_1 | 0;
      HEAP32[($3_1 + 2968 | 0) >> 2] = (HEAP32[($3_1 + 2968 | 0) >> 2] | 0) + 1 | 0;
      block6 : {
       block5 : {
        block3 : {
         block2 : {
          if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) >= (97 | 0) & 1 | 0)) {
           break block2
          }
          if ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) <= (122 | 0) & 1 | 0) {
           break block3
          }
         }
         block4 : {
          if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) >= (65 | 0) & 1 | 0)) {
           break block4
          }
          if ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) <= (90 | 0) & 1 | 0) {
           break block3
          }
         }
         if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (95 | 0) & 1 | 0)) {
          break block5
         }
        }
        $59_1 = 24;
        $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $59_1 | 0) >> $59_1 | 0 | 0) | 0;
        HEAP32[($3_1 + 2980 | 0) >> 2] = 1;
        break block6;
       }
       block11 : {
        block9 : {
         block8 : {
          block7 : {
           if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) >= (48 | 0) & 1 | 0)) {
            break block7
           }
           if ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) <= (57 | 0) & 1 | 0) {
            break block8
           }
          }
          if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (46 | 0) & 1 | 0)) {
           break block9
          }
         }
         block10 : {
          if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (46 | 0) & 1 | 0)) {
           break block10
          }
          HEAP32[($3_1 + 2976 | 0) >> 2] = 1;
         }
         $86_1 = 24;
         $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $86_1 | 0) >> $86_1 | 0 | 0) | 0;
         HEAP32[($3_1 + 2980 | 0) >> 2] = 2;
         break block11;
        }
        block14 : {
         block13 : {
          block12 : {
           if ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (40 | 0) & 1 | 0) {
            break block12
           }
           if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (41 | 0) & 1 | 0)) {
            break block13
           }
          }
          $102_1 = 24;
          $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $102_1 | 0) >> $102_1 | 0 | 0) | 0;
          HEAP32[($3_1 + 2980 | 0) >> 2] = 3;
          break block14;
         }
         block16 : {
          block15 : {
           if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (43 | 0) & 1 | 0)) {
            break block15
           }
           $113_1 = 24;
           $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $113_1 | 0) >> $113_1 | 0 | 0) | 0;
           HEAP32[($3_1 + 2980 | 0) >> 2] = 4;
           break block16;
          }
          block18 : {
           block17 : {
            if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (45 | 0) & 1 | 0)) {
             break block17
            }
            $124_1 = 24;
            $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $124_1 | 0) >> $124_1 | 0 | 0) | 0;
            HEAP32[($3_1 + 2980 | 0) >> 2] = 5;
            break block18;
           }
           block20 : {
            block19 : {
             if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (42 | 0) & 1 | 0)) {
              break block19
             }
             $135_1 = 24;
             $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $135_1 | 0) >> $135_1 | 0 | 0) | 0;
             HEAP32[($3_1 + 2980 | 0) >> 2] = 6;
             break block20;
            }
            block22 : {
             block21 : {
              if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (47 | 0) & 1 | 0)) {
               break block21
              }
              $146_1 = 24;
              $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $146_1 | 0) >> $146_1 | 0 | 0) | 0;
              HEAP32[($3_1 + 2980 | 0) >> 2] = 7;
              break block22;
             }
             block24 : {
              block23 : {
               if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (44 | 0) & 1 | 0)) {
                break block23
               }
               $157_1 = 24;
               $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $157_1 | 0) >> $157_1 | 0 | 0) | 0;
               HEAP32[($3_1 + 2980 | 0) >> 2] = 8;
               break block24;
              }
              block26 : {
               block25 : {
                if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (61 | 0) & 1 | 0)) {
                 break block25
                }
                $168_1 = 24;
                $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $168_1 | 0) >> $168_1 | 0 | 0) | 0;
                HEAP32[($3_1 + 2980 | 0) >> 2] = 9;
                break block26;
               }
               block28 : {
                block27 : {
                 if (!((HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) == (94 | 0) & 1 | 0)) {
                  break block27
                 }
                 $179_1 = 24;
                 $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2960 | 0) >> 2] | 0) << $179_1 | 0) >> $179_1 | 0 | 0) | 0;
                 HEAP32[($3_1 + 2980 | 0) >> 2] = 10;
                 break block28;
                }
                block29 : {
                 if ($230(HEAP32[($3_1 + 2960 | 0) >> 2] | 0 | 0) | 0) {
                  break block29
                 }
                 if (!((HEAP32[($3_1 + 2968 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 2964 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                  break block29
                 }
                 $190_1 = HEAP32[($3_1 + 2960 | 0) >> 2] | 0;
                 HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 2968 | 0) >> 2] | 0;
                 HEAP32[$3_1 >> 2] = $190_1;
                 $271(67111219 | 0, $3_1 | 0) | 0;
                 break block;
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
      break block30;
     }
     block63 : {
      block31 : {
       if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break block31
       }
       $202_1 = 24;
       HEAP32[($3_1 + 2956 | 0) >> 2] = ((HEAPU8[((HEAP32[($3_1 + 2988 | 0) >> 2] | 0) + (HEAP32[($3_1 + 2968 | 0) >> 2] | 0) | 0) >> 0] | 0) << $202_1 | 0) >> $202_1 | 0;
       HEAP32[($3_1 + 2968 | 0) >> 2] = (HEAP32[($3_1 + 2968 | 0) >> 2] | 0) + 1 | 0;
       block36 : {
        block35 : {
         block33 : {
          block32 : {
           if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) >= (97 | 0) & 1 | 0)) {
            break block32
           }
           if ((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) <= (122 | 0) & 1 | 0) {
            break block33
           }
          }
          block34 : {
           if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) >= (65 | 0) & 1 | 0)) {
            break block34
           }
           if ((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) <= (90 | 0) & 1 | 0) {
            break block33
           }
          }
          if ((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (95 | 0) & 1 | 0) {
           break block33
          }
          if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) >= (48 | 0) & 1 | 0)) {
           break block35
          }
          if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) <= (57 | 0) & 1 | 0)) {
           break block35
          }
         }
         $245_1 = 24;
         $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2956 | 0) >> 2] | 0) << $245_1 | 0) >> $245_1 | 0 | 0) | 0;
         break block36;
        }
        $248_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
        $1($3_1 + 2824 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 1 | 0);
        $255_1 = 132;
        block37 : {
         if (!$255_1) {
          break block37
         }
         wasm2js_memory_copy($3_1 + 28 | 0, $3_1 + 2824 | 0, $255_1);
        }
        $3($248_1 | 0, $3_1 + 28 | 0 | 0) | 0;
        $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
        block62 : {
         block38 : {
          if ($230(HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) | 0) {
           break block38
          }
          $268_1 = 24;
          $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2956 | 0) >> 2] | 0) << $268_1 | 0) >> $268_1 | 0 | 0) | 0;
          block43 : {
           block41 : {
            block40 : {
             block39 : {
              if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) >= (48 | 0) & 1 | 0)) {
               break block39
              }
              if ((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) <= (57 | 0) & 1 | 0) {
               break block40
              }
             }
             if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (46 | 0) & 1 | 0)) {
              break block41
             }
            }
            block42 : {
             if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (46 | 0) & 1 | 0)) {
              break block42
             }
             HEAP32[($3_1 + 2976 | 0) >> 2] = 1;
            }
            HEAP32[($3_1 + 2980 | 0) >> 2] = 2;
            break block43;
           }
           block46 : {
            block45 : {
             block44 : {
              if ((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (40 | 0) & 1 | 0) {
               break block44
              }
              if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (41 | 0) & 1 | 0)) {
               break block45
              }
             }
             HEAP32[($3_1 + 2980 | 0) >> 2] = 3;
             break block46;
            }
            block48 : {
             block47 : {
              if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (43 | 0) & 1 | 0)) {
               break block47
              }
              HEAP32[($3_1 + 2980 | 0) >> 2] = 4;
              break block48;
             }
             block50 : {
              block49 : {
               if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (45 | 0) & 1 | 0)) {
                break block49
               }
               HEAP32[($3_1 + 2980 | 0) >> 2] = 5;
               break block50;
              }
              block52 : {
               block51 : {
                if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (42 | 0) & 1 | 0)) {
                 break block51
                }
                HEAP32[($3_1 + 2980 | 0) >> 2] = 6;
                break block52;
               }
               block54 : {
                block53 : {
                 if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (47 | 0) & 1 | 0)) {
                  break block53
                 }
                 HEAP32[($3_1 + 2980 | 0) >> 2] = 7;
                 break block54;
                }
                block56 : {
                 block55 : {
                  if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (44 | 0) & 1 | 0)) {
                   break block55
                  }
                  HEAP32[($3_1 + 2980 | 0) >> 2] = 8;
                  break block56;
                 }
                 block58 : {
                  block57 : {
                   if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (61 | 0) & 1 | 0)) {
                    break block57
                   }
                   HEAP32[($3_1 + 2980 | 0) >> 2] = 9;
                   break block58;
                  }
                  block60 : {
                   block59 : {
                    if (!((HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) == (94 | 0) & 1 | 0)) {
                     break block59
                    }
                    HEAP32[($3_1 + 2980 | 0) >> 2] = 10;
                    break block60;
                   }
                   block61 : {
                    if ($230(HEAP32[($3_1 + 2956 | 0) >> 2] | 0 | 0) | 0) {
                     break block61
                    }
                    if (!((HEAP32[($3_1 + 2968 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 2964 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                     break block61
                    }
                    $353_1 = HEAP32[($3_1 + 2956 | 0) >> 2] | 0;
                    HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($3_1 + 2968 | 0) >> 2] | 0;
                    HEAP32[($3_1 + 16 | 0) >> 2] = $353_1;
                    $271(67111219 | 0, $3_1 + 16 | 0 | 0) | 0;
                    break block;
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
          break block62;
         }
         HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
        }
       }
       break block63;
      }
      block97 : {
       block64 : {
        if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break block64
        }
        $368_1 = 24;
        HEAP32[($3_1 + 2820 | 0) >> 2] = ((HEAPU8[((HEAP32[($3_1 + 2988 | 0) >> 2] | 0) + (HEAP32[($3_1 + 2968 | 0) >> 2] | 0) | 0) >> 0] | 0) << $368_1 | 0) >> $368_1 | 0;
        HEAP32[($3_1 + 2968 | 0) >> 2] = (HEAP32[($3_1 + 2968 | 0) >> 2] | 0) + 1 | 0;
        block70 : {
         block67 : {
          block66 : {
           block65 : {
            if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) >= (48 | 0) & 1 | 0)) {
             break block65
            }
            if ((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) <= (57 | 0) & 1 | 0) {
             break block66
            }
           }
           if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (46 | 0) & 1 | 0)) {
            break block67
           }
          }
          $391_1 = 24;
          $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2820 | 0) >> 2] | 0) << $391_1 | 0) >> $391_1 | 0 | 0) | 0;
          block68 : {
           if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (46 | 0) & 1 | 0)) {
            break block68
           }
           block69 : {
            if (!(HEAP32[($3_1 + 2976 | 0) >> 2] | 0)) {
             break block69
            }
            $255(67110817 | 0);
            break block;
           }
           HEAP32[($3_1 + 2976 | 0) >> 2] = 1;
          }
          break block70;
         }
         $402_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
         $1($3_1 + 2688 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 2 | 0);
         $409_1 = 132;
         block71 : {
          if (!$409_1) {
           break block71
          }
          wasm2js_memory_copy($3_1 + 168 | 0, $3_1 + 2688 | 0, $409_1);
         }
         $3($402_1 | 0, $3_1 + 168 | 0 | 0) | 0;
         $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
         block96 : {
          block72 : {
           if ($230(HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) | 0) {
            break block72
           }
           $422_1 = 24;
           $6(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0, ((HEAP32[($3_1 + 2820 | 0) >> 2] | 0) << $422_1 | 0) >> $422_1 | 0 | 0) | 0;
           block77 : {
            block76 : {
             block74 : {
              block73 : {
               if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) >= (97 | 0) & 1 | 0)) {
                break block73
               }
               if ((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) <= (122 | 0) & 1 | 0) {
                break block74
               }
              }
              block75 : {
               if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) >= (65 | 0) & 1 | 0)) {
                break block75
               }
               if ((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) <= (90 | 0) & 1 | 0) {
                break block74
               }
              }
              if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (95 | 0) & 1 | 0)) {
               break block76
              }
             }
             HEAP32[($3_1 + 2980 | 0) >> 2] = 1;
             break block77;
            }
            block80 : {
             block79 : {
              block78 : {
               if ((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (40 | 0) & 1 | 0) {
                break block78
               }
               if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (41 | 0) & 1 | 0)) {
                break block79
               }
              }
              HEAP32[($3_1 + 2980 | 0) >> 2] = 3;
              break block80;
             }
             block82 : {
              block81 : {
               if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (43 | 0) & 1 | 0)) {
                break block81
               }
               HEAP32[($3_1 + 2980 | 0) >> 2] = 4;
               break block82;
              }
              block84 : {
               block83 : {
                if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (45 | 0) & 1 | 0)) {
                 break block83
                }
                HEAP32[($3_1 + 2980 | 0) >> 2] = 5;
                break block84;
               }
               block86 : {
                block85 : {
                 if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (42 | 0) & 1 | 0)) {
                  break block85
                 }
                 HEAP32[($3_1 + 2980 | 0) >> 2] = 6;
                 break block86;
                }
                block88 : {
                 block87 : {
                  if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (47 | 0) & 1 | 0)) {
                   break block87
                  }
                  HEAP32[($3_1 + 2980 | 0) >> 2] = 7;
                  break block88;
                 }
                 block90 : {
                  block89 : {
                   if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (44 | 0) & 1 | 0)) {
                    break block89
                   }
                   HEAP32[($3_1 + 2980 | 0) >> 2] = 8;
                   break block90;
                  }
                  block92 : {
                   block91 : {
                    if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (61 | 0) & 1 | 0)) {
                     break block91
                    }
                    HEAP32[($3_1 + 2980 | 0) >> 2] = 9;
                    break block92;
                   }
                   block94 : {
                    block93 : {
                     if (!((HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) == (94 | 0) & 1 | 0)) {
                      break block93
                     }
                     HEAP32[($3_1 + 2980 | 0) >> 2] = 10;
                     break block94;
                    }
                    block95 : {
                     if ($230(HEAP32[($3_1 + 2820 | 0) >> 2] | 0 | 0) | 0) {
                      break block95
                     }
                     if (!((HEAP32[($3_1 + 2968 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 2964 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                      break block95
                     }
                     $511_1 = HEAP32[($3_1 + 2820 | 0) >> 2] | 0;
                     HEAP32[($3_1 + 164 | 0) >> 2] = HEAP32[($3_1 + 2968 | 0) >> 2] | 0;
                     HEAP32[($3_1 + 160 | 0) >> 2] = $511_1;
                     $271(67111219 | 0, $3_1 + 160 | 0 | 0) | 0;
                     break block;
                    }
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
           break block96;
          }
          HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
         }
        }
        break block97;
       }
       block105 : {
        block98 : {
         if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
          break block98
         }
         $525_1 = 24;
         block101 : {
          block99 : {
           if (!((((HEAPU8[(HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 0] | 0) << $525_1 | 0) >> $525_1 | 0 | 0) == (40 | 0) & 1 | 0)) {
            break block99
           }
           $532_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
           $1($3_1 + 2556 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 3 | 0);
           $539_1 = 132;
           block100 : {
            if (!$539_1) {
             break block100
            }
            wasm2js_memory_copy($3_1 + 300 | 0, $3_1 + 2556 | 0, $539_1);
           }
           $3($532_1 | 0, $3_1 + 300 | 0 | 0) | 0;
           break block101;
          }
          $550_1 = 24;
          block104 : {
           block102 : {
            if (!((((HEAPU8[(HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 0] | 0) << $550_1 | 0) >> $550_1 | 0 | 0) == (41 | 0) & 1 | 0)) {
             break block102
            }
            $557_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
            $1($3_1 + 2424 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 4 | 0);
            $564_1 = 132;
            block103 : {
             if (!$564_1) {
              break block103
             }
             wasm2js_memory_copy($3_1 + 432 | 0, $3_1 + 2424 | 0, $564_1);
            }
            $3($557_1 | 0, $3_1 + 432 | 0 | 0) | 0;
            break block104;
           }
           $255(67109187 | 0);
           fimport$0(1 | 0);
           wasm2js_trap();
          }
         }
         $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
         HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
         break block105;
        }
        block108 : {
         block106 : {
          if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
           break block106
          }
          $581_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
          $1($3_1 + 2292 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 5 | 0);
          $588_1 = 132;
          block107 : {
           if (!$588_1) {
            break block107
           }
           wasm2js_memory_copy($3_1 + 564 | 0, $3_1 + 2292 | 0, $588_1);
          }
          $3($581_1 | 0, $3_1 + 564 | 0 | 0) | 0;
          $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
          HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
          break block108;
         }
         block111 : {
          block109 : {
           if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (5 | 0) & 1 | 0)) {
            break block109
           }
           $603_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
           $1($3_1 + 2160 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 6 | 0);
           $610_1 = 132;
           block110 : {
            if (!$610_1) {
             break block110
            }
            wasm2js_memory_copy($3_1 + 696 | 0, $3_1 + 2160 | 0, $610_1);
           }
           $3($603_1 | 0, $3_1 + 696 | 0 | 0) | 0;
           $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
           HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
           break block111;
          }
          block114 : {
           block112 : {
            if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (6 | 0) & 1 | 0)) {
             break block112
            }
            $625_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
            $1($3_1 + 2028 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 7 | 0);
            $632_1 = 132;
            block113 : {
             if (!$632_1) {
              break block113
             }
             wasm2js_memory_copy($3_1 + 828 | 0, $3_1 + 2028 | 0, $632_1);
            }
            $3($625_1 | 0, $3_1 + 828 | 0 | 0) | 0;
            $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
            HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
            break block114;
           }
           block117 : {
            block115 : {
             if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (7 | 0) & 1 | 0)) {
              break block115
             }
             $647_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
             $1($3_1 + 1896 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 8 | 0);
             $654_1 = 132;
             block116 : {
              if (!$654_1) {
               break block116
              }
              wasm2js_memory_copy($3_1 + 960 | 0, $3_1 + 1896 | 0, $654_1);
             }
             $3($647_1 | 0, $3_1 + 960 | 0 | 0) | 0;
             $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
             HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
             break block117;
            }
            block120 : {
             block118 : {
              if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (8 | 0) & 1 | 0)) {
               break block118
              }
              $669_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
              $1($3_1 + 1764 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 12 | 0);
              $676_1 = 132;
              block119 : {
               if (!$676_1) {
                break block119
               }
               wasm2js_memory_copy($3_1 + 1092 | 0, $3_1 + 1764 | 0, $676_1);
              }
              $3($669_1 | 0, $3_1 + 1092 | 0 | 0) | 0;
              $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
              HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
              break block120;
             }
             block123 : {
              block121 : {
               if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0)) {
                break block121
               }
               $691_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
               $1($3_1 + 1632 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 13 | 0);
               $698_1 = 132;
               block122 : {
                if (!$698_1) {
                 break block122
                }
                wasm2js_memory_copy($3_1 + 1224 | 0, $3_1 + 1632 | 0, $698_1);
               }
               $3($691_1 | 0, $3_1 + 1224 | 0 | 0) | 0;
               $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
               HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
               break block123;
              }
              block124 : {
               if (!((HEAP32[($3_1 + 2980 | 0) >> 2] | 0 | 0) == (10 | 0) & 1 | 0)) {
                break block124
               }
               $713_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
               $1($3_1 + 1500 | 0 | 0, HEAP32[((HEAP32[($3_1 + 2972 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 9 | 0);
               $720_1 = 132;
               block125 : {
                if (!$720_1) {
                 break block125
                }
                wasm2js_memory_copy($3_1 + 1356 | 0, $3_1 + 1500 | 0, $720_1);
               }
               $3($713_1 | 0, $3_1 + 1356 | 0 | 0) | 0;
               $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
               HEAP32[($3_1 + 2980 | 0) >> 2] = 0;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
    continue label;
   };
  }
  $11(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
  $342(HEAP32[($3_1 + 2972 | 0) >> 2] | 0 | 0);
  $732_1 = HEAP32[($3_1 + 2984 | 0) >> 2] | 0;
  global$0 = $3_1 + 2992 | 0;
  return $732_1 | 0;
 }
 
 function $13() {
  block : {
   if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) > (-1 | 0) & 1 | 0)) {
    break block
   }
   HEAP32[(0 + 67135664 | 0) >> 2] = (HEAP32[(0 + 67135664 | 0) >> 2] | 0) + 1 | 0;
  }
  return;
 }
 
 function $14() {
  var $2_1 = 0, $77_1 = 0;
  $2_1 = global$0 - 16 | 0;
  block1 : {
   block : {
    if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) > (-1 | 0) & 1 | 0)) {
     break block
    }
    if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[(0 + 67135664 | 0) >> 2] | 0, 132) | 0) >> 2] | 0;
    break block1;
   }
   HEAP32[($2_1 + 12 | 0) >> 2] = -1;
  }
  return HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $15() {
  var $2_1 = 0, $142_1 = 0;
  $2_1 = global$0 - 16 | 0;
  block1 : {
   block : {
    if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = -1;
    break block1;
   }
   block2 : {
    if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) == ((HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0) - 1 | 0 | 0) & 1 | 0)) {
     break block2
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[(0 + 67135664 | 0) >> 2] | 0, 132) | 0) >> 2] | 0;
    break block1;
   }
   block3 : {
    if (!(((HEAP32[(0 + 67135664 | 0) >> 2] | 0) + 1 | 0 | 0) < (HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block3
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135664 | 0) >> 2] | 0) + 1 | 0, 132) | 0) >> 2] | 0;
    break block1;
   }
   HEAP32[($2_1 + 12 | 0) >> 2] = -1;
  }
  return HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $16($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0, $43_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if (!(($14() | 0 | 0) == (HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $13();
    HEAP32[($3_1 + 12 | 0) >> 2] = 1;
    break block1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  $11_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $35_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if (!($16(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
     break block
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 1;
    break block1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  $8_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $18($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $20() {
  block1 : {
   block : {
    if (!($17(2 | 0) | 0)) {
     break block
    }
    $18(67109611 | 0);
    break block1;
   }
   $19(67109606 | 0);
   HEAP32[(0 + 67135664 | 0) >> 2] = -1;
  }
  return;
 }
 
 function $21() {
  block1 : {
   block : {
    if (!($17(1 | 0) | 0)) {
     break block
    }
    $18(67109330 | 0);
    break block1;
   }
   $19(67109325 | 0);
   HEAP32[(0 + 67135664 | 0) >> 2] = -1;
  }
  return;
 }
 
 function $22() {
  $23();
  block : {
   if (!(($14() | 0 | 0) == (12 | 0) & 1 | 0)) {
    break block
   }
   $18(67109882 | 0);
   block2 : {
    block1 : {
     if (($15() | 0 | 0) == (12 | 0) & 1 | 0) {
      break block1
     }
     if (!(($15() | 0 | 0) == (4 | 0) & 1 | 0)) {
      break block2
     }
    }
    HEAP32[(0 + 67135664 | 0) >> 2] = -1;
    break block;
   }
   block3 : {
    label : while (1) {
     if (!(($14() | 0 | 0) == (12 | 0) & 1 | 0)) {
      break block3
     }
     $18(67109882 | 0);
     $13();
     $23();
     continue label;
    };
   }
  }
  return;
 }
 
 function $23() {
  var $6_1 = 0;
  $24();
  label : while (1) {
   $6_1 = 1;
   block : {
    if (($14() | 0 | 0) == (5 | 0) & 1 | 0) {
     break block
    }
    $6_1 = ($14() | 0 | 0) == (6 | 0);
   }
   block1 : {
    if (!($6_1 & 1 | 0)) {
     break block1
    }
    block5 : {
     block2 : {
      if (!(($14() | 0 | 0) == (5 | 0) & 1 | 0)) {
       break block2
      }
      block4 : {
       block3 : {
        if (!($17(5 | 0) | 0)) {
         break block3
        }
        $18(((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135664 | 0) >> 2] | 0) - 1 | 0, 132) | 0) + 4 | 0 | 0);
        break block4;
       }
       HEAP32[(0 + 67135664 | 0) >> 2] = -1;
       break block1;
      }
      break block5;
     }
     block6 : {
      if (!(($14() | 0 | 0) == (6 | 0) & 1 | 0)) {
       break block6
      }
      block8 : {
       block7 : {
        if (!($17(6 | 0) | 0)) {
         break block7
        }
        $18(((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135664 | 0) >> 2] | 0) - 1 | 0, 132) | 0) + 4 | 0 | 0);
        break block8;
       }
       HEAP32[(0 + 67135664 | 0) >> 2] = -1;
       break block1;
      }
     }
    }
    $24();
    continue label;
   }
   break label;
  };
  return;
 }
 
 function $24() {
  var $6_1 = 0;
  $26();
  label : while (1) {
   $6_1 = 1;
   block : {
    if (($14() | 0 | 0) == (7 | 0) & 1 | 0) {
     break block
    }
    $6_1 = 1;
    if (($14() | 0 | 0) == (8 | 0) & 1 | 0) {
     break block
    }
    $6_1 = ($14() | 0 | 0) == (9 | 0);
   }
   block1 : {
    if (!($6_1 & 1 | 0)) {
     break block1
    }
    block5 : {
     block2 : {
      if (!(($14() | 0 | 0) == (7 | 0) & 1 | 0)) {
       break block2
      }
      block4 : {
       block3 : {
        if (!($17(7 | 0) | 0)) {
         break block3
        }
        $18(((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135664 | 0) >> 2] | 0) - 1 | 0, 132) | 0) + 4 | 0 | 0);
        break block4;
       }
       HEAP32[(0 + 67135664 | 0) >> 2] = -1;
       break block1;
      }
      break block5;
     }
     block9 : {
      block6 : {
       if (!(($14() | 0 | 0) == (8 | 0) & 1 | 0)) {
        break block6
       }
       block8 : {
        block7 : {
         if (!($17(8 | 0) | 0)) {
          break block7
         }
         $18(((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135664 | 0) >> 2] | 0) - 1 | 0, 132) | 0) + 4 | 0 | 0);
         break block8;
        }
        HEAP32[(0 + 67135664 | 0) >> 2] = -1;
        break block1;
       }
       break block9;
      }
      block10 : {
       if (!(($14() | 0 | 0) == (9 | 0) & 1 | 0)) {
        break block10
       }
       block13 : {
        block11 : {
         if (!($17(9 | 0) | 0)) {
          break block11
         }
         block12 : {
          if (!(($15() | 0 | 0) != (3 | 0) & 1 | 0)) {
           break block12
          }
          if (!(($15() | 0 | 0) != (1 | 0) & 1 | 0)) {
           break block12
          }
          if (!(($15() | 0 | 0) != (2 | 0) & 1 | 0)) {
           break block12
          }
          if (!(($15() | 0 | 0) != (5 | 0) & 1 | 0)) {
           break block12
          }
          if (!(($15() | 0 | 0) != (6 | 0) & 1 | 0)) {
           break block12
          }
          $18(((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135664 | 0) >> 2] | 0) - 1 | 0, 132) | 0) + 4 | 0 | 0);
          HEAP32[(0 + 67135664 | 0) >> 2] = -1;
          break block1;
         }
         $18(((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135664 | 0) >> 2] | 0) - 1 | 0, 132) | 0) + 4 | 0 | 0);
         break block13;
        }
        HEAP32[(0 + 67135664 | 0) >> 2] = -1;
        break block1;
       }
      }
     }
    }
    $26();
    continue label;
   }
   break label;
  };
  return;
 }
 
 function $25() {
  block3 : {
   block : {
    if (!($17(1 | 0) | 0)) {
     break block
    }
    $18(67109330 | 0);
    block5 : {
     block1 : {
      if (!($17(3 | 0) | 0)) {
       break block1
      }
      $18(67109257 | 0);
      block2 : {
       if (!(($14() | 0 | 0) == (4 | 0) & 1 | 0)) {
        break block2
       }
       $19(67109272 | 0);
       $13();
       break block3;
      }
      $22();
      block4 : {
       if (!($17(4 | 0) | 0)) {
        break block4
       }
       $18(67109272 | 0);
       break block3;
      }
      $19(67109618 | 0);
      HEAP32[(0 + 67135664 | 0) >> 2] = -1;
      break block5;
     }
     $19(67109653 | 0);
     HEAP32[(0 + 67135664 | 0) >> 2] = -1;
    }
    break block3;
   }
   HEAP32[(0 + 67135664 | 0) >> 2] = -1;
  }
  return;
 }
 
 function $26() {
  var $2_1 = 0;
  $2_1 = ($14() | 0) + -1 | 0;
  block6 : {
   block3 : {
    switch ($2_1 | 0) {
    case 1:
     $20();
     break block6;
    case 0:
     block8 : {
      block7 : {
       if (!(($15() | 0 | 0) == (3 | 0) & 1 | 0)) {
        break block7
       }
       $25();
       break block8;
      }
      $21();
     }
     break block6;
    case 2:
     $13();
     $23();
     block10 : {
      block9 : {
       if (!($17(4 | 0) | 0)) {
        break block9
       }
       $18(67109240 | 0);
       break block10;
      }
      $19(67109230 | 0);
      HEAP32[(0 + 67135664 | 0) >> 2] = -1;
     }
     break block6;
    case 4:
     block17 : {
      block14 : {
       block12 : {
        block11 : {
         if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
          break block11
         }
         if (($15() | 0 | 0) == (3 | 0) & 1 | 0) {
          break block12
         }
        }
        block13 : {
         if (HEAP32[(0 + 67135664 | 0) >> 2] | 0) {
          break block13
         }
         if (($15() | 0 | 0) == (2 | 0) & 1 | 0) {
          break block12
         }
         if (($15() | 0 | 0) == (1 | 0) & 1 | 0) {
          break block12
         }
        }
        if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) >= ((HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0) - 2 | 0 | 0) & 1 | 0)) {
         break block14
        }
        if (($15() | 0 | 0) == (2 | 0) & 1 | 0) {
         break block12
        }
        if (!(($15() | 0 | 0) == (1 | 0) & 1 | 0)) {
         break block14
        }
       }
       HEAP32[((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[(0 + 67135664 | 0) >> 2] | 0, 132) | 0) >> 2] = 10;
       block16 : {
        block15 : {
         if (!($17(10 | 0) | 0)) {
          break block15
         }
         $18(67111507 | 0);
         $23();
         break block16;
        }
        $19(67111528 | 0);
        HEAP32[(0 + 67135664 | 0) >> 2] = -1;
       }
       break block17;
      }
      $19(67111528 | 0);
      HEAP32[(0 + 67135664 | 0) >> 2] = -1;
     }
     break block6;
    case 5:
     block24 : {
      block21 : {
       block19 : {
        block18 : {
         if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
          break block18
         }
         if (($15() | 0 | 0) == (3 | 0) & 1 | 0) {
          break block19
         }
         if (($15() | 0 | 0) == (2 | 0) & 1 | 0) {
          break block19
         }
         if (($15() | 0 | 0) == (1 | 0) & 1 | 0) {
          break block19
         }
        }
        block20 : {
         if (HEAP32[(0 + 67135664 | 0) >> 2] | 0) {
          break block20
         }
         if (($15() | 0 | 0) == (3 | 0) & 1 | 0) {
          break block19
         }
         if (($15() | 0 | 0) == (2 | 0) & 1 | 0) {
          break block19
         }
         if (($15() | 0 | 0) == (1 | 0) & 1 | 0) {
          break block19
         }
        }
        if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) >= ((HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0) - 2 | 0 | 0) & 1 | 0)) {
         break block21
        }
        if (($15() | 0 | 0) == (2 | 0) & 1 | 0) {
         break block19
        }
        if (!(($15() | 0 | 0) == (1 | 0) & 1 | 0)) {
         break block21
        }
       }
       HEAP32[((HEAP32[((HEAP32[(0 + 67135668 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[(0 + 67135664 | 0) >> 2] | 0, 132) | 0) >> 2] = 11;
       block23 : {
        block22 : {
         if (!($17(11 | 0) | 0)) {
          break block22
         }
         $18(67111480 | 0);
         $23();
         break block23;
        }
        $18(67111454 | 0);
        HEAP32[(0 + 67135664 | 0) >> 2] = -1;
       }
       break block24;
      }
      $18(67111428 | 0);
      HEAP32[(0 + 67135664 | 0) >> 2] = -1;
     }
     break block6;
    default:
     break block3;
    };
   }
   HEAP32[(0 + 67135664 | 0) >> 2] = -1;
  }
  return;
 }
 
 function $27($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $153_1 = 0, $426_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[(0 + 67135668 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[(0 + 67135664 | 0) >> 2] = 0;
  block5 : {
   block : {
    if (!(($14() | 0 | 0) == (1 | 0) & 1 | 0)) {
     break block
    }
    if (!(($15() | 0 | 0) == (13 | 0) & 1 | 0)) {
     break block
    }
    $13();
    $13();
    block1 : {
     label : while (1) {
      if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break block1
      }
      $23();
      block2 : {
       if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
        break block2
       }
       break block1;
      }
      block3 : {
       if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break block3
       }
       if (!(($14() | 0 | 0) != (5 | 0) & 1 | 0)) {
        break block3
       }
       if (!(($14() | 0 | 0) != (6 | 0) & 1 | 0)) {
        break block3
       }
       if (!(($14() | 0 | 0) != (7 | 0) & 1 | 0)) {
        break block3
       }
       if (!(($14() | 0 | 0) != (8 | 0) & 1 | 0)) {
        break block3
       }
       if (!(($14() | 0 | 0) != (9 | 0) & 1 | 0)) {
        break block3
       }
       if (!(($14() | 0 | 0) != (10 | 0) & 1 | 0)) {
        break block3
       }
       if (!(($14() | 0 | 0) != (11 | 0) & 1 | 0)) {
        break block3
       }
       $19(67109494 | 0);
       HEAP32[(0 + 67135664 | 0) >> 2] = -1;
       break block1;
      }
      continue label;
     };
    }
    block4 : {
     if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
      break block4
     }
     HEAP32[($3_1 + 12 | 0) >> 2] = -1;
     break block5;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 1;
    break block5;
   }
   HEAP32[(0 + 67135664 | 0) >> 2] = 0;
   block6 : {
    label1 : while (1) {
     if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block6
     }
     $23();
     block7 : {
      if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
       break block7
      }
      break block6;
     }
     block8 : {
      if (!((HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
       break block8
      }
      if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[(0 + 67135668 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break block8
      }
      if (!(($14() | 0 | 0) != (5 | 0) & 1 | 0)) {
       break block8
      }
      if (!(($14() | 0 | 0) != (6 | 0) & 1 | 0)) {
       break block8
      }
      if (!(($14() | 0 | 0) != (7 | 0) & 1 | 0)) {
       break block8
      }
      if (!(($14() | 0 | 0) != (8 | 0) & 1 | 0)) {
       break block8
      }
      if (!(($14() | 0 | 0) != (9 | 0) & 1 | 0)) {
       break block8
      }
      $19(67109558 | 0);
      HEAP32[(0 + 67135664 | 0) >> 2] = -1;
      break block6;
     }
     continue label1;
    };
   }
   block9 : {
    if (!((HEAP32[(0 + 67135664 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
     break block9
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 2;
    break block5;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  }
  $153_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $153_1 | 0;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0, $45_1 = 0, $130_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAPF64[$4_1 >> 3] = $1_1;
  HEAP32[(0 + 67135672 | 0) >> 2] = (HEAP32[(0 + 67135672 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 67135676 | 0) >> 2] = $343(HEAP32[(0 + 67135676 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[(0 + 67135672 | 0) >> 2] | 0, 136) | 0) | 0;
  $288((HEAP32[(0 + 67135676 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135672 | 0) >> 2] | 0) - 1 | 0, 136) | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAPF64[(((HEAP32[(0 + 67135676 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135672 | 0) >> 2] | 0) - 1 | 0, 136) | 0) + 128 | 0) >> 3] = +HEAPF64[$4_1 >> 3];
  $45_1 = (HEAP32[(0 + 67135676 | 0) >> 2] | 0) + Math_imul((HEAP32[(0 + 67135672 | 0) >> 2] | 0) - 1 | 0, 136) | 0;
  global$0 = $4_1 + 16 | 0;
  return $45_1 | 0;
 }
 
 function $29($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $29_1 = 0, $97_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 67135672 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    block1 : {
     if ($286((HEAP32[(0 + 67135676 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 136) | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) {
      break block1
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[(0 + 67135676 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 136) | 0;
     break block;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  $29_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $29_1 | 0;
 }
 
 function $30($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0.0, $57_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  HEAP32[$3_1 >> 2] = $29(HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  block1 : {
   block : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block
    }
    HEAPF64[($3_1 + 8 | 0) >> 3] = +(0 | 0);
    break block1;
   }
   HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[((HEAP32[$3_1 >> 2] | 0) + 128 | 0) >> 3];
  }
  $17_1 = +HEAPF64[($3_1 + 8 | 0) >> 3];
  global$0 = $3_1 + 16 | 0;
  return +$17_1;
 }
 
 function $31($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAPF64[($4_1 + 16 | 0) >> 3] = $1_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $29(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  block1 : {
   block : {
    if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block
    }
    break block1;
   }
   HEAPF64[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 128 | 0) >> 3] = +HEAPF64[($4_1 + 16 | 0) >> 3];
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $32($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $23_1 = 0, $82_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $340(32 | 0) | 0;
  HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $9_1 = $7(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $9_1;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] = 0;
  $23_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $23_1 | 0;
 }
 
 function $33() {
  var $2_1 = 0, $7_1 = 0, $30_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $340(8 | 0) | 0;
  HEAP32[(HEAP32[($2_1 + 12 | 0) >> 2] | 0) >> 2] = 0;
  $7_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $34($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block
    }
    break block1;
   }
   block2 : {
    if (!((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break block2
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
    block3 : {
     label : while (1) {
      if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break block3
      }
      HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
      $342(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
      HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
      continue label;
     };
    }
   }
   $342(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $35($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block
    }
    break block1;
   }
   HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = 0;
   $342(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $36() {
  var $2_1 = 0, $11_1 = 0, $42_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $340(12 | 0) | 0;
  HEAP32[(HEAP32[($2_1 + 12 | 0) >> 2] | 0) >> 2] = 0;
  HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  $11_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $37($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $12_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$5_1 >> 2] = $33() | 0;
  $7_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = (HEAP32[$7_1 >> 2] | 0) + 1 | 0;
  $12_1 = $32(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] = $12_1;
  HEAP32[((HEAP32[(HEAP32[$5_1 >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
    break block1;
   }
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  }
  HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  HEAP32[((HEAP32[$5_1 >> 2] | 0) + 4 | 0) >> 2] = 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $38($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $9_1 = 0, $14_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = $33() | 0;
  $9_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
  HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + 1 | 0;
  $14_1 = $32(HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 2] = $14_1;
  HEAP32[((HEAP32[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($7_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[((HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
    break block1;
   }
   HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[((HEAP32[($7_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
  global$0 = $7_1 + 32 | 0;
  return;
 }
 
 function $39($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0;
  label : while (1) {
   $17_1 = 0;
   block : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break block
    }
    $17_1 = (HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) != (0 | 0);
   }
   block1 : {
    if (!($17_1 & 1 | 0)) {
     break block1
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0;
    continue label;
   }
   break label;
  };
  block3 : {
   block2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break block2
    }
    HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] = 0;
    break block3;
   }
   HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] = 0;
  }
  return;
 }
 
 function $40($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $30_1 = 0, $59_1 = 0, $224_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if (HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0) {
     break block
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    break block1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   block7 : {
    block2 : {
     if (!((HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break block2
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     block3 : {
      if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break block3
      }
      label : while (1) {
       $30_1 = 0;
       block4 : {
        if (!((HEAP32[((HEAP32[$3_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break block4
        }
        $30_1 = (HEAP32[((HEAP32[$3_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
       }
       block5 : {
        if (!($30_1 & 1 | 0)) {
         break block5
        }
        HEAP32[$3_1 >> 2] = HEAP32[((HEAP32[$3_1 >> 2] | 0) + 4 | 0) >> 2] | 0;
        continue label;
       }
       break label;
      };
     }
     block6 : {
      if (!((HEAP32[$3_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break block6
      }
      HEAP32[((HEAP32[$3_1 >> 2] | 0) + 4 | 0) >> 2] = 0;
      HEAP32[((HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
      HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[$3_1 >> 2] | 0;
     }
     break block7;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   }
   block8 : {
    if (!((HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break block8
    }
    $59_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[$59_1 >> 2] = (HEAP32[$59_1 >> 2] | 0) + -1 | 0;
    block9 : {
     if (HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0) {
      break block9
     }
     HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
     HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = 0;
    }
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $41($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block
    }
    break block1;
   }
   block2 : {
    label : while (1) {
     if (!(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0)) {
      break block2
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $40(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
     $35(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
     continue label;
    };
   }
   $342(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $42($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $16_1 = 0, $32_1 = 0, $196_1 = 0, $231_1 = 0, $262_1 = 0, $272_1 = 0, $303_1 = 0, $365_1 = 0, $375_1 = 0, $415_1 = 0, $470_1 = 0, $568_1 = 0, $578_1 = 0, $624_1 = 0, $679_1 = 0, $714_1 = 0, $724_1 = 0, $771_1 = 0, $810_1 = 0, $820_1 = 0, $839_1 = 0, $216_1 = 0, $219_1 = 0, $223_1 = 0, $247_1 = 0, $250_1 = 0, $254_1 = 0, $264_1 = 0, $350_1 = 0, $353_1 = 0, $357_1 = 0, $367_1 = 0, $455_1 = 0, $458_1 = 0, $462_1 = 0, $501_1 = 0, $518_1 = 0, $542_1 = 0, $553_1 = 0, $556_1 = 0, $560_1 = 0, $570_1 = 0, $664_1 = 0, $667_1 = 0, $671_1 = 0, $699_1 = 0, $702_1 = 0, $706_1 = 0, $716_1 = 0, $756_1 = 0, $759_1 = 0, $763_1 = 0, $795_1 = 0, $798_1 = 0, $802_1 = 0, $812_1 = 0, $845_1 = 0, $2715 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 248 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 244 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 240 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 236 | 0) >> 2] = $36() | 0;
  HEAP32[($5_1 + 232 | 0) >> 2] = $36() | 0;
  HEAP32[($5_1 + 228 | 0) >> 2] = HEAP32[($5_1 + 244 | 0) >> 2] | 0;
  label6 : while (1) {
   $16_1 = 0;
   block : {
    if (!((HEAP32[($5_1 + 228 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($5_1 + 248 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $16_1 = (HEAP32[($5_1 + 228 | 0) >> 2] | 0 | 0) <= (HEAP32[($5_1 + 240 | 0) >> 2] | 0 | 0);
   }
   block1 : {
    if (!($16_1 & 1 | 0)) {
     break block1
    }
    HEAP32[($5_1 + 224 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 248 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 228 | 0) >> 2] | 0, 132) | 0;
    $32_1 = (HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0) + -1 | 0;
    block9 : {
     block8 : {
      switch ($32_1 | 0) {
      case 1:
       $37(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 228 | 0) >> 2] = (HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 1 | 0;
       break block9;
      case 0:
       block22 : {
        block10 : {
         if (!(((HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 1 | 0 | 0) < (HEAP32[(HEAP32[($5_1 + 248 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break block10
         }
         if (!((HEAP32[((HEAP32[((HEAP32[($5_1 + 248 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 1 | 0, 132) | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
          break block10
         }
         HEAP32[($5_1 + 220 | 0) >> 2] = 1;
         HEAP32[($5_1 + 216 | 0) >> 2] = -1;
         HEAP32[($5_1 + 212 | 0) >> 2] = (HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 2 | 0;
         block11 : {
          label : while (1) {
           if (!((HEAP32[($5_1 + 212 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($5_1 + 248 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break block11
           }
           HEAP32[($5_1 + 208 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 248 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 212 | 0) >> 2] | 0, 132) | 0;
           block13 : {
            block12 : {
             if (!((HEAP32[(HEAP32[($5_1 + 208 | 0) >> 2] | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
              break block12
             }
             HEAP32[($5_1 + 220 | 0) >> 2] = (HEAP32[($5_1 + 220 | 0) >> 2] | 0) + 1 | 0;
             break block13;
            }
            block14 : {
             if (!((HEAP32[(HEAP32[($5_1 + 208 | 0) >> 2] | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
              break block14
             }
             HEAP32[($5_1 + 220 | 0) >> 2] = (HEAP32[($5_1 + 220 | 0) >> 2] | 0) + -1 | 0;
             block15 : {
              if (HEAP32[($5_1 + 220 | 0) >> 2] | 0) {
               break block15
              }
              HEAP32[($5_1 + 216 | 0) >> 2] = HEAP32[($5_1 + 212 | 0) >> 2] | 0;
              break block11;
             }
            }
           }
           HEAP32[($5_1 + 212 | 0) >> 2] = (HEAP32[($5_1 + 212 | 0) >> 2] | 0) + 1 | 0;
           continue label;
          };
         }
         $37(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0);
         HEAP32[($5_1 + 204 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 236 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
         HEAP32[($5_1 + 200 | 0) >> 2] = (HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 2 | 0;
         HEAP32[($5_1 + 196 | 0) >> 2] = HEAP32[($5_1 + 200 | 0) >> 2] | 0;
         HEAP32[($5_1 + 192 | 0) >> 2] = HEAP32[($5_1 + 200 | 0) >> 2] | 0;
         block16 : {
          label1 : while (1) {
           if (!((HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0) <= (HEAP32[($5_1 + 216 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break block16
           }
           HEAP32[($5_1 + 188 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 248 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 200 | 0) >> 2] | 0, 132) | 0;
           block18 : {
            block17 : {
             if ((HEAP32[(HEAP32[($5_1 + 188 | 0) >> 2] | 0) >> 2] | 0 | 0) == (12 | 0) & 1 | 0) {
              break block17
             }
             if (!((HEAP32[($5_1 + 200 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 216 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break block18
             }
            }
            HEAP32[($5_1 + 196 | 0) >> 2] = (HEAP32[($5_1 + 200 | 0) >> 2] | 0) - 1 | 0;
            block19 : {
             if (!((HEAP32[($5_1 + 192 | 0) >> 2] | 0 | 0) <= (HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break block19
             }
             HEAP32[($5_1 + 184 | 0) >> 2] = $42(HEAP32[($5_1 + 248 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 192 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 196 | 0) >> 2] | 0 | 0) | 0;
             $39(HEAP32[(HEAP32[($5_1 + 204 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 184 | 0) >> 2] | 0 | 0);
            }
            HEAP32[($5_1 + 192 | 0) >> 2] = (HEAP32[($5_1 + 196 | 0) >> 2] | 0) + 2 | 0;
           }
           HEAP32[($5_1 + 200 | 0) >> 2] = (HEAP32[($5_1 + 200 | 0) >> 2] | 0) + 1 | 0;
           continue label1;
          };
         }
         block20 : {
          if (!((HEAP32[((HEAP32[(HEAP32[($5_1 + 204 | 0) >> 2] | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
           break block20
          }
          $39(HEAP32[(HEAP32[($5_1 + 204 | 0) >> 2] | 0) >> 2] | 0 | 0, $32(0 | 0) | 0 | 0);
         }
         block21 : {
          if (!((HEAP32[($5_1 + 216 | 0) >> 2] | 0 | 0) > (-1 | 0) & 1 | 0)) {
           break block21
          }
          HEAP32[($5_1 + 228 | 0) >> 2] = HEAP32[($5_1 + 216 | 0) >> 2] | 0;
         }
         break block22;
        }
        $37(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0);
       }
       HEAP32[($5_1 + 228 | 0) >> 2] = (HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 1 | 0;
       break block9;
      case 2:
       $37(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 228 | 0) >> 2] = (HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 1 | 0;
       break block9;
      case 3:
       block23 : {
        if (!(HEAP32[(HEAP32[($5_1 + 232 | 0) >> 2] | 0) >> 2] | 0)) {
         break block23
        }
        label2 : while (1) {
         $196_1 = 0;
         block24 : {
          if (!((HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break block24
          }
          $196_1 = (HEAP32[(HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) != (3 | 0);
         }
         block25 : {
          if (!($196_1 & 1 | 0)) {
           break block25
          }
          HEAP32[($5_1 + 180 | 0) >> 2] = $40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($5_1 + 176 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
          block26 : {
           if (!($10(HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 180 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0)) {
            break block26
           }
           $216_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
           $219_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 180 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
           $223_1 = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 180 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
           block28 : {
            block27 : {
             if (!((HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
              break block27
             }
             $231_1 = HEAP32[(HEAP32[($5_1 + 176 | 0) >> 2] | 0) >> 2] | 0;
             break block28;
            }
            $231_1 = 0;
           }
           $38($216_1 | 0, $219_1 | 0, $223_1 | 0, 0 | 0, $231_1 | 0);
           continue label2;
          }
          HEAP32[($5_1 + 172 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
          block29 : {
           if (!((HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
            break block29
           }
           if (!((HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
            break block29
           }
           break block25;
          }
          $247_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
          $250_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 180 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
          $254_1 = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 180 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
          block31 : {
           block30 : {
            if (!((HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break block30
            }
            $262_1 = HEAP32[(HEAP32[($5_1 + 172 | 0) >> 2] | 0) >> 2] | 0;
            break block31;
           }
           $262_1 = 0;
          }
          $264_1 = $262_1;
          block33 : {
           block32 : {
            if (!((HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break block32
            }
            $272_1 = HEAP32[(HEAP32[($5_1 + 176 | 0) >> 2] | 0) >> 2] | 0;
            break block33;
           }
           $272_1 = 0;
          }
          $38($247_1 | 0, $250_1 | 0, $254_1 | 0, $264_1 | 0, $272_1 | 0);
          block34 : {
           if (!((HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break block34
           }
           $35(HEAP32[($5_1 + 172 | 0) >> 2] | 0 | 0);
          }
          block35 : {
           if (!((HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break block35
           }
           $35(HEAP32[($5_1 + 176 | 0) >> 2] | 0 | 0);
          }
          $35(HEAP32[($5_1 + 180 | 0) >> 2] | 0 | 0);
          continue label2;
         }
         break label2;
        };
        HEAP32[($5_1 + 168 | 0) >> 2] = $40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0;
        $35(HEAP32[($5_1 + 168 | 0) >> 2] | 0 | 0);
       }
       HEAP32[($5_1 + 228 | 0) >> 2] = (HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 1 | 0;
       break block9;
      case 9:
      case 10:
       block36 : {
        if (!(HEAP32[(HEAP32[($5_1 + 236 | 0) >> 2] | 0) >> 2] | 0)) {
         break block36
        }
        label3 : while (1) {
         $303_1 = 0;
         block37 : {
          if (!((HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break block37
          }
          $303_1 = (HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) <= ($7(HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0 | 0);
         }
         block38 : {
          if (!($303_1 & 1 | 0)) {
           break block38
          }
          HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
          $271(67111391 | 0, $5_1 + 16 | 0 | 0) | 0;
          block39 : {
           if (!((HEAP32[(HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
            break block39
           }
           break block38;
          }
          HEAP32[($5_1 + 164 | 0) >> 2] = 0;
          HEAP32[($5_1 + 164 | 0) >> 2] = $40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($5_1 + 160 | 0) >> 2] = 0;
          HEAP32[($5_1 + 156 | 0) >> 2] = 0;
          HEAP32[($5_1 + 160 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
          block41 : {
           block40 : {
            if (!($9(HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 164 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0)) {
             break block40
            }
            HEAP32[($5_1 + 156 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
            break block41;
           }
           HEAP32[($5_1 + 156 | 0) >> 2] = HEAP32[($5_1 + 160 | 0) >> 2] | 0;
           HEAP32[($5_1 + 160 | 0) >> 2] = 0;
           fimport$0(1 | 0);
           wasm2js_trap();
          }
          $350_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
          $353_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 164 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
          $357_1 = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 164 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
          block43 : {
           block42 : {
            if (!((HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break block42
            }
            $365_1 = HEAP32[(HEAP32[($5_1 + 156 | 0) >> 2] | 0) >> 2] | 0;
            break block43;
           }
           $365_1 = 0;
          }
          $367_1 = $365_1;
          block45 : {
           block44 : {
            if (!((HEAP32[($5_1 + 160 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break block44
            }
            $375_1 = HEAP32[(HEAP32[($5_1 + 160 | 0) >> 2] | 0) >> 2] | 0;
            break block45;
           }
           $375_1 = 0;
          }
          $38($350_1 | 0, $353_1 | 0, $357_1 | 0, $367_1 | 0, $375_1 | 0);
          block46 : {
           if (!((HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break block46
           }
           $35(HEAP32[($5_1 + 156 | 0) >> 2] | 0 | 0);
          }
          block47 : {
           if (!((HEAP32[($5_1 + 160 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break block47
           }
           $35(HEAP32[($5_1 + 160 | 0) >> 2] | 0 | 0);
          }
          $35(HEAP32[($5_1 + 164 | 0) >> 2] | 0 | 0);
          continue label3;
         }
         break label3;
        };
       }
       block49 : {
        block48 : {
         if (HEAP32[(HEAP32[($5_1 + 236 | 0) >> 2] | 0) >> 2] | 0) {
          break block48
         }
         if (HEAP32[(HEAP32[($5_1 + 232 | 0) >> 2] | 0) >> 2] | 0) {
          break block48
         }
         $37(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0);
         break block49;
        }
        $37(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0);
       }
       HEAP32[($5_1 + 228 | 0) >> 2] = (HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 1 | 0;
       break block9;
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
       block50 : {
        if (!(HEAP32[(HEAP32[($5_1 + 232 | 0) >> 2] | 0) >> 2] | 0)) {
         break block50
        }
        label4 : while (1) {
         $415_1 = 0;
         block51 : {
          if (!((HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break block51
          }
          $415_1 = (HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) >= ($7(HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0 | 0);
         }
         block52 : {
          if (!($415_1 & 1 | 0)) {
           break block52
          }
          HEAP32[($5_1 + 80 | 0) >> 2] = (HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
          $271(67111378 | 0, $5_1 + 80 | 0 | 0) | 0;
          block53 : {
           if (!((HEAP32[(HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
            break block53
           }
           break block52;
          }
          block54 : {
           if (!($10(HEAP32[(HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0)) {
            break block54
           }
           HEAP32[($5_1 + 152 | 0) >> 2] = $40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0;
           HEAP32[($5_1 + 148 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
           $455_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
           $458_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
           $462_1 = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 152 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
           block56 : {
            block55 : {
             if (!((HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
              break block55
             }
             $470_1 = HEAP32[(HEAP32[($5_1 + 148 | 0) >> 2] | 0) >> 2] | 0;
             break block56;
            }
            $470_1 = 0;
           }
           $38($455_1 | 0, $458_1 | 0, $462_1 | 0, 0 | 0, $470_1 | 0);
           $35(HEAP32[($5_1 + 152 | 0) >> 2] | 0 | 0);
           $35(HEAP32[($5_1 + 148 | 0) >> 2] | 0 | 0);
           continue label4;
          }
          HEAP32[($5_1 + 144 | 0) >> 2] = $40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($5_1 + 140 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
          HEAP32[($5_1 + 136 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
          block57 : {
           if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
            break block57
           }
           if (!((HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
            break block57
           }
           block58 : {
            if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break block58
            }
            $501_1 = (HEAP32[((HEAP32[(HEAP32[($5_1 + 136 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
            HEAP32[($5_1 + 52 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 136 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
            HEAP32[($5_1 + 48 | 0) >> 2] = $501_1;
            $271(67111361 | 0, $5_1 + 48 | 0 | 0) | 0;
           }
           block59 : {
            if (!((HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break block59
            }
            $518_1 = (HEAP32[((HEAP32[(HEAP32[($5_1 + 140 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
            HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 140 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
            HEAP32[($5_1 + 32 | 0) >> 2] = $518_1;
            $271(67111344 | 0, $5_1 + 32 | 0 | 0) | 0;
           }
           $271(67111124 | 0, 0 | 0) | 0;
           continue label4;
          }
          block60 : {
           if (!((HEAP32[($5_1 + 144 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
            break block60
           }
           block61 : {
            if (!((HEAP32[($5_1 + 144 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break block61
            }
            $542_1 = (HEAP32[((HEAP32[(HEAP32[($5_1 + 144 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
            HEAP32[($5_1 + 68 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 144 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
            HEAP32[($5_1 + 64 | 0) >> 2] = $542_1;
            $271(67110767 | 0, $5_1 + 64 | 0 | 0) | 0;
           }
           $271(67111161 | 0, 0 | 0) | 0;
           fimport$0(1 | 0);
           wasm2js_trap();
          }
          $553_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
          $556_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 144 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
          $560_1 = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 144 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
          block63 : {
           block62 : {
            if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break block62
            }
            $568_1 = HEAP32[(HEAP32[($5_1 + 136 | 0) >> 2] | 0) >> 2] | 0;
            break block63;
           }
           $568_1 = 0;
          }
          $570_1 = $568_1;
          block65 : {
           block64 : {
            if (!((HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
             break block64
            }
            $578_1 = HEAP32[(HEAP32[($5_1 + 140 | 0) >> 2] | 0) >> 2] | 0;
            break block65;
           }
           $578_1 = 0;
          }
          $38($553_1 | 0, $556_1 | 0, $560_1 | 0, $570_1 | 0, $578_1 | 0);
          block66 : {
           if (!((HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break block66
           }
           $35(HEAP32[($5_1 + 136 | 0) >> 2] | 0 | 0);
          }
          block67 : {
           if (!((HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break block67
           }
           $35(HEAP32[($5_1 + 140 | 0) >> 2] | 0 | 0);
          }
          $35(HEAP32[($5_1 + 144 | 0) >> 2] | 0 | 0);
          continue label4;
         }
         break label4;
        };
       }
       $37(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 224 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 224 | 0) >> 2] | 0) >> 2] | 0 | 0);
       HEAP32[($5_1 + 228 | 0) >> 2] = (HEAP32[($5_1 + 228 | 0) >> 2] | 0) + 1 | 0;
       break block9;
      default:
       break block8;
      };
     }
     HEAP32[($5_1 + 228 | 0) >> 2] = HEAP32[($5_1 + 240 | 0) >> 2] | 0;
    }
    block69 : {
     block68 : {
      if ((HEAP32[($5_1 + 228 | 0) >> 2] | 0 | 0) == (HEAP32[(HEAP32[($5_1 + 248 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0) {
       break block68
      }
      if (!((HEAP32[($5_1 + 228 | 0) >> 2] | 0 | 0) == ((HEAP32[($5_1 + 240 | 0) >> 2] | 0) + 1 | 0 | 0) & 1 | 0)) {
       break block69
      }
     }
     block70 : {
      if (!(HEAP32[(HEAP32[($5_1 + 232 | 0) >> 2] | 0) >> 2] | 0)) {
       break block70
      }
      label5 : while (1) {
       $624_1 = 0;
       block71 : {
        if (!((HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break block71
        }
        $624_1 = ($8(HEAP32[(HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0);
       }
       block72 : {
        if (!($624_1 & 1 | 0)) {
         break block72
        }
        HEAP32[$5_1 >> 2] = (HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0;
        $271(67111410 | 0, $5_1 | 0) | 0;
        block73 : {
         if (!((HEAP32[(HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
          break block73
         }
         $35($40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0 | 0);
         continue label5;
        }
        block74 : {
         if (!($10(HEAP32[(HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0)) {
          break block74
         }
         HEAP32[($5_1 + 132 | 0) >> 2] = $40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0;
         HEAP32[($5_1 + 128 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
         $664_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
         $667_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 132 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
         $671_1 = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 132 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
         block76 : {
          block75 : {
           if (!((HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break block75
           }
           $679_1 = HEAP32[(HEAP32[($5_1 + 128 | 0) >> 2] | 0) >> 2] | 0;
           break block76;
          }
          $679_1 = 0;
         }
         $38($664_1 | 0, $667_1 | 0, $671_1 | 0, 0 | 0, $679_1 | 0);
         $35(HEAP32[($5_1 + 132 | 0) >> 2] | 0 | 0);
         $35(HEAP32[($5_1 + 128 | 0) >> 2] | 0 | 0);
         continue label5;
        }
        HEAP32[($5_1 + 124 | 0) >> 2] = 0;
        HEAP32[($5_1 + 124 | 0) >> 2] = $40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 120 | 0) >> 2] = 0;
        HEAP32[($5_1 + 116 | 0) >> 2] = 0;
        HEAP32[($5_1 + 120 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
        block77 : {
         if (!($9(HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 124 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0)) {
          break block77
         }
         HEAP32[($5_1 + 116 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
        }
        $699_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
        $702_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 124 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $706_1 = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 124 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
        block79 : {
         block78 : {
          if (!((HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break block78
          }
          $714_1 = HEAP32[(HEAP32[($5_1 + 116 | 0) >> 2] | 0) >> 2] | 0;
          break block79;
         }
         $714_1 = 0;
        }
        $716_1 = $714_1;
        block81 : {
         block80 : {
          if (!((HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break block80
          }
          $724_1 = HEAP32[(HEAP32[($5_1 + 120 | 0) >> 2] | 0) >> 2] | 0;
          break block81;
         }
         $724_1 = 0;
        }
        $38($699_1 | 0, $702_1 | 0, $706_1 | 0, $716_1 | 0, $724_1 | 0);
        block82 : {
         if (!((HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break block82
         }
         $35(HEAP32[($5_1 + 116 | 0) >> 2] | 0 | 0);
        }
        block83 : {
         if (!((HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break block83
         }
         $35(HEAP32[($5_1 + 120 | 0) >> 2] | 0 | 0);
        }
        $35(HEAP32[($5_1 + 124 | 0) >> 2] | 0 | 0);
        continue label5;
       }
       break label5;
      };
      block87 : {
       block84 : {
        if (!((HEAP32[(HEAP32[($5_1 + 232 | 0) >> 2] | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break block84
        }
        if (!($10(HEAP32[(HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0)) {
         break block84
        }
        HEAP32[($5_1 + 112 | 0) >> 2] = $40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 108 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
        $756_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
        $759_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $763_1 = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 112 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
        block86 : {
         block85 : {
          if (!((HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break block85
          }
          $771_1 = HEAP32[(HEAP32[($5_1 + 108 | 0) >> 2] | 0) >> 2] | 0;
          break block86;
         }
         $771_1 = 0;
        }
        $38($756_1 | 0, $759_1 | 0, $763_1 | 0, 0 | 0, $771_1 | 0);
        $35(HEAP32[($5_1 + 108 | 0) >> 2] | 0 | 0);
        $35(HEAP32[($5_1 + 112 | 0) >> 2] | 0 | 0);
        break block87;
       }
       block88 : {
        if (!((HEAP32[(HEAP32[($5_1 + 232 | 0) >> 2] | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break block88
        }
        if (!($9(HEAP32[(HEAP32[((HEAP32[(HEAP32[((HEAP32[($5_1 + 232 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0)) {
         break block88
        }
        HEAP32[($5_1 + 104 | 0) >> 2] = $40(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 100 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[($5_1 + 96 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
        $795_1 = HEAP32[($5_1 + 236 | 0) >> 2] | 0;
        $798_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 104 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
        $802_1 = HEAP32[(HEAP32[((HEAP32[(HEAP32[($5_1 + 104 | 0) >> 2] | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
        block90 : {
         block89 : {
          if (!((HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break block89
          }
          $810_1 = HEAP32[(HEAP32[($5_1 + 96 | 0) >> 2] | 0) >> 2] | 0;
          break block90;
         }
         $810_1 = 0;
        }
        $812_1 = $810_1;
        block92 : {
         block91 : {
          if (!((HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
           break block91
          }
          $820_1 = HEAP32[(HEAP32[($5_1 + 100 | 0) >> 2] | 0) >> 2] | 0;
          break block92;
         }
         $820_1 = 0;
        }
        $38($795_1 | 0, $798_1 | 0, $802_1 | 0, $812_1 | 0, $820_1 | 0);
        $35(HEAP32[($5_1 + 100 | 0) >> 2] | 0 | 0);
        $35(HEAP32[($5_1 + 96 | 0) >> 2] | 0 | 0);
        $35(HEAP32[($5_1 + 104 | 0) >> 2] | 0 | 0);
       }
      }
     }
    }
    continue label6;
   }
   break label6;
  };
  $41(HEAP32[($5_1 + 232 | 0) >> 2] | 0 | 0);
  block94 : {
   block93 : {
    if (HEAP32[(HEAP32[($5_1 + 236 | 0) >> 2] | 0) >> 2] | 0) {
     break block93
    }
    HEAP32[($5_1 + 252 | 0) >> 2] = 0;
    break block94;
   }
   HEAP32[($5_1 + 92 | 0) >> 2] = $40(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0) | 0;
   block96 : {
    block95 : {
     if (!((HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break block95
     }
     $839_1 = HEAP32[(HEAP32[($5_1 + 92 | 0) >> 2] | 0) >> 2] | 0;
     break block96;
    }
    $839_1 = 0;
   }
   HEAP32[($5_1 + 88 | 0) >> 2] = $839_1;
   $35(HEAP32[($5_1 + 92 | 0) >> 2] | 0 | 0);
   $41(HEAP32[($5_1 + 236 | 0) >> 2] | 0 | 0);
   HEAP32[($5_1 + 252 | 0) >> 2] = HEAP32[($5_1 + 88 | 0) >> 2] | 0;
  }
  $845_1 = HEAP32[($5_1 + 252 | 0) >> 2] | 0;
  global$0 = $5_1 + 256 | 0;
  return $845_1 | 0;
 }
 
 function $43($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0, $37_1 = 0, i64toi32_i32$0 = 0, $135_1 = 0, $42_1 = 0, $90_1 = 0, $134_1 = 0.0, $450_1 = 0.0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if ((HEAP32[($3_1 + 36 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block
    }
    HEAPF64[($3_1 + 40 | 0) >> 3] = +(0 | 0);
    break block1;
   }
   block2 : {
    if (!((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break block2
    }
    if (!((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break block2
    }
    $26_1 = (HEAP32[(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0) + -1 | 0;
    block5 : {
     switch ($26_1 | 0) {
     case 1:
      HEAPF64[($3_1 + 40 | 0) >> 3] = +$227((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0 | 0);
      break block1;
     case 0:
      HEAPF64[($3_1 + 40 | 0) >> 3] = +$30((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0 | 0);
      break block1;
     default:
      break block5;
     };
    }
    HEAPF64[($3_1 + 40 | 0) >> 3] = +(0 | 0);
    break block1;
   }
   $37_1 = 0;
   HEAP32[($3_1 + 32 | 0) >> 2] = $37_1;
   HEAP32[($3_1 + 28 | 0) >> 2] = $37_1;
   i64toi32_i32$0 = 0;
   $135_1 = 0;
   HEAP32[($3_1 + 16 | 0) >> 2] = $135_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($3_1 + 8 | 0) >> 2] = $135_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = i64toi32_i32$0;
   $42_1 = (HEAP32[(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0) + -5 | 0;
   block9 : {
    block8 : {
     switch ($42_1 | 0) {
     case 0:
     case 1:
     case 2:
     case 3:
     case 4:
      HEAPF64[($3_1 + 16 | 0) >> 3] = +$43(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
      HEAPF64[($3_1 + 8 | 0) >> 3] = +$43(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
      break block9;
     case 5:
     case 6:
      HEAPF64[($3_1 + 8 | 0) >> 3] = +$43(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
      block11 : {
       block10 : {
        if (!((HEAP32[(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (11 | 0) & 1 | 0)) {
         break block10
        }
        HEAP32[($3_1 + 28 | 0) >> 2] = -1;
        break block11;
       }
       HEAP32[($3_1 + 28 | 0) >> 2] = 1;
      }
      break block9;
     default:
      break block8;
     };
    }
    HEAP32[($3_1 + 32 | 0) >> 2] = 1;
   }
   HEAPF64[$3_1 >> 3] = +(0 | 0);
   block16 : {
    block12 : {
     if (!(HEAP32[($3_1 + 32 | 0) >> 2] | 0)) {
      break block12
     }
     block13 : {
      if (!((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break block13
      }
      block14 : {
       if ($286((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0 | 0, 67109038 | 0) | 0) {
        break block14
       }
       block15 : {
        if (!((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
         break block15
        }
        HEAPF64[($3_1 + 40 | 0) >> 3] = +(0 | 0);
        break block1;
       }
       HEAPF64[($3_1 + 16 | 0) >> 3] = +$43(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0);
       HEAPF64[($3_1 + 8 | 0) >> 3] = +$43(HEAP32[((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0);
       HEAPF64[$3_1 >> 3] = +$262(+(+HEAPF64[($3_1 + 16 | 0) >> 3]), +(+HEAPF64[($3_1 + 8 | 0) >> 3]));
      }
     }
     break block16;
    }
    $90_1 = (HEAP32[(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0) + -5 | 0;
    block24 : {
     block23 : {
      switch ($90_1 | 0) {
      case 0:
       HEAPF64[$3_1 >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3] + +HEAPF64[($3_1 + 8 | 0) >> 3];
       break block24;
      case 1:
       HEAPF64[$3_1 >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3] - +HEAPF64[($3_1 + 8 | 0) >> 3];
       break block24;
      case 2:
       HEAPF64[$3_1 >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3] * +HEAPF64[($3_1 + 8 | 0) >> 3];
       break block24;
      case 3:
       block25 : {
        if (!(+HEAPF64[($3_1 + 8 | 0) >> 3] != +(0 | 0) & 1 | 0)) {
         break block25
        }
        HEAPF64[$3_1 >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3] / +HEAPF64[($3_1 + 8 | 0) >> 3];
       }
       break block24;
      case 4:
       HEAPF64[$3_1 >> 3] = +$262(+(+HEAPF64[($3_1 + 16 | 0) >> 3]), +(+HEAPF64[($3_1 + 8 | 0) >> 3]));
       break block24;
      case 5:
      case 6:
       HEAPF64[$3_1 >> 3] = +(HEAP32[($3_1 + 28 | 0) >> 2] | 0 | 0) * +HEAPF64[($3_1 + 8 | 0) >> 3];
       break block24;
      default:
       break block23;
      };
     }
    }
   }
   HEAPF64[($3_1 + 40 | 0) >> 3] = +HEAPF64[$3_1 >> 3];
  }
  $134_1 = +HEAPF64[($3_1 + 40 | 0) >> 3];
  global$0 = $3_1 + 48 | 0;
  return +$134_1;
 }
 
 function $44() {
  var $1_1 = 0, $2_1 = 0, $4_1 = 0;
  $1_1 = 67135680;
  label : while (1) {
   $2_1 = $1_1;
   $45($2_1 | 0) | 0;
   $4_1 = $2_1 + 32 | 0;
   $1_1 = $4_1;
   if (!(($4_1 | 0) == (67135680 + 2048 | 0 | 0) & 1 | 0)) {
    continue label
   }
   break label;
  };
  return;
 }
 
 function $45($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $38_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = -1;
  HEAP32[($4_1 + 4 | 0) >> 2] = -1;
  HEAPF64[($4_1 + 8 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4_1 + 16 | 0) >> 3] = +(0 | 0);
  HEAPF64[($4_1 + 24 | 0) >> 3] = +(0 | 0);
  return $4_1 | 0;
 }
 
 function $46($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $38_1 = 0, $94_1 = 0, $174_1 = 0.0, $522_1 = 0.0;
  $3_1 = global$0 - 48 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 36 | 0) >> 2] = $0_1;
  HEAPF64[($3_1 + 24 | 0) >> 3] = +(0 | 0);
  block : {
   if (!((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   HEAPF64[($3_1 + 24 | 0) >> 3] = +$46(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0);
  }
  HEAPF64[($3_1 + 16 | 0) >> 3] = +(0 | 0);
  block1 : {
   if (!((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block1
   }
   HEAPF64[($3_1 + 16 | 0) >> 3] = +$46(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0);
  }
  HEAPF64[($3_1 + 8 | 0) >> 3] = +(0 | 0);
  block7 : {
   block2 : {
    if ((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block2
    }
    if ((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block2
    }
    $38_1 = (HEAP32[(HEAP32[($3_1 + 36 | 0) >> 2] | 0) >> 2] | 0) + -1 | 0;
    block6 : {
     block5 : {
      switch ($38_1 | 0) {
      case 0:
       HEAPF64[($3_1 + 8 | 0) >> 3] = +$30((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0 | 0);
       HEAP32[(67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) >> 2] = HEAP32[(0 + 67137728 | 0) >> 2] | 0;
       HEAP32[((67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
       HEAPF64[((67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) + 8 | 0) >> 3] = +HEAPF64[($3_1 + 24 | 0) >> 3];
       HEAPF64[((67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) + 16 | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3];
       HEAPF64[((67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) + 24 | 0) >> 3] = +HEAPF64[($3_1 + 8 | 0) >> 3];
       HEAP32[(0 + 67137728 | 0) >> 2] = (HEAP32[(0 + 67137728 | 0) >> 2] | 0) + 1 | 0;
       break block6;
      case 1:
       HEAPF64[($3_1 + 8 | 0) >> 3] = +$227((HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0 | 0);
       break block6;
      default:
       break block5;
      };
     }
     $271(67109146 | 0, 0 | 0) | 0;
    }
    HEAPF64[($3_1 + 40 | 0) >> 3] = +HEAPF64[($3_1 + 8 | 0) >> 3];
    break block7;
   }
   $94_1 = (HEAP32[(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0) + -5 | 0;
   block14 : {
    block13 : {
     switch ($94_1 | 0) {
     case 3:
      HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 24 | 0) >> 3] / +HEAPF64[($3_1 + 16 | 0) >> 3];
      break block14;
     case 0:
      HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 24 | 0) >> 3] + +HEAPF64[($3_1 + 16 | 0) >> 3];
      break block14;
     case 1:
      HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 24 | 0) >> 3] - +HEAPF64[($3_1 + 16 | 0) >> 3];
      break block14;
     case 2:
      HEAPF64[($3_1 + 8 | 0) >> 3] = +HEAPF64[($3_1 + 24 | 0) >> 3] * +HEAPF64[($3_1 + 16 | 0) >> 3];
      break block14;
     case 4:
      HEAPF64[($3_1 + 8 | 0) >> 3] = +$262(+(+HEAPF64[($3_1 + 24 | 0) >> 3]), +(+HEAPF64[($3_1 + 16 | 0) >> 3]));
      break block14;
     default:
      break block13;
     };
    }
    HEAP32[$3_1 >> 2] = HEAP32[(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
    $271(67111260 | 0, $3_1 | 0) | 0;
    HEAPF64[($3_1 + 40 | 0) >> 3] = +(0 | 0);
    break block7;
   }
   HEAP32[(67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) >> 2] = HEAP32[(0 + 67137728 | 0) >> 2] | 0;
   HEAP32[((67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($3_1 + 36 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >> 2] | 0;
   HEAPF64[((67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) + 8 | 0) >> 3] = +HEAPF64[($3_1 + 24 | 0) >> 3];
   HEAPF64[((67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) + 16 | 0) >> 3] = +HEAPF64[($3_1 + 16 | 0) >> 3];
   HEAPF64[((67135680 + ((HEAP32[(0 + 67137728 | 0) >> 2] | 0) << 5 | 0) | 0) + 24 | 0) >> 3] = +HEAPF64[($3_1 + 8 | 0) >> 3];
   HEAP32[(0 + 67137728 | 0) >> 2] = (HEAP32[(0 + 67137728 | 0) >> 2] | 0) + 1 | 0;
   HEAPF64[($3_1 + 40 | 0) >> 3] = +HEAPF64[($3_1 + 8 | 0) >> 3];
  }
  $174_1 = +HEAPF64[($3_1 + 40 | 0) >> 3];
  global$0 = $3_1 + 48 | 0;
  return +$174_1;
 }
 
 function $47($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $9_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  block1 : {
   block : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break block
    }
    break block1;
   }
   $9_1 = 67139792;
   $10_1 = 256;
   $11_1 = 0;
   block2 : {
    if (!$10_1) {
     break block2
    }
    wasm2js_memory_fill($9_1, $11_1, $10_1);
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = 0;
   label : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block1
    }
    block11 : {
     block3 : {
      if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break block3
      }
      block4 : {
       if (!((HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 132) | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
        break block4
       }
       block7 : {
        block5 : {
         if (!(((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0 | 0) < (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break block5
         }
         block6 : {
          if ((HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0, 132) | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0) {
           break block6
          }
          if (!((HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0, 132) | 0) >> 2] | 0 | 0) == (9 | 0) & 1 | 0)) {
           break block5
          }
         }
         break block7;
        }
        $285(67139792 | 0, 67111083 | 0) | 0;
       }
      }
      block8 : {
       if (!($8(HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 132) | 0) >> 2] | 0 | 0) | 0)) {
        break block8
       }
       block9 : {
        if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
         break block9
        }
        block10 : {
         if ((HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[($3_1 + 8 | 0) >> 2] | 0) - 1 | 0, 132) | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0) {
          break block10
         }
         if (!((HEAP32[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul((HEAP32[($3_1 + 8 | 0) >> 2] | 0) - 1 | 0, 132) | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
          break block9
         }
        }
        $285(67139792 | 0, 67111083 | 0) | 0;
       }
      }
      $285(67139792 | 0, ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 132) | 0) + 4 | 0 | 0) | 0;
      break block11;
     }
     $285(67139792 | 0, ((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 132) | 0) + 4 | 0 | 0) | 0;
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $48($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0, $20_1 = 0, $52_1 = 0, $65_1 = 0, $85_1 = 0, $144_1 = 0, $244_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0, $21_1 = 0, $122_1 = 0, $212_1 = 0, $467_1 = 0, $1461_1 = 0;
  $4_1 = global$0 - 448 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 440 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 436 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 440 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($4_1 + 444 | 0) >> 2] = 67111587;
    break block1;
   }
   HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 436 | 0) >> 2] | 0;
   $271(67111321 | 0, $4_1 + 32 | 0 | 0) | 0;
   $15_1 = 67137744;
   $16_1 = 2048;
   $17_1 = 0;
   block2 : {
    if (!$16_1) {
     break block2
    }
    wasm2js_memory_fill($15_1, $17_1, $16_1);
   }
   $19_1 = 67139792;
   $20_1 = 256;
   $21_1 = 0;
   block3 : {
    if (!$20_1) {
     break block3
    }
    wasm2js_memory_fill($19_1, $21_1, $20_1);
   }
   $49($4_1 + 424 | 0 | 0) | 0;
   $50($4_1 + 412 | 0 | 0) | 0;
   HEAP32[($4_1 + 408 | 0) >> 2] = $340((HEAP32[($4_1 + 440 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   HEAP32[($4_1 + 404 | 0) >> 2] = 0;
   HEAP32[($4_1 + 400 | 0) >> 2] = 0;
   block4 : {
    label3 : while (1) {
     if (!((HEAP32[($4_1 + 400 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 440 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block4
     }
     HEAP32[($4_1 + 140 | 0) >> 2] = 0;
     HEAP32[($4_1 + 136 | 0) >> 2] = HEAP32[($4_1 + 404 | 0) >> 2] | 0;
     block5 : {
      label : while (1) {
       if (!((HEAP32[($4_1 + 136 | 0) >> 2] | 0) >>> 0 < ($291(HEAP32[($4_1 + 436 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
        break block5
       }
       $52_1 = 24;
       block7 : {
        block6 : {
         if (!((((HEAPU8[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0) >> 0] | 0) << $52_1 | 0) >> $52_1 | 0 | 0) == (92 | 0) & 1 | 0)) {
          break block6
         }
         $65_1 = 24;
         if (!((((HEAPU8[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0) << $65_1 | 0) >> $65_1 | 0 | 0) == (44 | 0) & 1 | 0)) {
          break block6
         }
         HEAP8[(($4_1 + 144 | 0) + (HEAP32[($4_1 + 140 | 0) >> 2] | 0) | 0) >> 0] = 44;
         HEAP32[($4_1 + 140 | 0) >> 2] = (HEAP32[($4_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         break block7;
        }
        $85_1 = 24;
        block8 : {
         if (!((((HEAPU8[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0) >> 0] | 0) << $85_1 | 0) >> $85_1 | 0 | 0) == (44 | 0) & 1 | 0)) {
          break block8
         }
         HEAP32[($4_1 + 140 | 0) >> 2] = (HEAP32[($4_1 + 140 | 0) >> 2] | 0) + 1 | 0;
         break block5;
        }
        HEAP8[(($4_1 + 144 | 0) + (HEAP32[($4_1 + 140 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($4_1 + 436 | 0) >> 2] | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP32[($4_1 + 140 | 0) >> 2] = (HEAP32[($4_1 + 140 | 0) >> 2] | 0) + 1 | 0;
       }
       HEAP32[($4_1 + 136 | 0) >> 2] = (HEAP32[($4_1 + 136 | 0) >> 2] | 0) + 1 | 0;
       continue label;
      };
     }
     HEAP32[($4_1 + 404 | 0) >> 2] = (HEAP32[($4_1 + 404 | 0) >> 2] | 0) + (HEAP32[($4_1 + 140 | 0) >> 2] | 0) | 0;
     block10 : {
      block9 : {
       if (HEAP32[($4_1 + 140 | 0) >> 2] | 0) {
        break block9
       }
       break block10;
      }
      HEAP8[(($4_1 + 144 | 0) + ((HEAP32[($4_1 + 140 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] = 0;
      $122_1 = HEAP32[($4_1 + 404 | 0) >> 2] | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 140 | 0) >> 2] | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = $4_1 + 144 | 0;
      HEAP32[$4_1 >> 2] = $122_1;
      $271(67111193 | 0, $4_1 | 0) | 0;
      HEAP32[($4_1 + 132 | 0) >> 2] = $340((HEAP32[($4_1 + 140 | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
      block11 : {
       if (!((HEAP32[($4_1 + 400 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break block11
       }
       HEAP32[($4_1 + 128 | 0) >> 2] = 0;
       block12 : {
        label1 : while (1) {
         $144_1 = 24;
         if (!($229(((HEAPU8[(($4_1 + 144 | 0) + (HEAP32[($4_1 + 128 | 0) >> 2] | 0) | 0) >> 0] | 0) << $144_1 | 0) >> $144_1 | 0 | 0) | 0)) {
          break block12
         }
         HEAP32[($4_1 + 128 | 0) >> 2] = (HEAP32[($4_1 + 128 | 0) >> 2] | 0) + 1 | 0;
         continue label1;
        };
       }
       HEAP32[($4_1 + 124 | 0) >> 2] = HEAP32[($4_1 + 128 | 0) >> 2] | 0;
       block13 : {
        label2 : while (1) {
         if (!(((HEAPU8[(($4_1 + 144 | 0) + (HEAP32[($4_1 + 124 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break block13
         }
         HEAP8[(($4_1 + 144 | 0) + (HEAP32[($4_1 + 124 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[(($4_1 + 144 | 0) + ((HEAP32[($4_1 + 124 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0;
         HEAP32[($4_1 + 124 | 0) >> 2] = (HEAP32[($4_1 + 124 | 0) >> 2] | 0) + 1 | 0;
         continue label2;
        };
       }
       HEAP8[(($4_1 + 144 | 0) + (($291($4_1 + 144 | 0 | 0) | 0) - 1 | 0) | 0) >> 0] = 0;
      }
      $288(HEAP32[($4_1 + 132 | 0) >> 2] | 0 | 0, $4_1 + 144 | 0 | 0) | 0;
      HEAP32[((HEAP32[($4_1 + 408 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 400 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 132 | 0) >> 2] | 0;
     }
     HEAP32[($4_1 + 400 | 0) >> 2] = (HEAP32[($4_1 + 400 | 0) >> 2] | 0) + 1 | 0;
     continue label3;
    };
   }
   HEAP32[($4_1 + 120 | 0) >> 2] = 2;
   block14 : {
    label4 : while (1) {
     if (!((HEAP32[($4_1 + 120 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 440 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block14
     }
     $212_1 = HEAP32[($4_1 + 120 | 0) >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 408 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 120 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $212_1;
     $271(67111552 | 0, $4_1 + 16 | 0 | 0) | 0;
     HEAP32[($4_1 + 120 | 0) >> 2] = (HEAP32[($4_1 + 120 | 0) >> 2] | 0) + 1 | 0;
     continue label4;
    };
   }
   $51($4_1 + 424 | 0 | 0);
   HEAP32[($4_1 + 116 | 0) >> 2] = 0;
   block15 : {
    label5 : while (1) {
     if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0) >>> 0 < ($291(HEAP32[((HEAP32[($4_1 + 408 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break block15
     }
     $244_1 = 24;
     $1883($4_1 + 424 | 0 | 0, ((HEAPU8[((HEAP32[((HEAP32[($4_1 + 408 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 116 | 0) >> 2] | 0) | 0) >> 0] | 0) << $244_1 | 0) >> $244_1 | 0 | 0);
     HEAP32[($4_1 + 116 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 1 | 0;
     continue label5;
    };
   }
   $52($53($52(67143028 | 0, 67110862 | 0) | 0 | 0, $4_1 + 424 | 0 | 0) | 0 | 0, 67111580 | 0) | 0;
   HEAP32[($4_1 + 112 | 0) >> 2] = 2;
   block16 : {
    if (!((HEAP32[($4_1 + 440 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break block16
    }
    HEAP32[($4_1 + 108 | 0) >> 2] = 2;
    block17 : {
     label6 : while (1) {
      if (!((HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 440 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break block17
      }
      $52($52($52($441($52(67143028 | 0, 67110007 | 0) | 0 | 0, HEAP32[($4_1 + 108 | 0) >> 2] | 0 | 0) | 0 | 0, 67110785 | 0) | 0 | 0, HEAP32[((HEAP32[($4_1 + 408 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 108 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0 | 0, 67111330 | 0) | 0;
      block19 : {
       block18 : {
        if (!(($54(HEAP32[((HEAP32[($4_1 + 408 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 108 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 67110785 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
         break block18
        }
        $55($4_1 + 96 | 0 | 0, HEAP32[((HEAP32[($4_1 + 408 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 108 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
        $56($4_1 + 412 | 0 | 0, $4_1 + 96 | 0 | 0);
        $1872($4_1 + 96 | 0 | 0) | 0;
        break block19;
       }
       HEAP32[($4_1 + 112 | 0) >> 2] = HEAP32[($4_1 + 108 | 0) >> 2] | 0;
       break block17;
      }
      HEAP32[($4_1 + 108 | 0) >> 2] = (HEAP32[($4_1 + 108 | 0) >> 2] | 0) + 1 | 0;
      continue label6;
     };
    }
   }
   HEAP32[($4_1 + 92 | 0) >> 2] = 0;
   block20 : {
    label7 : while (1) {
     if (!((HEAP32[($4_1 + 92 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 440 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block20
     }
     $342(HEAP32[((HEAP32[($4_1 + 408 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 92 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 92 | 0) >> 2] = (HEAP32[($4_1 + 92 | 0) >> 2] | 0) + 1 | 0;
     continue label7;
    };
   }
   $342(HEAP32[($4_1 + 408 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 88 | 0) >> 2] = $12($57($4_1 + 424 | 0 | 0) | 0 | 0) | 0;
   block22 : {
    block21 : {
     if ($27(HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0) | 0) {
      break block21
     }
     $4(HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 444 | 0) >> 2] = 67108864;
     HEAP32[($4_1 + 84 | 0) >> 2] = 1;
     break block22;
    }
    block23 : {
     if (!($58($4_1 + 412 | 0 | 0) | 0)) {
      break block23
     }
     HEAP32[($4_1 + 80 | 0) >> 2] = $4_1 + 412 | 0;
     HEAP32[($4_1 + 76 | 0) >> 2] = $59(HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 72 | 0) >> 2] = $60(HEAP32[($4_1 + 80 | 0) >> 2] | 0 | 0) | 0;
     block24 : {
      label8 : while (1) {
       if (!(($61($4_1 + 76 | 0 | 0, $4_1 + 72 | 0 | 0) | 0) & 1 | 0)) {
        break block24
       }
       HEAP32[($4_1 + 68 | 0) >> 2] = $62($4_1 + 76 | 0 | 0) | 0;
       HEAP32[($4_1 + 64 | 0) >> 2] = $12($57(HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
       block26 : {
        block25 : {
         if (!(($27(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
          break block25
         }
         $342(HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
         $342(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0);
         break block26;
        }
        block27 : {
         if (($29((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
          break block27
         }
         $28((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0 | 0, +(+(0 | 0))) | 0;
        }
        HEAP32[($4_1 + 60 | 0) >> 2] = $42(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0, 2 | 0, HEAP32[(HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
        $31((HEAP32[((HEAP32[($4_1 + 64 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0 | 0, +(+$43(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0)));
        $34(HEAP32[($4_1 + 60 | 0) >> 2] | 0 | 0);
        $4(HEAP32[($4_1 + 64 | 0) >> 2] | 0 | 0);
       }
       $63($4_1 + 76 | 0 | 0) | 0;
       continue label8;
      };
     }
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = $42(HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[(HEAP32[($4_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
    HEAPF64[($4_1 + 48 | 0) >> 3] = +$43(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
    $47(HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0);
    $288(67137744 | 0, 67111587 | 0) | 0;
    $285(67137744 | 0, 67111121 | 0) | 0;
    $285(67137744 | 0, 67110907 | 0) | 0;
    $285(67137744 | 0, $57($4_1 + 424 | 0 | 0) | 0 | 0) | 0;
    $285(67137744 | 0, 67111503 | 0) | 0;
    $285(67137744 | 0, 67110893 | 0) | 0;
    $285(67137744 | 0, 67139792 | 0) | 0;
    $285(67137744 | 0, 67111503 | 0) | 0;
    $285(67137744 | 0, 67110881 | 0) | 0;
    $1904($4_1 + 36 | 0 | 0, +(+HEAPF64[($4_1 + 48 | 0) >> 3]));
    $285(67137744 | 0, $57($4_1 + 36 | 0 | 0) | 0 | 0) | 0;
    $1872($4_1 + 36 | 0 | 0) | 0;
    $285(67137744 | 0, 67111583 | 0) | 0;
    $285(67137744 | 0, 67111118 | 0) | 0;
    $52($52(67143028 | 0, 67137744 | 0) | 0 | 0, 67111584 | 0) | 0;
    $34(HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0);
    $4(HEAP32[($4_1 + 88 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 444 | 0) >> 2] = 67137744;
    HEAP32[($4_1 + 84 | 0) >> 2] = 1;
   }
   $64($4_1 + 412 | 0 | 0) | 0;
   $1872($4_1 + 424 | 0 | 0) | 0;
  }
  $467_1 = HEAP32[($4_1 + 444 | 0) >> 2] | 0;
  global$0 = $4_1 + 448 | 0;
  return $467_1 | 0;
 }
 
 function $49($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $42_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $65($4_1 | 0, $3_1 + 11 | 0 | 0, $3_1 + 10 | 0 | 0) | 0;
  $66($4_1 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $50($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $53_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $67($4_1 + 8 | 0 | 0, $3_1 + 8 | 0 | 0, $3_1 + 7 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $51($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $68($4_1 | 0) | 0;
  block1 : {
   block : {
    if (!(($69($4_1 | 0) | 0) & 1 | 0)) {
     break block
    }
    $9_1 = $70($4_1 | 0) | 0;
    HEAP8[($3_1 + 7 | 0) >> 0] = 0;
    $71($9_1 | 0, $3_1 + 7 | 0 | 0);
    $72($4_1 | 0, 0 | 0);
    break block1;
   }
   $15_1 = $73($4_1 | 0) | 0;
   HEAP8[($3_1 + 6 | 0) >> 0] = 0;
   $71($15_1 | 0, $3_1 + 6 | 0 | 0);
   $74($4_1 | 0, 0 | 0);
  }
  $75($4_1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $52($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $38_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $9_1 = $77(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $76(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $53($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $10_1 = $77(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $78(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $68(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $54($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $296(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $79($5_1 | 0, $4_1 + 7 | 0 | 0, $4_1 + 6 | 0 | 0) | 0;
  $1875($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, $76(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $56($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[($80($5_1 | 0) | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break block
    }
    $81($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 12 | 0;
    break block1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = $82($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $78(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $83($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $60($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $7_1 = 0, $33_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $83($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $7_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $61($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = (($84(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) ^ -1 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $62($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 12 | 0;
  return $4_1 | 0;
 }
 
 function $64($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $85($3_1 + 8 | 0 | 0, $4_1 | 0) | 0;
  $86($3_1 + 8 | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $65($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $31_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $111($6_1 | 0) | 0;
  $112($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $66($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $67($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $115($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $116($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $68($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $42_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!(($69($4_1 | 0) | 0) & 1 | 0)) {
     break block
    }
    $9_1 = $107($4_1 | 0) | 0;
    break block1;
   }
   $9_1 = $104($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $16_1 = 0, $52_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $16_1 = (((HEAPU8[(($102(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $16_1 | 0;
 }
 
 function $70($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($103(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $71($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 0] = HEAPU8[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 0] | 0;
  return;
 }
 
 function $72($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[(($103(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] = $6_1;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $73($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $140($103(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $74($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $7_1 = 0, $9_1 = 0, $14_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAPU8[($4_1 + 8 | 0) >> 0] | 0;
  $7_1 = $103($5_1 | 0) | 0;
  $9_1 = 127;
  HEAP8[($7_1 + 11 | 0) >> 0] = (HEAPU8[($7_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($6_1 & $9_1 | 0) | 0;
  $14_1 = $103($5_1 | 0) | 0;
  HEAP8[($14_1 + 11 | 0) >> 0] = (HEAPU8[($14_1 + 11 | 0) >> 0] | 0) & $9_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $75($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $76($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $150(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $77($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $21_1 = 0, $37_1 = 0, $43_1 = 0, $49_1 = 0, $57_1 = 0, $67_1 = 0, $20_1 = 0, $42_1 = 0, $48_1 = 0, $55_1 = 0, $77_1 = 0, $247_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  $430($5_1 + 12 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  block : {
   if (!(($143($5_1 + 12 | 0 | 0) | 0) & 1 | 0)) {
    break block
   }
   $144($5_1 + 4 | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) | 0;
   $20_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   $21_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   block2 : {
    block1 : {
     if (!((($145($21_1 + (HEAP32[((HEAP32[$21_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 176 | 0 | 0) == (32 | 0) & 1 | 0)) {
      break block1
     }
     $37_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
     break block2;
    }
    $37_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   }
   $42_1 = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
   $43_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   $48_1 = $43_1 + (HEAP32[((HEAP32[$43_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $49_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
   $55_1 = $146($49_1 + (HEAP32[((HEAP32[$49_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $57_1 = 24;
   HEAP32[($5_1 + 8 | 0) >> 2] = $147(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, $20_1 | 0, $37_1 | 0, $42_1 | 0, $48_1 | 0, ($55_1 << $57_1 | 0) >> $57_1 | 0 | 0) | 0;
   block3 : {
    if (!(($148($5_1 + 8 | 0 | 0) | 0) & 1 | 0)) {
     break block3
    }
    $67_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    $149($67_1 + (HEAP32[((HEAP32[$67_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
   }
  }
  $431($5_1 + 12 | 0 | 0) | 0;
  $77_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $77_1 | 0;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $106($168(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $79($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $31_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $164($6_1 | 0) | 0;
  $112($6_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $80($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $171((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $81($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  $172($4_1 + 12 | 0 | 0, $5_1 | 0, 1 | 0) | 0;
  $173($121($5_1 | 0) | 0 | 0, $128(HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) + 12 | 0;
  $174($4_1 + 12 | 0 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $82($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0, $90_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  HEAP32[($4_1 + 20 | 0) >> 2] = $121($5_1 | 0) | 0;
  $176($4_1 | 0, $175($5_1 | 0, ($58($5_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0, $58($5_1 | 0) | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $173(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, $128(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0);
  HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 12 | 0;
  $177($5_1 | 0, $4_1 | 0);
  $22_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $178($4_1 | 0) | 0;
  global$0 = $4_1 + 32 | 0;
  return $22_1 | 0;
 }
 
 function $83($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $9_1 = 0, $37_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $219($4_1 + 12 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  $9_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $84($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $11_1 = 0, $42_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $11_1 = ($110(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) == ($110(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $85($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $86($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block : {
   if (!((HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $119(HEAP32[$4_1 >> 2] | 0 | 0);
   $120(HEAP32[$4_1 >> 2] | 0 | 0);
   $123($121(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[(HEAP32[$4_1 >> 2] | 0) >> 2] | 0 | 0, $122(HEAP32[$4_1 >> 2] | 0 | 0) | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $87($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $785_1 = 0.0, $863_1 = 0, $786_1 = 0.0, $918_1 = 0, $787_1 = 0.0, $975_1 = 0, $788_1 = 0.0, $1035_1 = 0, $789_1 = 0.0, $1073_1 = 0, $790_1 = 0.0, $1130_1 = 0, $791_1 = 0.0, $1195_1 = 0, $792_1 = 0.0, $1250_1 = 0, $793_1 = 0.0, $1307_1 = 0, $794_1 = 0.0, $1367_1 = 0, $795_1 = 0.0, $1405_1 = 0, $796_1 = 0.0, $1462_1 = 0, $797_1 = 0.0, $1527_1 = 0, $798_1 = 0.0, $1582_1 = 0, $799_1 = 0.0, $1639_1 = 0, $800_1 = 0.0, $1699_1 = 0, $801_1 = 0.0, $1737_1 = 0, $802_1 = 0.0, $1794_1 = 0, $803_1 = 0.0, $1859_1 = 0, $804_1 = 0.0, $1914_1 = 0, $805_1 = 0.0, $1971_1 = 0, $806_1 = 0.0, $2031 = 0, $807_1 = 0.0, $2069 = 0, $808_1 = 0.0, $2126 = 0, $809_1 = 0.0, $2191 = 0, $810_1 = 0.0, $2246 = 0, $811_1 = 0.0, $2303 = 0, $812_1 = 0.0, $2363 = 0, $813_1 = 0.0, $2401 = 0, $814_1 = 0.0, $2458 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  $4_1 = global$0 - 800 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 796 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 792 | 0) >> 2] = $1_1;
  block : {
   if (HEAP32[(0 + 67140048 | 0) >> 2] | 0) {
    break block
   }
   HEAP32[(0 + 67140048 | 0) >> 2] = 1;
   i64toi32_i32$0 = $228(0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $276(i64toi32_i32$0 | 0);
  }
  $51(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0);
  $15_1 = (HEAP32[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + -5 | 0;
  block6 : {
   block5 : {
    switch ($15_1 | 0) {
    case 3:
     block8 : {
      block7 : {
       if (($277() | 0 | 0) % (2 | 0) | 0) {
        break block7
       }
       $785_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
       if (Math_abs($785_1) < 2147483647.0) {
        $863_1 = ~~$785_1
       } else {
        $863_1 = -2147483648
       }
       $1899($4_1 + 768 | 0 | 0, $863_1 | 0);
       $88($4_1 + 780 | 0 | 0, $4_1 + 768 | 0 | 0, 67111083 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 780 | 0 | 0) | 0;
       $1872($4_1 + 780 | 0 | 0) | 0;
       $1872($4_1 + 768 | 0 | 0) | 0;
       $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67110970 | 0) | 0;
       $786_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
       if (Math_abs($786_1) < 2147483647.0) {
        $918_1 = ~~$786_1
       } else {
        $918_1 = -2147483648
       }
       $1899($4_1 + 744 | 0 | 0, $918_1 | 0);
       $88($4_1 + 756 | 0 | 0, $4_1 + 744 | 0 | 0, 67111083 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 756 | 0 | 0) | 0;
       $1872($4_1 + 756 | 0 | 0) | 0;
       $1872($4_1 + 744 | 0 | 0) | 0;
       $55($4_1 + 720 | 0 | 0, 67110949 | 0) | 0;
       $787_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
       if (Math_abs($787_1) < 2147483647.0) {
        $975_1 = ~~$787_1
       } else {
        $975_1 = -2147483648
       }
       $1899($4_1 + 708 | 0 | 0, $975_1 | 0);
       $91($4_1 + 732 | 0 | 0, $4_1 + 720 | 0 | 0, $4_1 + 708 | 0 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 732 | 0 | 0) | 0;
       $1872($4_1 + 732 | 0 | 0) | 0;
       $1872($4_1 + 708 | 0 | 0) | 0;
       $1872($4_1 + 720 | 0 | 0) | 0;
       break block8;
      }
      $788_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
      if (Math_abs($788_1) < 2147483647.0) {
       $1035_1 = ~~$788_1
      } else {
       $1035_1 = -2147483648
      }
      $1899($4_1 + 696 | 0 | 0, $1035_1 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 696 | 0 | 0) | 0;
      $1872($4_1 + 696 | 0 | 0) | 0;
      $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67111066 | 0) | 0;
      $789_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
      if (Math_abs($789_1) < 2147483647.0) {
       $1073_1 = ~~$789_1
      } else {
       $1073_1 = -2147483648
      }
      $1899($4_1 + 672 | 0 | 0, $1073_1 | 0);
      $88($4_1 + 684 | 0 | 0, $4_1 + 672 | 0 | 0, 67111083 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 684 | 0 | 0) | 0;
      $1872($4_1 + 684 | 0 | 0) | 0;
      $1872($4_1 + 672 | 0 | 0) | 0;
      $55($4_1 + 648 | 0 | 0, 67110949 | 0) | 0;
      $790_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
      if (Math_abs($790_1) < 2147483647.0) {
       $1130_1 = ~~$790_1
      } else {
       $1130_1 = -2147483648
      }
      $1899($4_1 + 636 | 0 | 0, $1130_1 | 0);
      $91($4_1 + 660 | 0 | 0, $4_1 + 648 | 0 | 0, $4_1 + 636 | 0 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 660 | 0 | 0) | 0;
      $1872($4_1 + 660 | 0 | 0) | 0;
      $1872($4_1 + 636 | 0 | 0) | 0;
      $1872($4_1 + 648 | 0 | 0) | 0;
     }
     break block6;
    case 0:
     block10 : {
      block9 : {
       if (($277() | 0 | 0) % (2 | 0) | 0) {
        break block9
       }
       $791_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
       if (Math_abs($791_1) < 2147483647.0) {
        $1195_1 = ~~$791_1
       } else {
        $1195_1 = -2147483648
       }
       $1899($4_1 + 612 | 0 | 0, $1195_1 | 0);
       $88($4_1 + 624 | 0 | 0, $4_1 + 612 | 0 | 0, 67111083 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 624 | 0 | 0) | 0;
       $1872($4_1 + 624 | 0 | 0) | 0;
       $1872($4_1 + 612 | 0 | 0) | 0;
       $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67111017 | 0) | 0;
       $792_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
       if (Math_abs($792_1) < 2147483647.0) {
        $1250_1 = ~~$792_1
       } else {
        $1250_1 = -2147483648
       }
       $1899($4_1 + 588 | 0 | 0, $1250_1 | 0);
       $88($4_1 + 600 | 0 | 0, $4_1 + 588 | 0 | 0, 67111083 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 600 | 0 | 0) | 0;
       $1872($4_1 + 600 | 0 | 0) | 0;
       $1872($4_1 + 588 | 0 | 0) | 0;
       $55($4_1 + 564 | 0 | 0, 67110949 | 0) | 0;
       $793_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
       if (Math_abs($793_1) < 2147483647.0) {
        $1307_1 = ~~$793_1
       } else {
        $1307_1 = -2147483648
       }
       $1899($4_1 + 552 | 0 | 0, $1307_1 | 0);
       $91($4_1 + 576 | 0 | 0, $4_1 + 564 | 0 | 0, $4_1 + 552 | 0 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 576 | 0 | 0) | 0;
       $1872($4_1 + 576 | 0 | 0) | 0;
       $1872($4_1 + 552 | 0 | 0) | 0;
       $1872($4_1 + 564 | 0 | 0) | 0;
       break block10;
      }
      $794_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
      if (Math_abs($794_1) < 2147483647.0) {
       $1367_1 = ~~$794_1
      } else {
       $1367_1 = -2147483648
      }
      $1899($4_1 + 540 | 0 | 0, $1367_1 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 540 | 0 | 0) | 0;
      $1872($4_1 + 540 | 0 | 0) | 0;
      $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67111077 | 0) | 0;
      $795_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
      if (Math_abs($795_1) < 2147483647.0) {
       $1405_1 = ~~$795_1
      } else {
       $1405_1 = -2147483648
      }
      $1899($4_1 + 516 | 0 | 0, $1405_1 | 0);
      $88($4_1 + 528 | 0 | 0, $4_1 + 516 | 0 | 0, 67111083 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 528 | 0 | 0) | 0;
      $1872($4_1 + 528 | 0 | 0) | 0;
      $1872($4_1 + 516 | 0 | 0) | 0;
      $55($4_1 + 492 | 0 | 0, 67110949 | 0) | 0;
      $796_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
      if (Math_abs($796_1) < 2147483647.0) {
       $1462_1 = ~~$796_1
      } else {
       $1462_1 = -2147483648
      }
      $1899($4_1 + 480 | 0 | 0, $1462_1 | 0);
      $91($4_1 + 504 | 0 | 0, $4_1 + 492 | 0 | 0, $4_1 + 480 | 0 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 504 | 0 | 0) | 0;
      $1872($4_1 + 504 | 0 | 0) | 0;
      $1872($4_1 + 480 | 0 | 0) | 0;
      $1872($4_1 + 492 | 0 | 0) | 0;
     }
     break block6;
    case 1:
     block12 : {
      block11 : {
       if (($277() | 0 | 0) % (2 | 0) | 0) {
        break block11
       }
       $797_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
       if (Math_abs($797_1) < 2147483647.0) {
        $1527_1 = ~~$797_1
       } else {
        $1527_1 = -2147483648
       }
       $1899($4_1 + 456 | 0 | 0, $1527_1 | 0);
       $88($4_1 + 468 | 0 | 0, $4_1 + 456 | 0 | 0, 67111083 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 468 | 0 | 0) | 0;
       $1872($4_1 + 468 | 0 | 0) | 0;
       $1872($4_1 + 456 | 0 | 0) | 0;
       $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67111002 | 0) | 0;
       $798_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
       if (Math_abs($798_1) < 2147483647.0) {
        $1582_1 = ~~$798_1
       } else {
        $1582_1 = -2147483648
       }
       $1899($4_1 + 432 | 0 | 0, $1582_1 | 0);
       $88($4_1 + 444 | 0 | 0, $4_1 + 432 | 0 | 0, 67111083 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 444 | 0 | 0) | 0;
       $1872($4_1 + 444 | 0 | 0) | 0;
       $1872($4_1 + 432 | 0 | 0) | 0;
       $55($4_1 + 408 | 0 | 0, 67110949 | 0) | 0;
       $799_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
       if (Math_abs($799_1) < 2147483647.0) {
        $1639_1 = ~~$799_1
       } else {
        $1639_1 = -2147483648
       }
       $1899($4_1 + 396 | 0 | 0, $1639_1 | 0);
       $91($4_1 + 420 | 0 | 0, $4_1 + 408 | 0 | 0, $4_1 + 396 | 0 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 420 | 0 | 0) | 0;
       $1872($4_1 + 420 | 0 | 0) | 0;
       $1872($4_1 + 396 | 0 | 0) | 0;
       $1872($4_1 + 408 | 0 | 0) | 0;
       break block12;
      }
      $800_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
      if (Math_abs($800_1) < 2147483647.0) {
       $1699_1 = ~~$800_1
      } else {
       $1699_1 = -2147483648
      }
      $1899($4_1 + 384 | 0 | 0, $1699_1 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 384 | 0 | 0) | 0;
      $1872($4_1 + 384 | 0 | 0) | 0;
      $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67111070 | 0) | 0;
      $801_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
      if (Math_abs($801_1) < 2147483647.0) {
       $1737_1 = ~~$801_1
      } else {
       $1737_1 = -2147483648
      }
      $1899($4_1 + 360 | 0 | 0, $1737_1 | 0);
      $88($4_1 + 372 | 0 | 0, $4_1 + 360 | 0 | 0, 67111083 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 372 | 0 | 0) | 0;
      $1872($4_1 + 372 | 0 | 0) | 0;
      $1872($4_1 + 360 | 0 | 0) | 0;
      $55($4_1 + 336 | 0 | 0, 67110949 | 0) | 0;
      $802_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
      if (Math_abs($802_1) < 2147483647.0) {
       $1794_1 = ~~$802_1
      } else {
       $1794_1 = -2147483648
      }
      $1899($4_1 + 324 | 0 | 0, $1794_1 | 0);
      $91($4_1 + 348 | 0 | 0, $4_1 + 336 | 0 | 0, $4_1 + 324 | 0 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 348 | 0 | 0) | 0;
      $1872($4_1 + 348 | 0 | 0) | 0;
      $1872($4_1 + 324 | 0 | 0) | 0;
      $1872($4_1 + 336 | 0 | 0) | 0;
     }
     break block6;
    case 2:
     block14 : {
      block13 : {
       if (($277() | 0 | 0) % (2 | 0) | 0) {
        break block13
       }
       $803_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
       if (Math_abs($803_1) < 2147483647.0) {
        $1859_1 = ~~$803_1
       } else {
        $1859_1 = -2147483648
       }
       $1899($4_1 + 300 | 0 | 0, $1859_1 | 0);
       $88($4_1 + 312 | 0 | 0, $4_1 + 300 | 0 | 0, 67111083 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 312 | 0 | 0) | 0;
       $1872($4_1 + 312 | 0 | 0) | 0;
       $1872($4_1 + 300 | 0 | 0) | 0;
       $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67110984 | 0) | 0;
       $804_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
       if (Math_abs($804_1) < 2147483647.0) {
        $1914_1 = ~~$804_1
       } else {
        $1914_1 = -2147483648
       }
       $1899($4_1 + 276 | 0 | 0, $1914_1 | 0);
       $88($4_1 + 288 | 0 | 0, $4_1 + 276 | 0 | 0, 67111083 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 288 | 0 | 0) | 0;
       $1872($4_1 + 288 | 0 | 0) | 0;
       $1872($4_1 + 276 | 0 | 0) | 0;
       $55($4_1 + 252 | 0 | 0, 67110949 | 0) | 0;
       $805_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
       if (Math_abs($805_1) < 2147483647.0) {
        $1971_1 = ~~$805_1
       } else {
        $1971_1 = -2147483648
       }
       $1899($4_1 + 240 | 0 | 0, $1971_1 | 0);
       $91($4_1 + 264 | 0 | 0, $4_1 + 252 | 0 | 0, $4_1 + 240 | 0 | 0);
       $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 264 | 0 | 0) | 0;
       $1872($4_1 + 264 | 0 | 0) | 0;
       $1872($4_1 + 240 | 0 | 0) | 0;
       $1872($4_1 + 252 | 0 | 0) | 0;
       break block14;
      }
      $806_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
      if (Math_abs($806_1) < 2147483647.0) {
       $2031 = ~~$806_1
      } else {
       $2031 = -2147483648
      }
      $1899($4_1 + 228 | 0 | 0, $2031 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 228 | 0 | 0) | 0;
      $1872($4_1 + 228 | 0 | 0) | 0;
      $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67111081 | 0) | 0;
      $807_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
      if (Math_abs($807_1) < 2147483647.0) {
       $2069 = ~~$807_1
      } else {
       $2069 = -2147483648
      }
      $1899($4_1 + 204 | 0 | 0, $2069 | 0);
      $88($4_1 + 216 | 0 | 0, $4_1 + 204 | 0 | 0, 67111083 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 216 | 0 | 0) | 0;
      $1872($4_1 + 216 | 0 | 0) | 0;
      $1872($4_1 + 204 | 0 | 0) | 0;
      $55($4_1 + 180 | 0 | 0, 67110949 | 0) | 0;
      $808_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
      if (Math_abs($808_1) < 2147483647.0) {
       $2126 = ~~$808_1
      } else {
       $2126 = -2147483648
      }
      $1899($4_1 + 168 | 0 | 0, $2126 | 0);
      $91($4_1 + 192 | 0 | 0, $4_1 + 180 | 0 | 0, $4_1 + 168 | 0 | 0);
      $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 192 | 0 | 0) | 0;
      $1872($4_1 + 192 | 0 | 0) | 0;
      $1872($4_1 + 168 | 0 | 0) | 0;
      $1872($4_1 + 180 | 0 | 0) | 0;
     }
     break block6;
    case 4:
     break block5;
    default:
     break block6;
    };
   }
   block16 : {
    block15 : {
     if (($277() | 0 | 0) % (2 | 0) | 0) {
      break block15
     }
     $809_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
     if (Math_abs($809_1) < 2147483647.0) {
      $2191 = ~~$809_1
     } else {
      $2191 = -2147483648
     }
     $1899($4_1 + 144 | 0 | 0, $2191 | 0);
     $88($4_1 + 156 | 0 | 0, $4_1 + 144 | 0 | 0, 67111083 | 0);
     $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 156 | 0 | 0) | 0;
     $1872($4_1 + 156 | 0 | 0) | 0;
     $1872($4_1 + 144 | 0 | 0) | 0;
     $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67111029 | 0) | 0;
     $810_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
     if (Math_abs($810_1) < 2147483647.0) {
      $2246 = ~~$810_1
     } else {
      $2246 = -2147483648
     }
     $1899($4_1 + 120 | 0 | 0, $2246 | 0);
     $88($4_1 + 132 | 0 | 0, $4_1 + 120 | 0 | 0, 67111083 | 0);
     $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 132 | 0 | 0) | 0;
     $1872($4_1 + 132 | 0 | 0) | 0;
     $1872($4_1 + 120 | 0 | 0) | 0;
     $55($4_1 + 96 | 0 | 0, 67110949 | 0) | 0;
     $811_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
     if (Math_abs($811_1) < 2147483647.0) {
      $2303 = ~~$811_1
     } else {
      $2303 = -2147483648
     }
     $1899($4_1 + 84 | 0 | 0, $2303 | 0);
     $91($4_1 + 108 | 0 | 0, $4_1 + 96 | 0 | 0, $4_1 + 84 | 0 | 0);
     $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 108 | 0 | 0) | 0;
     $1872($4_1 + 108 | 0 | 0) | 0;
     $1872($4_1 + 84 | 0 | 0) | 0;
     $1872($4_1 + 96 | 0 | 0) | 0;
     break block16;
    }
    $812_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 8 | 0) >> 3];
    if (Math_abs($812_1) < 2147483647.0) {
     $2363 = ~~$812_1
    } else {
     $2363 = -2147483648
    }
    $1899($4_1 + 72 | 0 | 0, $2363 | 0);
    $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 72 | 0 | 0) | 0;
    $1872($4_1 + 72 | 0 | 0) | 0;
    $90(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, 67111039 | 0) | 0;
    $813_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 16 | 0) >> 3];
    if (Math_abs($813_1) < 2147483647.0) {
     $2401 = ~~$813_1
    } else {
     $2401 = -2147483648
    }
    $1899($4_1 + 48 | 0 | 0, $2401 | 0);
    $88($4_1 + 60 | 0 | 0, $4_1 + 48 | 0 | 0, 67111083 | 0);
    $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 60 | 0 | 0) | 0;
    $1872($4_1 + 60 | 0 | 0) | 0;
    $1872($4_1 + 48 | 0 | 0) | 0;
    $55($4_1 + 24 | 0 | 0, 67110949 | 0) | 0;
    $814_1 = +HEAPF64[((HEAP32[($4_1 + 792 | 0) >> 2] | 0) + 24 | 0) >> 3];
    if (Math_abs($814_1) < 2147483647.0) {
     $2458 = ~~$814_1
    } else {
     $2458 = -2147483648
    }
    $1899($4_1 + 12 | 0 | 0, $2458 | 0);
    $91($4_1 + 36 | 0 | 0, $4_1 + 24 | 0 | 0, $4_1 + 12 | 0 | 0);
    $89(HEAP32[($4_1 + 796 | 0) >> 2] | 0 | 0, $4_1 + 36 | 0 | 0) | 0;
    $1872($4_1 + 36 | 0 | 0) | 0;
    $1872($4_1 + 12 | 0 | 0) | 0;
    $1872($4_1 + 24 | 0 | 0) | 0;
   }
  }
  global$0 = $4_1 + 800 | 0;
  return;
 }
 
 function $88($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $92($0_1 | 0, $1885(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $89($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $93(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $90($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $1885(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $91($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $92($0_1 | 0, $93(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $92($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $11_1 = 0, $20_1 = 0, $61_1 = 0, $19_1 = 0, $86_1 = 0, $30_1 = 0, $118_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $5_1;
  i64toi32_i32$2 = $220($4_1 + 19 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $61_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[$5_1 >> 2] = $61_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $11_1 = 8;
  HEAP32[($5_1 + $11_1 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + $11_1 | 0) >> 2] | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $4_1;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  $19_1 = $103(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $86_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $19_1;
  HEAP32[i64toi32_i32$1 >> 2] = $86_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $20_1 = 8;
  HEAP32[(i64toi32_i32$1 + $20_1 | 0) >> 2] = HEAP32[($4_1 + $20_1 | 0) >> 2] | 0;
  $66(HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0, 0 | 0);
  block : {
   if (($69($5_1 | 0) | 0) & 1 | 0) {
    break block
   }
   $66($5_1 | 0, $68($5_1 | 0) | 0 | 0);
  }
  $30_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $30_1 | 0;
 }
 
 function $93($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $41_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $10_1 = $1879(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $78(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, $68(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $94($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0, $20_1 = 0, $52_1 = 0, $65_1 = 0, $85_1 = 0, $144_1 = 0, $244_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0, $21_1 = 0, $122_1 = 0, $212_1 = 0, $585_1 = 0, $666_1 = 0, $2054 = 0;
  $4_1 = global$0 - 544 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 536 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 532 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!((HEAP32[($4_1 + 536 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($4_1 + 540 | 0) >> 2] = 67111587;
    break block1;
   }
   HEAP32[($4_1 + 32 | 0) >> 2] = HEAP32[($4_1 + 532 | 0) >> 2] | 0;
   $271(67111321 | 0, $4_1 + 32 | 0 | 0) | 0;
   $15_1 = 67137744;
   $16_1 = 2048;
   $17_1 = 0;
   block2 : {
    if (!$16_1) {
     break block2
    }
    wasm2js_memory_fill($15_1, $17_1, $16_1);
   }
   $19_1 = 67139792;
   $20_1 = 256;
   $21_1 = 0;
   block3 : {
    if (!$20_1) {
     break block3
    }
    wasm2js_memory_fill($19_1, $21_1, $20_1);
   }
   $49($4_1 + 520 | 0 | 0) | 0;
   $50($4_1 + 508 | 0 | 0) | 0;
   HEAP32[($4_1 + 504 | 0) >> 2] = $340((HEAP32[($4_1 + 536 | 0) >> 2] | 0) << 2 | 0 | 0) | 0;
   HEAP32[($4_1 + 500 | 0) >> 2] = 0;
   HEAP32[($4_1 + 496 | 0) >> 2] = 0;
   block4 : {
    label3 : while (1) {
     if (!((HEAP32[($4_1 + 496 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 536 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block4
     }
     HEAP32[($4_1 + 236 | 0) >> 2] = 0;
     HEAP32[($4_1 + 232 | 0) >> 2] = HEAP32[($4_1 + 500 | 0) >> 2] | 0;
     block5 : {
      label : while (1) {
       if (!((HEAP32[($4_1 + 232 | 0) >> 2] | 0) >>> 0 < ($291(HEAP32[($4_1 + 532 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
        break block5
       }
       $52_1 = 24;
       block7 : {
        block6 : {
         if (!((((HEAPU8[((HEAP32[($4_1 + 532 | 0) >> 2] | 0) + (HEAP32[($4_1 + 232 | 0) >> 2] | 0) | 0) >> 0] | 0) << $52_1 | 0) >> $52_1 | 0 | 0) == (92 | 0) & 1 | 0)) {
          break block6
         }
         $65_1 = 24;
         if (!((((HEAPU8[((HEAP32[($4_1 + 532 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 232 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0) << $65_1 | 0) >> $65_1 | 0 | 0) == (44 | 0) & 1 | 0)) {
          break block6
         }
         HEAP8[(($4_1 + 240 | 0) + (HEAP32[($4_1 + 236 | 0) >> 2] | 0) | 0) >> 0] = 44;
         HEAP32[($4_1 + 236 | 0) >> 2] = (HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 1 | 0;
         break block7;
        }
        $85_1 = 24;
        block8 : {
         if (!((((HEAPU8[((HEAP32[($4_1 + 532 | 0) >> 2] | 0) + (HEAP32[($4_1 + 232 | 0) >> 2] | 0) | 0) >> 0] | 0) << $85_1 | 0) >> $85_1 | 0 | 0) == (44 | 0) & 1 | 0)) {
          break block8
         }
         HEAP32[($4_1 + 236 | 0) >> 2] = (HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 1 | 0;
         break block5;
        }
        HEAP8[(($4_1 + 240 | 0) + (HEAP32[($4_1 + 236 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[((HEAP32[($4_1 + 532 | 0) >> 2] | 0) + (HEAP32[($4_1 + 232 | 0) >> 2] | 0) | 0) >> 0] | 0;
        HEAP32[($4_1 + 236 | 0) >> 2] = (HEAP32[($4_1 + 236 | 0) >> 2] | 0) + 1 | 0;
       }
       HEAP32[($4_1 + 232 | 0) >> 2] = (HEAP32[($4_1 + 232 | 0) >> 2] | 0) + 1 | 0;
       continue label;
      };
     }
     HEAP32[($4_1 + 500 | 0) >> 2] = (HEAP32[($4_1 + 500 | 0) >> 2] | 0) + (HEAP32[($4_1 + 236 | 0) >> 2] | 0) | 0;
     block10 : {
      block9 : {
       if (HEAP32[($4_1 + 236 | 0) >> 2] | 0) {
        break block9
       }
       break block10;
      }
      HEAP8[(($4_1 + 240 | 0) + ((HEAP32[($4_1 + 236 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] = 0;
      $122_1 = HEAP32[($4_1 + 500 | 0) >> 2] | 0;
      HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[($4_1 + 236 | 0) >> 2] | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = $4_1 + 240 | 0;
      HEAP32[$4_1 >> 2] = $122_1;
      $271(67111193 | 0, $4_1 | 0) | 0;
      HEAP32[($4_1 + 228 | 0) >> 2] = $340((HEAP32[($4_1 + 236 | 0) >> 2] | 0) << 0 | 0 | 0) | 0;
      block11 : {
       if (!((HEAP32[($4_1 + 496 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break block11
       }
       HEAP32[($4_1 + 224 | 0) >> 2] = 0;
       block12 : {
        label1 : while (1) {
         $144_1 = 24;
         if (!($229(((HEAPU8[(($4_1 + 240 | 0) + (HEAP32[($4_1 + 224 | 0) >> 2] | 0) | 0) >> 0] | 0) << $144_1 | 0) >> $144_1 | 0 | 0) | 0)) {
          break block12
         }
         HEAP32[($4_1 + 224 | 0) >> 2] = (HEAP32[($4_1 + 224 | 0) >> 2] | 0) + 1 | 0;
         continue label1;
        };
       }
       HEAP32[($4_1 + 220 | 0) >> 2] = HEAP32[($4_1 + 224 | 0) >> 2] | 0;
       block13 : {
        label2 : while (1) {
         if (!(((HEAPU8[(($4_1 + 240 | 0) + (HEAP32[($4_1 + 220 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break block13
         }
         HEAP8[(($4_1 + 240 | 0) + (HEAP32[($4_1 + 220 | 0) >> 2] | 0) | 0) >> 0] = HEAPU8[(($4_1 + 240 | 0) + ((HEAP32[($4_1 + 220 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] | 0;
         HEAP32[($4_1 + 220 | 0) >> 2] = (HEAP32[($4_1 + 220 | 0) >> 2] | 0) + 1 | 0;
         continue label2;
        };
       }
       HEAP8[(($4_1 + 240 | 0) + (($291($4_1 + 240 | 0 | 0) | 0) - 1 | 0) | 0) >> 0] = 0;
      }
      $288(HEAP32[($4_1 + 228 | 0) >> 2] | 0 | 0, $4_1 + 240 | 0 | 0) | 0;
      HEAP32[((HEAP32[($4_1 + 504 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 496 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($4_1 + 228 | 0) >> 2] | 0;
     }
     HEAP32[($4_1 + 496 | 0) >> 2] = (HEAP32[($4_1 + 496 | 0) >> 2] | 0) + 1 | 0;
     continue label3;
    };
   }
   HEAP32[($4_1 + 216 | 0) >> 2] = 2;
   block14 : {
    label4 : while (1) {
     if (!((HEAP32[($4_1 + 216 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 536 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block14
     }
     $212_1 = HEAP32[($4_1 + 216 | 0) >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 504 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 216 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[($4_1 + 16 | 0) >> 2] = $212_1;
     $271(67111552 | 0, $4_1 + 16 | 0 | 0) | 0;
     HEAP32[($4_1 + 216 | 0) >> 2] = (HEAP32[($4_1 + 216 | 0) >> 2] | 0) + 1 | 0;
     continue label4;
    };
   }
   $51($4_1 + 520 | 0 | 0);
   HEAP32[($4_1 + 212 | 0) >> 2] = 0;
   block15 : {
    label5 : while (1) {
     if (!((HEAP32[($4_1 + 212 | 0) >> 2] | 0) >>> 0 < ($291(HEAP32[((HEAP32[($4_1 + 504 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
      break block15
     }
     $244_1 = 24;
     $1883($4_1 + 520 | 0 | 0, ((HEAPU8[((HEAP32[((HEAP32[($4_1 + 504 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + (HEAP32[($4_1 + 212 | 0) >> 2] | 0) | 0) >> 0] | 0) << $244_1 | 0) >> $244_1 | 0 | 0);
     HEAP32[($4_1 + 212 | 0) >> 2] = (HEAP32[($4_1 + 212 | 0) >> 2] | 0) + 1 | 0;
     continue label5;
    };
   }
   $52($53($52(67143028 | 0, 67110862 | 0) | 0 | 0, $4_1 + 520 | 0 | 0) | 0 | 0, 67111580 | 0) | 0;
   HEAP32[($4_1 + 208 | 0) >> 2] = 2;
   block16 : {
    if (!((HEAP32[($4_1 + 536 | 0) >> 2] | 0 | 0) > (1 | 0) & 1 | 0)) {
     break block16
    }
    HEAP32[($4_1 + 204 | 0) >> 2] = 2;
    block17 : {
     label6 : while (1) {
      if (!((HEAP32[($4_1 + 204 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 536 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break block17
      }
      $52($52($52($441($52(67143028 | 0, 67110007 | 0) | 0 | 0, HEAP32[($4_1 + 204 | 0) >> 2] | 0 | 0) | 0 | 0, 67110785 | 0) | 0 | 0, HEAP32[((HEAP32[($4_1 + 504 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 204 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0 | 0, 67111330 | 0) | 0;
      block19 : {
       block18 : {
        if (!(($54(HEAP32[((HEAP32[($4_1 + 504 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 204 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 67110785 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
         break block18
        }
        $55($4_1 + 192 | 0 | 0, HEAP32[((HEAP32[($4_1 + 504 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 204 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
        $56($4_1 + 508 | 0 | 0, $4_1 + 192 | 0 | 0);
        $1872($4_1 + 192 | 0 | 0) | 0;
        break block19;
       }
       HEAP32[($4_1 + 208 | 0) >> 2] = HEAP32[($4_1 + 204 | 0) >> 2] | 0;
       break block17;
      }
      HEAP32[($4_1 + 204 | 0) >> 2] = (HEAP32[($4_1 + 204 | 0) >> 2] | 0) + 1 | 0;
      continue label6;
     };
    }
   }
   HEAP32[($4_1 + 188 | 0) >> 2] = 0;
   block20 : {
    label7 : while (1) {
     if (!((HEAP32[($4_1 + 188 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 536 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block20
     }
     $342(HEAP32[((HEAP32[($4_1 + 504 | 0) >> 2] | 0) + ((HEAP32[($4_1 + 188 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 188 | 0) >> 2] = (HEAP32[($4_1 + 188 | 0) >> 2] | 0) + 1 | 0;
     continue label7;
    };
   }
   $342(HEAP32[($4_1 + 504 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 184 | 0) >> 2] = $12($57($4_1 + 520 | 0 | 0) | 0 | 0) | 0;
   block22 : {
    block21 : {
     if ($27(HEAP32[($4_1 + 184 | 0) >> 2] | 0 | 0) | 0) {
      break block21
     }
     $4(HEAP32[($4_1 + 184 | 0) >> 2] | 0 | 0);
     HEAP32[($4_1 + 540 | 0) >> 2] = 67108864;
     HEAP32[($4_1 + 180 | 0) >> 2] = 1;
     break block22;
    }
    block23 : {
     if (!($58($4_1 + 508 | 0 | 0) | 0)) {
      break block23
     }
     HEAP32[($4_1 + 176 | 0) >> 2] = $4_1 + 508 | 0;
     HEAP32[($4_1 + 172 | 0) >> 2] = $59(HEAP32[($4_1 + 176 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4_1 + 168 | 0) >> 2] = $60(HEAP32[($4_1 + 176 | 0) >> 2] | 0 | 0) | 0;
     block24 : {
      label8 : while (1) {
       if (!(($61($4_1 + 172 | 0 | 0, $4_1 + 168 | 0 | 0) | 0) & 1 | 0)) {
        break block24
       }
       HEAP32[($4_1 + 164 | 0) >> 2] = $62($4_1 + 172 | 0 | 0) | 0;
       HEAP32[($4_1 + 160 | 0) >> 2] = $12($57(HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
       block26 : {
        block25 : {
         if (!(($27(HEAP32[($4_1 + 160 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
          break block25
         }
         $342(HEAP32[((HEAP32[($4_1 + 160 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
         $342(HEAP32[($4_1 + 160 | 0) >> 2] | 0 | 0);
         break block26;
        }
        block27 : {
         if (($29((HEAP32[((HEAP32[($4_1 + 160 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0) {
          break block27
         }
         $28((HEAP32[((HEAP32[($4_1 + 160 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0 | 0, +(+(0 | 0))) | 0;
        }
        HEAP32[($4_1 + 156 | 0) >> 2] = $42(HEAP32[($4_1 + 160 | 0) >> 2] | 0 | 0, 2 | 0, HEAP32[(HEAP32[($4_1 + 160 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
        $31((HEAP32[((HEAP32[($4_1 + 160 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0 | 0, +(+$43(HEAP32[($4_1 + 156 | 0) >> 2] | 0 | 0)));
        $34(HEAP32[($4_1 + 156 | 0) >> 2] | 0 | 0);
        $4(HEAP32[($4_1 + 160 | 0) >> 2] | 0 | 0);
       }
       $63($4_1 + 172 | 0 | 0) | 0;
       continue label8;
      };
     }
    }
    HEAP32[($4_1 + 152 | 0) >> 2] = $42(HEAP32[($4_1 + 184 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[(HEAP32[($4_1 + 184 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
    block28 : {
     if ((HEAP32[($4_1 + 152 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
      break block28
     }
     HEAP32[($4_1 + 540 | 0) >> 2] = 67111085;
     HEAP32[($4_1 + 180 | 0) >> 2] = 1;
     break block22;
    }
    HEAPF64[($4_1 + 144 | 0) >> 3] = +$43(HEAP32[($4_1 + 152 | 0) >> 2] | 0 | 0);
    block29 : {
     if (!(($95(+(+HEAPF64[($4_1 + 144 | 0) >> 3])) | 0) & 1 | 0)) {
      break block29
     }
     $4(HEAP32[($4_1 + 184 | 0) >> 2] | 0 | 0);
     $288(67137744 | 0, 67111103 | 0) | 0;
     HEAP32[($4_1 + 540 | 0) >> 2] = 67137744;
     HEAP32[($4_1 + 180 | 0) >> 2] = 1;
     break block22;
    }
    $47(HEAP32[($4_1 + 184 | 0) >> 2] | 0 | 0);
    $288(67137744 | 0, 67111587 | 0) | 0;
    $285(67137744 | 0, 67111121 | 0) | 0;
    $285(67137744 | 0, 67110893 | 0) | 0;
    $285(67137744 | 0, 67139792 | 0) | 0;
    $285(67137744 | 0, 67111503 | 0) | 0;
    $285(67137744 | 0, 67110881 | 0) | 0;
    $1904($4_1 + 132 | 0 | 0, +(+HEAPF64[($4_1 + 144 | 0) >> 3]));
    $285(67137744 | 0, $57($4_1 + 132 | 0 | 0) | 0 | 0) | 0;
    $1872($4_1 + 132 | 0 | 0) | 0;
    $285(67137744 | 0, 67111503 | 0) | 0;
    $285(67137744 | 0, 67111333 | 0) | 0;
    $50($4_1 + 120 | 0 | 0) | 0;
    +$46(HEAP32[($4_1 + 152 | 0) >> 2] | 0 | 0);
    $52($441($52(67143028 | 0, 67110958 | 0) | 0 | 0, HEAP32[(0 + 67137728 | 0) >> 2] | 0 | 0) | 0 | 0, 67111584 | 0) | 0;
    HEAP32[($4_1 + 116 | 0) >> 2] = 0;
    block30 : {
     label9 : while (1) {
      if (!((HEAP32[($4_1 + 116 | 0) >> 2] | 0 | 0) < (HEAP32[(0 + 67137728 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break block30
      }
      $49($4_1 + 104 | 0 | 0) | 0;
      $90($4_1 + 104 | 0 | 0, 67111055 | 0) | 0;
      $1899($4_1 + 92 | 0 | 0, HEAP32[(67135680 + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 5 | 0) | 0) >> 2] | 0 | 0);
      $90($4_1 + 104 | 0 | 0, $57($4_1 + 92 | 0 | 0) | 0 | 0) | 0;
      $90($4_1 + 104 | 0 | 0, 67111074 | 0) | 0;
      $49($4_1 + 80 | 0 | 0) | 0;
      $87($4_1 + 80 | 0 | 0, 67135680 + ((HEAP32[($4_1 + 116 | 0) >> 2] | 0) << 5 | 0) | 0 | 0);
      $90($4_1 + 104 | 0 | 0, 67110871 | 0) | 0;
      $90($4_1 + 104 | 0 | 0, $57($4_1 + 80 | 0 | 0) | 0 | 0) | 0;
      $90($4_1 + 104 | 0 | 0, 67110917 | 0) | 0;
      $90($4_1 + 104 | 0 | 0, 67108906 | 0) | 0;
      $56($4_1 + 120 | 0 | 0, $4_1 + 104 | 0 | 0);
      $1872($4_1 + 80 | 0 | 0) | 0;
      $1872($4_1 + 92 | 0 | 0) | 0;
      $1872($4_1 + 104 | 0 | 0) | 0;
      HEAP32[($4_1 + 116 | 0) >> 2] = (HEAP32[($4_1 + 116 | 0) >> 2] | 0) + 1 | 0;
      continue label9;
     };
    }
    HEAP32[($4_1 + 76 | 0) >> 2] = 0;
    block31 : {
     label10 : while (1) {
      if (!((HEAP32[($4_1 + 76 | 0) >> 2] | 0) >>> 0 < ($58($4_1 + 120 | 0 | 0) | 0) >>> 0 & 1 | 0)) {
       break block31
      }
      HEAP32[($4_1 + 72 | 0) >> 2] = (($277() | 0) >>> 0) % (($58($4_1 + 120 | 0 | 0) | 0) >>> 0) | 0;
      HEAP32[($4_1 + 68 | 0) >> 2] = (($277() | 0) >>> 0) % (($58($4_1 + 120 | 0 | 0) | 0) >>> 0) | 0;
      $97($4_1 + 56 | 0 | 0, $96($4_1 + 120 | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
      $585_1 = $96($4_1 + 120 | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0;
      $98($96($4_1 + 120 | 0 | 0, HEAP32[($4_1 + 72 | 0) >> 2] | 0 | 0) | 0 | 0, $585_1 | 0) | 0;
      $98($96($4_1 + 120 | 0 | 0, HEAP32[($4_1 + 68 | 0) >> 2] | 0 | 0) | 0 | 0, $4_1 + 56 | 0 | 0) | 0;
      $1872($4_1 + 56 | 0 | 0) | 0;
      HEAP32[($4_1 + 76 | 0) >> 2] = (HEAP32[($4_1 + 76 | 0) >> 2] | 0) + 1 | 0;
      continue label10;
     };
    }
    HEAP32[($4_1 + 52 | 0) >> 2] = 0;
    HEAP32[($4_1 + 48 | 0) >> 2] = $4_1 + 120 | 0;
    HEAP32[($4_1 + 44 | 0) >> 2] = $59(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($4_1 + 40 | 0) >> 2] = $60(HEAP32[($4_1 + 48 | 0) >> 2] | 0 | 0) | 0;
    block32 : {
     label11 : while (1) {
      if (!(($61($4_1 + 44 | 0 | 0, $4_1 + 40 | 0 | 0) | 0) & 1 | 0)) {
       break block32
      }
      HEAP32[($4_1 + 36 | 0) >> 2] = $62($4_1 + 44 | 0 | 0) | 0;
      $285(67137744 | 0, $57(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
      block34 : {
       block33 : {
        if (!((HEAP32[($4_1 + 52 | 0) >> 2] | 0) >>> 0 < (($58($4_1 + 120 | 0 | 0) | 0) - 1 | 0) >>> 0 & 1 | 0)) {
         break block33
        }
        $285(67137744 | 0, 67111504 | 0) | 0;
        break block34;
       }
       $285(67137744 | 0, 67111584 | 0) | 0;
      }
      HEAP32[($4_1 + 52 | 0) >> 2] = (HEAP32[($4_1 + 52 | 0) >> 2] | 0) + 1 | 0;
      $63($4_1 + 44 | 0 | 0) | 0;
      continue label11;
     };
    }
    $285(67137744 | 0, 67111330 | 0) | 0;
    $285(67137744 | 0, 67111118 | 0) | 0;
    $34(HEAP32[($4_1 + 152 | 0) >> 2] | 0 | 0);
    $4(HEAP32[($4_1 + 184 | 0) >> 2] | 0 | 0);
    HEAP32[($4_1 + 540 | 0) >> 2] = 67137744;
    HEAP32[($4_1 + 180 | 0) >> 2] = 1;
    $64($4_1 + 120 | 0 | 0) | 0;
   }
   $64($4_1 + 508 | 0 | 0) | 0;
   $1872($4_1 + 520 | 0 | 0) | 0;
  }
  $666_1 = HEAP32[($4_1 + 540 | 0) >> 2] | 0;
  global$0 = $4_1 + 544 | 0;
  return $666_1 | 0;
 }
 
 function $95($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $3_1 = 0, $8$hi = 0, $9$hi = 0, $10$hi = 0, $11$hi = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $32_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF64[($3_1 + 8 | 0) >> 3] = $0_1;
  wasm2js_scratch_store_f64(+(+HEAPF64[($3_1 + 8 | 0) >> 3]));
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $8$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 2147483647;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = 2146435072;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$1 = $10$hi;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $11$hi;
  i64toi32_i32$3 = 0;
  if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
   $11_1 = 1
  } else {
   if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
    if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
     $12_1 = 0
    } else {
     $12_1 = 1
    }
    $13_1 = $12_1;
   } else {
    $13_1 = 0
   }
   $11_1 = $13_1;
  }
  return $11_1 & 1 | 0 | 0;
 }
 
 function $96($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $32_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return (HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0 | 0;
 }
 
 function $97($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $19_1 = 0, $21_1 = 0, $20_1 = 0, i64toi32_i32$1 = 0, $82_1 = 0, $31_1 = 0, $117_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  $100($99(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  $101($5_1 | 0, $4_1 + 3 | 0 | 0, $4_1 + 2 | 0 | 0) | 0;
  block1 : {
   block : {
    if (($69(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
     break block
    }
    $19_1 = $102(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    $20_1 = $103($5_1 | 0) | 0;
    i64toi32_i32$0 = HEAP32[$19_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($19_1 + 4 | 0) >> 2] | 0;
    $82_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $20_1;
    HEAP32[i64toi32_i32$0 >> 2] = $82_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $21_1 = 8;
    HEAP32[(i64toi32_i32$0 + $21_1 | 0) >> 2] = HEAP32[($19_1 + $21_1 | 0) >> 2] | 0;
    $66($5_1 | 0, $104($5_1 | 0) | 0 | 0);
    break block1;
   }
   $1876($5_1 | 0, $106($105(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0, $107(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  }
  $31_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $31_1 | 0;
 }
 
 function $98($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, i64toi32_i32$0 = 0, $30_1 = 0, $32_1 = 0, $31_1 = 0, i64toi32_i32$1 = 0, $133_1 = 0, $52_1 = 0, $197_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block6 : {
   block : {
    if (!(($5_1 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $108($5_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
    block7 : {
     block1 : {
      if (($69($5_1 | 0) | 0) & 1 | 0) {
       break block1
      }
      block5 : {
       block2 : {
        if (($69(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
         break block2
        }
        HEAP32[$4_1 >> 2] = $104($5_1 | 0) | 0;
        block3 : {
         if (!(($104($5_1 | 0) | 0) >>> 0 < ($104(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
          break block3
         }
         $109($5_1 | 0, ($104(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) - ($104($5_1 | 0) | 0) | 0 | 0);
        }
        $30_1 = $102(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
        $31_1 = $103($5_1 | 0) | 0;
        i64toi32_i32$0 = HEAP32[$30_1 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($30_1 + 4 | 0) >> 2] | 0;
        $133_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $31_1;
        HEAP32[i64toi32_i32$0 >> 2] = $133_1;
        HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
        $32_1 = 8;
        HEAP32[(i64toi32_i32$0 + $32_1 | 0) >> 2] = HEAP32[($30_1 + $32_1 | 0) >> 2] | 0;
        block4 : {
         if (!((HEAP32[$4_1 >> 2] | 0) >>> 0 > ($104($5_1 | 0) | 0) >>> 0 & 1 | 0)) {
          break block4
         }
         $75($5_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
        }
        break block5;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $1882($5_1 | 0, $78(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $68(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
       break block6;
      }
      break block7;
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = $1881($5_1 | 0, $78(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $68(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
     break block6;
    }
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
  }
  $52_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $52_1 | 0;
 }
 
 function $99($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $222(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $100($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $101($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $35_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $164($6_1 | 0) | 0;
  $223($6_1 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $141(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $103($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $142(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0, $37_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $10_1 = ((HEAPU8[(($102(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0) & 255 | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $105($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[($102(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $106($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $107($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = HEAP32[(($102(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $225(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $111($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $25_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($4_1 + 8 | 0) >> 2] = 0;
  return $4_1 | 0;
 }
 
 function $112($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $113($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $113($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $114($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $114($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $115($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $20_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = 0;
  return $5_1 | 0;
 }
 
 function $116($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $117($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $117($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $23_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $118($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $119($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $124($4_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $126((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $122($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($127($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (12 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $123($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $125(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $15_1 = 0, $12_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) != (HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $12_1 = $121($5_1 | 0) | 0;
    $15_1 = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + -12 | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $15_1;
    $129($12_1 | 0, $128($15_1 | 0) | 0 | 0);
    continue label;
   };
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $125($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $131(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 12) | 0, 4 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $126($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $137(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $127($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $138((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $128($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $130(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $130($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $1872(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $131($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  block1 : {
   block : {
    if (!(($132(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    $133(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
    break block1;
   }
   $134(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $132($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) >>> 0 > 8 >>> 0 & 1 | 0 | 0;
 }
 
 function $133($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $135(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $134($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $136(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $135($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $1862(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $1855(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $137($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $138($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $139(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $139($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $140($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $141($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $143($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $47_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $6_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = $156($6_1 + (HEAP32[((HEAP32[$6_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $145($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $146($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $11_1 = 0, $15_1 = 0, $23_1 = 0, $25_1 = 0, $83_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block : {
   if (($157($4_1 + 76 | 0 | 0) | 0) & 1 | 0) {
    break block
   }
   $11_1 = 24;
   $15_1 = 24;
   $159($4_1 + 76 | 0 | 0, (($158($4_1 | 0, (32 << $11_1 | 0) >> $11_1 | 0 | 0) | 0) << $15_1 | 0) >> $15_1 | 0 | 0) | 0;
  }
  $23_1 = 24;
  $25_1 = (($160($4_1 + 76 | 0 | 0) | 0) << $23_1 | 0) >> $23_1 | 0;
  global$0 = $3_1 + 16 | 0;
  return $25_1 | 0;
 }
 
 function $147($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $8_1 = 0, $57_1 = 0, $99_1 = 0, $347_1 = 0;
  $8_1 = global$0 - 64 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($8_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($8_1 + 48 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $3_1;
  HEAP32[($8_1 + 40 | 0) >> 2] = $4_1;
  HEAP8[($8_1 + 39 | 0) >> 0] = $5_1;
  block1 : {
   block : {
    if (!((HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break block
    }
    HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
    break block1;
   }
   HEAP32[($8_1 + 32 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) - (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0;
   HEAP32[($8_1 + 28 | 0) >> 2] = $151(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0) | 0;
   block3 : {
    block2 : {
     if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) > (HEAP32[($8_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block2
     }
     HEAP32[($8_1 + 28 | 0) >> 2] = (HEAP32[($8_1 + 28 | 0) >> 2] | 0) - (HEAP32[($8_1 + 32 | 0) >> 2] | 0) | 0;
     break block3;
    }
    HEAP32[($8_1 + 28 | 0) >> 2] = 0;
   }
   HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 48 | 0) >> 2] | 0) - (HEAP32[($8_1 + 52 | 0) >> 2] | 0) | 0;
   block4 : {
    if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break block4
    }
    block5 : {
     if (!(($152(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 52 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block5
     }
     HEAP32[($8_1 + 56 | 0) >> 2] = 0;
     HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     break block1;
    }
   }
   block6 : {
    if (!((HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break block6
    }
    $57_1 = 24;
    $153($8_1 + 12 | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0, ((HEAPU8[($8_1 + 39 | 0) >> 0] | 0) << $57_1 | 0) >> $57_1 | 0 | 0) | 0;
    block8 : {
     block7 : {
      if (!(($152(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, $154($8_1 + 12 | 0 | 0) | 0 | 0, HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break block7
      }
      HEAP32[($8_1 + 56 | 0) >> 2] = 0;
      HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = 1;
      break block8;
     }
     HEAP32[($8_1 + 8 | 0) >> 2] = 0;
    }
    $1872($8_1 + 12 | 0 | 0) | 0;
    block9 : {
     switch (HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0) {
     case 1:
      break block1;
     default:
      break block9;
     };
    }
   }
   HEAP32[($8_1 + 24 | 0) >> 2] = (HEAP32[($8_1 + 44 | 0) >> 2] | 0) - (HEAP32[($8_1 + 48 | 0) >> 2] | 0) | 0;
   block10 : {
    if (!((HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
     break block10
    }
    block11 : {
     if (!(($152(HEAP32[($8_1 + 56 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 48 | 0) >> 2] | 0 | 0, HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) | 0 | 0) != (HEAP32[($8_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break block11
     }
     HEAP32[($8_1 + 56 | 0) >> 2] = 0;
     HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
     break block1;
    }
   }
   $155(HEAP32[($8_1 + 40 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
   HEAP32[($8_1 + 60 | 0) >> 2] = HEAP32[($8_1 + 56 | 0) >> 2] | 0;
  }
  $99_1 = HEAP32[($8_1 + 60 | 0) >> 2] | 0;
  global$0 = $8_1 + 64 | 0;
  return $99_1 | 0;
 }
 
 function $148($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0 | 0;
 }
 
 function $149($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $161(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $150($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $291(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $151($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $152($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $11_1 = 0, $45_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $11_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$6_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($6_1, HEAP32[($5_1 + 8 | 0) >> 2] | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $11_1 | 0;
 }
 
 function $153($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $15_1 = 0, $63_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $79($6_1 | 0, $5_1 + 6 | 0 | 0, $5_1 + 5 | 0 | 0) | 0;
  $15_1 = 24;
  $1880($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, ((HEAPU8[($5_1 + 7 | 0) >> 0] | 0) << $15_1 | 0) >> $15_1 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $154($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $163($162(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $155($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $156($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $165(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $157($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAPU8[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function $158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $21_1 = 0, $17_1 = 0, $77_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $608($4_1 + 4 | 0 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $14_1 = 24;
  $17_1 = $167($166($4_1 + 4 | 0 | 0) | 0 | 0, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $14_1 | 0) >> $14_1 | 0 | 0) | 0;
  $783($4_1 + 4 | 0 | 0) | 0;
  $21_1 = 24;
  global$0 = $4_1 + 16 | 0;
  return ($17_1 << $21_1 | 0) >> $21_1 | 0 | 0;
 }
 
 function $159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $6_1 = 0, $4_1 = 0, $7_1 = 0, $5_1 = 0, $25_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP8[($5_1 + 4 | 0) >> 0] = 1;
  $6_1 = $5_1;
  $7_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  HEAP8[$6_1 >> 0] = $7_1;
  HEAP8[($6_1 + 1 | 0) >> 0] = $7_1 >>> 8 | 0;
  HEAP8[($6_1 + 2 | 0) >> 0] = $7_1 >>> 16 | 0;
  HEAP8[($6_1 + 3 | 0) >> 0] = $7_1 >>> 24 | 0;
  return $6_1 | 0;
 }
 
 function $160($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  return HEAPU8[$4_1 >> 0] | 0 | ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($4_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($4_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0;
 }
 
 function $161($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $610($5_1 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $162($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $42_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!(($69($4_1 | 0) | 0) & 1 | 0)) {
     break block
    }
    $9_1 = $70($4_1 | 0) | 0;
    break block1;
   }
   $9_1 = $73($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $163($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $164($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $166($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $26_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $788(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 67144512 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $9_1 = 0, $13_1 = 0, $15_1 = 0, $56_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $9_1 = 24;
  $13_1 = 24;
  $15_1 = ((FUNCTION_TABLE[HEAP32[((HEAP32[$5_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($5_1, ((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) << $9_1 | 0) >> $9_1 | 0) | 0) << $13_1 | 0) >> $13_1 | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $168($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $9_1 = 0, $42_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!(($69($4_1 | 0) | 0) & 1 | 0)) {
     break block
    }
    $9_1 = $105($4_1 | 0) | 0;
    break block1;
   }
   $9_1 = $169($4_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $9_1 | 0;
 }
 
 function $169($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $6_1 = 0, $27_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $6_1 = $170($102(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $170($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $179(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $172($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $53_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  HEAP32[$6_1 >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 12) | 0;
  return $6_1 | 0;
 }
 
 function $173($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $180(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $174($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $3_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  HEAP32[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return $4_1 | 0;
 }
 
 function $175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $32_1 = 0, $115_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = $181($5_1 | 0) | 0;
  block : {
   if (!((HEAP32[($4_1 + 20 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $182($5_1 | 0);
   wasm2js_trap();
  }
  HEAP32[($4_1 + 12 | 0) >> 2] = $122($5_1 | 0) | 0;
  block2 : {
   block1 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0) >>> 0 >= ((HEAP32[($4_1 + 16 | 0) >> 2] | 0) >>> 1 | 0) >>> 0 & 1 | 0)) {
     break block1
    }
    HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    break block2;
   }
   HEAP32[($4_1 + 8 | 0) >> 2] = (HEAP32[($4_1 + 12 | 0) >> 2] | 0) << 1 | 0;
   HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($183($4_1 + 8 | 0 | 0, $4_1 + 20 | 0 | 0) | 0) >> 2] | 0;
  }
  $32_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $32_1 | 0;
 }
 
 function $176($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $7_1 = 0, $26_1 = 0, $31_1 = 0, $33_1 = 0, $124_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  $7_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $7_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  $184($7_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  block1 : {
   block : {
    if (HEAP32[($6_1 + 20 | 0) >> 2] | 0) {
     break block
    }
    HEAP32[$7_1 >> 2] = 0;
    break block1;
   }
   $186($6_1 | 0, $185($7_1 | 0) | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0);
   HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2] | 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  $26_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 16 | 0) >> 2] | 0, 12) | 0;
  HEAP32[($7_1 + 8 | 0) >> 2] = $26_1;
  HEAP32[($7_1 + 4 | 0) >> 2] = $26_1;
  $31_1 = (HEAP32[$7_1 >> 2] | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 12) | 0;
  HEAP32[($187($7_1 | 0) | 0) >> 2] = $31_1;
  $33_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $33_1 | 0;
 }
 
 function $177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $120($5_1 | 0);
  HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(0 - (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0 | 0) / (12 | 0) | 0) | 0, 12) | 0;
  $188($121($5_1 | 0) | 0 | 0, $128(HEAP32[$5_1 >> 2] | 0 | 0) | 0 | 0, $128(HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $128(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  $189($5_1 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0 | 0);
  $189($5_1 + 4 | 0 | 0, (HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 8 | 0 | 0);
  $189($80($5_1 | 0) | 0 | 0, $187(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0 | 0);
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $190($5_1 | 0, $58($5_1 | 0) | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $13_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
  $191($4_1 | 0);
  block : {
   if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break block
   }
   $123($185($4_1 | 0) | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $192($4_1 | 0) | 0 | 0);
  }
  $13_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $180($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $97(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $181($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $15_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $194($193(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $195() | 0;
  $15_1 = HEAP32[($196($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $182($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $197(67109302 | 0);
  wasm2js_trap();
 }
 
 function $183($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $198(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $184($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $6_1 = 0, $44_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $115($6_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $206($6_1 + 4 | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $185($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $208((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $186($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $207(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return;
 }
 
 function $187($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $209((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $188($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $15_1 = 0, $7_1 = 0, $8_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $7_1 = HEAP32[$6_1 >> 2] | 0;
  $8_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  $15_1 = Math_imul(((HEAP32[($6_1 + 4 | 0) >> 2] | 0) - (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0 | 0) / (12 | 0) | 0, 12);
  block : {
   if (!$15_1) {
    break block
   }
   wasm2js_memory_copy($7_1, $8_1, $15_1);
  }
  return;
 }
 
 function $189($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[(HEAP32[($4_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  return;
 }
 
 function $190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return;
 }
 
 function $191($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $215($4_1 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $192($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $4_1 = 0, $10_1 = 0, $39_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $10_1 = ((HEAP32[($216($4_1 | 0) | 0) >> 2] | 0) - (HEAP32[$4_1 >> 2] | 0) | 0 | 0) / (12 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $193($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $201((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $200(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $195() {
  var $3_1 = 0;
  return $202() | 0 | 0;
 }
 
 function $196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $199(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1941(8 | 0) | 0;
  $205($5_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  fimport$1($5_1 | 0, 67134280 | 0, 1 | 0);
  wasm2js_trap();
 }
 
 function $198($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $57_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!(($203($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break block1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $57_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!(($203($4_1 + 15 | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    $14_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    break block1;
   }
   $14_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $200($0_1) {
  $0_1 = $0_1 | 0;
  var $12_1 = 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return 357913941 | 0;
 }
 
 function $201($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $204(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $202() {
  var $2_1 = 0;
  return 2147483647 | 0;
 }
 
 function $203($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $38_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = $2_1;
  return (HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0 | 0;
 }
 
 function $204($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $38_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $1867($5_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[$5_1 >> 2] = 67134260 + 8 | 0;
  global$0 = $4_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $206($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $207($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $54_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  block : {
   if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0) >>> 0 > ($194(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) | 0) >>> 0 & 1 | 0)) {
    break block
   }
   $210();
   wasm2js_trap();
  }
  $15_1 = $211(Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 12) | 0, 4 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $208($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $214((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $209($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $179(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $210() {
  var $1_1 = 0;
  $1_1 = $1941(4 | 0) | 0;
  $1981($1_1 | 0) | 0;
  fimport$1($1_1 | 0, 67134172 | 0, 2 | 0);
  wasm2js_trap();
 }
 
 function $211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $15_1 = 0, $62_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!(($132(HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0) & 1 | 0)) {
     break block
    }
    HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = $212(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[$4_1 >> 2] | 0 | 0) | 0;
    break block1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $213(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  }
  $15_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $15_1 | 0;
 }
 
 function $212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $31_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $7_1 = $1857(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $213($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $1851(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $214($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function $215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $217(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $216($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $7_1 = 0, $29_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $7_1 = $218((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $217($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $14_1 = 0, $11_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) != (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break block
    }
    $11_1 = $185($5_1 | 0) | 0;
    $14_1 = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + -12 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $14_1;
    $129($11_1 | 0, $128($14_1 | 0) | 0 | 0);
    continue label;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $218($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $139(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $219($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $5_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $5_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  return $5_1 | 0;
 }
 
 function $220($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $10_1 = 0, $40_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  block : {
   if (($69(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0) & 1 | 0) {
    break block
   }
   $221(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  $10_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $221($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((global$0 - 16 | 0) + 12 | 0) >> 2] = $0_1;
  return;
 }
 
 function $222($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $24_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = $224(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $223($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $224($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $14_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  return;
 }
 
 function $226() {
  $44();
  return;
 }
 
 function $227($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$318($0_1 | 0, 0 | 0));
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0.0, i64toi32_i32$2 = 0, $2_1 = 0.0, $9_1 = 0, $11_1 = 0, $10_1 = 0, $10$hi = 0, $1_1 = 0, $1$hi = 0;
  $2_1 = +fimport$2() / 1.0e3;
  if (Math_abs($2_1) < 9223372036854775808.0) {
   i64toi32_i32$0 = $2_1;
   if (Math_abs(i64toi32_i32$0) >= 1.0) {
    if (i64toi32_i32$0 > 0.0) {
     $9_1 = ~~Math_min(Math_floor(i64toi32_i32$0 / 4294967296.0), 4294967296.0 - 1.0) >>> 0
    } else {
     $9_1 = ~~Math_ceil((i64toi32_i32$0 - +(~~i64toi32_i32$0 >>> 0 >>> 0)) / 4294967296.0) >>> 0
    }
    $11_1 = $9_1;
   } else {
    $11_1 = 0
   }
   i64toi32_i32$1 = $11_1;
   $10_1 = ~~i64toi32_i32$0 >>> 0;
   $10$hi = i64toi32_i32$1;
  } else {
   i64toi32_i32$1 = -2147483648;
   $10_1 = 0;
   $10$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $10$hi;
  $1_1 = $10_1;
  $1$hi = i64toi32_i32$1;
  block : {
   if (!$0_1) {
    break block
   }
   i64toi32_i32$2 = $0_1;
   HEAP32[i64toi32_i32$2 >> 2] = $1_1;
   HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function $229($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 | 0) == (9 | 0) | 0 | 0;
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $231() {
  return 67140052 | 0;
 }
 
 function $232($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $233($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $236($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return 0 | 0;
 }
 
 function $238($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $239($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $240($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $241() {
  $239(67140056 | 0);
  return 67140060 | 0;
 }
 
 function $242() {
  $240(67140056 | 0);
 }
 
 function $243($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break block
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $244($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($2_1) {
   wasm2js_memory_copy($0_1, $1_1, $2_1)
  }
  return $0_1 | 0;
 }
 
 function $245($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  block : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break block
   }
   return $244($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  block6 : {
   block1 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break block1
    }
    block3 : {
     block2 : {
      if ($0_1 & 3 | 0) {
       break block2
      }
      $2_1 = $0_1;
      break block3;
     }
     block4 : {
      if ($2_1) {
       break block4
      }
      $2_1 = $0_1;
      break block3;
     }
     $2_1 = $0_1;
     label : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break block3
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label
      }
      break label;
     };
    }
    $4_1 = $3_1 & -4 | 0;
    block5 : {
     if ($3_1 >>> 0 < 64 >>> 0) {
      break block5
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break block5
     }
     label1 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label1
      }
      break label1;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break block6
    }
    label2 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label2
     }
     break block6;
    };
   }
   block7 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break block7
    }
    $2_1 = $0_1;
    break block6;
   }
   block8 : {
    $4_1 = $3_1 + -4 | 0;
    if ($0_1 >>> 0 <= $4_1 >>> 0) {
     break block8
    }
    $2_1 = $0_1;
    break block6;
   }
   $2_1 = $0_1;
   label3 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label3
    }
    break label3;
   };
  }
  block9 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break block9
   }
   label4 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label4
    }
    break label4;
   };
  }
  return $0_1 | 0;
 }
 
 function $246($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  block1 : {
   block : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break block
    }
    $4_1 = 0;
    if ($243($2_1 | 0) | 0) {
     break block1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   block2 : {
    $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if ($1_1 >>> 0 <= ($3_1 - $4_1 | 0) >>> 0) {
     break block2
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   block5 : {
    block3 : {
     if ((HEAP32[($2_1 + 80 | 0) >> 2] | 0 | 0) < (0 | 0)) {
      break block3
     }
     if (!$1_1) {
      break block3
     }
     $3_1 = $1_1;
     block4 : {
      label : while (1) {
       $5_1 = $0_1 + $3_1 | 0;
       if ((HEAPU8[($5_1 + -1 | 0) >> 0] | 0 | 0) == (10 | 0)) {
        break block4
       }
       $3_1 = $3_1 + -1 | 0;
       if (!$3_1) {
        break block3
       }
       continue label;
      };
     }
     $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
     if ($4_1 >>> 0 < $3_1 >>> 0) {
      break block1
     }
     $1_1 = $1_1 - $3_1 | 0;
     $4_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
     break block5;
    }
    $5_1 = $0_1;
    $3_1 = 0;
   }
   $245($4_1 | 0, $5_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $247($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = Math_imul($2_1, $1_1);
  block1 : {
   block : {
    if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break block
    }
    $0_1 = $246($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    break block1;
   }
   $5_1 = $232($3_1 | 0) | 0;
   $0_1 = $246($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
   if (!$5_1) {
    break block1
   }
   $233($3_1 | 0);
  }
  block2 : {
   if (($0_1 | 0) != ($4_1 | 0)) {
    break block2
   }
   return ($1_1 ? $2_1 : 0) | 0;
  }
  return ($0_1 >>> 0) / ($1_1 >>> 0) | 0 | 0;
 }
 
 function $248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  block2 : {
   block : {
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break block
    }
    block1 : {
     if (!($243($0_1 | 0) | 0)) {
      break block1
     }
     $3_1 = -1;
     break block2;
    }
    $3_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
   }
   block3 : {
    $4_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == ($3_1 | 0)) {
     break block3
    }
    $3_1 = $1_1 & 255 | 0;
    if ((HEAP32[($0_1 + 80 | 0) >> 2] | 0 | 0) == ($3_1 | 0)) {
     break block3
    }
    HEAP32[($0_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $1_1;
    break block2;
   }
   block4 : {
    if ((FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, $2_1 + 15 | 0, 1) | 0 | 0) == (1 | 0)) {
     break block4
    }
    $3_1 = -1;
    break block2;
   }
   $3_1 = HEAPU8[($2_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $250($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $250($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  block1 : {
   block : {
    $2_1 = HEAP32[($1_1 + 76 | 0) >> 2] | 0;
    if (($2_1 | 0) < (0 | 0)) {
     break block
    }
    if (!$2_1) {
     break block1
    }
    if (($2_1 & 1073741823 | 0 | 0) != (HEAP32[(($274() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break block1
    }
   }
   block2 : {
    $2_1 = $0_1 & 255 | 0;
    if (($2_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break block2
    }
    $3_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break block2
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = $0_1;
    return $2_1 | 0;
   }
   return $248($1_1 | 0, $2_1 | 0) | 0 | 0;
  }
  return $251($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $251($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  block : {
   $2_1 = $1_1 + 76 | 0;
   if (!($252($2_1 | 0) | 0)) {
    break block
   }
   $232($1_1 | 0) | 0;
  }
  block2 : {
   block1 : {
    $3_1 = $0_1 & 255 | 0;
    if (($3_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    $4_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
    if (($4_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[$4_1 >> 0] = $0_1;
    break block2;
   }
   $3_1 = $248($1_1 | 0, $3_1 | 0) | 0;
  }
  block3 : {
   if (!(($253($2_1 | 0) | 0) & 1073741824 | 0)) {
    break block3
   }
   $254($2_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $252($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $253($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $254($0_1) {
  $0_1 = $0_1 | 0;
  $234($0_1 | 0, 1 | 0) | 0;
 }
 
 function $255($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = $290(HEAP32[($231() | 0) >> 2] | 0 | 0) | 0;
  block1 : {
   block : {
    if ((HEAP32[(0 + 67135268 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block
    }
    $2_1 = 1;
    break block1;
   }
   $2_1 = !($232(67135192 | 0) | 0);
  }
  $3_1 = HEAP32[(0 + 67135264 | 0) >> 2] | 0;
  $4_1 = HEAP32[(0 + 67135328 | 0) >> 2] | 0;
  block2 : {
   if (!$0_1) {
    break block2
   }
   if (!(HEAPU8[$0_1 >> 0] | 0)) {
    break block2
   }
   $247($0_1 | 0, $291($0_1 | 0) | 0 | 0, 1 | 0, 67135192 | 0) | 0;
   $249(58 | 0, 67135192 | 0) | 0;
   $249(32 | 0, 67135192 | 0) | 0;
  }
  $247($1_1 | 0, $291($1_1 | 0) | 0 | 0, 1 | 0, 67135192 | 0) | 0;
  $249(10 | 0, 67135192 | 0) | 0;
  HEAP32[(0 + 67135328 | 0) >> 2] = $4_1;
  HEAP32[(0 + 67135264 | 0) >> 2] = $3_1;
  block3 : {
   if ($2_1) {
    break block3
   }
   $233(67135192 | 0);
  }
 }
 
 function $256($0_1) {
  $0_1 = +$0_1;
  $0_1 = $0_1 - $0_1;
  return +($0_1 / $0_1);
 }
 
 function $257($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  return +($1_1 * +$258(+($0_1 ? -$1_1 : $1_1)));
 }
 
 function $258($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $259($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$257($0_1 | 0, +(3105036184601417870297958.0e207)));
 }
 
 function $260($0_1) {
  $0_1 = $0_1 | 0;
  return +(+$257($0_1 | 0, +(1.2882297539194267e-231)));
 }
 
 function $261($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $262($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $11_1 = 0.0, $9_1 = 0, i64toi32_i32$4 = 0, $9$hi = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $24_1 = 0, $10_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $12_1 = 0.0, $10$hi = 0, $55_1 = 0.0, $57_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $263(+$0_1) | 0;
  $4_1 = $263(+$1_1) | 0;
  $5_1 = $4_1 & 2047 | 0;
  $6_1 = $5_1 + -1086 | 0;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $8$hi = i64toi32_i32$0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $9_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $9$hi = i64toi32_i32$0;
  block3 : {
   block1 : {
    block : {
     if (($3_1 + -2047 | 0) >>> 0 < -2046 >>> 0) {
      break block
     }
     $7_1 = 0;
     if ($6_1 >>> 0 > -129 >>> 0) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$0 = $8$hi;
     if (!($264($8_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break block2
     }
     $11_1 = 1.0;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$1 = 1072693248;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break block3
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 1;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $24_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $24_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $10_1 = $24_1;
     $10$hi = i64toi32_i32$0;
     if (!($10_1 | i64toi32_i32$0 | 0)) {
      break block3
     }
     block5 : {
      block4 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 1;
       i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $25_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $9_1 = $25_1;
       $9$hi = i64toi32_i32$3;
       i64toi32_i32$0 = $9_1;
       i64toi32_i32$2 = -2097152;
       i64toi32_i32$1 = 0;
       if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
        break block4
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10_1;
       i64toi32_i32$3 = -2097152;
       i64toi32_i32$2 = 1;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
        break block5
       }
      }
      $11_1 = $0_1 + $1_1;
      break block3;
     }
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$0 = 2145386496;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break block3
     }
     $55_1 = $1_1 * $1_1;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = 2145386496;
     i64toi32_i32$0 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = $8_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     $11_1 = $57_1 ^ $26_1 | 0 ? 0.0 : $55_1;
     break block3;
    }
    block6 : {
     i64toi32_i32$0 = $9$hi;
     if (!($264($9_1 | 0, i64toi32_i32$0 | 0) | 0)) {
      break block6
     }
     $11_1 = $0_1 * $0_1;
     block7 : {
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$2 = -1;
      if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
       $29_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$2 >>> 0) {
         $30_1 = 0
        } else {
         $30_1 = 1
        }
        $31_1 = $30_1;
       } else {
        $31_1 = 0
       }
       $29_1 = $31_1;
      }
      if ($29_1) {
       break block7
      }
      i64toi32_i32$1 = $8$hi;
      $11_1 = ($265($8_1 | 0, i64toi32_i32$1 | 0) | 0 | 0) == (1 | 0) ? -$11_1 : $11_1;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$2 = $8_1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $32_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $33_1 = 0
       } else {
        $33_1 = 1
       }
       $34_1 = $33_1;
      } else {
       $34_1 = 0
      }
      $32_1 = $34_1;
     }
     if ($32_1) {
      break block3
     }
     $11_1 = +$266(+(1.0 / $11_1));
     break block3;
    }
    $7_1 = 0;
    block8 : {
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
      $35_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $36_1 = 0
       } else {
        $36_1 = 1
       }
       $37_1 = $36_1;
      } else {
       $37_1 = 0
      }
      $35_1 = $37_1;
     }
     if ($35_1) {
      break block8
     }
     block9 : {
      i64toi32_i32$3 = $8$hi;
      $7_1 = $265($8_1 | 0, i64toi32_i32$3 | 0) | 0;
      if ($7_1) {
       break block9
      }
      $11_1 = +$256(+$0_1);
      break block3;
     }
     $7_1 = ($7_1 | 0) == (1 | 0) ? 262144 : 0;
     $3_1 = $3_1 & 2047 | 0;
     wasm2js_scratch_store_f64(+$0_1);
     i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $9_1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $9$hi = i64toi32_i32$2;
    }
    block10 : {
     if ($6_1 >>> 0 > -129 >>> 0) {
      break block10
     }
     $11_1 = 1.0;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$3 = $9_1;
     i64toi32_i32$0 = 1072693248;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0) {
      break block3
     }
     block11 : {
      if ($5_1 >>> 0 > 957 >>> 0) {
       break block11
      }
      i64toi32_i32$3 = i64toi32_i32$2;
      i64toi32_i32$1 = $9_1;
      i64toi32_i32$2 = 1072693248;
      i64toi32_i32$0 = 0;
      $11_1 = (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0 ? $1_1 : -$1_1) + 1.0;
      break block3;
     }
     block12 : {
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$0 = $9_1;
      i64toi32_i32$3 = 1072693248;
      i64toi32_i32$2 = 0;
      if (($4_1 >>> 0 > 2047 >>> 0 | 0) == (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0 | 0)) {
       break block12
      }
      $11_1 = +$259(0 | 0);
      break block3;
     }
     $11_1 = +$260(0 | 0);
     break block3;
    }
    if ($3_1) {
     break block1
    }
    wasm2js_scratch_store_f64(+($0_1 * 4503599627370496.0));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = -54525952;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    $9$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$0 = $8$hi & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $11_1 = +wasm2js_scratch_load_f64();
   i64toi32_i32$0 = $9$hi;
   $12_1 = +$267($9_1 | 0, i64toi32_i32$0 | 0, $2_1 + 8 | 0 | 0);
   wasm2js_scratch_store_f64(+$12_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -134217728;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 & i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $11_1 = +$268(+($11_1 * $0_1), +(($1_1 - $11_1) * $0_1 + $1_1 * (+HEAPF64[($2_1 + 8 | 0) >> 3] + ($12_1 - $0_1))), $7_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return +$11_1;
 }
 
 function $263($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $6_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $6_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $264($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $8_1 = 0;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  i64toi32_i32$0 = $8_1;
  i64toi32_i32$2 = 2097152;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$0 = 2097152;
  i64toi32_i32$3 = 1;
  return i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0 | 0;
 }
 
 function $265($0_1, $0$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0, $14_1 = 0, $15_1 = 0, $3_1 = 0, $3$hi = 0, $14$hi = 0, $17$hi = 0;
  $1_1 = 0;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $14_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $14_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $14_1 & 2047 | 0;
   if ($2_1 >>> 0 < 1023 >>> 0) {
    break block
   }
   $1_1 = 2;
   if ($2_1 >>> 0 > 1075 >>> 0) {
    break block
   }
   $1_1 = 0;
   i64toi32_i32$1 = 0;
   $14$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 1;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$3 = 1075 - $2_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $15_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $15_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $3_1 = $15_1;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$3 = -1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $17$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break block
   }
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $1_1 = !(i64toi32_i32$3 & i64toi32_i32$2 | 0 | i64toi32_i32$1 | 0) ? 2 : 1;
  }
  return $1_1 | 0;
 }
 
 function $266($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
  return +(+HEAPF64[($1_1 + 8 | 0) >> 3]);
 }
 
 function $267($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0.0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3_1 = 0.0, $6_1 = 0.0, i64toi32_i32$4 = 0, $5_1 = 0.0, $7_1 = 0.0, $9_1 = 0, $2_1 = 0, $2$hi = 0, $27_1 = 0, $29_1 = 0, $8_1 = 0.0, $10_1 = 0, $19_1 = 0.0, $28_1 = 0.0, $31_1 = 0, $31$hi = 0, $61_1 = 0.0, $85_1 = 0.0, $93_1 = 0.0, $123_1 = 0.0;
  $10_1 = $1_1;
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$1 = -1072076117;
  i64toi32_i32$3 = 0;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $2_1 = i64toi32_i32$4;
  $2$hi = i64toi32_i32$5;
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $27_1 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >> i64toi32_i32$1 | 0;
   $27_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $3_1 = +($27_1 | 0);
  $19_1 = $3_1 * +HEAPF64[(0 + 67113760 | 0) >> 3];
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$5 = $2_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 45;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $29_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $9_1 = ($29_1 & 127 | 0) << 5 | 0;
  $28_1 = $19_1 + +HEAPF64[($9_1 + 67113848 | 0) >> 3];
  i64toi32_i32$0 = $0$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = -1048576;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
  $31_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $31$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$2 = $31$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
  i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
  $0_1 = i64toi32_i32$1;
  $0$hi = i64toi32_i32$4;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = -1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$2 & i64toi32_i32$3 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $4_1 = +wasm2js_scratch_load_f64();
  $5_1 = +HEAPF64[($9_1 + 67113824 | 0) >> 3];
  $6_1 = $4_1 * $5_1 + -1.0;
  i64toi32_i32$5 = $0$hi;
  wasm2js_scratch_store_i32(0 | 0, $0_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $5_1 = (+wasm2js_scratch_load_f64() - $4_1) * $5_1;
  $4_1 = $6_1 + $5_1;
  $3_1 = $3_1 * +HEAPF64[(0 + 67113752 | 0) >> 3] + +HEAPF64[($9_1 + 67113840 | 0) >> 3];
  $61_1 = $3_1;
  $3_1 = $4_1 + $3_1;
  $7_1 = +HEAPF64[(0 + 67113768 | 0) >> 3];
  $8_1 = $4_1 * $7_1;
  $7_1 = $6_1 * $7_1;
  $6_1 = $6_1 * $7_1;
  $85_1 = $6_1;
  $6_1 = $3_1 + $6_1;
  $93_1 = $28_1 + ($4_1 + ($61_1 - $3_1)) + $5_1 * ($8_1 + $7_1) + ($85_1 + ($3_1 - $6_1));
  $3_1 = $4_1 * $8_1;
  $4_1 = $93_1 + $4_1 * $3_1 * ($3_1 * ($3_1 * ($4_1 * +HEAPF64[(0 + 67113816 | 0) >> 3] + +HEAPF64[(0 + 67113808 | 0) >> 3]) + ($4_1 * +HEAPF64[(0 + 67113800 | 0) >> 3] + +HEAPF64[(0 + 67113792 | 0) >> 3])) + ($4_1 * +HEAPF64[(0 + 67113784 | 0) >> 3] + +HEAPF64[(0 + 67113776 | 0) >> 3]));
  $123_1 = $4_1;
  $4_1 = $6_1 + $4_1;
  HEAPF64[$10_1 >> 3] = $123_1 + ($6_1 - $4_1);
  return +$4_1;
 }
 
 function $268($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0.0, $7$hi = 0, $7_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0.0, $26_1 = 0, $8$hi = 0, $72_1 = 0.0, $79_1 = 0.0, $95_1 = 0, $95$hi = 0, $98$hi = 0, $100$hi = 0, $8_1 = 0;
  block : {
   $3_1 = ($263(+$0_1) | 0) & 2047 | 0;
   $4_1 = $263(+(5.551115123125783e-17)) | 0;
   if (($3_1 - $4_1 | 0) >>> 0 < (($263(+(512.0)) | 0) - $4_1 | 0) >>> 0) {
    break block
   }
   block1 : {
    if ($3_1 >>> 0 >= $4_1 >>> 0) {
     break block1
    }
    $0_1 = $0_1 + 1.0;
    return +($2_1 ? -$0_1 : $0_1);
   }
   $4_1 = $3_1 >>> 0 < ($263(+(1024.0)) | 0) >>> 0;
   $3_1 = 0;
   if ($4_1) {
    break block
   }
   block2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break block2
    }
    return +(+$260($2_1 | 0));
   }
   return +(+$259($2_1 | 0));
  }
  $5_1 = +HEAPF64[(0 + 67111600 | 0) >> 3];
  $6_1 = $0_1 * +HEAPF64[(0 + 67111592 | 0) >> 3] + $5_1;
  $5_1 = $6_1 - $5_1;
  $0_1 = $1_1 + ($5_1 * +HEAPF64[(0 + 67111616 | 0) >> 3] + ($5_1 * +HEAPF64[(0 + 67111608 | 0) >> 3] + $0_1));
  $1_1 = $0_1 * $0_1;
  $72_1 = $1_1 * $1_1 * ($0_1 * +HEAPF64[(0 + 67111648 | 0) >> 3] + +HEAPF64[(0 + 67111640 | 0) >> 3]);
  $79_1 = $1_1 * ($0_1 * +HEAPF64[(0 + 67111632 | 0) >> 3] + +HEAPF64[(0 + 67111624 | 0) >> 3]);
  wasm2js_scratch_store_f64(+$6_1);
  i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $7$hi = i64toi32_i32$2;
  $4_1 = ($7_1 << 4 | 0) & 2032 | 0;
  $0_1 = $72_1 + ($79_1 + (+HEAPF64[($4_1 + 67111704 | 0) >> 3] + $0_1));
  i64toi32_i32$3 = $4_1 + 67111712 | 0;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
  $95_1 = i64toi32_i32$2;
  $95$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = 0;
  $98$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$2 = $98$hi;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$0 = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = 45;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $26_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $100$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $95$hi;
  i64toi32_i32$5 = $95_1;
  i64toi32_i32$0 = $100$hi;
  i64toi32_i32$1 = $26_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $8_1 = i64toi32_i32$2;
  $8$hi = i64toi32_i32$4;
  block3 : {
   if ($3_1) {
    break block3
   }
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$5 = $7$hi;
   return +(+$269(+$0_1, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, $7_1 | 0, i64toi32_i32$5 | 0));
  }
  i64toi32_i32$5 = $8$hi;
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
  $1_1 = +wasm2js_scratch_load_f64();
  return +($1_1 * $0_1 + $1_1);
 }
 
 function $269($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0, $6_1 = 0.0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  block : {
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break block
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = -1058013184;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   return +(($3_1 * $0_1 + $3_1) * 5486124068793688683255936.0e279);
  }
  block1 : {
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$3 = 1071644672;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $2_1 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$4;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
   $3_1 = +wasm2js_scratch_load_f64();
   $4_1 = $3_1 * $0_1;
   $0_1 = $4_1 + $3_1;
   if (!(+$261(+$0_1) < 1.0)) {
    break block1
   }
   $270(+(+$266(+(2.2250738585072014e-308)) * 2.2250738585072014e-308));
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$0 = -2147483648;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$2 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $5_1 = $0_1 < 0.0 ? -1.0 : 1.0;
   $6_1 = $0_1 + $5_1;
   $0_1 = $6_1 + ($4_1 + ($3_1 - $0_1) + ($0_1 + ($5_1 - $6_1))) - $5_1;
   $0_1 = (wasm2js_f64$0 = +wasm2js_scratch_load_f64(), wasm2js_f64$1 = $0_1, wasm2js_i32$0 = $0_1 == 0.0, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
  }
  return +($0_1 * 2.2250738585072014e-308);
 }
 
 function $270($0_1) {
  $0_1 = +$0_1;
  HEAPF64[((global$0 - 16 | 0) + 8 | 0) >> 3] = $0_1;
 }
 
 function $271($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $332(67135344 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $272() {
  return 42 | 0;
 }
 
 function $273() {
  return $272() | 0 | 0;
 }
 
 function $274() {
  return 67140120 | 0;
 }
 
 function $275() {
  var $0_1 = 0;
  HEAP32[(0 + 67140216 | 0) >> 2] = 67140096;
  $0_1 = $273() | 0;
  HEAP32[(0 + 67140176 | 0) >> 2] = 67108864 - 0 | 0;
  HEAP32[(0 + 67140172 | 0) >> 2] = 67108864;
  HEAP32[(0 + 67140144 | 0) >> 2] = $0_1;
  HEAP32[(0 + 67140180 | 0) >> 2] = HEAP32[(0 + 67135184 | 0) >> 2] | 0;
 }
 
 function $276($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = 0;
  HEAP32[(i64toi32_i32$1 + 67140256 | 0) >> 2] = $0_1 + -1 | 0;
  HEAP32[(i64toi32_i32$1 + 67140260 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $277() {
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $6_1 = 0, $7_1 = 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67140256 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67140260 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  i64toi32_i32$0 = 1481765933;
  i64toi32_i32$0 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$1 | 0, 1284865837 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$2 = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = 0;
  HEAP32[(i64toi32_i32$2 + 67140256 | 0) >> 2] = i64toi32_i32$4;
  HEAP32[(i64toi32_i32$2 + 67140260 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 33;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $6_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
   $6_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  return $6_1 | 0;
 }
 
 function $278($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $279($0_1) {
  $0_1 = $0_1 | 0;
  return $336(fimport$3($278(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $280($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $4_1 = $3_1 + 16 | 0;
  $7_1 = 2;
  block5 : {
   block4 : {
    block2 : {
     block1 : {
      block : {
       if (!($336(fimport$4(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        break block
       }
       $5_1 = $4_1;
       break block1;
      }
      label : while (1) {
       $1_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break block2
       }
       block3 : {
        if (($1_1 | 0) > (-1 | 0)) {
         break block3
        }
        $5_1 = $4_1;
        break block4;
       }
       $8_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
       $9_1 = $1_1 >>> 0 > $8_1 >>> 0;
       $5_1 = $4_1 + ($9_1 ? 8 : 0) | 0;
       $8_1 = $1_1 - ($9_1 ? $8_1 : 0) | 0;
       HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + $8_1 | 0;
       $4_1 = $4_1 + ($9_1 ? 12 : 4) | 0;
       HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $1_1 | 0;
       $4_1 = $5_1;
       $7_1 = $7_1 - $9_1 | 0;
       if (!($336(fimport$4(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $4_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label
       }
       break label;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break block4
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $1_1 = $2_1;
    break block5;
   }
   $1_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break block5
   }
   $1_1 = $2_1 - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $281($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $336($2016($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $2_1 ? -1 : $1_1;
  i64toi32_i32$2 = $2_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $282($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $281(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $283($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $284($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $285($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $288($0_1 + ($291($0_1 | 0) | 0) | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  block : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break block
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break block
   }
   label : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break block
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label
    }
    break label;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $287($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  block3 : {
   block1 : {
    block : {
     if (!(($1_1 ^ $0_1 | 0) & 3 | 0)) {
      break block
     }
     $2_1 = HEAPU8[$1_1 >> 0] | 0;
     break block1;
    }
    block2 : {
     if (!($1_1 & 3 | 0)) {
      break block2
     }
     label : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break block3
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label
      }
      break label;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if (((16843008 - $2_1 | 0 | $2_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
     break block1
    }
    label1 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $0_1 = $0_1 + 4 | 0;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     if ((($2_1 | (16843008 - $2_1 | 0) | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
      continue label1
     }
     break label1;
    };
   }
   HEAP8[$0_1 >> 0] = $2_1;
   if (!($2_1 & 255 | 0)) {
    break block3
   }
   label2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label2
    }
    break label2;
   };
  }
  return $0_1 | 0;
 }
 
 function $288($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $287($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $289($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAPU16[((($0_1 >>> 0 > 153 >>> 0 ? 0 : $0_1) << 1 | 0) + 67119856 | 0) >> 1] | 0) + 67117928 | 0 | 0;
 }
 
 function $290($0_1) {
  $0_1 = $0_1 | 0;
  return $289($0_1 | 0, $0_1 | 0) | 0 | 0;
 }
 
 function $291($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  block2 : {
   block : {
    if (!($1_1 & 3 | 0)) {
     break block
    }
    block1 : {
     if (HEAPU8[$1_1 >> 0] | 0) {
      break block1
     }
     return $1_1 - $1_1 | 0 | 0;
    }
    $1_1 = $0_1;
    label : while (1) {
     $1_1 = $1_1 + 1 | 0;
     if (!($1_1 & 3 | 0)) {
      break block
     }
     if (HEAPU8[$1_1 >> 0] | 0) {
      continue label
     }
     break block2;
    };
   }
   label1 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
     continue label1
    }
    break label1;
   };
   label2 : while (1) {
    $1_1 = $2_1;
    $2_1 = $1_1 + 1 | 0;
    if (HEAPU8[$1_1 >> 0] | 0) {
     continue label2
    }
    break label2;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  block2 : {
   block4 : {
    block3 : {
     block : {
      $2_1 = $1_1 & 255 | 0;
      if (!$2_1) {
       break block
      }
      block1 : {
       if (!($0_1 & 3 | 0)) {
        break block1
       }
       $3_1 = $1_1 & 255 | 0;
       label : while (1) {
        $4_1 = HEAPU8[$0_1 >> 0] | 0;
        if (!$4_1) {
         break block2
        }
        if (($4_1 | 0) == ($3_1 | 0)) {
         break block2
        }
        $0_1 = $0_1 + 1 | 0;
        if ($0_1 & 3 | 0) {
         continue label
        }
        break label;
       };
      }
      $3_1 = HEAP32[$0_1 >> 2] | 0;
      if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break block3
      }
      $2_1 = Math_imul($2_1, 16843009);
      label1 : while (1) {
       $4_1 = $3_1 ^ $2_1 | 0;
       if (((16843008 - $4_1 | 0 | $4_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
        break block3
       }
       $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       $4_1 = $0_1 + 4 | 0;
       $0_1 = $4_1;
       if ((($3_1 | (16843008 - $3_1 | 0) | 0) & -2139062144 | 0 | 0) == (-2139062144 | 0)) {
        continue label1
       }
       break block4;
      };
     }
     return $0_1 + ($291($0_1 | 0) | 0) | 0 | 0;
    }
    $4_1 = $0_1;
   }
   label2 : while (1) {
    $0_1 = $4_1;
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if (!$3_1) {
     break block2
    }
    $4_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) != ($1_1 & 255 | 0 | 0)) {
     continue label2
    }
    break label2;
   };
  }
  return $0_1 | 0;
 }
 
 function $293($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $292($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $294($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  block2 : {
   block1 : {
    block : {
     if ($2_1 >>> 0 < 4 >>> 0) {
      break block
     }
     if (($1_1 | $0_1 | 0) & 3 | 0) {
      break block1
     }
     label : while (1) {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break block1
      }
      $1_1 = $1_1 + 4 | 0;
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label
      }
      break label;
     };
    }
    if (!$2_1) {
     break block2
    }
   }
   block3 : {
    label1 : while (1) {
     $3_1 = HEAPU8[$0_1 >> 0] | 0;
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 | 0) != ($4_1 | 0)) {
      break block3
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break block2
     }
     continue label1;
    };
   }
   return $3_1 - $4_1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $295($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  block2 : {
   block1 : {
    block : {
     if (!($0_1 & 3 | 0)) {
      break block
     }
     if (!$2_1) {
      break block
     }
     $4_1 = $1_1 & 255 | 0;
     label : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break block1
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break block
      }
      if ($2_1) {
       continue label
      }
      break label;
     };
    }
    if (!$3_1) {
     break block2
    }
    block3 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
      break block3
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break block3
     }
     $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
     label1 : while (1) {
      $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
      if (((16843008 - $3_1 | 0 | $3_1 | 0) & -2139062144 | 0 | 0) != (-2139062144 | 0)) {
       break block1
      }
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label1
      }
      break label1;
     };
    }
    if (!$2_1) {
     break block2
    }
   }
   $3_1 = $1_1 & 255 | 0;
   label2 : while (1) {
    block4 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break block4
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label2
    }
    break label2;
   };
  }
  return 0 | 0;
 }
 
 function $296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  block : {
   $2_1 = HEAP8[$1_1 >> 0] | 0;
   if ($2_1) {
    break block
   }
   return $0_1 | 0;
  }
  $3_1 = 0;
  block1 : {
   $0_1 = $293($0_1 | 0, $2_1 | 0) | 0;
   if (!$0_1) {
    break block1
   }
   block2 : {
    if (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) {
     break block2
    }
    return $0_1 | 0;
   }
   if (!(HEAPU8[($0_1 + 1 | 0) >> 0] | 0)) {
    break block1
   }
   block3 : {
    if (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) {
     break block3
    }
    return $297($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 2 | 0) >> 0] | 0)) {
    break block1
   }
   block4 : {
    if (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) {
     break block4
    }
    return $298($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   if (!(HEAPU8[($0_1 + 3 | 0) >> 0] | 0)) {
    break block1
   }
   block5 : {
    if (HEAPU8[($1_1 + 4 | 0) >> 0] | 0) {
     break block5
    }
    return $299($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   $3_1 = $300($0_1 | 0, $1_1 | 0) | 0;
  }
  return $3_1 | 0;
 }
 
 function $297($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $2_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  block : {
   if (!$2_1) {
    break block
   }
   $4_1 = (HEAPU8[$0_1 >> 0] | 0) << 8 | 0 | $2_1 | 0;
   $5_1 = (HEAPU8[$1_1 >> 0] | 0) << 8 | 0 | (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) | 0;
   if (($4_1 | 0) == ($5_1 | 0)) {
    break block
   }
   $1_1 = $0_1 + 1 | 0;
   label : while (1) {
    $0_1 = $1_1;
    $2_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    $3_1 = ($2_1 | 0) != (0 | 0);
    if (!$2_1) {
     break block
    }
    $1_1 = $0_1 + 1 | 0;
    $4_1 = ($4_1 << 8 | 0) & 65280 | 0 | $2_1 | 0;
    if (($4_1 | 0) != ($5_1 | 0)) {
     continue label
    }
    break label;
   };
  }
  return ($3_1 ? $0_1 : 0) | 0;
 }
 
 function $298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = $0_1 + 2 | 0;
  $3_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
  $4_1 = ($3_1 | 0) != (0 | 0);
  block1 : {
   block : {
    if (!$3_1) {
     break block
    }
    $3_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ($3_1 << 8 | 0) | 0;
    $5_1 = (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$1_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0;
    if (($3_1 | 0) == ($5_1 | 0)) {
     break block
    }
    label : while (1) {
     $1_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = ($0_1 | 0) != (0 | 0);
     if (!$0_1) {
      break block1
     }
     $2_1 = $1_1;
     $3_1 = ($3_1 | $0_1 | 0) << 8 | 0;
     if (($3_1 | 0) != ($5_1 | 0)) {
      continue label
     }
     break block1;
    };
   }
   $1_1 = $2_1;
  }
  return ($4_1 ? $1_1 + -2 | 0 : 0) | 0;
 }
 
 function $299($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0;
  $2_1 = $0_1 + 3 | 0;
  $3_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
  $4_1 = ($3_1 | 0) != (0 | 0);
  block1 : {
   block : {
    if (!$3_1) {
     break block
    }
    $5_1 = (HEAPU8[($0_1 + 1 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[$0_1 >> 0] | 0) << 24 | 0) | 0 | ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0) << 8 | 0) | 0 | $3_1 | 0;
    $6_1 = $1_1;
    $0_1 = HEAPU8[$6_1 >> 0] | 0 | ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($6_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($6_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
    $1_1 = $0_1 << 24 | 0 | (($0_1 & 65280 | 0) << 8 | 0) | 0 | (($0_1 >>> 8 | 0) & 65280 | 0 | ($0_1 >>> 24 | 0) | 0) | 0;
    if (($5_1 | 0) == ($1_1 | 0)) {
     break block
    }
    label : while (1) {
     $3_1 = $2_1 + 1 | 0;
     $0_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
     $4_1 = ($0_1 | 0) != (0 | 0);
     if (!$0_1) {
      break block1
     }
     $2_1 = $3_1;
     $5_1 = $5_1 << 8 | 0 | $0_1 | 0;
     if (($5_1 | 0) != ($1_1 | 0)) {
      continue label
     }
     break block1;
    };
   }
   $3_1 = $2_1;
  }
  return ($4_1 ? $3_1 + -3 | 0 : 0) | 0;
 }
 
 function $300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $6_1 = 0, $9_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $2_1 = 0, $8_1 = 0, $10_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $13_1 = 0;
  $2_1 = global$0 - 1056 | 0;
  global$0 = $2_1;
  i64toi32_i32$1 = $2_1 + 1048 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 1040 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1032 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1036 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[($2_1 + 1024 | 0) >> 2] = 0;
  HEAP32[($2_1 + 1028 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = 0;
  block5 : {
   block4 : {
    block3 : {
     block2 : {
      block1 : {
       block : {
        $4_1 = HEAPU8[$1_1 >> 0] | 0;
        if ($4_1) {
         break block
        }
        $5_1 = -1;
        $6_1 = 1;
        break block1;
       }
       label : while (1) {
        if (!(HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0)) {
         break block2
        }
        $3_1 = $3_1 + 1 | 0;
        HEAP32[($2_1 + (($4_1 & 255 | 0) << 2 | 0) | 0) >> 2] = $3_1;
        $6_1 = ($2_1 + 1024 | 0) + (($4_1 >>> 3 | 0) & 28 | 0) | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] | 0 | (1 << $4_1 | 0) | 0;
        $4_1 = HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0;
        if ($4_1) {
         continue label
        }
        break label;
       };
       $6_1 = 1;
       $5_1 = -1;
       if ($3_1 >>> 0 > 1 >>> 0) {
        break block3
       }
      }
      $7_1 = -1;
      $8_1 = 1;
      break block4;
     }
     $6_1 = 0;
     break block5;
    }
    $9_1 = 0;
    $10_1 = 1;
    $4_1 = 1;
    label1 : while (1) {
     block8 : {
      block6 : {
       $7_1 = HEAPU8[(($1_1 + $5_1 | 0) + $4_1 | 0) >> 0] | 0;
       $8_1 = HEAPU8[($1_1 + $6_1 | 0) >> 0] | 0;
       if (($7_1 | 0) != ($8_1 | 0)) {
        break block6
       }
       block7 : {
        if (($4_1 | 0) != ($10_1 | 0)) {
         break block7
        }
        $9_1 = $10_1 + $9_1 | 0;
        $4_1 = 1;
        break block8;
       }
       $4_1 = $4_1 + 1 | 0;
       break block8;
      }
      block9 : {
       if ($7_1 >>> 0 <= $8_1 >>> 0) {
        break block9
       }
       $10_1 = $6_1 - $5_1 | 0;
       $4_1 = 1;
       $9_1 = $6_1;
       break block8;
      }
      $4_1 = 1;
      $5_1 = $9_1;
      $9_1 = $9_1 + 1 | 0;
      $10_1 = 1;
     }
     $6_1 = $4_1 + $9_1 | 0;
     if ($6_1 >>> 0 < $3_1 >>> 0) {
      continue label1
     }
     break label1;
    };
    $7_1 = -1;
    $6_1 = 0;
    $9_1 = 1;
    $8_1 = 1;
    $4_1 = 1;
    label2 : while (1) {
     block12 : {
      block10 : {
       $11_1 = HEAPU8[(($1_1 + $7_1 | 0) + $4_1 | 0) >> 0] | 0;
       $12_1 = HEAPU8[($1_1 + $9_1 | 0) >> 0] | 0;
       if (($11_1 | 0) != ($12_1 | 0)) {
        break block10
       }
       block11 : {
        if (($4_1 | 0) != ($8_1 | 0)) {
         break block11
        }
        $6_1 = $8_1 + $6_1 | 0;
        $4_1 = 1;
        break block12;
       }
       $4_1 = $4_1 + 1 | 0;
       break block12;
      }
      block13 : {
       if ($11_1 >>> 0 >= $12_1 >>> 0) {
        break block13
       }
       $8_1 = $9_1 - $7_1 | 0;
       $4_1 = 1;
       $6_1 = $9_1;
       break block12;
      }
      $4_1 = 1;
      $7_1 = $6_1;
      $6_1 = $6_1 + 1 | 0;
      $8_1 = 1;
     }
     $9_1 = $4_1 + $6_1 | 0;
     if ($9_1 >>> 0 < $3_1 >>> 0) {
      continue label2
     }
     break label2;
    };
    $6_1 = $10_1;
   }
   block15 : {
    block14 : {
     $4_1 = ($7_1 + 1 | 0) >>> 0 > ($5_1 + 1 | 0) >>> 0;
     $10_1 = $4_1 ? $8_1 : $6_1;
     $12_1 = $4_1 ? $7_1 : $5_1;
     $8_1 = $12_1 + 1 | 0;
     if (!($294($1_1 | 0, $1_1 + $10_1 | 0 | 0, $8_1 | 0) | 0)) {
      break block14
     }
     $4_1 = $3_1 + ($12_1 ^ -1 | 0) | 0;
     $10_1 = ($12_1 >>> 0 > $4_1 >>> 0 ? $12_1 : $4_1) + 1 | 0;
     $13_1 = 0;
     break block15;
    }
    $13_1 = $3_1 - $10_1 | 0;
   }
   $11_1 = $3_1 | 63 | 0;
   $4_1 = 0;
   $6_1 = $0_1;
   label3 : while (1) {
    $7_1 = $4_1;
    block16 : {
     $9_1 = $6_1;
     if (($0_1 - $6_1 | 0) >>> 0 >= $3_1 >>> 0) {
      break block16
     }
     $6_1 = 0;
     $4_1 = $295($0_1 | 0, 0 | 0, $11_1 | 0) | 0;
     $0_1 = $4_1 ? $4_1 : $0_1 + $11_1 | 0;
     if (!$4_1) {
      break block16
     }
     if (($4_1 - $9_1 | 0) >>> 0 < $3_1 >>> 0) {
      break block5
     }
    }
    $4_1 = 0;
    $6_1 = $9_1 + $3_1 | 0;
    $5_1 = HEAPU8[($6_1 + -1 | 0) >> 0] | 0;
    if (!(((HEAP32[(($2_1 + 1024 | 0) + (($5_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> $5_1 | 0) & 1 | 0)) {
     continue label3
    }
    block17 : {
     $4_1 = HEAP32[($2_1 + ($5_1 << 2 | 0) | 0) >> 2] | 0;
     if (($3_1 | 0) == ($4_1 | 0)) {
      break block17
     }
     $4_1 = $3_1 - $4_1 | 0;
     $6_1 = $9_1 + ($4_1 >>> 0 > $7_1 >>> 0 ? $4_1 : $7_1) | 0;
     $4_1 = 0;
     continue label3;
    }
    $4_1 = $8_1;
    block19 : {
     block18 : {
      $6_1 = $4_1 >>> 0 > $7_1 >>> 0 ? $4_1 : $7_1;
      $5_1 = HEAPU8[($1_1 + $6_1 | 0) >> 0] | 0;
      if (!$5_1) {
       break block18
      }
      label4 : while (1) {
       if (($5_1 & 255 | 0 | 0) != (HEAPU8[($9_1 + $6_1 | 0) >> 0] | 0 | 0)) {
        break block19
       }
       $6_1 = $6_1 + 1 | 0;
       $5_1 = HEAPU8[($1_1 + $6_1 | 0) >> 0] | 0;
       if ($5_1) {
        continue label4
       }
       break label4;
      };
      $4_1 = $8_1;
     }
     label5 : while (1) {
      block20 : {
       if ($4_1 >>> 0 > $7_1 >>> 0) {
        break block20
       }
       $6_1 = $9_1;
       break block5;
      }
      $4_1 = $4_1 + -1 | 0;
      if ((HEAPU8[($1_1 + $4_1 | 0) >> 0] | 0 | 0) == (HEAPU8[($9_1 + $4_1 | 0) >> 0] | 0 | 0)) {
       continue label5
      }
      break label5;
     };
     $6_1 = $9_1 + $10_1 | 0;
     $4_1 = $13_1;
     continue label3;
    }
    $6_1 = $9_1 + ($6_1 - $12_1 | 0) | 0;
    $4_1 = 0;
    continue label3;
   };
  }
  global$0 = $2_1 + 1056 | 0;
  return $6_1 | 0;
 }
 
 function $301($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1 + -1 | 0 | $1_1 | 0;
  block : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  block1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break block1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $302($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = -1;
  block : {
   if ($301($0_1 | 0) | 0) {
    break block
   }
   if ((FUNCTION_TABLE[HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break block
   }
   $2_1 = HEAPU8[($1_1 + 15 | 0) >> 0] | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $303($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2_1 = 0, $3_1 = 0, i64toi32_i32$2 = 0, $12_1 = 0, $14_1 = 0, $15_1 = 0, $13_1 = 0, $22_1 = 0, $22$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = i64toi32_i32$0;
  $2_1 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2_1 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13_1;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3_1 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  block : {
   i64toi32_i32$0 = $1$hi;
   if (!($1_1 | i64toi32_i32$0 | 0)) {
    break block
   }
   i64toi32_i32$1 = $3_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $22_1 = i64toi32_i32$1;
   $22$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $22_1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      $14_1 = 0
     } else {
      $14_1 = 1
     }
     $15_1 = $14_1;
    } else {
     $15_1 = 0
    }
    $12_1 = $15_1;
   }
   if ($12_1) {
    break block
   }
   i64toi32_i32$2 = $1$hi;
   $3_1 = $2_1 + $1_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
 }
 
 function $304($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1_1 = 0, $4$hi = 0, $2_1 = 0, $5$hi = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $7_1 = 0, $7$hi = 0, $15_1 = 0, $15$hi = 0, $35_1 = 0, $40_1 = 0, $40$hi = 0, $59_1 = 0, $59$hi = 0, $67_1 = 0, $74_1 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1_1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2_1 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1_1 - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15_1 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $4_1 = i64toi32_i32$4;
  $4$hi = i64toi32_i32$5;
  block2 : {
   block1 : {
    block : {
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $5_1 = i64toi32_i32$5;
     $5$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break block
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$5 = $5$hi;
     i64toi32_i32$3 = $5_1;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26_1 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27_1 = 0
       } else {
        $27_1 = 1
       }
       $28_1 = $27_1;
      } else {
       $28_1 = 0
      }
      $26_1 = $28_1;
     }
     if ($26_1) {
      break block1
     }
    }
    $2_1 = $302($0_1 | 0) | 0;
    if (($2_1 | 0) > (-1 | 0)) {
     break block2
    }
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $2_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1_1;
   $35_1 = i64toi32_i32$2;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$2 = $2_1 - $1_1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40_1 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40_1;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35_1;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $4_1 = i64toi32_i32$2;
  $4$hi = i64toi32_i32$0;
  $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  block3 : {
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break block3
   }
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $5_1 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $3_1 - $1_1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59_1 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59_1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30_1 = 0
     } else {
      $30_1 = 1
     }
     $31_1 = $30_1;
    } else {
     $31_1 = 0
    }
    $29_1 = $31_1;
   }
   if ($29_1) {
    break block3
   }
   i64toi32_i32$4 = $5$hi;
   $3_1 = $1_1 + $5_1 | 0;
  }
  HEAP32[($0_1 + 104 | 0) >> 2] = $3_1;
  $67_1 = $0_1;
  i64toi32_i32$4 = $4$hi;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $3_1 - $1_1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74_1 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74_1;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67_1;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  block4 : {
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break block4
   }
   HEAP8[($1_1 + -1 | 0) >> 0] = $2_1;
  }
  return $2_1 | 0;
 }
 
 function $305($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  block2 : {
   block : {
    if (($1_1 | 0) < (1024 | 0)) {
     break block
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    block1 : {
     if ($1_1 >>> 0 >= 2047 >>> 0) {
      break block1
     }
     $1_1 = $1_1 + -1023 | 0;
     break block2;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = ($1_1 >>> 0 < 3069 >>> 0 ? $1_1 : 3069) + -2046 | 0;
    break block2;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break block2
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   block3 : {
    if ($1_1 >>> 0 <= -1992 >>> 0) {
     break block3
    }
    $1_1 = $1_1 + 969 | 0;
    break block2;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = ($1_1 >>> 0 > -2960 >>> 0 ? $1_1 : -2960) + 1938 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $306($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $7_1 = 0, $11_1 = 0, $18$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7_1 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11_1 = $22_1 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 2147418112;
  i64toi32_i32$3 = 0;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $23_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $23_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $11_1 | $23_1 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $20_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$1 = $24_1;
  i64toi32_i32$0 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $21_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  i64toi32_i32$1 = $7_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $21_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function $307($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, i64toi32_i32$4 = 0, $20_1 = 0, $62_1 = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0, $64$hi = 0, $68$hi = 0, $71_1 = 0, $74_1 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  block2 : {
   block : {
    if (($3_1 | 0) < (16384 | 0)) {
     break block
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    $362($4_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    block1 : {
     if ($3_1 >>> 0 >= 32767 >>> 0) {
      break block1
     }
     $3_1 = $3_1 + -16383 | 0;
     break block2;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    $362($4_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3_1 = ($3_1 >>> 0 < 49149 >>> 0 ? $3_1 : 49149) + -32766 | 0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break block2;
   }
   if (($3_1 | 0) > (-16383 | 0)) {
    break block2
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   $362($4_1 + 64 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   block3 : {
    if ($3_1 >>> 0 <= -32652 >>> 0) {
     break block3
    }
    $3_1 = $3_1 + 16269 | 0;
    break block2;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   $362($4_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3_1 = ($3_1 >>> 0 > -48920 >>> 0 ? $3_1 : -48920) + 32538 | 0;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 56 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 60 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $62_1 = $4_1;
  i64toi32_i32$0 = $1$hi;
  $63_1 = $1_1;
  $63$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $64_1 = $2_1;
  $64$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $68$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $63$hi;
  i64toi32_i32$2 = $64$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $68$hi;
  $362($62_1 | 0, $63_1 | 0, i64toi32_i32$1 | 0, $64_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $71_1 = i64toi32_i32$3;
  i64toi32_i32$3 = $0_1;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $71_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $74_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $74_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 80 | 0;
 }
 
 function $308($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2_1 = 0, $13_1 = 0, $3_1 = 0, $4_1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  block1 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $13_1 & 32767 | 0;
    if (($3_1 | 0) == (32767 | 0)) {
     break block
    }
    $4_1 = 4;
    if ($3_1) {
     break block1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4_1 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4_1 | 0;
 }
 
 function $309($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $10$hi = 0, $10_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11$hi = 0, $52_1 = 0, $6_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $11_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $117$hi = 0, $120_1 = 0, $121$hi = 0, $141_1 = 0, $141$hi = 0, $143$hi = 0, $146_1 = 0, $146$hi = 0, $148$hi = 0, $160$hi = 0, $163_1 = 0, $164$hi = 0, $192_1 = 0, $192$hi = 0, $194$hi = 0, $203_1 = 0, $204_1 = 0, $204$hi = 0, $206_1 = 0, $206$hi = 0, $212$hi = 0, $213_1 = 0, $213$hi = 0, $219_1 = 0, $219$hi = 0, $224$hi = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  block2 : {
   block1 : {
    block : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!($352($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break block
     }
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$1;
     if (!($308($3_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0)) {
      break block
     }
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $52_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $6_1 = $52_1;
     $7_1 = $6_1 & 32767 | 0;
     if (($7_1 | 0) != (32767 | 0)) {
      break block1
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    $362($5_1 + 16 | 0 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    $354($5_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break block2;
   }
   block3 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $9_1 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$2 = 2147483647;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $10_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $10$hi;
    if (($352($1_1 | 0, i64toi32_i32$2 | 0, $9_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break block3
    }
    block4 : {
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $10$hi;
     if (!($352($1_1 | 0, i64toi32_i32$0 | 0, $9_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0) | 0)) {
      break block4
     }
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$0;
     break block2;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 0;
    $362($5_1 + 112 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$0;
    break block2;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $53_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $53_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   $8_1 = $53_1 & 32767 | 0;
   block6 : {
    block5 : {
     if (!$7_1) {
      break block5
     }
     i64toi32_i32$1 = $1$hi;
     $4_1 = $1_1;
     $4$hi = i64toi32_i32$1;
     break block6;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1081540608;
    $362($5_1 + 96 | 0 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $9_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $54_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $54_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $7_1 = $54_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 100 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
   }
   block7 : {
    if ($8_1) {
     break block7
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 1081540608;
    $362($5_1 + 80 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$1;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $55_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $55_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8_1 = $55_1 + -120 | 0;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $11_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $9$hi;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $9_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$1;
   block8 : {
    if (($7_1 | 0) <= ($8_1 | 0)) {
     break block8
    }
    label : while (1) {
     block11 : {
      block9 : {
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$1 = $11$hi;
       i64toi32_i32$1 = $9$hi;
       i64toi32_i32$2 = $9_1;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$3 = $11_1;
       i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
       $117$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3_1;
       $120_1 = $4$hi >>> 0 < i64toi32_i32$2 >>> 0 | (($4$hi | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $121$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $117$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $121$hi;
       i64toi32_i32$2 = $120_1;
       i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$1 = i64toi32_i32$0;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $56_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $57_1 = 0
         } else {
          $57_1 = 1
         }
         $58_1 = $57_1;
        } else {
         $58_1 = 0
        }
        $56_1 = $58_1;
       }
       if ($56_1) {
        break block9
       }
       block10 : {
        i64toi32_i32$1 = $10$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$1 = $3$hi;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$2 = $4_1;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3_1;
        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
        $4_1 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$1 = $10_1;
        i64toi32_i32$2 = $4$hi;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
        i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
         break block10
        }
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$0 = $2$hi;
        i64toi32_i32$0 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$1 = 0;
        $362($5_1 + 32 | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
        i64toi32_i32$2 = $5_1;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 40 | 0) >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
        $2_1 = i64toi32_i32$1;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $4_1 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$1;
        break block2;
       }
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$2 = $10_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        $59_1 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
        $59_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       }
       $141_1 = $59_1;
       $141$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $60_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $60_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
       }
       $143$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $141$hi;
       i64toi32_i32$3 = $141_1;
       i64toi32_i32$1 = $143$hi;
       i64toi32_i32$0 = $60_1;
       i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
       $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       $9$hi = i64toi32_i32$1;
       break block11;
      }
      i64toi32_i32$1 = $9$hi;
      i64toi32_i32$2 = $9_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 1;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
       $61_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
       $61_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      }
      $146_1 = $61_1;
      $146$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 63;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$2 = 0;
       $62_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $62_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      $148$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $146$hi;
      i64toi32_i32$3 = $146_1;
      i64toi32_i32$1 = $148$hi;
      i64toi32_i32$0 = $62_1;
      i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
      $9_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      $9$hi = i64toi32_i32$1;
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $63_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $63_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $4_1 = $63_1;
     $4$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     if (($7_1 | 0) > ($8_1 | 0)) {
      continue label
     }
     break label;
    };
    $7_1 = $8_1;
   }
   block13 : {
    block12 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $160$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     $163_1 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $164$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $160$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$5 = $164$hi;
     i64toi32_i32$1 = $163_1;
     i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$0 | 0)) {
      $64_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
        $65_1 = 0
       } else {
        $65_1 = 1
       }
       $66_1 = $65_1;
      } else {
       $66_1 = 0
      }
      $64_1 = $66_1;
     }
     if ($64_1) {
      break block12
     }
     i64toi32_i32$3 = $9$hi;
     $10_1 = $9_1;
     $10$hi = i64toi32_i32$3;
     break block13;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block13
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    $362($5_1 + 48 | 0 | 0, $1_1 | 0, i64toi32_i32$2 | 0, $2_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    break block2;
   }
   block14 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block14
    }
    label1 : while (1) {
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $67_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $67_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3_1 = $67_1;
     $3$hi = i64toi32_i32$3;
     $7_1 = $7_1 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $68_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $68_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4_1 = $68_1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $192_1 = $3_1;
     $192$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $69_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $69_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $194$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $192$hi;
     i64toi32_i32$2 = $192_1;
     i64toi32_i32$3 = $194$hi;
     i64toi32_i32$0 = $69_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $10_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$2 = 65536;
     i64toi32_i32$0 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
      continue label1
     }
     break label1;
    };
   }
   $8_1 = $6_1 & 32768 | 0;
   block15 : {
    if (($7_1 | 0) > (0 | 0)) {
     break block15
    }
    $203_1 = $5_1 + 64 | 0;
    i64toi32_i32$1 = $4$hi;
    $204_1 = $4_1;
    $204$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$0 = $10_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $206_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $206$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = $7_1 + 120 | 0 | $8_1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $70_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $70_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $212$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $206$hi;
    i64toi32_i32$3 = $206_1;
    i64toi32_i32$1 = $212$hi;
    i64toi32_i32$2 = $70_1;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $213_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $213$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $204$hi;
    i64toi32_i32$3 = $213$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1065811968;
    $362($203_1 | 0, $204_1 | 0, i64toi32_i32$1 | 0, $213_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 72 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 76 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    break block2;
   }
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $219_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $219$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $7_1 | $8_1 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 48;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    $71_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
    $71_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219_1;
   i64toi32_i32$2 = $224$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
   $2_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $5_1 + 128 | 0;
 }
 
 function $310($0_1, $1_1, $1$hi, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function $311($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $10_1 = 0, $10$hi = 0, $4_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  i64toi32_i32$0 = 0;
  $10_1 = 0;
  $10$hi = i64toi32_i32$0;
  block14 : {
   block : {
    if ($2_1 >>> 0 > 2 >>> 0) {
     break block
    }
    $2_1 = $2_1 << 2 | 0;
    $5_1 = HEAP32[($2_1 + 67120236 | 0) >> 2] | 0;
    $6_1 = HEAP32[($2_1 + 67120224 | 0) >> 2] | 0;
    label : while (1) {
     block2 : {
      block1 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block1
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break block2;
      }
      $2_1 = $304($1_1 | 0) | 0;
     }
     if ($312($2_1 | 0) | 0) {
      continue label
     }
     break label;
    };
    $7_1 = 1;
    block4 : {
     block3 : {
      switch ($2_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       break block3;
      default:
       break block4;
      };
     }
     $7_1 = ($2_1 | 0) == (45 | 0) ? -1 : 1;
     block5 : {
      $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break block5
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
      $2_1 = HEAPU8[$2_1 >> 0] | 0;
      break block4;
     }
     $2_1 = $304($1_1 | 0) | 0;
    }
    $8_1 = 0;
    block11 : {
     block7 : {
      block6 : {
       if (($2_1 & -33 | 0 | 0) != (73 | 0)) {
        break block6
       }
       label1 : while (1) {
        if (($8_1 | 0) == (7 | 0)) {
         break block7
        }
        block9 : {
         block8 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block8
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break block9;
         }
         $2_1 = $304($1_1 | 0) | 0;
        }
        $9_1 = $8_1 + 67108909 | 0;
        $8_1 = $8_1 + 1 | 0;
        if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
         continue label1
        }
        break label1;
       };
      }
      block10 : {
       if (($8_1 | 0) == (3 | 0)) {
        break block10
       }
       if (($8_1 | 0) == (8 | 0)) {
        break block7
       }
       if (!$3_1) {
        break block11
       }
       if ($8_1 >>> 0 < 4 >>> 0) {
        break block11
       }
       if (($8_1 | 0) == (8 | 0)) {
        break block7
       }
      }
      block12 : {
       i64toi32_i32$2 = $1_1;
       i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19_1 = 0
         } else {
          $19_1 = 1
         }
         $20_1 = $19_1;
        } else {
         $20_1 = 0
        }
        $18_1 = $20_1;
       }
       if ($18_1) {
        break block12
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$3_1) {
       break block7
      }
      if ($8_1 >>> 0 < 4 >>> 0) {
       break block7
      }
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
       $21_1 = 1
      } else {
       if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $22_1 = 0
        } else {
         $22_1 = 1
        }
        $23_1 = $22_1;
       } else {
        $23_1 = 0
       }
       $21_1 = $23_1;
      }
      $2_1 = $21_1;
      label2 : while (1) {
       block13 : {
        if ($2_1) {
         break block13
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       $8_1 = $8_1 + -1 | 0;
       if ($8_1 >>> 0 > 3 >>> 0) {
        continue label2
       }
       break label2;
      };
     }
     $356($4_1 | 0, Math_fround(Math_fround(Math_fround($7_1 | 0) * Math_fround(Infinity))));
     i64toi32_i32$0 = $4_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$3;
     break block14;
    }
    block32 : {
     block19 : {
      block33 : {
       block20 : {
        block16 : {
         block15 : {
          if ($8_1) {
           break block15
          }
          $8_1 = 0;
          if (($2_1 & -33 | 0 | 0) != (78 | 0)) {
           break block15
          }
          label3 : while (1) {
           if (($8_1 | 0) == (2 | 0)) {
            break block16
           }
           block18 : {
            block17 : {
             $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
             if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
              break block17
             }
             HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
             $2_1 = HEAPU8[$2_1 >> 0] | 0;
             break block18;
            }
            $2_1 = $304($1_1 | 0) | 0;
           }
           $9_1 = $8_1 + 67109714 | 0;
           $8_1 = $8_1 + 1 | 0;
           if (($2_1 | 32 | 0 | 0) == (HEAP8[$9_1 >> 0] | 0 | 0)) {
            continue label3
           }
           break label3;
          };
         }
         switch ($8_1 | 0) {
         case 3:
          break block16;
         case 0:
          break block19;
         default:
          break block20;
         };
        }
        block22 : {
         block21 : {
          $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
          if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block21
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
          $2_1 = HEAPU8[$2_1 >> 0] | 0;
          break block22;
         }
         $2_1 = $304($1_1 | 0) | 0;
        }
        block24 : {
         block23 : {
          if (($2_1 | 0) != (40 | 0)) {
           break block23
          }
          $8_1 = 1;
          break block24;
         }
         i64toi32_i32$3 = 0;
         $10_1 = 0;
         $10$hi = i64toi32_i32$3;
         i64toi32_i32$3 = 2147450880;
         $11_1 = 0;
         $11$hi = i64toi32_i32$3;
         i64toi32_i32$0 = $1_1;
         i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         i64toi32_i32$1 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
          $24_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
            $25_1 = 0
           } else {
            $25_1 = 1
           }
           $26_1 = $25_1;
          } else {
           $26_1 = 0
          }
          $24_1 = $26_1;
         }
         if ($24_1) {
          break block14
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         break block14;
        }
        label4 : while (1) {
         block26 : {
          block25 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break block25
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break block26;
          }
          $2_1 = $304($1_1 | 0) | 0;
         }
         $9_1 = $2_1 + -65 | 0;
         block28 : {
          block27 : {
           if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
            break block27
           }
           if ($9_1 >>> 0 < 26 >>> 0) {
            break block27
           }
           $9_1 = $2_1 + -97 | 0;
           if (($2_1 | 0) == (95 | 0)) {
            break block27
           }
           if ($9_1 >>> 0 >= 26 >>> 0) {
            break block28
           }
          }
          $8_1 = $8_1 + 1 | 0;
          continue label4;
         }
         break label4;
        };
        i64toi32_i32$0 = 2147450880;
        $11_1 = 0;
        $11$hi = i64toi32_i32$0;
        if (($2_1 | 0) == (41 | 0)) {
         break block14
        }
        block29 : {
         i64toi32_i32$1 = $1_1;
         i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
         $10_1 = i64toi32_i32$0;
         $10$hi = i64toi32_i32$2;
         i64toi32_i32$1 = i64toi32_i32$0;
         i64toi32_i32$0 = 0;
         i64toi32_i32$3 = 0;
         if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
          $27_1 = 1
         } else {
          if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
           if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
            $28_1 = 0
           } else {
            $28_1 = 1
           }
           $29_1 = $28_1;
          } else {
           $29_1 = 0
          }
          $27_1 = $29_1;
         }
         if ($27_1) {
          break block29
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        block31 : {
         block30 : {
          if (!$3_1) {
           break block30
          }
          if ($8_1) {
           break block31
          }
          break block32;
         }
         HEAP32[($231() | 0) >> 2] = 28;
         i64toi32_i32$1 = 0;
         $10_1 = 0;
         $10$hi = i64toi32_i32$1;
         break block33;
        }
        label5 : while (1) {
         block34 : {
          i64toi32_i32$1 = $10$hi;
          i64toi32_i32$3 = $10_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
           $30_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
            if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
             $31_1 = 0
            } else {
             $31_1 = 1
            }
            $32_1 = $31_1;
           } else {
            $32_1 = 0
           }
           $30_1 = $32_1;
          }
          if ($30_1) {
           break block34
          }
          HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         $8_1 = $8_1 + -1 | 0;
         if (!$8_1) {
          break block32
         }
         continue label5;
        };
       }
       i64toi32_i32$3 = 0;
       $10_1 = 0;
       $10$hi = i64toi32_i32$3;
       block35 : {
        i64toi32_i32$0 = $1_1;
        i64toi32_i32$3 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$0 = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
         $33_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
           $34_1 = 0
          } else {
           $34_1 = 1
          }
          $35_1 = $34_1;
         } else {
          $35_1 = 0
         }
         $33_1 = $35_1;
        }
        if ($33_1) {
         break block35
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       HEAP32[($231() | 0) >> 2] = 28;
      }
      i64toi32_i32$0 = $10$hi;
      $303($1_1 | 0, $10_1 | 0, i64toi32_i32$0 | 0);
      break block;
     }
     block36 : {
      if (($2_1 | 0) != (48 | 0)) {
       break block36
      }
      block38 : {
       block37 : {
        $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
        if (($8_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block37
        }
        HEAP32[($1_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
        $8_1 = HEAPU8[$8_1 >> 0] | 0;
        break block38;
       }
       $8_1 = $304($1_1 | 0) | 0;
      }
      block39 : {
       if (($8_1 & -33 | 0 | 0) != (88 | 0)) {
        break block39
       }
       $313($4_1 + 16 | 0 | 0, $1_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $11_1 = i64toi32_i32$0;
       $11$hi = i64toi32_i32$1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$0;
       break block14;
      }
      i64toi32_i32$2 = $1_1;
      i64toi32_i32$0 = HEAP32[($1_1 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($1_1 + 116 | 0) >> 2] | 0;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
       $36_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $37_1 = 0
        } else {
         $37_1 = 1
        }
        $38_1 = $37_1;
       } else {
        $38_1 = 0
       }
       $36_1 = $38_1;
      }
      if ($36_1) {
       break block36
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     $314($4_1 + 32 | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 | 0, $5_1 | 0, $7_1 | 0, $3_1 | 0);
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$2;
     break block14;
    }
    i64toi32_i32$2 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$2;
    break block14;
   }
   i64toi32_i32$2 = 0;
   $11_1 = 0;
   $11$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $10$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $10_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $11$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
  global$0 = $4_1 + 48 | 0;
 }
 
 function $312($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $313($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $6_1 = 0, $16$hi = 0, $19$hi = 0, $15$hi = 0, $16_1 = 0, $19_1 = 0, $17$hi = 0, $15_1 = 0, $14$hi = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $10_1 = 0, $18_1 = 0, $8_1 = 0, $9_1 = 0, $20$hi = 0, $12_1 = 0, $20_1 = 0, $11_1 = 0, $13_1 = 0, $112_1 = 0, $113_1 = 0, $114_1 = 0, $115_1 = 0, $116_1 = 0, $117_1 = 0, $118_1 = 0, $119_1 = 0, $120_1 = 0, $121_1 = 0, $122_1 = 0, $123_1 = 0, $124_1 = 0, $125_1 = 0, $127_1 = 0, $129_1 = 0, $130_1 = 0, $131_1 = 0, $132_1 = 0, $133_1 = 0, $134_1 = 0, $135_1 = 0, $136_1 = 0, $138_1 = 0, $140_1 = 0, $126_1 = 0, $126$hi = 0, $128_1 = 0, $128$hi = 0, $137_1 = 0, $137$hi = 0, $139_1 = 0, $139$hi = 0, $156_1 = 0, $156$hi = 0, $158_1 = 0, $158$hi = 0, $204_1 = 0, $204$hi = 0, $208_1 = 0, $208$hi = 0, $249_1 = 0, $249$hi = 0, $253_1 = 0, $253$hi = 0, $264$hi = 0, $271$hi = 0, $280_1 = 0, $280$hi = 0, $282_1 = 0, $282$hi = 0, $286_1 = 0, $286$hi = 0, $288_1 = 0, $288$hi = 0, $296_1 = 0, $296$hi = 0, $312$hi = 0, $141_1 = 0, $317_1 = 0, $317$hi = 0, $319$hi = 0, $142_1 = 0, $322_1 = 0, $322$hi = 0, $339$hi = 0, $346_1 = 0, $347_1 = 0, $350$hi = 0, $373_1 = 0, $373$hi = 0, $375_1 = 0, $375$hi = 0, $407_1 = 0, $407$hi = 0, $409_1 = 0, $409$hi = 0, $413_1 = 0, $413$hi = 0, $415_1 = 0, $415$hi = 0, $424_1 = 0, $424$hi = 0, $427_1 = 0, $427$hi = 0, $431_1 = 0, $431$hi = 0, $433_1 = 0, $433$hi = 0, $435_1 = 0, $435$hi = 0, $437_1 = 0, $437$hi = 0, $441_1 = 0, $441$hi = 0, $443_1 = 0, $443$hi = 0, $471_1 = 0, $471$hi = 0, $473_1 = 0, $473$hi = 0, $477_1 = 0, $477$hi = 0, $479_1 = 0, $479$hi = 0;
  $6_1 = global$0 - 432 | 0;
  global$0 = $6_1;
  block1 : {
   block : {
    $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
     break block
    }
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
    $7_1 = HEAPU8[$7_1 >> 0] | 0;
    break block1;
   }
   $7_1 = $304($1_1 | 0) | 0;
  }
  $8_1 = 0;
  i64toi32_i32$0 = 0;
  $14_1 = 0;
  $14$hi = i64toi32_i32$0;
  $9_1 = 0;
  block3 : {
   block5 : {
    block4 : {
     label : while (1) {
      block2 : {
       if (($7_1 | 0) == (48 | 0)) {
        break block2
       }
       if (($7_1 | 0) != (46 | 0)) {
        break block3
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block4
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       break block5;
      }
      block6 : {
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block6
       }
       $9_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
       $7_1 = HEAPU8[$7_1 >> 0] | 0;
       continue label;
      }
      $9_1 = 1;
      $7_1 = $304($1_1 | 0) | 0;
      continue label;
     };
    }
    $7_1 = $304($1_1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $14_1 = 0;
   $14$hi = i64toi32_i32$0;
   block7 : {
    if (($7_1 | 0) == (48 | 0)) {
     break block7
    }
    $8_1 = 1;
    break block3;
   }
   label1 : while (1) {
    block9 : {
     block8 : {
      $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
       break block8
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
      $7_1 = HEAPU8[$7_1 >> 0] | 0;
      break block9;
     }
     $7_1 = $304($1_1 | 0) | 0;
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$2 = $14_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $14_1 = i64toi32_i32$4;
    $14$hi = i64toi32_i32$5;
    if (($7_1 | 0) == (48 | 0)) {
     continue label1
    }
    break label1;
   };
   $8_1 = 1;
   $9_1 = 1;
  }
  i64toi32_i32$5 = 1073676288;
  $15_1 = 0;
  $15$hi = i64toi32_i32$5;
  $10_1 = 0;
  i64toi32_i32$5 = 0;
  $16_1 = 0;
  $16$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $17_1 = 0;
  $17$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$5;
  $11_1 = 0;
  i64toi32_i32$5 = 0;
  $19_1 = 0;
  $19$hi = i64toi32_i32$5;
  block12 : {
   label2 : while (1) {
    $12_1 = $7_1;
    block13 : {
     block10 : {
      $13_1 = $7_1 + -48 | 0;
      if ($13_1 >>> 0 < 10 >>> 0) {
       break block10
      }
      $12_1 = $7_1 | 32 | 0;
      block11 : {
       if (($7_1 | 0) == (46 | 0)) {
        break block11
       }
       if (($12_1 + -97 | 0) >>> 0 > 5 >>> 0) {
        break block12
       }
      }
      if (($7_1 | 0) != (46 | 0)) {
       break block10
      }
      if ($8_1) {
       break block12
      }
      $8_1 = 1;
      i64toi32_i32$5 = $19$hi;
      $14_1 = $19_1;
      $14$hi = i64toi32_i32$5;
      break block13;
     }
     $7_1 = ($7_1 | 0) > (57 | 0) ? $12_1 + -87 | 0 : $13_1;
     block15 : {
      block14 : {
       i64toi32_i32$5 = $19$hi;
       i64toi32_i32$0 = $19_1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 7;
       if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
        $112_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $113_1 = 0
         } else {
          $113_1 = 1
         }
         $114_1 = $113_1;
        } else {
         $114_1 = 0
        }
        $112_1 = $114_1;
       }
       if ($112_1) {
        break block14
       }
       $10_1 = $7_1 + ($10_1 << 4 | 0) | 0;
       break block15;
      }
      block16 : {
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = $19_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 28;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break block16
       }
       $357($6_1 + 48 | 0 | 0, $7_1 | 0);
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       i64toi32_i32$3 = $18$hi;
       i64toi32_i32$0 = $15$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = 1073414144;
       $362($6_1 + 32 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $15_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
       $126_1 = i64toi32_i32$5;
       $126$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] | 0;
       $128_1 = i64toi32_i32$2;
       $128$hi = i64toi32_i32$5;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
       $18_1 = i64toi32_i32$5;
       $18$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
       $15_1 = i64toi32_i32$2;
       $15$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $126$hi;
       i64toi32_i32$2 = $128$hi;
       i64toi32_i32$0 = $18$hi;
       i64toi32_i32$3 = $15$hi;
       $362($6_1 + 16 | 0 | 0, $126_1 | 0, i64toi32_i32$5 | 0, $128_1 | 0, i64toi32_i32$2 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $6_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
       $137_1 = i64toi32_i32$3;
       $137$hi = i64toi32_i32$0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
       $139_1 = i64toi32_i32$0;
       $139$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $16$hi;
       i64toi32_i32$3 = $17$hi;
       i64toi32_i32$3 = $137$hi;
       i64toi32_i32$0 = $139$hi;
       i64toi32_i32$2 = $16$hi;
       i64toi32_i32$5 = $17$hi;
       $350($6_1 | 0, $137_1 | 0, i64toi32_i32$3 | 0, $139_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
       i64toi32_i32$0 = $6_1;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
       $17_1 = i64toi32_i32$5;
       $17$hi = i64toi32_i32$2;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $16_1 = i64toi32_i32$2;
       $16$hi = i64toi32_i32$5;
       break block15;
      }
      if (!$7_1) {
       break block15
      }
      if ($11_1) {
       break block15
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $15$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$2 = $15$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 1073610752;
      $362($6_1 + 80 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
      $156_1 = i64toi32_i32$3;
      $156$hi = i64toi32_i32$0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
      $158_1 = i64toi32_i32$0;
      $158$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $156$hi;
      i64toi32_i32$0 = $158$hi;
      i64toi32_i32$2 = $16$hi;
      i64toi32_i32$5 = $17$hi;
      $350($6_1 + 64 | 0 | 0, $156_1 | 0, i64toi32_i32$3 | 0, $158_1 | 0, i64toi32_i32$0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0);
      $11_1 = 1;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 72 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 76 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
     }
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$0 = $19_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$4;
     $9_1 = 1;
    }
    block17 : {
     $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     if (($7_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
      break block17
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + 1 | 0;
     $7_1 = HEAPU8[$7_1 >> 0] | 0;
     continue label2;
    }
    $7_1 = $304($1_1 | 0) | 0;
    continue label2;
   };
  }
  block22 : {
   block18 : {
    if ($9_1) {
     break block18
    }
    block21 : {
     block20 : {
      block19 : {
       i64toi32_i32$5 = $1_1;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
       i64toi32_i32$5 = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
        $115_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $116_1 = 0
         } else {
          $116_1 = 1
         }
         $117_1 = $116_1;
        } else {
         $117_1 = 0
        }
        $115_1 = $117_1;
       }
       if ($115_1) {
        break block19
       }
       $7_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -1 | 0;
       if (!$5_1) {
        break block20
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -2 | 0;
       if (!$8_1) {
        break block21
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $7_1 + -3 | 0;
       break block21;
      }
      if ($5_1) {
       break block21
      }
     }
     i64toi32_i32$5 = 0;
     $303($1_1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $204_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $204$hi = i64toi32_i32$0;
    wasm2js_scratch_store_f64(+(+($4_1 | 0)));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$5 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $208_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
    $208$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $204$hi;
    i64toi32_i32$0 = $204_1;
    i64toi32_i32$5 = $208$hi;
    i64toi32_i32$4 = $208_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
    $355($6_1 + 96 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 104 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 108 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$5;
    break block22;
   }
   block23 : {
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $118_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $119_1 = 0
      } else {
       $119_1 = 1
      }
      $120_1 = $119_1;
     } else {
      $120_1 = 0
     }
     $118_1 = $120_1;
    }
    if ($118_1) {
     break block23
    }
    i64toi32_i32$3 = $19$hi;
    $15_1 = $19_1;
    $15$hi = i64toi32_i32$3;
    label3 : while (1) {
     $10_1 = $10_1 << 4 | 0;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$4 = $15_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $15_1 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label3
     }
     break label3;
    };
   }
   block25 : {
    block28 : {
     block27 : {
      block24 : {
       if (($7_1 & -33 | 0 | 0) != (80 | 0)) {
        break block24
       }
       i64toi32_i32$3 = $315($1_1 | 0, $5_1 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $15_1 = i64toi32_i32$3;
       $15$hi = i64toi32_i32$1;
       i64toi32_i32$0 = i64toi32_i32$3;
       i64toi32_i32$3 = -2147483648;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break block25
       }
       block26 : {
        if (!$5_1) {
         break block26
        }
        i64toi32_i32$4 = $1_1;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
        i64toi32_i32$4 = i64toi32_i32$0;
        i64toi32_i32$0 = -1;
        i64toi32_i32$3 = -1;
        if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
         $121_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$3 >>> 0) {
           $122_1 = 0
          } else {
           $122_1 = 1
          }
          $123_1 = $122_1;
         } else {
          $123_1 = 0
         }
         $121_1 = $123_1;
        }
        if ($121_1) {
         break block27
        }
        break block28;
       }
       i64toi32_i32$4 = 0;
       $16_1 = 0;
       $16$hi = i64toi32_i32$4;
       i64toi32_i32$4 = 0;
       $303($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$4 = 0;
       $19_1 = 0;
       $19$hi = i64toi32_i32$4;
       break block22;
      }
      i64toi32_i32$4 = 0;
      $15_1 = 0;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $1_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
       $124_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $125_1 = 0
        } else {
         $125_1 = 1
        }
        $127_1 = $125_1;
       } else {
        $127_1 = 0
       }
       $124_1 = $127_1;
      }
      if ($124_1) {
       break block25
      }
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = 0;
    $15_1 = 0;
    $15$hi = i64toi32_i32$3;
   }
   block29 : {
    if ($10_1) {
     break block29
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$4 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $249_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $249$hi = i64toi32_i32$1;
    wasm2js_scratch_store_f64(+(+($4_1 | 0)));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -2147483648;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $253_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
    $253$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $249$hi;
    i64toi32_i32$1 = $249_1;
    i64toi32_i32$3 = $253$hi;
    i64toi32_i32$4 = $253_1;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$4 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $355($6_1 + 112 | 0 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$3;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 116 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$3;
    break block22;
   }
   block30 : {
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = i64toi32_i32$5 ? $14_1 : $19_1;
    i64toi32_i32$0 = i64toi32_i32$5 ? i64toi32_i32$3 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 2;
    i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $129_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
     $129_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $264$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $264$hi;
    i64toi32_i32$0 = $129_1;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$3 = $15_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -32;
    i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $271$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$4 = $271$hi;
    i64toi32_i32$3 = 0 - $3_1 | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
     $130_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
       $131_1 = 0
      } else {
       $131_1 = 1
      }
      $132_1 = $131_1;
     } else {
      $132_1 = 0
     }
     $130_1 = $132_1;
    }
    if ($130_1) {
     break block30
    }
    HEAP32[($231() | 0) >> 2] = 68;
    $357($6_1 + 160 | 0 | 0, $4_1 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 164 | 0) >> 2] | 0;
    $280_1 = i64toi32_i32$2;
    $280$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 168 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 172 | 0) >> 2] | 0;
    $282_1 = i64toi32_i32$1;
    $282$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $280$hi;
    i64toi32_i32$1 = $282$hi;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = 2147418111;
    $362($6_1 + 144 | 0 | 0, $280_1 | 0, i64toi32_i32$2 | 0, $282_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
    $286_1 = i64toi32_i32$4;
    $286$hi = i64toi32_i32$3;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 152 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 156 | 0) >> 2] | 0;
    $288_1 = i64toi32_i32$3;
    $288$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $286$hi;
    i64toi32_i32$3 = $288$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    $362($6_1 + 128 | 0 | 0, $286_1 | 0, i64toi32_i32$4 | 0, $288_1 | 0, i64toi32_i32$3 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 136 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 140 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$1;
    $16$hi = i64toi32_i32$2;
    break block22;
   }
   block31 : {
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$1 = $3_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $296_1 = i64toi32_i32$1;
    $296$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$3 = $19_1;
    i64toi32_i32$1 = $296$hi;
    i64toi32_i32$4 = $296_1;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $133_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$4 >>> 0) {
       $134_1 = 0
      } else {
       $134_1 = 1
      }
      $135_1 = $134_1;
     } else {
      $135_1 = 0
     }
     $133_1 = $135_1;
    }
    if ($133_1) {
     break block31
    }
    block32 : {
     if (($10_1 | 0) <= (-1 | 0)) {
      break block32
     }
     label4 : while (1) {
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$3 = $17$hi;
      i64toi32_i32$3 = $16$hi;
      i64toi32_i32$2 = $17$hi;
      i64toi32_i32$4 = 0;
      i64toi32_i32$1 = -1073807360;
      $350($6_1 + 416 | 0 | 0, $16_1 | 0, i64toi32_i32$3 | 0, $17_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$4 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 1073610752;
      $7_1 = $353($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$3 = i64toi32_i32$4;
      i64toi32_i32$4 = $6_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
      $312$hi = i64toi32_i32$2;
      i64toi32_i32$2 = i64toi32_i32$1;
      $7_1 = ($7_1 | 0) > (-1 | 0);
      i64toi32_i32$0 = $7_1;
      i64toi32_i32$2 = $312$hi;
      $141_1 = i64toi32_i32$3;
      i64toi32_i32$3 = i64toi32_i32$1;
      i64toi32_i32$1 = i64toi32_i32$0 ? $141_1 : $16_1;
      i64toi32_i32$4 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$3;
      $317_1 = i64toi32_i32$1;
      $317$hi = i64toi32_i32$4;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 424 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 428 | 0) >> 2] | 0;
      $319$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = $319$hi;
      $142_1 = i64toi32_i32$4;
      i64toi32_i32$4 = $17$hi;
      i64toi32_i32$2 = i64toi32_i32$3 ? $142_1 : $17_1;
      i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
      $322_1 = i64toi32_i32$2;
      $322$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $16$hi;
      i64toi32_i32$2 = i64toi32_i32$4;
      i64toi32_i32$3 = $317$hi;
      i64toi32_i32$1 = $322$hi;
      $350($6_1 + 400 | 0 | 0, $16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0, $317_1 | 0, i64toi32_i32$3 | 0, $322_1 | 0, i64toi32_i32$1 | 0);
      $1_1 = $10_1 << 1 | 0;
      $10_1 = $1_1 | $7_1 | 0;
      i64toi32_i32$1 = $19$hi;
      i64toi32_i32$2 = $19_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $19_1 = i64toi32_i32$4;
      $19$hi = i64toi32_i32$5;
      i64toi32_i32$1 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 408 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 412 | 0) >> 2] | 0;
      $17_1 = i64toi32_i32$5;
      $17$hi = i64toi32_i32$2;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
      $16_1 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$5;
      if (($1_1 | 0) > (-1 | 0)) {
       continue label4
      }
      break label4;
     };
    }
    block34 : {
     block33 : {
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$5 = 0;
      $339$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $19$hi;
      i64toi32_i32$1 = $19_1;
      i64toi32_i32$2 = $339$hi;
      i64toi32_i32$0 = 32 - $3_1 | 0;
      i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $14_1 = i64toi32_i32$3;
      $14$hi = i64toi32_i32$4;
      $7_1 = i64toi32_i32$3;
      $346_1 = (i64toi32_i32$3 | 0) > (0 | 0) ? i64toi32_i32$3 : 0;
      $347_1 = $2_1;
      i64toi32_i32$4 = 0;
      $350$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $14$hi;
      i64toi32_i32$5 = i64toi32_i32$3;
      i64toi32_i32$1 = $350$hi;
      i64toi32_i32$0 = $2_1;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
       $136_1 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $138_1 = 0
        } else {
         $138_1 = 1
        }
        $140_1 = $138_1;
       } else {
        $140_1 = 0
       }
       $136_1 = $140_1;
      }
      $7_1 = $136_1 ? $346_1 : $347_1;
      if ($7_1 >>> 0 < 113 >>> 0) {
       break block33
      }
      $357($6_1 + 384 | 0 | 0, $4_1 | 0);
      i64toi32_i32$5 = 0;
      $14_1 = 0;
      $14$hi = i64toi32_i32$5;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 392 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 396 | 0) >> 2] | 0;
      $15_1 = i64toi32_i32$5;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 384 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 388 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $20_1 = 0;
      $20$hi = i64toi32_i32$5;
      break block34;
     }
     $355($6_1 + 352 | 0 | 0, +(+$305(+(1.0), 144 - $7_1 | 0 | 0)));
     $357($6_1 + 336 | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 352 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 356 | 0) >> 2] | 0;
     $373_1 = i64toi32_i32$5;
     $373$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 360 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 364 | 0) >> 2] | 0;
     $375_1 = i64toi32_i32$4;
     $375$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 336 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 340 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$5;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 344 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 348 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$4 = $375$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $15$hi;
     $306($6_1 + 368 | 0 | 0, $373_1 | 0, i64toi32_i32$5 | 0, $375_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$4 = $6_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 376 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 380 | 0) >> 2] | 0;
     $20_1 = i64toi32_i32$1;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 368 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 372 | 0) >> 2] | 0;
     $14_1 = i64toi32_i32$0;
     $14$hi = i64toi32_i32$1;
    }
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $16$hi;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $7_1 = !($10_1 & 1 | 0) & ($7_1 >>> 0 < 32 >>> 0 & ($352($16_1 | 0, i64toi32_i32$1 | 0, $17_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0 | 0) != (0 | 0) | 0) | 0;
    $358($6_1 + 320 | 0 | 0, $10_1 | $7_1 | 0 | 0);
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 324 | 0) >> 2] | 0;
    $407_1 = i64toi32_i32$5;
    $407$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 328 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 332 | 0) >> 2] | 0;
    $409_1 = i64toi32_i32$4;
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$0 = $407$hi;
    i64toi32_i32$1 = $409$hi;
    $362($6_1 + 304 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $15_1 | 0, i64toi32_i32$4 | 0, $407_1 | 0, i64toi32_i32$0 | 0, $409_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $413_1 = i64toi32_i32$1;
    $413$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 312 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 316 | 0) >> 2] | 0;
    $415_1 = i64toi32_i32$0;
    $415$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$1 = $413$hi;
    i64toi32_i32$0 = $415$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$5 = $20$hi;
    $350($6_1 + 272 | 0 | 0, $413_1 | 0, i64toi32_i32$1 | 0, $415_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$5 = $16$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = i64toi32_i32$2 ? 0 : $16_1;
    i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
    $424_1 = i64toi32_i32$1;
    $424$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $17$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? 0 : $17_1;
    i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
    $427_1 = i64toi32_i32$5;
    $427$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$5 = $15$hi;
    i64toi32_i32$4 = $424$hi;
    i64toi32_i32$0 = $427$hi;
    $362($6_1 + 288 | 0 | 0, $18_1 | 0, i64toi32_i32$2 | 0, $15_1 | 0, i64toi32_i32$5 | 0, $424_1 | 0, i64toi32_i32$4 | 0, $427_1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 288 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 292 | 0) >> 2] | 0;
    $431_1 = i64toi32_i32$0;
    $431$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 296 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 300 | 0) >> 2] | 0;
    $433_1 = i64toi32_i32$4;
    $433$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
    $435_1 = i64toi32_i32$0;
    $435$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 280 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 284 | 0) >> 2] | 0;
    $437_1 = i64toi32_i32$4;
    $437$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $431$hi;
    i64toi32_i32$4 = $433$hi;
    i64toi32_i32$5 = $435$hi;
    i64toi32_i32$2 = $437$hi;
    $350($6_1 + 256 | 0 | 0, $431_1 | 0, i64toi32_i32$0 | 0, $433_1 | 0, i64toi32_i32$4 | 0, $435_1 | 0, i64toi32_i32$5 | 0, $437_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
    $441_1 = i64toi32_i32$2;
    $441$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 264 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 268 | 0) >> 2] | 0;
    $443_1 = i64toi32_i32$5;
    $443$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$2 = $20$hi;
    i64toi32_i32$2 = $441$hi;
    i64toi32_i32$5 = $443$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$0 = $20$hi;
    $364($6_1 + 240 | 0 | 0, $441_1 | 0, i64toi32_i32$2 | 0, $443_1 | 0, i64toi32_i32$5 | 0, $14_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$0 | 0);
    block35 : {
     i64toi32_i32$5 = $6_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
     $16_1 = i64toi32_i32$0;
     $16$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 248 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 252 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$4;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ($352($16_1 | 0, i64toi32_i32$0 | 0, $17_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0) | 0) {
      break block35
     }
     HEAP32[($231() | 0) >> 2] = 68;
    }
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $16$hi;
    i64toi32_i32$5 = $17$hi;
    $307($6_1 + 224 | 0 | 0, $16_1 | 0, i64toi32_i32$2 | 0, $17_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0);
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 232 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 236 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
    $16_1 = i64toi32_i32$2;
    $16$hi = i64toi32_i32$5;
    break block22;
   }
   HEAP32[($231() | 0) >> 2] = 68;
   $357($6_1 + 208 | 0 | 0, $4_1 | 0);
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
   $471_1 = i64toi32_i32$5;
   $471$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 216 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 220 | 0) >> 2] | 0;
   $473_1 = i64toi32_i32$2;
   $473$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $471$hi;
   i64toi32_i32$2 = $473$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 65536;
   $362($6_1 + 192 | 0 | 0, $471_1 | 0, i64toi32_i32$5 | 0, $473_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 192 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 196 | 0) >> 2] | 0;
   $477_1 = i64toi32_i32$0;
   $477$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 200 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 204 | 0) >> 2] | 0;
   $479_1 = i64toi32_i32$4;
   $479$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $477$hi;
   i64toi32_i32$4 = $479$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 65536;
   $362($6_1 + 176 | 0 | 0, $477_1 | 0, i64toi32_i32$0 | 0, $479_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$4 = $6_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 184 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 188 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $16$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $16_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $19$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $6_1 + 432 | 0;
 }
 
 function $314($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $7_1 = 0, i64toi32_i32$2 = 0, $18$hi = 0, $18_1 = 0, $14_1 = 0, $19$hi = 0, $13_1 = 0, $19_1 = 0, i64toi32_i32$0 = 0, $11_1 = 0, $15_1 = 0, $16_1 = 0, $21$hi = 0, $20$hi = 0, $8_1 = 0, $12_1 = 0, $21_1 = 0, $20_1 = 0, $9_1 = 0, $22$hi = 0, $23$hi = 0, $22_1 = 0, $23_1 = 0, $10_1 = 0, $171_1 = 0, $172_1 = 0, $173_1 = 0, $174_1 = 0, $175_1 = 0, $176_1 = 0, $177_1 = 0, $178_1 = 0, $179_1 = 0, $180_1 = 0, $181_1 = 0, $182_1 = 0, $183_1 = 0, $184_1 = 0, $185_1 = 0, $186_1 = 0, $187_1 = 0, $188_1 = 0, $189_1 = 0, $190_1 = 0, $191_1 = 0, $192_1 = 0, $193_1 = 0, $194_1 = 0, $195_1 = 0, $17_1 = 0, $24_1 = 0.0, $125_1 = 0, $205_1 = 0, $205$hi = 0, $209_1 = 0, $209$hi = 0, $235_1 = 0, $235$hi = 0, $237_1 = 0, $237$hi = 0, $239_1 = 0, $239$hi = 0, $241_1 = 0, $241$hi = 0, $249$hi = 0, $258_1 = 0, $258$hi = 0, $260_1 = 0, $260$hi = 0, $264_1 = 0, $264$hi = 0, $266_1 = 0, $266$hi = 0, $274_1 = 0, $274$hi = 0, $283_1 = 0, $283$hi = 0, $285_1 = 0, $285$hi = 0, $289_1 = 0, $289$hi = 0, $291_1 = 0, $291$hi = 0, $338_1 = 0, $338$hi = 0, $340_1 = 0, $340$hi = 0, $342_1 = 0, $342$hi = 0, $344_1 = 0, $344$hi = 0, $361_1 = 0, $361$hi = 0, $363_1 = 0, $363$hi = 0, $365_1 = 0, $365$hi = 0, $367_1 = 0, $367$hi = 0, $378_1 = 0, $378$hi = 0, $380_1 = 0, $380$hi = 0, $382_1 = 0, $382$hi = 0, $384_1 = 0, $384$hi = 0, $410_1 = 0, $410$hi = 0, $412_1 = 0, $412$hi = 0, $414_1 = 0, $414$hi = 0, $416_1 = 0, $416$hi = 0, $426_1 = 0, $426$hi = 0, $428_1 = 0, $428$hi = 0, $430_1 = 0, $430$hi = 0, $432_1 = 0, $432$hi = 0, $451_1 = 0, $452_1 = 0, $469_1 = 0, $547$hi = 0, $549$hi = 0, $557_1 = 0, $557$hi = 0, $698_1 = 0, $698$hi = 0, $700_1 = 0, $700$hi = 0, $702_1 = 0, $702$hi = 0, $704_1 = 0, $704$hi = 0, $721_1 = 0, $721$hi = 0, $723_1 = 0, $723$hi = 0, $763_1 = 0, $824_1 = 0, $824$hi = 0, $826_1 = 0, $826$hi = 0, $843_1 = 0, $843$hi = 0, $845_1 = 0, $845$hi = 0, $861_1 = 0, $861$hi = 0, $863_1 = 0, $863$hi = 0, $898_1 = 0, $898$hi = 0, $900_1 = 0, $900$hi = 0, $917_1 = 0, $917$hi = 0, $919_1 = 0, $919$hi = 0, $940_1 = 0, $940$hi = 0, $942_1 = 0, $942$hi = 0, $956_1 = 0, $956$hi = 0, $958_1 = 0, $958$hi = 0, $970_1 = 0, $970$hi = 0, $972_1 = 0, $972$hi = 0, $991_1 = 0, $991$hi = 0, $993_1 = 0, $993$hi = 0, $1014_1 = 0, $1014$hi = 0, $1016_1 = 0, $1016$hi = 0, $1019$hi = 0, $196_1 = 0, $1026$hi = 0, $197_1 = 0;
  $7_1 = global$0 - 8976 | 0;
  global$0 = $7_1;
  $8_1 = 0;
  $9_1 = 0 - $4_1 | 0;
  $10_1 = $9_1 - $3_1 | 0;
  i64toi32_i32$0 = 0;
  $18_1 = 0;
  $18$hi = i64toi32_i32$0;
  $11_1 = 0;
  block1 : {
   block3 : {
    block2 : {
     label : while (1) {
      block : {
       if (($2_1 | 0) == (48 | 0)) {
        break block
       }
       if (($2_1 | 0) != (46 | 0)) {
        break block1
       }
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break block3;
      }
      block4 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block4
       }
       $11_1 = 1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       continue label;
      }
      $11_1 = 1;
      $2_1 = $304($1_1 | 0) | 0;
      continue label;
     };
    }
    $2_1 = $304($1_1 | 0) | 0;
   }
   i64toi32_i32$0 = 0;
   $18_1 = 0;
   $18$hi = i64toi32_i32$0;
   block5 : {
    if (($2_1 | 0) != (48 | 0)) {
     break block5
    }
    label1 : while (1) {
     block7 : {
      block6 : {
       $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block6
       }
       HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       $2_1 = HEAPU8[$2_1 >> 0] | 0;
       break block7;
      }
      $2_1 = $304($1_1 | 0) | 0;
     }
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = $18$hi + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
     if (($2_1 | 0) == (48 | 0)) {
      continue label1
     }
     break label1;
    };
    $11_1 = 1;
   }
   $8_1 = 1;
  }
  $12_1 = 0;
  HEAP32[($7_1 + 784 | 0) >> 2] = 0;
  $13_1 = $2_1 + -48 | 0;
  block23 : {
   block21 : {
    block20 : {
     block22 : {
      block13 : {
       block9 : {
        block8 : {
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          break block8
         }
         i64toi32_i32$5 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$5;
         if ($13_1 >>> 0 <= 9 >>> 0) {
          break block8
         }
         $15_1 = 0;
         $16_1 = 0;
         break block9;
        }
        i64toi32_i32$5 = 0;
        $19_1 = 0;
        $19$hi = i64toi32_i32$5;
        $16_1 = 0;
        $15_1 = 0;
        $12_1 = 0;
        label2 : while (1) {
         block12 : {
          block10 : {
           if (!($14_1 & 1 | 0)) {
            break block10
           }
           block11 : {
            if ($8_1) {
             break block11
            }
            i64toi32_i32$5 = $19$hi;
            $18_1 = $19_1;
            $18$hi = i64toi32_i32$5;
            $8_1 = 1;
            break block12;
           }
           $14_1 = !$11_1;
           break block13;
          }
          i64toi32_i32$5 = $19$hi;
          i64toi32_i32$0 = $19_1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 1;
          i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $19_1 = i64toi32_i32$1;
          $19$hi = i64toi32_i32$4;
          block14 : {
           if (($15_1 | 0) > (2044 | 0)) {
            break block14
           }
           $11_1 = i64toi32_i32$1;
           $14_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
           block15 : {
            if (!$16_1) {
             break block15
            }
            $13_1 = ($2_1 + Math_imul(HEAP32[$14_1 >> 2] | 0, 10) | 0) + -48 | 0;
           }
           $12_1 = ($2_1 | 0) == (48 | 0) ? $12_1 : $11_1;
           HEAP32[$14_1 >> 2] = $13_1;
           $11_1 = 1;
           $2_1 = $16_1 + 1 | 0;
           $125_1 = $2_1;
           $2_1 = ($2_1 | 0) == (9 | 0);
           $16_1 = $2_1 ? 0 : $125_1;
           $15_1 = $15_1 + $2_1 | 0;
           break block12;
          }
          if (($2_1 | 0) == (48 | 0)) {
           break block12
          }
          HEAP32[($7_1 + 8960 | 0) >> 2] = HEAP32[($7_1 + 8960 | 0) >> 2] | 0 | 1 | 0;
          $12_1 = 18396;
         }
         block17 : {
          block16 : {
           $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
           if (($2_1 | 0) == (HEAP32[($1_1 + 104 | 0) >> 2] | 0 | 0)) {
            break block16
           }
           HEAP32[($1_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
           $2_1 = HEAPU8[$2_1 >> 0] | 0;
           break block17;
          }
          $2_1 = $304($1_1 | 0) | 0;
         }
         $13_1 = $2_1 + -48 | 0;
         $14_1 = ($2_1 | 0) == (46 | 0);
         if ($14_1) {
          continue label2
         }
         if ($13_1 >>> 0 < 10 >>> 0) {
          continue label2
         }
         break label2;
        };
       }
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$4 = $19$hi;
       i64toi32_i32$2 = $8_1;
       i64toi32_i32$4 = $18$hi;
       i64toi32_i32$0 = $19$hi;
       i64toi32_i32$3 = i64toi32_i32$2 ? $18_1 : $19_1;
       i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
       $18_1 = i64toi32_i32$3;
       $18$hi = i64toi32_i32$5;
       block18 : {
        if (!$11_1) {
         break block18
        }
        if (($2_1 & -33 | 0 | 0) != (69 | 0)) {
         break block18
        }
        block19 : {
         i64toi32_i32$5 = $315($1_1 | 0, $6_1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $20_1 = i64toi32_i32$5;
         $20$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
          break block19
         }
         if (!$6_1) {
          break block20
         }
         i64toi32_i32$2 = 0;
         $20_1 = 0;
         $20$hi = i64toi32_i32$2;
         i64toi32_i32$4 = $1_1;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
         i64toi32_i32$4 = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = 0;
         if ((i64toi32_i32$3 | 0) < (i64toi32_i32$2 | 0)) {
          $171_1 = 1
         } else {
          if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
            $172_1 = 0
           } else {
            $172_1 = 1
           }
           $173_1 = $172_1;
          } else {
           $173_1 = 0
          }
          $171_1 = $173_1;
         }
         if ($171_1) {
          break block19
         }
         HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$4 = $20$hi;
        i64toi32_i32$5 = $20_1;
        i64toi32_i32$3 = $18$hi;
        i64toi32_i32$2 = $18_1;
        i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
        i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
        if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
        }
        $18_1 = i64toi32_i32$0;
        $18$hi = i64toi32_i32$1;
        break block21;
       }
       $14_1 = !$11_1;
       if (($2_1 | 0) < (0 | 0)) {
        break block22
       }
      }
      i64toi32_i32$4 = $1_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
       $174_1 = 1
      } else {
       if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
         $175_1 = 0
        } else {
         $175_1 = 1
        }
        $176_1 = $175_1;
       } else {
        $176_1 = 0
       }
       $174_1 = $176_1;
      }
      if ($174_1) {
       break block22
      }
      HEAP32[($1_1 + 4 | 0) >> 2] = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + -1 | 0;
     }
     if (!$14_1) {
      break block21
     }
     HEAP32[($231() | 0) >> 2] = 28;
    }
    i64toi32_i32$4 = 0;
    $19_1 = 0;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $303($1_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$4 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$4;
    break block23;
   }
   block24 : {
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    if ($1_1) {
     break block24
    }
    wasm2js_scratch_store_f64(+(0.0));
    i64toi32_i32$4 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$5 = 2147483647;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $205_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $205$hi = i64toi32_i32$5;
    wasm2js_scratch_store_f64(+(+($5_1 | 0)));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$4 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = -2147483648;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $209_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
    $209$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $205$hi;
    i64toi32_i32$5 = $205_1;
    i64toi32_i32$4 = $209$hi;
    i64toi32_i32$1 = $209_1;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
    $355($7_1 | 0, +(+wasm2js_scratch_load_f64()));
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[$7_1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break block23;
   }
   block25 : {
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$2 = $19_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 9;
    if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
     $177_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $178_1 = 0
      } else {
       $178_1 = 1
      }
      $179_1 = $178_1;
     } else {
      $179_1 = 0
     }
     $177_1 = $179_1;
    }
    if ($177_1) {
     break block25
    }
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$2 = $19$hi;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$5 = $19_1;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | 0) {
     break block25
    }
    block26 : {
     if ($3_1 >>> 0 > 30 >>> 0) {
      break block26
     }
     if ($1_1 >>> $3_1 | 0) {
      break block25
     }
    }
    $357($7_1 + 48 | 0 | 0, $5_1 | 0);
    $358($7_1 + 32 | 0 | 0, $1_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
    $235_1 = i64toi32_i32$1;
    $235$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 60 | 0) >> 2] | 0;
    $237_1 = i64toi32_i32$2;
    $237$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 32 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 36 | 0) >> 2] | 0;
    $239_1 = i64toi32_i32$1;
    $239$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 40 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 44 | 0) >> 2] | 0;
    $241_1 = i64toi32_i32$2;
    $241$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $235$hi;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$5 = $239$hi;
    i64toi32_i32$4 = $241$hi;
    $362($7_1 + 16 | 0 | 0, $235_1 | 0, i64toi32_i32$1 | 0, $237_1 | 0, i64toi32_i32$2 | 0, $239_1 | 0, i64toi32_i32$5 | 0, $241_1 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$4;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    break block23;
   }
   block27 : {
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$4 = 0;
    $249$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$5 = $249$hi;
    i64toi32_i32$1 = $9_1 >>> 1 | 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
     $180_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
       $181_1 = 0
      } else {
       $181_1 = 1
      }
      $182_1 = $181_1;
     } else {
      $182_1 = 0
     }
     $180_1 = $182_1;
    }
    if ($180_1) {
     break block27
    }
    HEAP32[($231() | 0) >> 2] = 68;
    $357($7_1 + 96 | 0 | 0, $5_1 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
    $258_1 = i64toi32_i32$2;
    $258$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 104 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] | 0;
    $260_1 = i64toi32_i32$4;
    $260$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $258$hi;
    i64toi32_i32$4 = $260$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = 2147418111;
    $362($7_1 + 80 | 0 | 0, $258_1 | 0, i64toi32_i32$2 | 0, $260_1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
    $264_1 = i64toi32_i32$5;
    $264$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
    $266_1 = i64toi32_i32$1;
    $266$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $264$hi;
    i64toi32_i32$1 = $266$hi;
    i64toi32_i32$4 = -1;
    i64toi32_i32$2 = 2147418111;
    $362($7_1 + 64 | 0 | 0, $264_1 | 0, i64toi32_i32$5 | 0, $266_1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$2;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$4;
    $19$hi = i64toi32_i32$2;
    break block23;
   }
   block28 : {
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$4 = $4_1 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
    $274_1 = i64toi32_i32$4;
    $274$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$1 = $18_1;
    i64toi32_i32$4 = $274$hi;
    i64toi32_i32$5 = $274_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
     $183_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
       $184_1 = 0
      } else {
       $184_1 = 1
      }
      $185_1 = $184_1;
     } else {
      $185_1 = 0
     }
     $183_1 = $185_1;
    }
    if ($183_1) {
     break block28
    }
    HEAP32[($231() | 0) >> 2] = 68;
    $357($7_1 + 144 | 0 | 0, $5_1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 144 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 148 | 0) >> 2] | 0;
    $283_1 = i64toi32_i32$1;
    $283$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 152 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 156 | 0) >> 2] | 0;
    $285_1 = i64toi32_i32$2;
    $285$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $283$hi;
    i64toi32_i32$2 = $285$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 65536;
    $362($7_1 + 128 | 0 | 0, $283_1 | 0, i64toi32_i32$1 | 0, $285_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 128 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 132 | 0) >> 2] | 0;
    $289_1 = i64toi32_i32$4;
    $289$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 136 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
    $291_1 = i64toi32_i32$5;
    $291$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $289$hi;
    i64toi32_i32$5 = $291$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 65536;
    $362($7_1 + 112 | 0 | 0, $289_1 | 0, i64toi32_i32$4 | 0, $291_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 120 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 124 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$2;
    $19$hi = i64toi32_i32$1;
    break block23;
   }
   block29 : {
    if (!$16_1) {
     break block29
    }
    block30 : {
     if (($16_1 | 0) > (8 | 0)) {
      break block30
     }
     $2_1 = ($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0;
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     label3 : while (1) {
      $1_1 = Math_imul($1_1, 10);
      $16_1 = $16_1 + 1 | 0;
      if (($16_1 | 0) != (9 | 0)) {
       continue label3
      }
      break label3;
     };
     HEAP32[$2_1 >> 2] = $1_1;
    }
    $15_1 = $15_1 + 1 | 0;
   }
   i64toi32_i32$1 = $18$hi;
   $16_1 = $18_1;
   block31 : {
    if (($12_1 | 0) >= (9 | 0)) {
     break block31
    }
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 17;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $186_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $187_1 = 0
      } else {
       $187_1 = 1
      }
      $188_1 = $187_1;
     } else {
      $188_1 = 0
     }
     $186_1 = $188_1;
    }
    if ($186_1) {
     break block31
    }
    if (($12_1 | 0) > ($16_1 | 0)) {
     break block31
    }
    block32 : {
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$4 = $18_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 9;
     if ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break block32
     }
     $357($7_1 + 192 | 0 | 0, $5_1 | 0);
     $358($7_1 + 176 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 192 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 196 | 0) >> 2] | 0;
     $338_1 = i64toi32_i32$4;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 200 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
     $340_1 = i64toi32_i32$5;
     $340$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$4 = HEAP32[($7_1 + 176 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($7_1 + 180 | 0) >> 2] | 0;
     $342_1 = i64toi32_i32$4;
     $342$hi = i64toi32_i32$5;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = HEAP32[($7_1 + 184 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($7_1 + 188 | 0) >> 2] | 0;
     $344_1 = i64toi32_i32$5;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $338$hi;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$2 = $342$hi;
     i64toi32_i32$1 = $344$hi;
     $362($7_1 + 160 | 0 | 0, $338_1 | 0, i64toi32_i32$4 | 0, $340_1 | 0, i64toi32_i32$5 | 0, $342_1 | 0, i64toi32_i32$2 | 0, $344_1 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$5 = $7_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 168 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 172 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$1;
     $18$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 160 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 164 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$1;
     break block23;
    }
    block33 : {
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$5 = $18_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 8;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $189_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $190_1 = 0
       } else {
        $190_1 = 1
       }
       $191_1 = $190_1;
      } else {
       $191_1 = 0
      }
      $189_1 = $191_1;
     }
     if ($189_1) {
      break block33
     }
     $357($7_1 + 272 | 0 | 0, $5_1 | 0);
     $358($7_1 + 256 | 0 | 0, HEAP32[($7_1 + 784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 272 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 276 | 0) >> 2] | 0;
     $361_1 = i64toi32_i32$5;
     $361$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 280 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 284 | 0) >> 2] | 0;
     $363_1 = i64toi32_i32$1;
     $363$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
     $365_1 = i64toi32_i32$5;
     $365$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 264 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 268 | 0) >> 2] | 0;
     $367_1 = i64toi32_i32$1;
     $367$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $361$hi;
     i64toi32_i32$1 = $363$hi;
     i64toi32_i32$4 = $365$hi;
     i64toi32_i32$2 = $367$hi;
     $362($7_1 + 240 | 0 | 0, $361_1 | 0, i64toi32_i32$5 | 0, $363_1 | 0, i64toi32_i32$1 | 0, $365_1 | 0, i64toi32_i32$4 | 0, $367_1 | 0, i64toi32_i32$2 | 0);
     $357($7_1 + 224 | 0 | 0, HEAP32[(((8 - $16_1 | 0) << 2 | 0) + 67120192 | 0) >> 2] | 0 | 0);
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 244 | 0) >> 2] | 0;
     $378_1 = i64toi32_i32$2;
     $378$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 248 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] | 0;
     $380_1 = i64toi32_i32$4;
     $380$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 224 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 228 | 0) >> 2] | 0;
     $382_1 = i64toi32_i32$2;
     $382$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 232 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 236 | 0) >> 2] | 0;
     $384_1 = i64toi32_i32$4;
     $384$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $378$hi;
     i64toi32_i32$4 = $380$hi;
     i64toi32_i32$1 = $382$hi;
     i64toi32_i32$5 = $384$hi;
     $354($7_1 + 208 | 0 | 0, $378_1 | 0, i64toi32_i32$2 | 0, $380_1 | 0, i64toi32_i32$4 | 0, $382_1 | 0, i64toi32_i32$1 | 0, $384_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 216 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 220 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$5;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
     $19_1 = i64toi32_i32$1;
     $19$hi = i64toi32_i32$5;
     break block23;
    }
    $1_1 = HEAP32[($7_1 + 784 | 0) >> 2] | 0;
    block34 : {
     $2_1 = ($3_1 + Math_imul($16_1, -3) | 0) + 27 | 0;
     if (($2_1 | 0) > (30 | 0)) {
      break block34
     }
     if ($1_1 >>> $2_1 | 0) {
      break block31
     }
    }
    $357($7_1 + 352 | 0 | 0, $5_1 | 0);
    $358($7_1 + 336 | 0 | 0, $1_1 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 352 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 356 | 0) >> 2] | 0;
    $410_1 = i64toi32_i32$5;
    $410$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 360 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 364 | 0) >> 2] | 0;
    $412_1 = i64toi32_i32$1;
    $412$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 336 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 340 | 0) >> 2] | 0;
    $414_1 = i64toi32_i32$5;
    $414$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 344 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 348 | 0) >> 2] | 0;
    $416_1 = i64toi32_i32$1;
    $416$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $410$hi;
    i64toi32_i32$1 = $412$hi;
    i64toi32_i32$4 = $414$hi;
    i64toi32_i32$2 = $416$hi;
    $362($7_1 + 320 | 0 | 0, $410_1 | 0, i64toi32_i32$5 | 0, $412_1 | 0, i64toi32_i32$1 | 0, $414_1 | 0, i64toi32_i32$4 | 0, $416_1 | 0, i64toi32_i32$2 | 0);
    $357($7_1 + 304 | 0 | 0, HEAP32[(($16_1 << 2 | 0) + 67120152 | 0) >> 2] | 0 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] | 0;
    $426_1 = i64toi32_i32$2;
    $426$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 328 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 332 | 0) >> 2] | 0;
    $428_1 = i64toi32_i32$4;
    $428$hi = i64toi32_i32$2;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 304 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 308 | 0) >> 2] | 0;
    $430_1 = i64toi32_i32$2;
    $430$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 312 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 316 | 0) >> 2] | 0;
    $432_1 = i64toi32_i32$4;
    $432$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $426$hi;
    i64toi32_i32$4 = $428$hi;
    i64toi32_i32$1 = $430$hi;
    i64toi32_i32$5 = $432$hi;
    $362($7_1 + 288 | 0 | 0, $426_1 | 0, i64toi32_i32$2 | 0, $428_1 | 0, i64toi32_i32$4 | 0, $430_1 | 0, i64toi32_i32$1 | 0, $432_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 288 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 292 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$5;
    break block23;
   }
   label4 : while (1) {
    $14_1 = $15_1;
    $15_1 = $14_1 + -1 | 0;
    if (!(HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0)) {
     continue label4
    }
    break label4;
   };
   $12_1 = 0;
   block36 : {
    block35 : {
     $1_1 = ($16_1 | 0) % (9 | 0) | 0;
     if ($1_1) {
      break block35
     }
     $13_1 = 0;
     break block36;
    }
    $451_1 = $1_1 + 9 | 0;
    $452_1 = $1_1;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $18_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) < (i64toi32_i32$1 | 0)) {
     $192_1 = 1
    } else {
     if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $193_1 = 0
      } else {
       $193_1 = 1
      }
      $194_1 = $193_1;
     } else {
      $194_1 = 0
     }
     $192_1 = $194_1;
    }
    $9_1 = $192_1 ? $451_1 : $452_1;
    block38 : {
     block37 : {
      if ($14_1) {
       break block37
      }
      $13_1 = 0;
      $14_1 = 0;
      break block38;
     }
     $11_1 = HEAP32[(((8 - $9_1 | 0) << 2 | 0) + 67120192 | 0) >> 2] | 0;
     $6_1 = (1e9 | 0) / ($11_1 | 0) | 0;
     $2_1 = 0;
     $1_1 = 0;
     $13_1 = 0;
     label5 : while (1) {
      $15_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
      $469_1 = $15_1;
      $15_1 = HEAP32[$15_1 >> 2] | 0;
      $8_1 = ($15_1 >>> 0) / ($11_1 >>> 0) | 0;
      $2_1 = $8_1 + $2_1 | 0;
      HEAP32[$469_1 >> 2] = $2_1;
      $2_1 = ($1_1 | 0) == ($13_1 | 0) & !$2_1 | 0;
      $13_1 = $2_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
      $16_1 = $2_1 ? $16_1 + -9 | 0 : $16_1;
      $2_1 = Math_imul($6_1, $15_1 - Math_imul($8_1, $11_1) | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) != ($14_1 | 0)) {
       continue label5
      }
      break label5;
     };
     if (!$2_1) {
      break block38
     }
     HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $2_1;
     $14_1 = $14_1 + 1 | 0;
    }
    $16_1 = ($16_1 - $9_1 | 0) + 9 | 0;
   }
   label8 : while (1) {
    $9_1 = ($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0;
    $6_1 = ($16_1 | 0) < (36 | 0);
    block40 : {
     label7 : while (1) {
      block39 : {
       if ($6_1) {
        break block39
       }
       if (($16_1 | 0) != (36 | 0)) {
        break block40
       }
       if ((HEAP32[$9_1 >> 2] | 0) >>> 0 >= 10384593 >>> 0) {
        break block40
       }
      }
      $15_1 = $14_1 + 2047 | 0;
      $11_1 = 0;
      label6 : while (1) {
       $2_1 = $14_1;
       block42 : {
        block41 : {
         $1_1 = $15_1 & 2047 | 0;
         $14_1 = ($7_1 + 784 | 0) + ($1_1 << 2 | 0) | 0;
         i64toi32_i32$2 = $14_1;
         i64toi32_i32$4 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         i64toi32_i32$1 = 29;
         i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
         if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
          $195_1 = 0;
         } else {
          i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
          $195_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         }
         $547$hi = i64toi32_i32$4;
         i64toi32_i32$4 = 0;
         $549$hi = i64toi32_i32$4;
         i64toi32_i32$4 = $547$hi;
         i64toi32_i32$5 = $195_1;
         i64toi32_i32$2 = $549$hi;
         i64toi32_i32$1 = $11_1;
         i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
          i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
         }
         $18_1 = i64toi32_i32$3;
         $18$hi = i64toi32_i32$0;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$0 = $18$hi;
         i64toi32_i32$4 = i64toi32_i32$3;
         i64toi32_i32$5 = 0;
         i64toi32_i32$1 = 1000000001;
         if ($18$hi >>> 0 > i64toi32_i32$5 >>> 0 | (($18$hi | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
          break block41
         }
         $11_1 = 0;
         break block42;
        }
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_udiv($18_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $19_1 = i64toi32_i32$0;
        $19$hi = i64toi32_i32$4;
        i64toi32_i32$0 = 0;
        i64toi32_i32$0 = __wasm_i64_mul($19_1 | 0, i64toi32_i32$4 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
        i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
        $557_1 = i64toi32_i32$0;
        $557$hi = i64toi32_i32$4;
        i64toi32_i32$4 = $18$hi;
        i64toi32_i32$1 = $18_1;
        i64toi32_i32$0 = $557$hi;
        i64toi32_i32$5 = $557_1;
        i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
        i64toi32_i32$3 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$0 | 0;
        i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        $18_1 = i64toi32_i32$2;
        $18$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $19$hi;
        $11_1 = $19_1;
       }
       i64toi32_i32$3 = $18$hi;
       HEAP32[$14_1 >> 2] = $18_1;
       $8_1 = ($2_1 + -1 | 0) & 2047 | 0;
       $14_1 = ($1_1 | 0) != ($8_1 | 0) ? $2_1 : ($1_1 | 0) == ($13_1 | 0) ? $2_1 : !($18_1 | i64toi32_i32$3 | 0) ? $1_1 : $2_1;
       $15_1 = $1_1 + -1 | 0;
       if (($1_1 | 0) != ($13_1 | 0)) {
        continue label6
       }
       break label6;
      };
      $12_1 = $12_1 + -29 | 0;
      $14_1 = $2_1;
      if (!$11_1) {
       continue label7
      }
      break label7;
     };
     block44 : {
      block43 : {
       $13_1 = ($13_1 + -1 | 0) & 2047 | 0;
       if (($13_1 | 0) == ($2_1 | 0)) {
        break block43
       }
       $14_1 = $2_1;
       break block44;
      }
      $1_1 = ($7_1 + 784 | 0) + ((($2_1 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | (HEAP32[(($7_1 + 784 | 0) + ($8_1 << 2 | 0) | 0) >> 2] | 0) | 0;
      $14_1 = $8_1;
     }
     $16_1 = $16_1 + 9 | 0;
     HEAP32[(($7_1 + 784 | 0) + ($13_1 << 2 | 0) | 0) >> 2] = $11_1;
     continue label8;
    }
    break label8;
   };
   block49 : {
    label14 : while (1) {
     $17_1 = ($14_1 + 1 | 0) & 2047 | 0;
     $9_1 = ($7_1 + 784 | 0) + ((($14_1 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
     label13 : while (1) {
      $15_1 = ($16_1 | 0) > (45 | 0) ? 9 : 1;
      block48 : {
       label11 : while (1) {
        $11_1 = $13_1;
        $1_1 = 0;
        block46 : {
         block45 : {
          label9 : while (1) {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) == ($14_1 | 0)) {
            break block45
           }
           $2_1 = HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0;
           $13_1 = HEAP32[(($1_1 << 2 | 0) + 67120176 | 0) >> 2] | 0;
           if ($2_1 >>> 0 < $13_1 >>> 0) {
            break block45
           }
           if ($2_1 >>> 0 > $13_1 >>> 0) {
            break block46
           }
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != (4 | 0)) {
            continue label9
           }
           break label9;
          };
         }
         if (($16_1 | 0) != (36 | 0)) {
          break block46
         }
         i64toi32_i32$3 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$3;
         $1_1 = 0;
         i64toi32_i32$3 = 0;
         $19_1 = 0;
         $19$hi = i64toi32_i32$3;
         label10 : while (1) {
          block47 : {
           $2_1 = ($1_1 + $11_1 | 0) & 2047 | 0;
           if (($2_1 | 0) != ($14_1 | 0)) {
            break block47
           }
           $14_1 = ($14_1 + 1 | 0) & 2047 | 0;
           HEAP32[((($14_1 << 2 | 0) + ($7_1 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
          }
          $358($7_1 + 768 | 0 | 0, HEAP32[(($7_1 + 784 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$3 = $19$hi;
          i64toi32_i32$3 = $18$hi;
          i64toi32_i32$1 = $19$hi;
          i64toi32_i32$4 = 0;
          i64toi32_i32$5 = 1075633366;
          $362($7_1 + 752 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 1342177280 | 0, i64toi32_i32$5 | 0);
          i64toi32_i32$1 = $7_1;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 752 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 756 | 0) >> 2] | 0;
          $698_1 = i64toi32_i32$5;
          $698$hi = i64toi32_i32$4;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 760 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 764 | 0) >> 2] | 0;
          $700_1 = i64toi32_i32$4;
          $700$hi = i64toi32_i32$5;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 768 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 772 | 0) >> 2] | 0;
          $702_1 = i64toi32_i32$5;
          $702$hi = i64toi32_i32$4;
          i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 776 | 0) >> 2] | 0;
          i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 780 | 0) >> 2] | 0;
          $704_1 = i64toi32_i32$4;
          $704$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $698$hi;
          i64toi32_i32$4 = $700$hi;
          i64toi32_i32$1 = $702$hi;
          i64toi32_i32$3 = $704$hi;
          $350($7_1 + 736 | 0 | 0, $698_1 | 0, i64toi32_i32$5 | 0, $700_1 | 0, i64toi32_i32$4 | 0, $702_1 | 0, i64toi32_i32$1 | 0, $704_1 | 0, i64toi32_i32$3 | 0);
          i64toi32_i32$4 = $7_1;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 744 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 748 | 0) >> 2] | 0;
          $19_1 = i64toi32_i32$3;
          $19$hi = i64toi32_i32$1;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 736 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 740 | 0) >> 2] | 0;
          $18_1 = i64toi32_i32$1;
          $18$hi = i64toi32_i32$3;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (4 | 0)) {
           continue label10
          }
          break label10;
         };
         $357(i64toi32_i32$4 + 720 | 0 | 0, $5_1 | 0);
         i64toi32_i32$3 = $19$hi;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 720 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 724 | 0) >> 2] | 0;
         $721_1 = i64toi32_i32$3;
         $721$hi = i64toi32_i32$1;
         i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 728 | 0) >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 732 | 0) >> 2] | 0;
         $723_1 = i64toi32_i32$1;
         $723$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $18$hi;
         i64toi32_i32$1 = $19$hi;
         i64toi32_i32$4 = $721$hi;
         i64toi32_i32$5 = $723$hi;
         $362($7_1 + 704 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $721_1 | 0, i64toi32_i32$4 | 0, $723_1 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$5 = 0;
         $18_1 = 0;
         $18$hi = i64toi32_i32$5;
         i64toi32_i32$1 = $7_1;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 712 | 0) >> 2] | 0;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 716 | 0) >> 2] | 0;
         $19_1 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$4;
         i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 704 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 708 | 0) >> 2] | 0;
         $20_1 = i64toi32_i32$4;
         $20$hi = i64toi32_i32$5;
         $13_1 = $12_1 + 113 | 0;
         $1_1 = $13_1 - $4_1 | 0;
         $8_1 = ($3_1 | 0) > ($1_1 | 0);
         $2_1 = $8_1 ? (($1_1 | 0) > (0 | 0) ? $1_1 : 0) : $3_1;
         if ($2_1 >>> 0 <= 112 >>> 0) {
          break block48
         }
         i64toi32_i32$5 = 0;
         $21_1 = 0;
         $21$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $22_1 = 0;
         $22$hi = i64toi32_i32$5;
         i64toi32_i32$5 = 0;
         $23_1 = 0;
         $23$hi = i64toi32_i32$5;
         break block49;
        }
        $12_1 = $15_1 + $12_1 | 0;
        $13_1 = $14_1;
        if (($11_1 | 0) == ($14_1 | 0)) {
         continue label11
        }
        break label11;
       };
       $8_1 = 1e9 >>> $15_1 | 0;
       $6_1 = (-1 << $15_1 | 0) ^ -1 | 0;
       $1_1 = 0;
       $13_1 = $11_1;
       label12 : while (1) {
        $2_1 = ($7_1 + 784 | 0) + ($11_1 << 2 | 0) | 0;
        $763_1 = $2_1;
        $2_1 = HEAP32[$2_1 >> 2] | 0;
        $1_1 = ($2_1 >>> $15_1 | 0) + $1_1 | 0;
        HEAP32[$763_1 >> 2] = $1_1;
        $1_1 = ($11_1 | 0) == ($13_1 | 0) & !$1_1 | 0;
        $13_1 = $1_1 ? ($13_1 + 1 | 0) & 2047 | 0 : $13_1;
        $16_1 = $1_1 ? $16_1 + -9 | 0 : $16_1;
        $1_1 = Math_imul($2_1 & $6_1 | 0, $8_1);
        $11_1 = ($11_1 + 1 | 0) & 2047 | 0;
        if (($11_1 | 0) != ($14_1 | 0)) {
         continue label12
        }
        break label12;
       };
       if (!$1_1) {
        continue label13
       }
       block50 : {
        if (($17_1 | 0) == ($13_1 | 0)) {
         break block50
        }
        HEAP32[(($7_1 + 784 | 0) + ($14_1 << 2 | 0) | 0) >> 2] = $1_1;
        $14_1 = $17_1;
        continue label14;
       }
       HEAP32[$9_1 >> 2] = HEAP32[$9_1 >> 2] | 0 | 1 | 0;
       continue label13;
      }
      break label13;
     };
     break label14;
    };
    $355($7_1 + 656 | 0 | 0, +(+$305(+(1.0), 225 - $2_1 | 0 | 0)));
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 656 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 660 | 0) >> 2] | 0;
    $824_1 = i64toi32_i32$5;
    $824$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 664 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 668 | 0) >> 2] | 0;
    $826_1 = i64toi32_i32$4;
    $826$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$5 = $824$hi;
    i64toi32_i32$4 = $826$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    $306($7_1 + 688 | 0 | 0, $824_1 | 0, i64toi32_i32$5 | 0, $826_1 | 0, i64toi32_i32$4 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 696 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 700 | 0) >> 2] | 0;
    $23_1 = i64toi32_i32$3;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 688 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 692 | 0) >> 2] | 0;
    $22_1 = i64toi32_i32$1;
    $22$hi = i64toi32_i32$3;
    $355(i64toi32_i32$4 + 640 | 0 | 0, +(+$305(+(1.0), 113 - $2_1 | 0 | 0)));
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 640 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 644 | 0) >> 2] | 0;
    $843_1 = i64toi32_i32$3;
    $843$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 648 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 652 | 0) >> 2] | 0;
    $845_1 = i64toi32_i32$1;
    $845$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$4 = $843$hi;
    i64toi32_i32$5 = $845$hi;
    $309($7_1 + 672 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $843_1 | 0, i64toi32_i32$4 | 0, $845_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$5 = i64toi32_i32$1;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 672 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 676 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$5;
    $18$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 680 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 684 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$4;
    $21$hi = i64toi32_i32$5;
    i64toi32_i32$5 = i64toi32_i32$3;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    $364($7_1 + 624 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$4 | 0, $18_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $23$hi;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 624 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 628 | 0) >> 2] | 0;
    $861_1 = i64toi32_i32$3;
    $861$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 632 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 636 | 0) >> 2] | 0;
    $863_1 = i64toi32_i32$1;
    $863$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$4 = $861$hi;
    i64toi32_i32$5 = $863$hi;
    $350($7_1 + 608 | 0 | 0, $22_1 | 0, i64toi32_i32$3 | 0, $23_1 | 0, i64toi32_i32$1 | 0, $861_1 | 0, i64toi32_i32$4 | 0, $863_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 616 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 620 | 0) >> 2] | 0;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 608 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 612 | 0) >> 2] | 0;
    $20_1 = i64toi32_i32$4;
    $20$hi = i64toi32_i32$5;
   }
   block51 : {
    $15_1 = ($11_1 + 4 | 0) & 2047 | 0;
    if (($15_1 | 0) == ($14_1 | 0)) {
     break block51
    }
    block54 : {
     block52 : {
      $15_1 = HEAP32[(($7_1 + 784 | 0) + ($15_1 << 2 | 0) | 0) >> 2] | 0;
      if ($15_1 >>> 0 > 499999999 >>> 0) {
       break block52
      }
      block53 : {
       if ($15_1) {
        break block53
       }
       if ((($11_1 + 5 | 0) & 2047 | 0 | 0) == ($14_1 | 0)) {
        break block54
       }
      }
      $355($7_1 + 496 | 0 | 0, +(+($5_1 | 0) * .25));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 496 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 500 | 0) >> 2] | 0;
      $898_1 = i64toi32_i32$5;
      $898$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 504 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 508 | 0) >> 2] | 0;
      $900_1 = i64toi32_i32$4;
      $900$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $898$hi;
      i64toi32_i32$3 = $900$hi;
      $350($7_1 + 480 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $898_1 | 0, i64toi32_i32$1 | 0, $900_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 488 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 492 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 480 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 484 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break block54;
     }
     block55 : {
      if (($15_1 | 0) == (5e8 | 0)) {
       break block55
      }
      $355($7_1 + 592 | 0 | 0, +(+($5_1 | 0) * .75));
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$3 = $21$hi;
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 592 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 596 | 0) >> 2] | 0;
      $917_1 = i64toi32_i32$3;
      $917$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 600 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 604 | 0) >> 2] | 0;
      $919_1 = i64toi32_i32$1;
      $919$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $18$hi;
      i64toi32_i32$1 = $21$hi;
      i64toi32_i32$4 = $917$hi;
      i64toi32_i32$5 = $919$hi;
      $350($7_1 + 576 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $917_1 | 0, i64toi32_i32$4 | 0, $919_1 | 0, i64toi32_i32$5 | 0);
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 584 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 588 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$5;
      $21$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 576 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 580 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$4;
      $18$hi = i64toi32_i32$5;
      break block54;
     }
     $24_1 = +($5_1 | 0);
     block56 : {
      if ((($11_1 + 5 | 0) & 2047 | 0 | 0) != ($14_1 | 0)) {
       break block56
      }
      $355($7_1 + 528 | 0 | 0, +($24_1 * .5));
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $21$hi;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 528 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 532 | 0) >> 2] | 0;
      $940_1 = i64toi32_i32$5;
      $940$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 536 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 540 | 0) >> 2] | 0;
      $942_1 = i64toi32_i32$4;
      $942$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$4 = $21$hi;
      i64toi32_i32$1 = $940$hi;
      i64toi32_i32$3 = $942$hi;
      $350($7_1 + 512 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, $940_1 | 0, i64toi32_i32$1 | 0, $942_1 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$4 = $7_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 520 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 524 | 0) >> 2] | 0;
      $21_1 = i64toi32_i32$3;
      $21$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 512 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 516 | 0) >> 2] | 0;
      $18_1 = i64toi32_i32$1;
      $18$hi = i64toi32_i32$3;
      break block54;
     }
     $355($7_1 + 560 | 0 | 0, +($24_1 * .75));
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$4 = $7_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 560 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 564 | 0) >> 2] | 0;
     $956_1 = i64toi32_i32$3;
     $956$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 568 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 572 | 0) >> 2] | 0;
     $958_1 = i64toi32_i32$1;
     $958$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$4 = $956$hi;
     i64toi32_i32$5 = $958$hi;
     $350($7_1 + 544 | 0 | 0, $18_1 | 0, i64toi32_i32$3 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $956_1 | 0, i64toi32_i32$4 | 0, $958_1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 552 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 556 | 0) >> 2] | 0;
     $21_1 = i64toi32_i32$5;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 544 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 548 | 0) >> 2] | 0;
     $18_1 = i64toi32_i32$4;
     $18$hi = i64toi32_i32$5;
    }
    if ($2_1 >>> 0 > 111 >>> 0) {
     break block51
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $309($7_1 + 464 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 464 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 468 | 0) >> 2] | 0;
    $970_1 = i64toi32_i32$3;
    $970$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 472 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 476 | 0) >> 2] | 0;
    $972_1 = i64toi32_i32$1;
    $972$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $970$hi;
    i64toi32_i32$1 = $972$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    if ($352($970_1 | 0, i64toi32_i32$3 | 0, $972_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0) {
     break block51
    }
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $21$hi;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$4 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1073676288;
    $350($7_1 + 448 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 456 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 460 | 0) >> 2] | 0;
    $21_1 = i64toi32_i32$3;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 448 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 452 | 0) >> 2] | 0;
    $18_1 = i64toi32_i32$1;
    $18$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$4 = $18$hi;
   i64toi32_i32$5 = $21$hi;
   $350($7_1 + 432 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $18_1 | 0, i64toi32_i32$4 | 0, $21_1 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 432 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 436 | 0) >> 2] | 0;
   $991_1 = i64toi32_i32$5;
   $991$hi = i64toi32_i32$4;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 440 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 444 | 0) >> 2] | 0;
   $993_1 = i64toi32_i32$4;
   $993$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $22$hi;
   i64toi32_i32$5 = $23$hi;
   i64toi32_i32$5 = $991$hi;
   i64toi32_i32$4 = $993$hi;
   i64toi32_i32$1 = $22$hi;
   i64toi32_i32$3 = $23$hi;
   $364($7_1 + 416 | 0 | 0, $991_1 | 0, i64toi32_i32$5 | 0, $993_1 | 0, i64toi32_i32$4 | 0, $22_1 | 0, i64toi32_i32$1 | 0, $23_1 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 424 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 428 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$3;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 416 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 420 | 0) >> 2] | 0;
   $20_1 = i64toi32_i32$1;
   $20$hi = i64toi32_i32$3;
   block57 : {
    if (($13_1 & 2147483647 | 0 | 0) <= ($10_1 + -2 | 0 | 0)) {
     break block57
    }
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $20$hi;
    i64toi32_i32$1 = $19$hi;
    $310(i64toi32_i32$4 + 400 | 0 | 0, $20_1 | 0, i64toi32_i32$3 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1073610752;
    $362($7_1 + 384 | 0 | 0, $20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$5 = HEAP32[($7_1 + 400 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[($7_1 + 404 | 0) >> 2] | 0;
    $1014_1 = i64toi32_i32$5;
    $1014$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 408 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 412 | 0) >> 2] | 0;
    $1016_1 = i64toi32_i32$4;
    $1016$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1014$hi;
    i64toi32_i32$4 = $1016$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1081081856;
    $13_1 = $353($1014_1 | 0, i64toi32_i32$5 | 0, $1016_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
    i64toi32_i32$4 = $7_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 392 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 396 | 0) >> 2] | 0;
    $1019$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $19$hi;
    $14_1 = ($13_1 | 0) > (-1 | 0);
    i64toi32_i32$0 = $14_1;
    i64toi32_i32$3 = $1019$hi;
    $196_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    i64toi32_i32$5 = $14_1 ? $196_1 : $19_1;
    i64toi32_i32$4 = $14_1 ? i64toi32_i32$3 : i64toi32_i32$1;
    $19_1 = i64toi32_i32$5;
    $19$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$4 = HEAP32[($7_1 + 384 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[($7_1 + 388 | 0) >> 2] | 0;
    $1026$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$1 = $14_1;
    i64toi32_i32$5 = $1026$hi;
    $197_1 = i64toi32_i32$4;
    i64toi32_i32$4 = $20$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $197_1 : $20_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    $20_1 = i64toi32_i32$3;
    $20$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$0 = $21$hi;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $21$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 0;
    $11_1 = $352($18_1 | 0, $18$hi | 0, $21_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0) | 0;
    block58 : {
     $12_1 = $12_1 + $14_1 | 0;
     if (($12_1 + 110 | 0 | 0) > ($10_1 | 0)) {
      break block58
     }
     if (!(($8_1 & (($2_1 | 0) != ($1_1 | 0) | ($13_1 | 0) < (0 | 0) | 0) | 0) & ($11_1 | 0) != (0 | 0) | 0)) {
      break block57
     }
    }
    HEAP32[($231() | 0) >> 2] = 68;
   }
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$5 = $19$hi;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$1 = $19$hi;
   $307($7_1 + 368 | 0 | 0, $20_1 | 0, i64toi32_i32$5 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $12_1 | 0);
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$1 = HEAP32[($7_1 + 376 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($7_1 + 380 | 0) >> 2] | 0;
   $18_1 = i64toi32_i32$1;
   $18$hi = i64toi32_i32$5;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$5 = HEAP32[($7_1 + 368 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($7_1 + 372 | 0) >> 2] | 0;
   $19_1 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $18_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  HEAP32[i64toi32_i32$5 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $7_1 + 8976 | 0;
 }
 
 function $315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $6$hi = 0, $6_1 = 0, $5_1 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $88$hi = 0, $90_1 = 0, $90$hi = 0, $139$hi = 0;
  block1 : {
   block : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
     break block
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $3_1 = HEAPU8[$2_1 >> 0] | 0;
    break block1;
   }
   $3_1 = $304($0_1 | 0) | 0;
  }
  block18 : {
   block7 : {
    block6 : {
     block3 : {
      switch ($3_1 + -43 | 0 | 0) {
      case 0:
      case 2:
       block5 : {
        block4 : {
         $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break block4
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
         $2_1 = HEAPU8[$2_1 >> 0] | 0;
         break block5;
        }
        $2_1 = $304($0_1 | 0) | 0;
       }
       $4_1 = ($3_1 | 0) == (45 | 0);
       $5_1 = $2_1 + -58 | 0;
       if (!$1_1) {
        break block6
       }
       if ($5_1 >>> 0 > -11 >>> 0) {
        break block6
       }
       i64toi32_i32$2 = $0_1;
       i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
        $18_1 = 1
       } else {
        if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $19_1 = 0
         } else {
          $19_1 = 1
         }
         $20_1 = $19_1;
        } else {
         $20_1 = 0
        }
        $18_1 = $20_1;
       }
       if ($18_1) {
        break block7
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       break block7;
      default:
       break block3;
      };
     }
     $5_1 = $3_1 + -58 | 0;
     $4_1 = 0;
     $2_1 = $3_1;
    }
    if ($5_1 >>> 0 < -10 >>> 0) {
     break block7
    }
    i64toi32_i32$2 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$2;
    block8 : {
     if (($2_1 + -48 | 0) >>> 0 >= 10 >>> 0) {
      break block8
     }
     $3_1 = 0;
     label : while (1) {
      $3_1 = $2_1 + Math_imul($3_1, 10) | 0;
      block10 : {
       block9 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block9
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break block10;
       }
       $2_1 = $304($0_1 | 0) | 0;
      }
      $3_1 = $3_1 + -48 | 0;
      block11 : {
       $5_1 = $2_1 + -48 | 0;
       if ($5_1 >>> 0 > 9 >>> 0) {
        break block11
       }
       if (($3_1 | 0) < (214748364 | 0)) {
        continue label
       }
      }
      break label;
     };
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $6_1 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$2;
     if ($5_1 >>> 0 >= 10 >>> 0) {
      break block8
     }
     label1 : while (1) {
      i64toi32_i32$2 = 0;
      $88$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $6$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
      $90_1 = i64toi32_i32$1;
      $90$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $88$hi;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$1 = $90$hi;
      i64toi32_i32$0 = $90_1;
      i64toi32_i32$4 = $2_1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $6_1 = i64toi32_i32$4;
      $6$hi = i64toi32_i32$5;
      block13 : {
       block12 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block12
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break block13;
       }
       $2_1 = $304($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $6$hi;
      i64toi32_i32$2 = $6_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -48;
      i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $6_1 = i64toi32_i32$1;
      $6$hi = i64toi32_i32$4;
      block14 : {
       $3_1 = $2_1 + -48 | 0;
       if ($3_1 >>> 0 > 9 >>> 0) {
        break block14
       }
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$2 = 21474836;
       i64toi32_i32$0 = 2061584302;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
        $21_1 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
         if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $22_1 = 0
         } else {
          $22_1 = 1
         }
         $23_1 = $22_1;
        } else {
         $23_1 = 0
        }
        $21_1 = $23_1;
       }
       if ($21_1) {
        continue label1
       }
      }
      break label1;
     };
     if ($3_1 >>> 0 >= 10 >>> 0) {
      break block8
     }
     label2 : while (1) {
      block16 : {
       block15 : {
        $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($2_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block15
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
        $2_1 = HEAPU8[$2_1 >> 0] | 0;
        break block16;
       }
       $2_1 = $304($0_1 | 0) | 0;
      }
      if (($2_1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label2
      }
      break label2;
     };
    }
    block17 : {
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$5 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $24_1 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
        $25_1 = 0
       } else {
        $25_1 = 1
       }
       $26_1 = $25_1;
      } else {
       $26_1 = 0
      }
      $24_1 = $26_1;
     }
     if ($24_1) {
      break block17
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$5 = $6_1;
    i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
    $139$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = $139$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$2;
    $6_1 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    break block18;
   }
   i64toi32_i32$0 = -2147483648;
   $6_1 = 0;
   $6$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$0 | 0)) {
    $27_1 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$0 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $28_1 = 0
     } else {
      $28_1 = 1
     }
     $29_1 = $28_1;
    } else {
     $29_1 = 0
    }
    $27_1 = $29_1;
   }
   if ($27_1) {
    break block18
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$4 = $6_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function $316($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $317($2_1 | 0, $0_1 | 0, $1_1 | 0, 0 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = Math_fround($366($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0));
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3_1);
 }
 
 function $317($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 60 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = -1;
  i64toi32_i32$0 = 0;
  $303($4_1 + 16 | 0 | 0, 0 | 0, i64toi32_i32$0 | 0);
  $311($4_1 | 0, $4_1 + 16 | 0 | 0, $3_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $6_1 = i64toi32_i32$1;
  $6$hi = i64toi32_i32$0;
  block : {
   if (!$2_1) {
    break block
   }
   HEAP32[$2_1 >> 2] = ($1_1 + ((HEAP32[($4_1 + 20 | 0) >> 2] | 0) - (HEAP32[($4_1 + 60 | 0) >> 2] | 0) | 0) | 0) + (HEAP32[($4_1 + 136 | 0) >> 2] | 0) | 0;
  }
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 160 | 0;
 }
 
 function $318($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $11_1 = 0, $11$hi = 0, $13_1 = 0, $13$hi = 0, $3_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $317($2_1 | 0, $0_1 | 0, $1_1 | 0, 1 | 0);
  i64toi32_i32$0 = HEAP32[$2_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
  $11_1 = i64toi32_i32$0;
  $11$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  $13_1 = i64toi32_i32$1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $13$hi;
  $3_1 = +$365($11_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$1 | 0);
  global$0 = $2_1 + 16 | 0;
  return +$3_1;
 }
 
 function $319($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $4$hi = 0, $15_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $317($3_1 | 0, $1_1 | 0, $2_1 | 0, 2 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $320($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $295($0_1 | 0, 0 | 0, $1_1 | 0) | 0;
  return ($2_1 ? $2_1 - $0_1 | 0 : $1_1) | 0;
 }
 
 function $321($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  block : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break block
   }
   block1 : {
    if ($3_1) {
     break block1
    }
    block3 : {
     block2 : {
      if ($0_1 != 0.0) {
       break block2
      }
      $3_1 = 0;
      break block3;
     }
     $0_1 = +$321(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $322($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  block : {
   if (!$2_1) {
    break block
   }
   HEAP8[$0_1 >> 0] = $1_1;
   $3_1 = $0_1 + $2_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break block
   }
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break block
   }
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break block
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break block
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break block
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break block
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label
    }
    break label;
   };
  }
  return $0_1 | 0;
 }
 
 function $323($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  block : {
   if (!40) {
    break block
   }
   wasm2js_memory_fill($5_1 + 160 | 0, 0, 40);
  }
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  block2 : {
   block1 : {
    if (($324(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break block1
    }
    $4_1 = -1;
    break block2;
   }
   block4 : {
    block3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break block3
     }
     $6_1 = 1;
     break block4;
    }
    $6_1 = !($232($0_1 | 0) | 0);
   }
   $7_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $7_1 & -33 | 0;
   block8 : {
    block7 : {
     block6 : {
      block5 : {
       if (HEAP32[($0_1 + 48 | 0) >> 2] | 0) {
        break block5
       }
       HEAP32[($0_1 + 48 | 0) >> 2] = 80;
       HEAP32[($0_1 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0_1 + 16 | 0) >> 2] = 0;
       HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
       HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
       break block6;
      }
      $8_1 = 0;
      if (HEAP32[($0_1 + 16 | 0) >> 2] | 0) {
       break block7
      }
     }
     $2_1 = -1;
     if ($243($0_1 | 0) | 0) {
      break block8
     }
    }
    $2_1 = $324($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   }
   $4_1 = $7_1 & 32 | 0;
   block9 : {
    if (!$8_1) {
     break block9
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $8_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2_1 = $3_1 ? $2_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $4_1 | 0;
   $4_1 = $3_1 & 32 | 0 ? -1 : $2_1;
   if ($6_1) {
    break block2
   }
   $233($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $4_1 | 0;
 }
 
 function $324($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $15_1 = 0, $20_1 = 0, $17_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $13_1 = 0, $11_1 = 0, i64toi32_i32$2 = 0, $16_1 = 0, $19_1 = 0, $22_1 = 0, $18_1 = 0, i64toi32_i32$5 = 0, $25_1 = 0, $25$hi = 0, $9_1 = 0, $24_1 = 0, $10_1 = 0, i64toi32_i32$3 = 0, $21_1 = 0, $23_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $8_1 = 0, $267_1 = 0;
  $7_1 = global$0 - 64 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 39 | 0;
  $9_1 = $7_1 + 40 | 0;
  $10_1 = 0;
  $11_1 = 0;
  block68 : {
   block32 : {
    block26 : {
     block : {
      label4 : while (1) {
       $12_1 = 0;
       label1 : while (1) {
        $13_1 = $1_1;
        if (($12_1 | 0) > ($11_1 ^ 2147483647 | 0 | 0)) {
         break block
        }
        $11_1 = $12_1 + $11_1 | 0;
        $12_1 = $1_1;
        block31 : {
         block34 : {
          block47 : {
           block60 : {
            block15 : {
             block1 : {
              $14_1 = HEAPU8[$12_1 >> 0] | 0;
              if (!$14_1) {
               break block1
              }
              label7 : while (1) {
               block4 : {
                block3 : {
                 block2 : {
                  $14_1 = $14_1 & 255 | 0;
                  if ($14_1) {
                   break block2
                  }
                  $1_1 = $12_1;
                  break block3;
                 }
                 if (($14_1 | 0) != (37 | 0)) {
                  break block4
                 }
                 $14_1 = $12_1;
                 label : while (1) {
                  block5 : {
                   if ((HEAPU8[($14_1 + 1 | 0) >> 0] | 0 | 0) == (37 | 0)) {
                    break block5
                   }
                   $1_1 = $14_1;
                   break block3;
                  }
                  $12_1 = $12_1 + 1 | 0;
                  $15_1 = HEAPU8[($14_1 + 2 | 0) >> 0] | 0;
                  $1_1 = $14_1 + 2 | 0;
                  $14_1 = $1_1;
                  if (($15_1 | 0) == (37 | 0)) {
                   continue label
                  }
                  break label;
                 };
                }
                $12_1 = $12_1 - $13_1 | 0;
                $14_1 = $11_1 ^ 2147483647 | 0;
                if (($12_1 | 0) > ($14_1 | 0)) {
                 break block
                }
                block6 : {
                 if (!$0_1) {
                  break block6
                 }
                 $325($0_1 | 0, $13_1 | 0, $12_1 | 0);
                }
                if ($12_1) {
                 continue label1
                }
                HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                $12_1 = $1_1 + 1 | 0;
                $16_1 = -1;
                block7 : {
                 $15_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                 if ($15_1 >>> 0 > 9 >>> 0) {
                  break block7
                 }
                 if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                  break block7
                 }
                 $12_1 = $1_1 + 3 | 0;
                 $10_1 = 1;
                 $16_1 = $15_1;
                }
                HEAP32[($7_1 + 60 | 0) >> 2] = $12_1;
                $17_1 = 0;
                block9 : {
                 block8 : {
                  $18_1 = HEAP8[$12_1 >> 0] | 0;
                  $1_1 = $18_1 + -32 | 0;
                  if ($1_1 >>> 0 <= 31 >>> 0) {
                   break block8
                  }
                  $15_1 = $12_1;
                  break block9;
                 }
                 $17_1 = 0;
                 $15_1 = $12_1;
                 $1_1 = 1 << $1_1 | 0;
                 if (!($1_1 & 75913 | 0)) {
                  break block9
                 }
                 label2 : while (1) {
                  $15_1 = $12_1 + 1 | 0;
                  HEAP32[($7_1 + 60 | 0) >> 2] = $15_1;
                  $17_1 = $1_1 | $17_1 | 0;
                  $18_1 = HEAP8[($12_1 + 1 | 0) >> 0] | 0;
                  $1_1 = $18_1 + -32 | 0;
                  if ($1_1 >>> 0 >= 32 >>> 0) {
                   break block9
                  }
                  $12_1 = $15_1;
                  $1_1 = 1 << $1_1 | 0;
                  if ($1_1 & 75913 | 0) {
                   continue label2
                  }
                  break label2;
                 };
                }
                block17 : {
                 block10 : {
                  if (($18_1 | 0) != (42 | 0)) {
                   break block10
                  }
                  block14 : {
                   block11 : {
                    $12_1 = (HEAP8[($15_1 + 1 | 0) >> 0] | 0) + -48 | 0;
                    if ($12_1 >>> 0 > 9 >>> 0) {
                     break block11
                    }
                    if ((HEAPU8[($15_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                     break block11
                    }
                    block13 : {
                     block12 : {
                      if ($0_1) {
                       break block12
                      }
                      HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] = 10;
                      $19_1 = 0;
                      break block13;
                     }
                     $19_1 = HEAP32[($3_1 + ($12_1 << 3 | 0) | 0) >> 2] | 0;
                    }
                    $1_1 = $15_1 + 3 | 0;
                    $10_1 = 1;
                    break block14;
                   }
                   if ($10_1) {
                    break block15
                   }
                   $1_1 = $15_1 + 1 | 0;
                   block16 : {
                    if ($0_1) {
                     break block16
                    }
                    HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                    $10_1 = 0;
                    $19_1 = 0;
                    break block17;
                   }
                   $12_1 = HEAP32[$2_1 >> 2] | 0;
                   HEAP32[$2_1 >> 2] = $12_1 + 4 | 0;
                   $19_1 = HEAP32[$12_1 >> 2] | 0;
                   $10_1 = 0;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  if (($19_1 | 0) > (-1 | 0)) {
                   break block17
                  }
                  $19_1 = 0 - $19_1 | 0;
                  $17_1 = $17_1 | 8192 | 0;
                  break block17;
                 }
                 $19_1 = $326($7_1 + 60 | 0 | 0) | 0;
                 if (($19_1 | 0) < (0 | 0)) {
                  break block
                 }
                 $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                }
                $12_1 = 0;
                $20_1 = -1;
                block19 : {
                 block18 : {
                  if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (46 | 0)) {
                   break block18
                  }
                  $21_1 = 0;
                  break block19;
                 }
                 block20 : {
                  if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                   break block20
                  }
                  block24 : {
                   block21 : {
                    $15_1 = (HEAP8[($1_1 + 2 | 0) >> 0] | 0) + -48 | 0;
                    if ($15_1 >>> 0 > 9 >>> 0) {
                     break block21
                    }
                    if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                     break block21
                    }
                    block23 : {
                     block22 : {
                      if ($0_1) {
                       break block22
                      }
                      HEAP32[($4_1 + ($15_1 << 2 | 0) | 0) >> 2] = 10;
                      $20_1 = 0;
                      break block23;
                     }
                     $20_1 = HEAP32[($3_1 + ($15_1 << 3 | 0) | 0) >> 2] | 0;
                    }
                    $1_1 = $1_1 + 4 | 0;
                    break block24;
                   }
                   if ($10_1) {
                    break block15
                   }
                   $1_1 = $1_1 + 2 | 0;
                   block25 : {
                    if ($0_1) {
                     break block25
                    }
                    $20_1 = 0;
                    break block24;
                   }
                   $15_1 = HEAP32[$2_1 >> 2] | 0;
                   HEAP32[$2_1 >> 2] = $15_1 + 4 | 0;
                   $20_1 = HEAP32[$15_1 >> 2] | 0;
                  }
                  HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                  $21_1 = ($20_1 | 0) > (-1 | 0);
                  break block19;
                 }
                 HEAP32[($7_1 + 60 | 0) >> 2] = $1_1 + 1 | 0;
                 $21_1 = 1;
                 $20_1 = $326($7_1 + 60 | 0 | 0) | 0;
                 $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
                }
                label3 : while (1) {
                 $15_1 = $12_1;
                 $22_1 = 28;
                 $18_1 = $1_1;
                 $12_1 = HEAP8[$1_1 >> 0] | 0;
                 if (($12_1 + -123 | 0) >>> 0 < -58 >>> 0) {
                  break block26
                 }
                 $1_1 = $1_1 + 1 | 0;
                 $12_1 = HEAPU8[(($12_1 + Math_imul($15_1, 58) | 0) + 67120191 | 0) >> 0] | 0;
                 if ((($12_1 + -1 | 0) & 255 | 0) >>> 0 < 8 >>> 0) {
                  continue label3
                 }
                 break label3;
                };
                HEAP32[($7_1 + 60 | 0) >> 2] = $1_1;
                block30 : {
                 block27 : {
                  if (($12_1 | 0) == (27 | 0)) {
                   break block27
                  }
                  if (!$12_1) {
                   break block26
                  }
                  block28 : {
                   if (($16_1 | 0) < (0 | 0)) {
                    break block28
                   }
                   block29 : {
                    if ($0_1) {
                     break block29
                    }
                    HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $12_1;
                    continue label4;
                   }
                   i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
                   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                   $267_1 = i64toi32_i32$0;
                   i64toi32_i32$0 = $7_1;
                   HEAP32[($7_1 + 48 | 0) >> 2] = $267_1;
                   HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$1;
                   break block30;
                  }
                  if (!$0_1) {
                   break block31
                  }
                  $327($7_1 + 48 | 0 | 0, $12_1 | 0, $2_1 | 0, $6_1 | 0);
                  break block30;
                 }
                 if (($16_1 | 0) > (-1 | 0)) {
                  break block26
                 }
                 $12_1 = 0;
                 if (!$0_1) {
                  continue label1
                 }
                }
                if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
                 break block32
                }
                $23_1 = $17_1 & -65537 | 0;
                $17_1 = $17_1 & 8192 | 0 ? $23_1 : $17_1;
                $16_1 = 0;
                $24_1 = 67109009;
                $22_1 = $9_1;
                block35 : {
                 block65 : {
                  block64 : {
                   block62 : {
                    block46 : {
                     block44 : {
                      block41 : {
                       block36 : {
                        block56 : {
                         block48 : {
                          block37 : {
                           block39 : {
                            block33 : {
                             block40 : {
                              block38 : {
                               block42 : {
                                block43 : {
                                 $18_1 = HEAPU8[$18_1 >> 0] | 0;
                                 $12_1 = $18_1 << 24 >> 24;
                                 $12_1 = $15_1 ? (($18_1 & 15 | 0 | 0) == (3 | 0) ? $12_1 & -45 | 0 : $12_1) : $12_1;
                                 switch ($12_1 + -88 | 0 | 0) {
                                 case 0:
                                 case 32:
                                  break block33;
                                 case 1:
                                 case 2:
                                 case 3:
                                 case 4:
                                 case 5:
                                 case 6:
                                 case 7:
                                 case 8:
                                 case 10:
                                 case 16:
                                 case 18:
                                 case 19:
                                 case 20:
                                 case 21:
                                 case 25:
                                 case 26:
                                 case 28:
                                 case 30:
                                 case 31:
                                  break block34;
                                 case 9:
                                 case 13:
                                 case 14:
                                 case 15:
                                  break block35;
                                 case 11:
                                  break block36;
                                 case 12:
                                 case 17:
                                  break block37;
                                 case 22:
                                  break block38;
                                 case 23:
                                  break block39;
                                 case 24:
                                  break block40;
                                 case 27:
                                  break block41;
                                 case 29:
                                  break block42;
                                 default:
                                  break block43;
                                 };
                                }
                                $22_1 = $9_1;
                                block45 : {
                                 switch ($12_1 + -65 | 0 | 0) {
                                 case 1:
                                 case 3:
                                  break block34;
                                 case 0:
                                 case 4:
                                 case 5:
                                 case 6:
                                  break block35;
                                 case 2:
                                  break block44;
                                 default:
                                  break block45;
                                 };
                                }
                                if (($12_1 | 0) == (83 | 0)) {
                                 break block46
                                }
                                break block47;
                               }
                               $16_1 = 0;
                               $24_1 = 67109009;
                               i64toi32_i32$2 = $7_1;
                               i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                               i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                               $25_1 = i64toi32_i32$1;
                               $25$hi = i64toi32_i32$0;
                               break block48;
                              }
                              $12_1 = 0;
                              block55 : {
                               switch ($15_1 | 0) {
                               case 0:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label1;
                               case 1:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label1;
                               case 2:
                                i64toi32_i32$1 = $11_1;
                                i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                                i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                                HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                                continue label1;
                               case 3:
                                HEAP16[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 1] = $11_1;
                                continue label1;
                               case 4:
                                HEAP8[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 0] = $11_1;
                                continue label1;
                               case 6:
                                HEAP32[(HEAP32[($7_1 + 48 | 0) >> 2] | 0) >> 2] = $11_1;
                                continue label1;
                               case 7:
                                break block55;
                               default:
                                continue label1;
                               };
                              }
                              i64toi32_i32$1 = $11_1;
                              i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                              i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                              HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                              continue label1;
                             }
                             $20_1 = $20_1 >>> 0 > 8 >>> 0 ? $20_1 : 8;
                             $17_1 = $17_1 | 8 | 0;
                             $12_1 = 120;
                            }
                            $16_1 = 0;
                            $24_1 = 67109009;
                            i64toi32_i32$2 = $7_1;
                            i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                            i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                            $25_1 = i64toi32_i32$0;
                            $25$hi = i64toi32_i32$1;
                            $13_1 = $328(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $12_1 & 32 | 0 | 0) | 0;
                            if (!(i64toi32_i32$0 | i64toi32_i32$1 | 0)) {
                             break block56
                            }
                            if (!($17_1 & 8 | 0)) {
                             break block56
                            }
                            $24_1 = ($12_1 >>> 4 | 0) + 67109009 | 0;
                            $16_1 = 2;
                            break block56;
                           }
                           $16_1 = 0;
                           $24_1 = 67109009;
                           i64toi32_i32$2 = $7_1;
                           i64toi32_i32$1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                           i64toi32_i32$0 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                           $25_1 = i64toi32_i32$1;
                           $25$hi = i64toi32_i32$0;
                           $13_1 = $329(i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $9_1 | 0) | 0;
                           if (!($17_1 & 8 | 0)) {
                            break block56
                           }
                           $12_1 = $9_1 - $13_1 | 0;
                           $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1 + 1 | 0;
                           break block56;
                          }
                          block57 : {
                           i64toi32_i32$2 = $7_1;
                           i64toi32_i32$0 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                           i64toi32_i32$1 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                           $25_1 = i64toi32_i32$0;
                           $25$hi = i64toi32_i32$1;
                           i64toi32_i32$2 = i64toi32_i32$0;
                           i64toi32_i32$0 = -1;
                           i64toi32_i32$3 = -1;
                           if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
                            $33_1 = 1
                           } else {
                            if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
                             if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                              $34_1 = 0
                             } else {
                              $34_1 = 1
                             }
                             $35_1 = $34_1;
                            } else {
                             $35_1 = 0
                            }
                            $33_1 = $35_1;
                           }
                           if ($33_1) {
                            break block57
                           }
                           i64toi32_i32$2 = $25$hi;
                           i64toi32_i32$2 = 0;
                           i64toi32_i32$3 = 0;
                           i64toi32_i32$1 = $25$hi;
                           i64toi32_i32$0 = $25_1;
                           i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
                           i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                           $25_1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                           $25$hi = i64toi32_i32$5;
                           i64toi32_i32$3 = $7_1;
                           HEAP32[($7_1 + 48 | 0) >> 2] = $25_1;
                           HEAP32[($7_1 + 52 | 0) >> 2] = i64toi32_i32$5;
                           $16_1 = 1;
                           $24_1 = 67109009;
                           break block48;
                          }
                          block58 : {
                           if (!($17_1 & 2048 | 0)) {
                            break block58
                           }
                           $16_1 = 1;
                           $24_1 = 67109010;
                           break block48;
                          }
                          $16_1 = $17_1 & 1 | 0;
                          $24_1 = $16_1 ? 67109011 : 67109009;
                         }
                         i64toi32_i32$5 = $25$hi;
                         $13_1 = $330($25_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                        }
                        if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                         break block
                        }
                        $17_1 = $21_1 ? $17_1 & -65537 | 0 : $17_1;
                        block59 : {
                         i64toi32_i32$5 = $25$hi;
                         i64toi32_i32$2 = $25_1;
                         i64toi32_i32$3 = 0;
                         i64toi32_i32$0 = 0;
                         if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
                          break block59
                         }
                         if ($20_1) {
                          break block59
                         }
                         $13_1 = $9_1;
                         $22_1 = $13_1;
                         $20_1 = 0;
                         break block34;
                        }
                        i64toi32_i32$2 = $25$hi;
                        $12_1 = ($9_1 - $13_1 | 0) + !($25_1 | i64toi32_i32$2 | 0) | 0;
                        $20_1 = ($20_1 | 0) > ($12_1 | 0) ? $20_1 : $12_1;
                        break block47;
                       }
                       $12_1 = HEAPU8[($7_1 + 48 | 0) >> 0] | 0;
                       break block60;
                      }
                      $12_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                      $13_1 = $12_1 ? $12_1 : 67110810;
                      $12_1 = $320($13_1 | 0, ($20_1 >>> 0 < 2147483647 >>> 0 ? $20_1 : 2147483647) | 0) | 0;
                      $22_1 = $13_1 + $12_1 | 0;
                      block61 : {
                       if (($20_1 | 0) <= (-1 | 0)) {
                        break block61
                       }
                       $17_1 = $23_1;
                       $20_1 = $12_1;
                       break block34;
                      }
                      $17_1 = $23_1;
                      $20_1 = $12_1;
                      if (HEAPU8[$22_1 >> 0] | 0) {
                       break block
                      }
                      break block34;
                     }
                     i64toi32_i32$0 = $7_1;
                     i64toi32_i32$2 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                     i64toi32_i32$5 = HEAP32[($7_1 + 52 | 0) >> 2] | 0;
                     $25_1 = i64toi32_i32$2;
                     $25$hi = i64toi32_i32$5;
                     if (!!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
                      break block62
                     }
                     $12_1 = 0;
                     break block60;
                    }
                    block63 : {
                     if (!$20_1) {
                      break block63
                     }
                     $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                     break block64;
                    }
                    $12_1 = 0;
                    $331($0_1 | 0, 32 | 0, $19_1 | 0, 0 | 0, $17_1 | 0);
                    break block65;
                   }
                   HEAP32[($7_1 + 12 | 0) >> 2] = 0;
                   i64toi32_i32$5 = $25$hi;
                   HEAP32[($7_1 + 8 | 0) >> 2] = $25_1;
                   HEAP32[($7_1 + 48 | 0) >> 2] = $7_1 + 8 | 0;
                   $14_1 = $7_1 + 8 | 0;
                   $20_1 = -1;
                  }
                  $12_1 = 0;
                  block66 : {
                   label5 : while (1) {
                    $15_1 = HEAP32[$14_1 >> 2] | 0;
                    if (!$15_1) {
                     break block66
                    }
                    $15_1 = $338($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                    if (($15_1 | 0) < (0 | 0)) {
                     break block32
                    }
                    if ($15_1 >>> 0 > ($20_1 - $12_1 | 0) >>> 0) {
                     break block66
                    }
                    $14_1 = $14_1 + 4 | 0;
                    $12_1 = $15_1 + $12_1 | 0;
                    if ($12_1 >>> 0 < $20_1 >>> 0) {
                     continue label5
                    }
                    break label5;
                   };
                  }
                  $22_1 = 61;
                  if (($12_1 | 0) < (0 | 0)) {
                   break block26
                  }
                  $331($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 | 0);
                  block67 : {
                   if ($12_1) {
                    break block67
                   }
                   $12_1 = 0;
                   break block65;
                  }
                  $15_1 = 0;
                  $14_1 = HEAP32[($7_1 + 48 | 0) >> 2] | 0;
                  label6 : while (1) {
                   $13_1 = HEAP32[$14_1 >> 2] | 0;
                   if (!$13_1) {
                    break block65
                   }
                   $13_1 = $338($7_1 + 4 | 0 | 0, $13_1 | 0) | 0;
                   $15_1 = $13_1 + $15_1 | 0;
                   if ($15_1 >>> 0 > $12_1 >>> 0) {
                    break block65
                   }
                   $325($0_1 | 0, $7_1 + 4 | 0 | 0, $13_1 | 0);
                   $14_1 = $14_1 + 4 | 0;
                   if ($15_1 >>> 0 < $12_1 >>> 0) {
                    continue label6
                   }
                   break label6;
                  };
                 }
                 $331($0_1 | 0, 32 | 0, $19_1 | 0, $12_1 | 0, $17_1 ^ 8192 | 0 | 0);
                 $12_1 = ($19_1 | 0) > ($12_1 | 0) ? $19_1 : $12_1;
                 continue label1;
                }
                if ($21_1 & ($20_1 | 0) < (0 | 0) | 0) {
                 break block
                }
                $22_1 = 61;
                $12_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 48 | 0) >> 3], $19_1, $20_1, $17_1, $12_1) | 0;
                if (($12_1 | 0) >= (0 | 0)) {
                 continue label1
                }
                break block26;
               }
               $14_1 = HEAPU8[($12_1 + 1 | 0) >> 0] | 0;
               $12_1 = $12_1 + 1 | 0;
               continue label7;
              };
             }
             if ($0_1) {
              break block68
             }
             if (!$10_1) {
              break block31
             }
             $12_1 = 1;
             block69 : {
              label8 : while (1) {
               $14_1 = HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0;
               if (!$14_1) {
                break block69
               }
               $327($3_1 + ($12_1 << 3 | 0) | 0 | 0, $14_1 | 0, $2_1 | 0, $6_1 | 0);
               $11_1 = 1;
               $12_1 = $12_1 + 1 | 0;
               if (($12_1 | 0) != (10 | 0)) {
                continue label8
               }
               break block68;
              };
             }
             block70 : {
              if ($12_1 >>> 0 < 10 >>> 0) {
               break block70
              }
              $11_1 = 1;
              break block68;
             }
             label9 : while (1) {
              if (HEAP32[($4_1 + ($12_1 << 2 | 0) | 0) >> 2] | 0) {
               break block15
              }
              $11_1 = 1;
              $12_1 = $12_1 + 1 | 0;
              if (($12_1 | 0) == (10 | 0)) {
               break block68
              }
              continue label9;
             };
            }
            $22_1 = 28;
            break block26;
           }
           HEAP8[($7_1 + 39 | 0) >> 0] = $12_1;
           $20_1 = 1;
           $13_1 = $8_1;
           $22_1 = $9_1;
           $17_1 = $23_1;
           break block34;
          }
          $22_1 = $9_1;
         }
         $1_1 = $22_1 - $13_1 | 0;
         $18_1 = ($20_1 | 0) > ($1_1 | 0) ? $20_1 : $1_1;
         if (($18_1 | 0) > ($16_1 ^ 2147483647 | 0 | 0)) {
          break block
         }
         $22_1 = 61;
         $15_1 = $16_1 + $18_1 | 0;
         $12_1 = ($19_1 | 0) > ($15_1 | 0) ? $19_1 : $15_1;
         if (($12_1 | 0) > ($14_1 | 0)) {
          break block26
         }
         $331($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 | 0);
         $325($0_1 | 0, $24_1 | 0, $16_1 | 0);
         $331($0_1 | 0, 48 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 65536 | 0 | 0);
         $331($0_1 | 0, 48 | 0, $18_1 | 0, $1_1 | 0, 0 | 0);
         $325($0_1 | 0, $13_1 | 0, $1_1 | 0);
         $331($0_1 | 0, 32 | 0, $12_1 | 0, $15_1 | 0, $17_1 ^ 8192 | 0 | 0);
         $1_1 = HEAP32[($7_1 + 60 | 0) >> 2] | 0;
         continue label1;
        }
        break label1;
       };
       break label4;
      };
      $11_1 = 0;
      break block68;
     }
     $22_1 = 61;
    }
    HEAP32[($231() | 0) >> 2] = $22_1;
   }
   $11_1 = -1;
  }
  global$0 = $7_1 + 64 | 0;
  return $11_1 | 0;
 }
 
 function $325($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break block
   }
   $246($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $326($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $1_1 = 0, $2_1 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = 0;
  block : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   $3_1 = (HEAP8[$2_1 >> 0] | 0) + -48 | 0;
   if ($3_1 >>> 0 <= 9 >>> 0) {
    break block
   }
   return 0 | 0;
  }
  label : while (1) {
   $4_1 = -1;
   block1 : {
    if ($1_1 >>> 0 > 214748364 >>> 0) {
     break block1
    }
    $1_1 = Math_imul($1_1, 10);
    $4_1 = $3_1 >>> 0 > ($1_1 ^ 2147483647 | 0) >>> 0 ? -1 : $3_1 + $1_1 | 0;
   }
   $3_1 = $2_1 + 1 | 0;
   HEAP32[$0_1 >> 2] = $3_1;
   $5_1 = HEAP8[($2_1 + 1 | 0) >> 0] | 0;
   $1_1 = $4_1;
   $2_1 = $3_1;
   $3_1 = $5_1 + -48 | 0;
   if ($3_1 >>> 0 < 10 >>> 0) {
    continue label
   }
   break label;
  };
  return $1_1 | 0;
 }
 
 function $327($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21_1 = 0, $29_1 = 0, $37_1 = 0, $45_1 = 0, $55_1 = 0, $63_1 = 0, $71_1 = 0, $79_1 = 0, $87_1 = 0, $97_1 = 0, $105_1 = 0, $115_1 = 0, $125_1 = 0, $133_1 = 0, $141_1 = 0;
  block18 : {
   switch ($1_1 + -9 | 0 | 0) {
   case 0:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
    return;
   case 1:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $21_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $29_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $37_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $45_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $55_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $55_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $63_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $71_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $79_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $87_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $97_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $97_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $105_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $115_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $115_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $125_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $125_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $0_1;
    HEAP32[i64toi32_i32$1 >> 2] = $133_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1_1 = HEAP32[$2_1 >> 2] | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $0_1;
    HEAP32[i64toi32_i32$0 >> 2] = $141_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
    HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
    break;
   default:
    break block18;
   };
  }
 }
 
 function $328($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  block : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 67120720 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label
    }
    break label;
   };
  }
  return $1_1 | 0;
 }
 
 function $329($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  block : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label
    }
    break label;
   };
  }
  return $1_1 | 0;
 }
 
 function $330($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  block1 : {
   block : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break block
    }
    i64toi32_i32$2 = i64toi32_i32$0;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break block1;
   }
   label : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label
    }
    break label;
   };
  }
  block2 : {
   i64toi32_i32$2 = $2$hi;
   if (!($2_1 | i64toi32_i32$2 | 0)) {
    break block2
   }
   $3_1 = $2_1;
   label1 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label1
    }
    break label1;
   };
  }
  return $1_1 | 0;
 }
 
 function $331($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  block : {
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break block
   }
   if ($4_1 & 73728 | 0) {
    break block
   }
   $3_1 = $2_1 - $3_1 | 0;
   $2_1 = $3_1 >>> 0 < 256 >>> 0;
   $322($5_1 | 0, $1_1 | 0, ($2_1 ? $3_1 : 256) | 0) | 0;
   block1 : {
    if ($2_1) {
     break block1
    }
    label : while (1) {
     $325($0_1 | 0, $5_1 | 0, 256 | 0);
     $3_1 = $3_1 + -256 | 0;
     if ($3_1 >>> 0 > 255 >>> 0) {
      continue label
     }
     break label;
    };
   }
   $325($0_1 | 0, $5_1 | 0, $3_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $332($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $323($0_1 | 0, $1_1 | 0, $2_1 | 0, 8 | 0, 9 | 0) | 0 | 0;
 }
 
 function $333($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $10_1 = 0, $11_1 = 0, $18_1 = 0, $19_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0, $15_1 = 0, $6_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $22_1 = 0, i64toi32_i32$2 = 0, $23_1 = 0, $20_1 = 0, $17_1 = 0, $8_1 = 0, $27_1 = 0.0, $13_1 = 0, $24_1 = 0, $14_1 = 0, $16_1 = 0, $24$hi = 0, $9_1 = 0, $21_1 = 0, $7_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $142_1 = 0, $25$hi = 0, $51_1 = 0, $898_1 = 0, $133_1 = 0, $25_1 = 0, $172_1 = 0, $174$hi = 0, $176$hi = 0, $178_1 = 0, $178$hi = 0, $26$hi = 0, $184_1 = 0, $184$hi = 0, $390_1 = 0.0, $891_1 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  block1 : {
   block : {
    i64toi32_i32$0 = $335(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $48_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $49_1 = 0
      } else {
       $49_1 = 1
      }
      $50_1 = $49_1;
     } else {
      $50_1 = 0
     }
     $48_1 = $50_1;
    }
    if ($48_1) {
     break block
    }
    $8_1 = 1;
    $9_1 = 67109019;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $335(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break block1;
   }
   block2 : {
    if (!($4_1 & 2048 | 0)) {
     break block2
    }
    $8_1 = 1;
    $9_1 = 67109022;
    break block1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 67109025 : 67109020;
   $7_1 = !$8_1;
  }
  block4 : {
   block3 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block3
    }
    $10_1 = $8_1 + 3 | 0;
    $331($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $325($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $325($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 67109713 : 67110049) : $11_1 ? 67109856 : 67110083) | 0, 3 | 0);
    $331($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($2_1 | 0) > ($10_1 | 0) ? $2_1 : $10_1;
    break block4;
   }
   $13_1 = $6_1 + 16 | 0;
   block7 : {
    block8 : {
     block6 : {
      block5 : {
       $1_1 = +$321(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break block5
       }
       $10_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $10_1 + -1 | 0;
       $14_1 = $5_1 | 32 | 0;
       if (($14_1 | 0) != (97 | 0)) {
        break block6
       }
       break block7;
      }
      $14_1 = $5_1 | 32 | 0;
      if (($14_1 | 0) == (97 | 0)) {
       break block7
      }
      $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $16_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break block8;
     }
     $16_1 = $10_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $16_1;
     $15_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $17_1 = ($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? 0 : 288) | 0;
    $11_1 = $17_1;
    label : while (1) {
     $133_1 = $11_1;
     if ($1_1 < 4294967295.0 & $1_1 >= 0.0 | 0) {
      $142_1 = ~~$1_1 >>> 0
     } else {
      $142_1 = 0
     }
     $10_1 = $142_1;
     HEAP32[$133_1 >> 2] = $10_1;
     $11_1 = $11_1 + 4 | 0;
     $1_1 = ($1_1 - +($10_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label
     }
     break label;
    };
    block10 : {
     block9 : {
      if (($16_1 | 0) >= (1 | 0)) {
       break block9
      }
      $18_1 = $16_1;
      $10_1 = $11_1;
      $19_1 = $17_1;
      break block10;
     }
     $19_1 = $17_1;
     $18_1 = $16_1;
     label3 : while (1) {
      $18_1 = $18_1 >>> 0 < 29 >>> 0 ? $18_1 : 29;
      block11 : {
       $10_1 = $11_1 + -4 | 0;
       if ($10_1 >>> 0 < $19_1 >>> 0) {
        break block11
       }
       i64toi32_i32$1 = 0;
       $25_1 = $18_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label1 : while (1) {
        $172_1 = $10_1;
        i64toi32_i32$0 = $10_1;
        i64toi32_i32$1 = HEAP32[$10_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $174$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $174$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $51_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $51_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $176$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $178_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $178$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $176$hi;
        i64toi32_i32$1 = $51_1;
        i64toi32_i32$2 = $178$hi;
        i64toi32_i32$3 = $178_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $26$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $184_1 = i64toi32_i32$1;
        $184$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $26$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $184$hi;
        i64toi32_i32$3 = $184_1;
        i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$172_1 >> 2] = i64toi32_i32$2;
        $10_1 = $10_1 + -4 | 0;
        if ($10_1 >>> 0 >= $19_1 >>> 0) {
         continue label1
        }
        break label1;
       };
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 1e9;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
        break block11
       }
       $19_1 = $19_1 + -4 | 0;
       i64toi32_i32$5 = $24$hi;
       HEAP32[$19_1 >> 2] = $24_1;
      }
      block12 : {
       label2 : while (1) {
        $10_1 = $11_1;
        if ($10_1 >>> 0 <= $19_1 >>> 0) {
         break block12
        }
        $11_1 = $10_1 + -4 | 0;
        if (!(HEAP32[$11_1 >> 2] | 0)) {
         continue label2
        }
        break label2;
       };
      }
      $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $18_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
      $11_1 = $10_1;
      if (($18_1 | 0) > (0 | 0)) {
       continue label3
      }
      break label3;
     };
    }
    block13 : {
     if (($18_1 | 0) > (-1 | 0)) {
      break block13
     }
     $20_1 = ((($15_1 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $21_1 = ($14_1 | 0) == (102 | 0);
     label5 : while (1) {
      $11_1 = 0 - $18_1 | 0;
      $12_1 = $11_1 >>> 0 < 9 >>> 0 ? $11_1 : 9;
      block15 : {
       block14 : {
        if ($19_1 >>> 0 < $10_1 >>> 0) {
         break block14
        }
        $11_1 = HEAP32[$19_1 >> 2] | 0 ? 0 : 4;
        break block15;
       }
       $22_1 = 1e9 >>> $12_1 | 0;
       $23_1 = (-1 << $12_1 | 0) ^ -1 | 0;
       $18_1 = 0;
       $11_1 = $19_1;
       label4 : while (1) {
        $3_1 = HEAP32[$11_1 >> 2] | 0;
        HEAP32[$11_1 >> 2] = ($3_1 >>> $12_1 | 0) + $18_1 | 0;
        $18_1 = Math_imul($3_1 & $23_1 | 0, $22_1);
        $11_1 = $11_1 + 4 | 0;
        if ($11_1 >>> 0 < $10_1 >>> 0) {
         continue label4
        }
        break label4;
       };
       $11_1 = HEAP32[$19_1 >> 2] | 0 ? 0 : 4;
       if (!$18_1) {
        break block15
       }
       HEAP32[$10_1 >> 2] = $18_1;
       $10_1 = $10_1 + 4 | 0;
      }
      $18_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $12_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $18_1;
      $19_1 = $19_1 + $11_1 | 0;
      $11_1 = $21_1 ? $17_1 : $19_1;
      $10_1 = (($10_1 - $11_1 | 0) >> 2 | 0 | 0) > ($20_1 | 0) ? $11_1 + ($20_1 << 2 | 0) | 0 : $10_1;
      if (($18_1 | 0) < (0 | 0)) {
       continue label5
      }
      break label5;
     };
    }
    $18_1 = 0;
    block16 : {
     if ($19_1 >>> 0 >= $10_1 >>> 0) {
      break block16
     }
     $18_1 = Math_imul(($17_1 - $19_1 | 0) >> 2 | 0, 9);
     $11_1 = 10;
     $3_1 = HEAP32[$19_1 >> 2] | 0;
     if ($3_1 >>> 0 < 10 >>> 0) {
      break block16
     }
     label6 : while (1) {
      $18_1 = $18_1 + 1 | 0;
      $11_1 = Math_imul($11_1, 10);
      if ($3_1 >>> 0 >= $11_1 >>> 0) {
       continue label6
      }
      break label6;
     };
    }
    block17 : {
     $11_1 = ($15_1 - (($14_1 | 0) == (102 | 0) ? 0 : $18_1) | 0) - (($15_1 | 0) != (0 | 0) & ($14_1 | 0) == (103 | 0) | 0) | 0;
     if (($11_1 | 0) >= (Math_imul(($10_1 - $17_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break block17
     }
     $3_1 = $11_1 + 9216 | 0;
     $22_1 = ($3_1 | 0) / (9 | 0) | 0;
     $12_1 = (($6_1 + 48 | 0) + (($16_1 | 0) < (0 | 0) ? -4092 : -3804) | 0) + ($22_1 << 2 | 0) | 0;
     $11_1 = 10;
     block18 : {
      $3_1 = $3_1 - Math_imul($22_1, 9) | 0;
      if (($3_1 | 0) > (7 | 0)) {
       break block18
      }
      label7 : while (1) {
       $11_1 = Math_imul($11_1, 10);
       $3_1 = $3_1 + 1 | 0;
       if (($3_1 | 0) != (8 | 0)) {
        continue label7
       }
       break label7;
      };
     }
     $23_1 = $12_1 + 4 | 0;
     block20 : {
      block19 : {
       $3_1 = HEAP32[$12_1 >> 2] | 0;
       $20_1 = ($3_1 >>> 0) / ($11_1 >>> 0) | 0;
       $22_1 = $3_1 - Math_imul($20_1, $11_1) | 0;
       if ($22_1) {
        break block19
       }
       if (($23_1 | 0) == ($10_1 | 0)) {
        break block20
       }
      }
      block22 : {
       block21 : {
        if ($20_1 & 1 | 0) {
         break block21
        }
        $1_1 = 9007199254740992.0;
        if (($11_1 | 0) != (1e9 | 0)) {
         break block22
        }
        if ($12_1 >>> 0 <= $19_1 >>> 0) {
         break block22
        }
        if (!((HEAPU8[($12_1 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break block22
        }
       }
       $1_1 = 9007199254740994.0;
      }
      $390_1 = ($23_1 | 0) == ($10_1 | 0) ? 1.0 : 1.5;
      $23_1 = $11_1 >>> 1 | 0;
      $27_1 = $22_1 >>> 0 < $23_1 >>> 0 ? .5 : ($22_1 | 0) == ($23_1 | 0) ? $390_1 : 1.5;
      block23 : {
       if ($7_1) {
        break block23
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break block23
       }
       $27_1 = -$27_1;
       $1_1 = -$1_1;
      }
      $3_1 = $3_1 - $22_1 | 0;
      HEAP32[$12_1 >> 2] = $3_1;
      if ($1_1 + $27_1 == $1_1) {
       break block20
      }
      $11_1 = $3_1 + $11_1 | 0;
      HEAP32[$12_1 >> 2] = $11_1;
      block24 : {
       if ($11_1 >>> 0 < 1e9 >>> 0) {
        break block24
       }
       label8 : while (1) {
        HEAP32[$12_1 >> 2] = 0;
        block25 : {
         $12_1 = $12_1 + -4 | 0;
         if ($12_1 >>> 0 >= $19_1 >>> 0) {
          break block25
         }
         $19_1 = $19_1 + -4 | 0;
         HEAP32[$19_1 >> 2] = 0;
        }
        $11_1 = (HEAP32[$12_1 >> 2] | 0) + 1 | 0;
        HEAP32[$12_1 >> 2] = $11_1;
        if ($11_1 >>> 0 > 999999999 >>> 0) {
         continue label8
        }
        break label8;
       };
      }
      $18_1 = Math_imul(($17_1 - $19_1 | 0) >> 2 | 0, 9);
      $11_1 = 10;
      $3_1 = HEAP32[$19_1 >> 2] | 0;
      if ($3_1 >>> 0 < 10 >>> 0) {
       break block20
      }
      label9 : while (1) {
       $18_1 = $18_1 + 1 | 0;
       $11_1 = Math_imul($11_1, 10);
       if ($3_1 >>> 0 >= $11_1 >>> 0) {
        continue label9
       }
       break label9;
      };
     }
     $11_1 = $12_1 + 4 | 0;
     $10_1 = $10_1 >>> 0 > $11_1 >>> 0 ? $11_1 : $10_1;
    }
    block26 : {
     label10 : while (1) {
      $11_1 = $10_1;
      $3_1 = $10_1 >>> 0 <= $19_1 >>> 0;
      if ($3_1) {
       break block26
      }
      $10_1 = $10_1 + -4 | 0;
      if (!(HEAP32[$10_1 >> 2] | 0)) {
       continue label10
      }
      break label10;
     };
    }
    block28 : {
     block27 : {
      if (($14_1 | 0) == (103 | 0)) {
       break block27
      }
      $22_1 = $4_1 & 8 | 0;
      break block28;
     }
     $10_1 = $15_1 ? $15_1 : 1;
     $12_1 = ($10_1 | 0) > ($18_1 | 0) & ($18_1 | 0) > (-5 | 0) | 0;
     $15_1 = ($12_1 ? $18_1 ^ -1 | 0 : -1) + $10_1 | 0;
     $5_1 = ($12_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break block28
     }
     $10_1 = -9;
     block29 : {
      if ($3_1) {
       break block29
      }
      $12_1 = HEAP32[($11_1 + -4 | 0) >> 2] | 0;
      if (!$12_1) {
       break block29
      }
      $3_1 = 10;
      $10_1 = 0;
      if (($12_1 >>> 0) % (10 >>> 0) | 0) {
       break block29
      }
      label11 : while (1) {
       $22_1 = $10_1;
       $10_1 = $10_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if (!(($12_1 >>> 0) % ($3_1 >>> 0) | 0)) {
        continue label11
       }
       break label11;
      };
      $10_1 = $22_1 ^ -1 | 0;
     }
     $3_1 = Math_imul(($11_1 - $17_1 | 0) >> 2 | 0, 9);
     block30 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break block30
      }
      $22_1 = 0;
      $10_1 = ($3_1 + $10_1 | 0) + -9 | 0;
      $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
      $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
      break block28;
     }
     $22_1 = 0;
     $10_1 = (($18_1 + $3_1 | 0) + $10_1 | 0) + -9 | 0;
     $10_1 = ($10_1 | 0) > (0 | 0) ? $10_1 : 0;
     $15_1 = ($15_1 | 0) < ($10_1 | 0) ? $15_1 : $10_1;
    }
    $12_1 = -1;
    $23_1 = $15_1 | $22_1 | 0;
    if (($15_1 | 0) > (($23_1 ? 2147483645 : 2147483646) | 0)) {
     break block4
    }
    $3_1 = ($15_1 + (($23_1 | 0) != (0 | 0)) | 0) + 1 | 0;
    block32 : {
     block31 : {
      $21_1 = $5_1 & -33 | 0;
      if (($21_1 | 0) != (70 | 0)) {
       break block31
      }
      if (($18_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
       break block4
      }
      $10_1 = ($18_1 | 0) > (0 | 0) ? $18_1 : 0;
      break block32;
     }
     block33 : {
      $10_1 = $18_1 >> 31 | 0;
      i64toi32_i32$5 = 0;
      $10_1 = $330(($18_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$5 | 0, $13_1 | 0) | 0;
      if (($13_1 - $10_1 | 0 | 0) > (1 | 0)) {
       break block33
      }
      label12 : while (1) {
       $10_1 = $10_1 + -1 | 0;
       HEAP8[$10_1 >> 0] = 48;
       if (($13_1 - $10_1 | 0 | 0) < (2 | 0)) {
        continue label12
       }
       break label12;
      };
     }
     $20_1 = $10_1 + -2 | 0;
     HEAP8[$20_1 >> 0] = $5_1;
     $12_1 = -1;
     HEAP8[($10_1 + -1 | 0) >> 0] = ($18_1 | 0) < (0 | 0) ? 45 : 43;
     $10_1 = $13_1 - $20_1 | 0;
     if (($10_1 | 0) > ($3_1 ^ 2147483647 | 0 | 0)) {
      break block4
     }
    }
    $12_1 = -1;
    $10_1 = $10_1 + $3_1 | 0;
    if (($10_1 | 0) > ($8_1 ^ 2147483647 | 0 | 0)) {
     break block4
    }
    $5_1 = $10_1 + $8_1 | 0;
    $331($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 | 0);
    $325($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $331($0_1 | 0, 48 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 65536 | 0 | 0);
    block45 : {
     block40 : {
      block38 : {
       block34 : {
        if (($21_1 | 0) != (70 | 0)) {
         break block34
        }
        $18_1 = $6_1 + 16 | 0 | 9 | 0;
        $3_1 = $19_1 >>> 0 > $17_1 >>> 0 ? $17_1 : $19_1;
        $19_1 = $3_1;
        label14 : while (1) {
         i64toi32_i32$3 = $19_1;
         i64toi32_i32$5 = HEAP32[$19_1 >> 2] | 0;
         i64toi32_i32$4 = 0;
         $10_1 = $330(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $18_1 | 0) | 0;
         block36 : {
          block35 : {
           if (($19_1 | 0) == ($3_1 | 0)) {
            break block35
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break block36
           }
           label13 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label13
            }
            break block36;
           };
          }
          if (($10_1 | 0) != ($18_1 | 0)) {
           break block36
          }
          $10_1 = $10_1 + -1 | 0;
          HEAP8[$10_1 >> 0] = 48;
         }
         $325($0_1 | 0, $10_1 | 0, $18_1 - $10_1 | 0 | 0);
         $19_1 = $19_1 + 4 | 0;
         if ($19_1 >>> 0 <= $17_1 >>> 0) {
          continue label14
         }
         break label14;
        };
        block37 : {
         if (!$23_1) {
          break block37
         }
         $325($0_1 | 0, 67110806 | 0, 1 | 0);
        }
        if ($19_1 >>> 0 >= $11_1 >>> 0) {
         break block38
        }
        if (($15_1 | 0) < (1 | 0)) {
         break block38
        }
        label16 : while (1) {
         block39 : {
          i64toi32_i32$3 = $19_1;
          i64toi32_i32$4 = HEAP32[$19_1 >> 2] | 0;
          i64toi32_i32$5 = 0;
          $10_1 = $330(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, $18_1 | 0) | 0;
          if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break block39
          }
          label15 : while (1) {
           $10_1 = $10_1 + -1 | 0;
           HEAP8[$10_1 >> 0] = 48;
           if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label15
           }
           break label15;
          };
         }
         $325($0_1 | 0, $10_1 | 0, (($15_1 | 0) < (9 | 0) ? $15_1 : 9) | 0);
         $10_1 = $15_1 + -9 | 0;
         $19_1 = $19_1 + 4 | 0;
         if ($19_1 >>> 0 >= $11_1 >>> 0) {
          break block40
         }
         $3_1 = ($15_1 | 0) > (9 | 0);
         $15_1 = $10_1;
         if ($3_1) {
          continue label16
         }
         break block40;
        };
       }
       block41 : {
        if (($15_1 | 0) < (0 | 0)) {
         break block41
        }
        $12_1 = $11_1 >>> 0 > $19_1 >>> 0 ? $11_1 : $19_1 + 4 | 0;
        $18_1 = $6_1 + 16 | 0 | 9 | 0;
        $11_1 = $19_1;
        label18 : while (1) {
         block42 : {
          i64toi32_i32$3 = $11_1;
          i64toi32_i32$5 = HEAP32[$11_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $10_1 = $330(i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $18_1 | 0) | 0;
          if (($10_1 | 0) != ($18_1 | 0)) {
           break block42
          }
          $10_1 = $10_1 + -1 | 0;
          HEAP8[$10_1 >> 0] = 48;
         }
         block44 : {
          block43 : {
           if (($11_1 | 0) == ($19_1 | 0)) {
            break block43
           }
           if ($10_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break block44
           }
           label17 : while (1) {
            $10_1 = $10_1 + -1 | 0;
            HEAP8[$10_1 >> 0] = 48;
            if ($10_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label17
            }
            break block44;
           };
          }
          $325($0_1 | 0, $10_1 | 0, 1 | 0);
          $10_1 = $10_1 + 1 | 0;
          if (!($15_1 | $22_1 | 0)) {
           break block44
          }
          $325($0_1 | 0, 67110806 | 0, 1 | 0);
         }
         $3_1 = $18_1 - $10_1 | 0;
         $325($0_1 | 0, $10_1 | 0, (($15_1 | 0) > ($3_1 | 0) ? $3_1 : $15_1) | 0);
         $15_1 = $15_1 - $3_1 | 0;
         $11_1 = $11_1 + 4 | 0;
         if ($11_1 >>> 0 >= $12_1 >>> 0) {
          break block41
         }
         if (($15_1 | 0) > (-1 | 0)) {
          continue label18
         }
         break label18;
        };
       }
       $331($0_1 | 0, 48 | 0, $15_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $325($0_1 | 0, $20_1 | 0, $13_1 - $20_1 | 0 | 0);
       break block45;
      }
      $10_1 = $15_1;
     }
     $331($0_1 | 0, 48 | 0, $10_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $331($0_1 | 0, 32 | 0, $2_1 | 0, $5_1 | 0, $4_1 ^ 8192 | 0 | 0);
    $12_1 = ($2_1 | 0) > ($5_1 | 0) ? $2_1 : $5_1;
    break block4;
   }
   $20_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   block46 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break block46
    }
    $10_1 = 12 - $3_1 | 0;
    $27_1 = 16.0;
    label19 : while (1) {
     $27_1 = $27_1 * 16.0;
     $10_1 = $10_1 + -1 | 0;
     if ($10_1) {
      continue label19
     }
     break label19;
    };
    block47 : {
     if ((HEAPU8[$20_1 >> 0] | 0 | 0) != (45 | 0)) {
      break block47
     }
     $1_1 = -($27_1 + (-$1_1 - $27_1));
     break block46;
    }
    $1_1 = $1_1 + $27_1 - $27_1;
   }
   block48 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $10_1 = $11_1 >> 31 | 0;
    i64toi32_i32$4 = 0;
    $10_1 = $330(($11_1 ^ $10_1 | 0) - $10_1 | 0 | 0, i64toi32_i32$4 | 0, $13_1 | 0) | 0;
    if (($10_1 | 0) != ($13_1 | 0)) {
     break block48
    }
    $10_1 = $10_1 + -1 | 0;
    HEAP8[$10_1 >> 0] = 48;
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $19_1 = $5_1 & 32 | 0;
   $23_1 = $10_1 + -2 | 0;
   HEAP8[$23_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($10_1 + -1 | 0) >> 0] = ($11_1 | 0) < (0 | 0) ? 45 : 43;
   $18_1 = ($3_1 | 0) < (1 | 0) & !($4_1 & 8 | 0) | 0;
   $11_1 = $6_1 + 16 | 0;
   label20 : while (1) {
    $10_1 = $11_1;
    $891_1 = $10_1;
    if (Math_abs($1_1) < 2147483647.0) {
     $898_1 = ~~$1_1
    } else {
     $898_1 = -2147483648
    }
    $11_1 = $898_1;
    HEAP8[$891_1 >> 0] = HEAPU8[($11_1 + 67120720 | 0) >> 0] | 0 | $19_1 | 0;
    $1_1 = ($1_1 - +($11_1 | 0)) * 16.0;
    block49 : {
     $11_1 = $10_1 + 1 | 0;
     if (($11_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break block49
     }
     if ($1_1 == 0.0 & $18_1 | 0) {
      break block49
     }
     HEAP8[($10_1 + 1 | 0) >> 0] = 46;
     $11_1 = $10_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label20
    }
    break label20;
   };
   $12_1 = -1;
   $19_1 = $13_1 - $23_1 | 0;
   $18_1 = $22_1 + $19_1 | 0;
   if (($3_1 | 0) > (2147483645 - $18_1 | 0 | 0)) {
    break block4
   }
   $10_1 = $11_1 - ($6_1 + 16 | 0) | 0;
   $3_1 = $3_1 ? (($10_1 + -2 | 0 | 0) < ($3_1 | 0) ? $3_1 + 2 | 0 : $10_1) : $10_1;
   $11_1 = $18_1 + $3_1 | 0;
   $331($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 | 0);
   $325($0_1 | 0, $20_1 | 0, $22_1 | 0);
   $331($0_1 | 0, 48 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $325($0_1 | 0, $6_1 + 16 | 0 | 0, $10_1 | 0);
   $331($0_1 | 0, 48 | 0, $3_1 - $10_1 | 0 | 0, 0 | 0, 0 | 0);
   $325($0_1 | 0, $23_1 | 0, $19_1 | 0);
   $331($0_1 | 0, 32 | 0, $2_1 | 0, $11_1 | 0, $4_1 ^ 8192 | 0 | 0);
   $12_1 = ($2_1 | 0) > ($11_1 | 0) ? $2_1 : $11_1;
  }
  global$0 = $6_1 + 560 | 0;
  return $12_1 | 0;
 }
 
 function $334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $14_1 = 0, $14$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $14_1 = i64toi32_i32$1;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $14$hi;
  HEAPF64[$0_1 >> 3] = +$365($12_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $335($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $336($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if ($0_1) {
    break block
   }
   return 0 | 0;
  }
  HEAP32[($231() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $337($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  block1 : {
   block : {
    if (!$0_1) {
     break block
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break block1
    }
    block3 : {
     block2 : {
      if (HEAP32[(HEAP32[(($274() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
       break block2
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break block1
      }
      HEAP32[($231() | 0) >> 2] = 25;
      break block3;
     }
     block4 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break block4
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     block6 : {
      block5 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break block5
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break block6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     block7 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break block7
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($231() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($0_1) {
    break block
   }
   return 0 | 0;
  }
  return $337($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $339() {
  fimport$5();
  wasm2js_trap();
 }
 
 function $340($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $7_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $6_1 = 0, $12_1 = 0, $11_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $10_1 = 0, i64toi32_i32$2 = 0, $1_1 = 0, $9_1 = 0, $87_1 = 0, $201_1 = 0, $1154_1 = 0, $1156_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  block5 : {
   block88 : {
    block4 : {
     block6 : {
      block : {
       if ($0_1 >>> 0 > 244 >>> 0) {
        break block
       }
       block1 : {
        $2_1 = HEAP32[(0 + 67141304 | 0) >> 2] | 0;
        $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & 504 | 0;
        $4_1 = $3_1 >>> 3 | 0;
        $0_1 = $2_1 >>> $4_1 | 0;
        if (!($0_1 & 3 | 0)) {
         break block1
        }
        block3 : {
         block2 : {
          $3_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
          $0_1 = $3_1 << 3 | 0;
          $5_1 = $0_1 + 67141344 | 0;
          $4_1 = HEAP32[($0_1 + 67141352 | 0) >> 2] | 0;
          $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
          if (($5_1 | 0) != ($0_1 | 0)) {
           break block2
          }
          HEAP32[(0 + 67141304 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $3_1 | 0) | 0) | 0;
          break block3;
         }
         if ($0_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
          break block4
         }
         if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block4
         }
         HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
         HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $4_1 + 8 | 0;
        $3_1 = $3_1 << 3 | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
        $4_1 = $4_1 + $3_1 | 0;
        HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
        break block5;
       }
       $6_1 = HEAP32[(0 + 67141312 | 0) >> 2] | 0;
       if ($3_1 >>> 0 <= $6_1 >>> 0) {
        break block6
       }
       block7 : {
        if (!$0_1) {
         break block7
        }
        block9 : {
         block8 : {
          $87_1 = $0_1 << $4_1 | 0;
          $0_1 = 2 << $4_1 | 0;
          $5_1 = __wasm_ctz_i32($87_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0 | 0) | 0;
          $0_1 = $5_1 << 3 | 0;
          $7_1 = $0_1 + 67141344 | 0;
          $0_1 = HEAP32[($0_1 + 67141352 | 0) >> 2] | 0;
          $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if (($7_1 | 0) != ($4_1 | 0)) {
           break block8
          }
          $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
          HEAP32[(0 + 67141304 | 0) >> 2] = $2_1;
          break block9;
         }
         if ($4_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
          break block4
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
          break block4
         }
         HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
         HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
        $7_1 = $0_1 + $3_1 | 0;
        $4_1 = $5_1 << 3 | 0;
        $3_1 = $4_1 - $3_1 | 0;
        HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 1 | 0;
        HEAP32[($0_1 + $4_1 | 0) >> 2] = $3_1;
        block10 : {
         if (!$6_1) {
          break block10
         }
         $5_1 = ($6_1 & -8 | 0) + 67141344 | 0;
         $4_1 = HEAP32[(0 + 67141324 | 0) >> 2] | 0;
         block12 : {
          block11 : {
           $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
           if ($2_1 & $8_1 | 0) {
            break block11
           }
           HEAP32[(0 + 67141304 | 0) >> 2] = $2_1 | $8_1 | 0;
           $8_1 = $5_1;
           break block12;
          }
          $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          if ($8_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
           break block4
          }
         }
         HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
         HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
        }
        $0_1 = $0_1 + 8 | 0;
        HEAP32[(0 + 67141324 | 0) >> 2] = $7_1;
        HEAP32[(0 + 67141312 | 0) >> 2] = $3_1;
        break block5;
       }
       $9_1 = HEAP32[(0 + 67141308 | 0) >> 2] | 0;
       if (!$9_1) {
        break block6
       }
       $7_1 = HEAP32[(((__wasm_ctz_i32($9_1 | 0) | 0) << 2 | 0) + 67141608 | 0) >> 2] | 0;
       $4_1 = ((HEAP32[($7_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
       $5_1 = $7_1;
       block14 : {
        label : while (1) {
         block13 : {
          $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
          if ($0_1) {
           break block13
          }
          $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
          if (!$0_1) {
           break block14
          }
         }
         $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
         $201_1 = $5_1;
         $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
         $4_1 = $5_1 ? $201_1 : $4_1;
         $7_1 = $5_1 ? $0_1 : $7_1;
         $5_1 = $0_1;
         continue label;
        };
       }
       $10_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
       if ($7_1 >>> 0 < $10_1 >>> 0) {
        break block4
       }
       $11_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
       block16 : {
        block15 : {
         $0_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
         if (($0_1 | 0) == ($7_1 | 0)) {
          break block15
         }
         $5_1 = HEAP32[($7_1 + 8 | 0) >> 2] | 0;
         if ($5_1 >>> 0 < $10_1 >>> 0) {
          break block4
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
          break block4
         }
         if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
          break block4
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
         HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
         break block16;
        }
        block19 : {
         block18 : {
          block17 : {
           $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
           if (!$5_1) {
            break block17
           }
           $8_1 = $7_1 + 20 | 0;
           break block18;
          }
          $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
          if (!$5_1) {
           break block19
          }
          $8_1 = $7_1 + 16 | 0;
         }
         label1 : while (1) {
          $12_1 = $8_1;
          $0_1 = $5_1;
          $8_1 = $0_1 + 20 | 0;
          $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          $8_1 = $0_1 + 16 | 0;
          $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          break label1;
         };
         if ($12_1 >>> 0 < $10_1 >>> 0) {
          break block4
         }
         HEAP32[$12_1 >> 2] = 0;
         break block16;
        }
        $0_1 = 0;
       }
       block20 : {
        if (!$11_1) {
         break block20
        }
        block22 : {
         block21 : {
          $8_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
          $5_1 = ($8_1 << 2 | 0) + 67141608 | 0;
          if (($7_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
           break block21
          }
          HEAP32[$5_1 >> 2] = $0_1;
          if ($0_1) {
           break block22
          }
          HEAP32[(0 + 67141308 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
          break block20;
         }
         if ($11_1 >>> 0 < $10_1 >>> 0) {
          break block4
         }
         block24 : {
          block23 : {
           if ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) != ($7_1 | 0)) {
            break block23
           }
           HEAP32[($11_1 + 16 | 0) >> 2] = $0_1;
           break block24;
          }
          HEAP32[($11_1 + 20 | 0) >> 2] = $0_1;
         }
         if (!$0_1) {
          break block20
         }
        }
        if ($0_1 >>> 0 < $10_1 >>> 0) {
         break block4
        }
        HEAP32[($0_1 + 24 | 0) >> 2] = $11_1;
        block25 : {
         $5_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
         if (!$5_1) {
          break block25
         }
         if ($5_1 >>> 0 < $10_1 >>> 0) {
          break block4
         }
         HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
         HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
        }
        $5_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
        if (!$5_1) {
         break block20
        }
        if ($5_1 >>> 0 < $10_1 >>> 0) {
         break block4
        }
        HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
       }
       block27 : {
        block26 : {
         if ($4_1 >>> 0 > 15 >>> 0) {
          break block26
         }
         $0_1 = $4_1 + $3_1 | 0;
         HEAP32[($7_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
         $0_1 = $7_1 + $0_1 | 0;
         HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
         break block27;
        }
        HEAP32[($7_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
        $3_1 = $7_1 + $3_1 | 0;
        HEAP32[($3_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
        HEAP32[($3_1 + $4_1 | 0) >> 2] = $4_1;
        block28 : {
         if (!$6_1) {
          break block28
         }
         $5_1 = ($6_1 & -8 | 0) + 67141344 | 0;
         $0_1 = HEAP32[(0 + 67141324 | 0) >> 2] | 0;
         block30 : {
          block29 : {
           $8_1 = 1 << ($6_1 >>> 3 | 0) | 0;
           if ($8_1 & $2_1 | 0) {
            break block29
           }
           HEAP32[(0 + 67141304 | 0) >> 2] = $8_1 | $2_1 | 0;
           $8_1 = $5_1;
           break block30;
          }
          $8_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
          if ($8_1 >>> 0 < $10_1 >>> 0) {
           break block4
          }
         }
         HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
         HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
         HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
         HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
        }
        HEAP32[(0 + 67141324 | 0) >> 2] = $3_1;
        HEAP32[(0 + 67141312 | 0) >> 2] = $4_1;
       }
       $0_1 = $7_1 + 8 | 0;
       break block5;
      }
      $3_1 = -1;
      if ($0_1 >>> 0 > -65 >>> 0) {
       break block6
      }
      $4_1 = $0_1 + 11 | 0;
      $3_1 = $4_1 & -8 | 0;
      $11_1 = HEAP32[(0 + 67141308 | 0) >> 2] | 0;
      if (!$11_1) {
       break block6
      }
      $6_1 = 31;
      block31 : {
       if ($0_1 >>> 0 > 16777204 >>> 0) {
        break block31
       }
       $0_1 = Math_clz32($4_1 >>> 8 | 0);
       $6_1 = ((($3_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
      }
      $4_1 = 0 - $3_1 | 0;
      block37 : {
       block35 : {
        block33 : {
         block32 : {
          $5_1 = HEAP32[(($6_1 << 2 | 0) + 67141608 | 0) >> 2] | 0;
          if ($5_1) {
           break block32
          }
          $0_1 = 0;
          $8_1 = 0;
          break block33;
         }
         $0_1 = 0;
         $7_1 = $3_1 << (($6_1 | 0) == (31 | 0) ? 0 : 25 - ($6_1 >>> 1 | 0) | 0) | 0;
         $8_1 = 0;
         label2 : while (1) {
          block34 : {
           $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
           if ($2_1 >>> 0 >= $4_1 >>> 0) {
            break block34
           }
           $4_1 = $2_1;
           $8_1 = $5_1;
           if ($4_1) {
            break block34
           }
           $4_1 = 0;
           $8_1 = $5_1;
           $0_1 = $5_1;
           break block35;
          }
          $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
          $12_1 = HEAP32[(($5_1 + (($7_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
          $0_1 = $2_1 ? (($2_1 | 0) == ($12_1 | 0) ? $0_1 : $2_1) : $0_1;
          $7_1 = $7_1 << 1 | 0;
          $5_1 = $12_1;
          if ($5_1) {
           continue label2
          }
          break label2;
         };
        }
        block36 : {
         if ($0_1 | $8_1 | 0) {
          break block36
         }
         $8_1 = 0;
         $0_1 = 2 << $6_1 | 0;
         $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $11_1 | 0;
         if (!$0_1) {
          break block6
         }
         $0_1 = HEAP32[(((__wasm_ctz_i32($0_1 | 0) | 0) << 2 | 0) + 67141608 | 0) >> 2] | 0;
        }
        if (!$0_1) {
         break block37
        }
       }
       label3 : while (1) {
        $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
        $7_1 = $2_1 >>> 0 < $4_1 >>> 0;
        block38 : {
         $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if ($5_1) {
          break block38
         }
         $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
        }
        $4_1 = $7_1 ? $2_1 : $4_1;
        $8_1 = $7_1 ? $0_1 : $8_1;
        $0_1 = $5_1;
        if ($0_1) {
         continue label3
        }
        break label3;
       };
      }
      if (!$8_1) {
       break block6
      }
      if ($4_1 >>> 0 >= ((HEAP32[(0 + 67141312 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
       break block6
      }
      $12_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
      if ($8_1 >>> 0 < $12_1 >>> 0) {
       break block4
      }
      $6_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
      block40 : {
       block39 : {
        $0_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
        if (($0_1 | 0) == ($8_1 | 0)) {
         break block39
        }
        $5_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
        if ($5_1 >>> 0 < $12_1 >>> 0) {
         break block4
        }
        if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
         break block4
        }
        if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
         break block4
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $0_1;
        HEAP32[($0_1 + 8 | 0) >> 2] = $5_1;
        break block40;
       }
       block43 : {
        block42 : {
         block41 : {
          $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
          if (!$5_1) {
           break block41
          }
          $7_1 = $8_1 + 20 | 0;
          break block42;
         }
         $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
         if (!$5_1) {
          break block43
         }
         $7_1 = $8_1 + 16 | 0;
        }
        label4 : while (1) {
         $2_1 = $7_1;
         $0_1 = $5_1;
         $7_1 = $0_1 + 20 | 0;
         $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
         if ($5_1) {
          continue label4
         }
         $7_1 = $0_1 + 16 | 0;
         $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if ($5_1) {
          continue label4
         }
         break label4;
        };
        if ($2_1 >>> 0 < $12_1 >>> 0) {
         break block4
        }
        HEAP32[$2_1 >> 2] = 0;
        break block40;
       }
       $0_1 = 0;
      }
      block44 : {
       if (!$6_1) {
        break block44
       }
       block46 : {
        block45 : {
         $7_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
         $5_1 = ($7_1 << 2 | 0) + 67141608 | 0;
         if (($8_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
          break block45
         }
         HEAP32[$5_1 >> 2] = $0_1;
         if ($0_1) {
          break block46
         }
         $11_1 = $11_1 & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
         HEAP32[(0 + 67141308 | 0) >> 2] = $11_1;
         break block44;
        }
        if ($6_1 >>> 0 < $12_1 >>> 0) {
         break block4
        }
        block48 : {
         block47 : {
          if ((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) != ($8_1 | 0)) {
           break block47
          }
          HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
          break block48;
         }
         HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
        }
        if (!$0_1) {
         break block44
        }
       }
       if ($0_1 >>> 0 < $12_1 >>> 0) {
        break block4
       }
       HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
       block49 : {
        $5_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
        if (!$5_1) {
         break block49
        }
        if ($5_1 >>> 0 < $12_1 >>> 0) {
         break block4
        }
        HEAP32[($0_1 + 16 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
       }
       $5_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
       if (!$5_1) {
        break block44
       }
       if ($5_1 >>> 0 < $12_1 >>> 0) {
        break block4
       }
       HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
      }
      block51 : {
       block50 : {
        if ($4_1 >>> 0 > 15 >>> 0) {
         break block50
        }
        $0_1 = $4_1 + $3_1 | 0;
        HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
        $0_1 = $8_1 + $0_1 | 0;
        HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
        break block51;
       }
       HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
       $7_1 = $8_1 + $3_1 | 0;
       HEAP32[($7_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       HEAP32[($7_1 + $4_1 | 0) >> 2] = $4_1;
       block52 : {
        if ($4_1 >>> 0 > 255 >>> 0) {
         break block52
        }
        $0_1 = ($4_1 & -8 | 0) + 67141344 | 0;
        block54 : {
         block53 : {
          $3_1 = HEAP32[(0 + 67141304 | 0) >> 2] | 0;
          $4_1 = 1 << ($4_1 >>> 3 | 0) | 0;
          if ($3_1 & $4_1 | 0) {
           break block53
          }
          HEAP32[(0 + 67141304 | 0) >> 2] = $3_1 | $4_1 | 0;
          $4_1 = $0_1;
          break block54;
         }
         $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         if ($4_1 >>> 0 < $12_1 >>> 0) {
          break block4
         }
        }
        HEAP32[($0_1 + 8 | 0) >> 2] = $7_1;
        HEAP32[($4_1 + 12 | 0) >> 2] = $7_1;
        HEAP32[($7_1 + 12 | 0) >> 2] = $0_1;
        HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
        break block51;
       }
       $0_1 = 31;
       block55 : {
        if ($4_1 >>> 0 > 16777215 >>> 0) {
         break block55
        }
        $0_1 = Math_clz32($4_1 >>> 8 | 0);
        $0_1 = ((($4_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
       }
       HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$0 = 0;
       HEAP32[($7_1 + 16 | 0) >> 2] = 0;
       HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
       $3_1 = ($0_1 << 2 | 0) + 67141608 | 0;
       block58 : {
        block57 : {
         block56 : {
          $5_1 = 1 << $0_1 | 0;
          if ($11_1 & $5_1 | 0) {
           break block56
          }
          HEAP32[(0 + 67141308 | 0) >> 2] = $11_1 | $5_1 | 0;
          HEAP32[$3_1 >> 2] = $7_1;
          HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
          break block57;
         }
         $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
         $5_1 = HEAP32[$3_1 >> 2] | 0;
         label5 : while (1) {
          $3_1 = $5_1;
          if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
           break block58
          }
          $5_1 = $0_1 >>> 29 | 0;
          $0_1 = $0_1 << 1 | 0;
          $2_1 = $3_1 + ($5_1 & 4 | 0) | 0;
          $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          if ($5_1) {
           continue label5
          }
          break label5;
         };
         $0_1 = $2_1 + 16 | 0;
         if ($0_1 >>> 0 < $12_1 >>> 0) {
          break block4
         }
         HEAP32[$0_1 >> 2] = $7_1;
         HEAP32[($7_1 + 24 | 0) >> 2] = $3_1;
        }
        HEAP32[($7_1 + 12 | 0) >> 2] = $7_1;
        HEAP32[($7_1 + 8 | 0) >> 2] = $7_1;
        break block51;
       }
       if ($3_1 >>> 0 < $12_1 >>> 0) {
        break block4
       }
       $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       if ($0_1 >>> 0 < $12_1 >>> 0) {
        break block4
       }
       HEAP32[($0_1 + 12 | 0) >> 2] = $7_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $7_1;
       HEAP32[($7_1 + 24 | 0) >> 2] = 0;
       HEAP32[($7_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($7_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = $8_1 + 8 | 0;
      break block5;
     }
     block59 : {
      $0_1 = HEAP32[(0 + 67141312 | 0) >> 2] | 0;
      if ($0_1 >>> 0 < $3_1 >>> 0) {
       break block59
      }
      $4_1 = HEAP32[(0 + 67141324 | 0) >> 2] | 0;
      block61 : {
       block60 : {
        $5_1 = $0_1 - $3_1 | 0;
        if ($5_1 >>> 0 < 16 >>> 0) {
         break block60
        }
        $7_1 = $4_1 + $3_1 | 0;
        HEAP32[($7_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
        HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
        HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
        break block61;
       }
       HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
       $0_1 = $4_1 + $0_1 | 0;
       HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
       $7_1 = 0;
       $5_1 = 0;
      }
      HEAP32[(0 + 67141312 | 0) >> 2] = $5_1;
      HEAP32[(0 + 67141324 | 0) >> 2] = $7_1;
      $0_1 = $4_1 + 8 | 0;
      break block5;
     }
     block62 : {
      $7_1 = HEAP32[(0 + 67141316 | 0) >> 2] | 0;
      if ($7_1 >>> 0 <= $3_1 >>> 0) {
       break block62
      }
      $4_1 = $7_1 - $3_1 | 0;
      HEAP32[(0 + 67141316 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 67141328 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 67141328 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break block5;
     }
     block64 : {
      block63 : {
       if (!(HEAP32[(0 + 67141776 | 0) >> 2] | 0)) {
        break block63
       }
       $4_1 = HEAP32[(0 + 67141784 | 0) >> 2] | 0;
       break block64;
      }
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = -1;
      HEAP32[(i64toi32_i32$1 + 67141788 | 0) >> 2] = -1;
      HEAP32[(i64toi32_i32$1 + 67141792 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = 4096;
      HEAP32[(i64toi32_i32$1 + 67141780 | 0) >> 2] = 4096;
      HEAP32[(i64toi32_i32$1 + 67141784 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(0 + 67141776 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
      HEAP32[(0 + 67141796 | 0) >> 2] = 0;
      HEAP32[(0 + 67141748 | 0) >> 2] = 0;
      $4_1 = 4096;
     }
     $0_1 = 0;
     $6_1 = $3_1 + 47 | 0;
     $2_1 = $4_1 + $6_1 | 0;
     $12_1 = 0 - $4_1 | 0;
     $8_1 = $2_1 & $12_1 | 0;
     if ($8_1 >>> 0 <= $3_1 >>> 0) {
      break block5
     }
     $0_1 = 0;
     block65 : {
      $4_1 = HEAP32[(0 + 67141744 | 0) >> 2] | 0;
      if (!$4_1) {
       break block65
      }
      $5_1 = HEAP32[(0 + 67141736 | 0) >> 2] | 0;
      $11_1 = $5_1 + $8_1 | 0;
      if ($11_1 >>> 0 <= $5_1 >>> 0) {
       break block5
      }
      if ($11_1 >>> 0 > $4_1 >>> 0) {
       break block5
      }
     }
     block77 : {
      block74 : {
       block66 : {
        if ((HEAPU8[(0 + 67141748 | 0) >> 0] | 0) & 4 | 0) {
         break block66
        }
        block70 : {
         block75 : {
          block73 : {
           block69 : {
            block67 : {
             $4_1 = HEAP32[(0 + 67141328 | 0) >> 2] | 0;
             if (!$4_1) {
              break block67
             }
             $0_1 = 67141752;
             label6 : while (1) {
              block68 : {
               $5_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1 >>> 0 < $5_1 >>> 0) {
                break block68
               }
               if ($4_1 >>> 0 < ($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0) {
                break block69
               }
              }
              $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
              if ($0_1) {
               continue label6
              }
              break label6;
             };
            }
            $7_1 = $349(0 | 0) | 0;
            if (($7_1 | 0) == (-1 | 0)) {
             break block70
            }
            $2_1 = $8_1;
            block71 : {
             $0_1 = HEAP32[(0 + 67141780 | 0) >> 2] | 0;
             $4_1 = $0_1 + -1 | 0;
             if (!($4_1 & $7_1 | 0)) {
              break block71
             }
             $2_1 = ($8_1 - $7_1 | 0) + (($4_1 + $7_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
            }
            if ($2_1 >>> 0 <= $3_1 >>> 0) {
             break block70
            }
            block72 : {
             $0_1 = HEAP32[(0 + 67141744 | 0) >> 2] | 0;
             if (!$0_1) {
              break block72
             }
             $4_1 = HEAP32[(0 + 67141736 | 0) >> 2] | 0;
             $5_1 = $4_1 + $2_1 | 0;
             if ($5_1 >>> 0 <= $4_1 >>> 0) {
              break block70
             }
             if ($5_1 >>> 0 > $0_1 >>> 0) {
              break block70
             }
            }
            $0_1 = $349($2_1 | 0) | 0;
            if (($0_1 | 0) != ($7_1 | 0)) {
             break block73
            }
            break block74;
           }
           $2_1 = ($2_1 - $7_1 | 0) & $12_1 | 0;
           $7_1 = $349($2_1 | 0) | 0;
           if (($7_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
            break block75
           }
           $0_1 = $7_1;
          }
          if (($0_1 | 0) == (-1 | 0)) {
           break block70
          }
          block76 : {
           if ($2_1 >>> 0 < ($3_1 + 48 | 0) >>> 0) {
            break block76
           }
           $7_1 = $0_1;
           break block74;
          }
          $4_1 = HEAP32[(0 + 67141784 | 0) >> 2] | 0;
          $4_1 = (($6_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
          if (($349($4_1 | 0) | 0 | 0) == (-1 | 0)) {
           break block70
          }
          $2_1 = $4_1 + $2_1 | 0;
          $7_1 = $0_1;
          break block74;
         }
         if (($7_1 | 0) != (-1 | 0)) {
          break block74
         }
        }
        HEAP32[(0 + 67141748 | 0) >> 2] = HEAP32[(0 + 67141748 | 0) >> 2] | 0 | 4 | 0;
       }
       $7_1 = $349($8_1 | 0) | 0;
       $0_1 = $349(0 | 0) | 0;
       if (($7_1 | 0) == (-1 | 0)) {
        break block77
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break block77
       }
       if ($7_1 >>> 0 >= $0_1 >>> 0) {
        break block77
       }
       $2_1 = $0_1 - $7_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break block77
       }
      }
      $0_1 = (HEAP32[(0 + 67141736 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 67141736 | 0) >> 2] = $0_1;
      block78 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 67141740 | 0) >> 2] | 0) >>> 0) {
        break block78
       }
       HEAP32[(0 + 67141740 | 0) >> 2] = $0_1;
      }
      block84 : {
       block81 : {
        block80 : {
         block79 : {
          $4_1 = HEAP32[(0 + 67141328 | 0) >> 2] | 0;
          if (!$4_1) {
           break block79
          }
          $0_1 = 67141752;
          label7 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($7_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break block80
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label7
           }
           break block81;
          };
         }
         block83 : {
          block82 : {
           $0_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
           if (!$0_1) {
            break block82
           }
           if ($7_1 >>> 0 >= $0_1 >>> 0) {
            break block83
           }
          }
          HEAP32[(0 + 67141320 | 0) >> 2] = $7_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 67141756 | 0) >> 2] = $2_1;
         HEAP32[(0 + 67141752 | 0) >> 2] = $7_1;
         HEAP32[(0 + 67141336 | 0) >> 2] = -1;
         HEAP32[(0 + 67141340 | 0) >> 2] = HEAP32[(0 + 67141776 | 0) >> 2] | 0;
         HEAP32[(0 + 67141764 | 0) >> 2] = 0;
         label8 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 67141344 | 0;
          HEAP32[($4_1 + 67141352 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 67141356 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label8
          }
          break label8;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = (-8 - $7_1 | 0) & 7 | 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 67141316 | 0) >> 2] = $5_1;
         $4_1 = $7_1 + $4_1 | 0;
         HEAP32[(0 + 67141328 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 67141332 | 0) >> 2] = HEAP32[(0 + 67141792 | 0) >> 2] | 0;
         break block84;
        }
        if ($4_1 >>> 0 >= $7_1 >>> 0) {
         break block81
        }
        if ($4_1 >>> 0 < $5_1 >>> 0) {
         break block81
        }
        if ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) & 8 | 0) {
         break block81
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = (-8 - $4_1 | 0) & 7 | 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 67141328 | 0) >> 2] = $5_1;
        $7_1 = (HEAP32[(0 + 67141316 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $7_1 - $0_1 | 0;
        HEAP32[(0 + 67141316 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $7_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 67141332 | 0) >> 2] = HEAP32[(0 + 67141792 | 0) >> 2] | 0;
        break block84;
       }
       block85 : {
        if ($7_1 >>> 0 >= (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
         break block85
        }
        HEAP32[(0 + 67141320 | 0) >> 2] = $7_1;
       }
       $5_1 = $7_1 + $2_1 | 0;
       $0_1 = 67141752;
       block87 : {
        block86 : {
         label9 : while (1) {
          $8_1 = HEAP32[$0_1 >> 2] | 0;
          if (($8_1 | 0) == ($5_1 | 0)) {
           break block86
          }
          $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if ($0_1) {
           continue label9
          }
          break block87;
         };
        }
        if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
         break block88
        }
       }
       $0_1 = 67141752;
       block90 : {
        label10 : while (1) {
         block89 : {
          $5_1 = HEAP32[$0_1 >> 2] | 0;
          if ($4_1 >>> 0 < $5_1 >>> 0) {
           break block89
          }
          $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
          if ($4_1 >>> 0 < $5_1 >>> 0) {
           break block90
          }
         }
         $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
         continue label10;
        };
       }
       $0_1 = $2_1 + -40 | 0;
       $8_1 = (-8 - $7_1 | 0) & 7 | 0;
       $12_1 = $0_1 - $8_1 | 0;
       HEAP32[(0 + 67141316 | 0) >> 2] = $12_1;
       $8_1 = $7_1 + $8_1 | 0;
       HEAP32[(0 + 67141328 | 0) >> 2] = $8_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = $12_1 | 1 | 0;
       HEAP32[(($7_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
       HEAP32[(0 + 67141332 | 0) >> 2] = HEAP32[(0 + 67141792 | 0) >> 2] | 0;
       $0_1 = ($5_1 + ((39 - $5_1 | 0) & 7 | 0) | 0) + -47 | 0;
       $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = 27;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67141760 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67141764 | 0) >> 2] | 0;
       $1154_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1154_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67141752 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67141756 | 0) >> 2] | 0;
       $1156_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $1156_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(0 + 67141760 | 0) >> 2] = $8_1 + 8 | 0;
       HEAP32[(0 + 67141756 | 0) >> 2] = $2_1;
       HEAP32[(0 + 67141752 | 0) >> 2] = $7_1;
       HEAP32[(0 + 67141764 | 0) >> 2] = 0;
       $0_1 = $8_1 + 24 | 0;
       label11 : while (1) {
        HEAP32[($0_1 + 4 | 0) >> 2] = 7;
        $7_1 = $0_1 + 8 | 0;
        $0_1 = $0_1 + 4 | 0;
        if ($7_1 >>> 0 < $5_1 >>> 0) {
         continue label11
        }
        break label11;
       };
       if (($8_1 | 0) == ($4_1 | 0)) {
        break block84
       }
       HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       $7_1 = $8_1 - $4_1 | 0;
       HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 | 1 | 0;
       HEAP32[$8_1 >> 2] = $7_1;
       block94 : {
        block91 : {
         if ($7_1 >>> 0 > 255 >>> 0) {
          break block91
         }
         $0_1 = ($7_1 & -8 | 0) + 67141344 | 0;
         block93 : {
          block92 : {
           $5_1 = HEAP32[(0 + 67141304 | 0) >> 2] | 0;
           $7_1 = 1 << ($7_1 >>> 3 | 0) | 0;
           if ($5_1 & $7_1 | 0) {
            break block92
           }
           HEAP32[(0 + 67141304 | 0) >> 2] = $5_1 | $7_1 | 0;
           $5_1 = $0_1;
           break block93;
          }
          $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
          if ($5_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
           break block4
          }
         }
         HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
         HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
         $7_1 = 12;
         $8_1 = 8;
         break block94;
        }
        $0_1 = 31;
        block95 : {
         if ($7_1 >>> 0 > 16777215 >>> 0) {
          break block95
         }
         $0_1 = Math_clz32($7_1 >>> 8 | 0);
         $0_1 = ((($7_1 >>> (38 - $0_1 | 0) | 0) & 1 | 0) - ($0_1 << 1 | 0) | 0) + 62 | 0;
        }
        HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
        i64toi32_i32$1 = $4_1;
        i64toi32_i32$0 = 0;
        HEAP32[($4_1 + 16 | 0) >> 2] = 0;
        HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
        $5_1 = ($0_1 << 2 | 0) + 67141608 | 0;
        block98 : {
         block97 : {
          block96 : {
           $8_1 = HEAP32[(0 + 67141308 | 0) >> 2] | 0;
           $2_1 = 1 << $0_1 | 0;
           if ($8_1 & $2_1 | 0) {
            break block96
           }
           HEAP32[(0 + 67141308 | 0) >> 2] = $8_1 | $2_1 | 0;
           HEAP32[$5_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
           break block97;
          }
          $0_1 = $7_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
          $8_1 = HEAP32[$5_1 >> 2] | 0;
          label12 : while (1) {
           $5_1 = $8_1;
           if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($7_1 | 0)) {
            break block98
           }
           $8_1 = $0_1 >>> 29 | 0;
           $0_1 = $0_1 << 1 | 0;
           $2_1 = $5_1 + ($8_1 & 4 | 0) | 0;
           $8_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
           if ($8_1) {
            continue label12
           }
           break label12;
          };
          $0_1 = $2_1 + 16 | 0;
          if ($0_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
           break block4
          }
          HEAP32[$0_1 >> 2] = $4_1;
          HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
         }
         $7_1 = 8;
         $8_1 = 12;
         $5_1 = $4_1;
         $0_1 = $5_1;
         break block94;
        }
        $7_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
        if ($5_1 >>> 0 < $7_1 >>> 0) {
         break block4
        }
        $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
        if ($0_1 >>> 0 < $7_1 >>> 0) {
         break block4
        }
        HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
        HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
        HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
        $0_1 = 0;
        $7_1 = 24;
        $8_1 = 12;
       }
       HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + $7_1 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 67141316 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break block77
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 67141316 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 67141328 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 67141328 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break block5;
     }
     HEAP32[($231() | 0) >> 2] = 48;
     $0_1 = 0;
     break block5;
    }
    $339();
    wasm2js_trap();
   }
   HEAP32[$0_1 >> 2] = $7_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
   $0_1 = $341($7_1 | 0, $8_1 | 0, $3_1 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $341($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0, $7_1 = 0, $3_1 = 0, $353_1 = 0;
  $3_1 = $0_1 + ((-8 - $0_1 | 0) & 7 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 | 3 | 0;
  $4_1 = $1_1 + ((-8 - $1_1 | 0) & 7 | 0) | 0;
  $5_1 = $3_1 + $2_1 | 0;
  $0_1 = $4_1 - $5_1 | 0;
  block6 : {
   block1 : {
    block : {
     if (($4_1 | 0) != (HEAP32[(0 + 67141328 | 0) >> 2] | 0 | 0)) {
      break block
     }
     HEAP32[(0 + 67141328 | 0) >> 2] = $5_1;
     $2_1 = (HEAP32[(0 + 67141316 | 0) >> 2] | 0) + $0_1 | 0;
     HEAP32[(0 + 67141316 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
     break block1;
    }
    block2 : {
     if (($4_1 | 0) != (HEAP32[(0 + 67141324 | 0) >> 2] | 0 | 0)) {
      break block2
     }
     HEAP32[(0 + 67141324 | 0) >> 2] = $5_1;
     $2_1 = (HEAP32[(0 + 67141312 | 0) >> 2] | 0) + $0_1 | 0;
     HEAP32[(0 + 67141312 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
     HEAP32[($5_1 + $2_1 | 0) >> 2] = $2_1;
     break block1;
    }
    block3 : {
     $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     if (($6_1 & 3 | 0 | 0) != (1 | 0)) {
      break block3
     }
     $2_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     block8 : {
      block4 : {
       if ($6_1 >>> 0 > 255 >>> 0) {
        break block4
       }
       block5 : {
        $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        $7_1 = $6_1 >>> 3 | 0;
        $8_1 = ($7_1 << 3 | 0) + 67141344 | 0;
        if (($1_1 | 0) == ($8_1 | 0)) {
         break block5
        }
        if ($1_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break block6
        }
       }
       block7 : {
        if (($2_1 | 0) != ($1_1 | 0)) {
         break block7
        }
        HEAP32[(0 + 67141304 | 0) >> 2] = (HEAP32[(0 + 67141304 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
        break block8;
       }
       block9 : {
        if (($2_1 | 0) == ($8_1 | 0)) {
         break block9
        }
        if ($2_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break block6
        }
       }
       HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
       break block8;
      }
      $9_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
      block11 : {
       block10 : {
        if (($2_1 | 0) == ($4_1 | 0)) {
         break block10
        }
        $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
        if ($1_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        if ((HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break block6
        }
        if ((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
         break block6
        }
        HEAP32[($1_1 + 12 | 0) >> 2] = $2_1;
        HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
        break block11;
       }
       block14 : {
        block13 : {
         block12 : {
          $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
          if (!$1_1) {
           break block12
          }
          $8_1 = $4_1 + 20 | 0;
          break block13;
         }
         $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
         if (!$1_1) {
          break block14
         }
         $8_1 = $4_1 + 16 | 0;
        }
        label : while (1) {
         $7_1 = $8_1;
         $2_1 = $1_1;
         $8_1 = $2_1 + 20 | 0;
         $1_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
         if ($1_1) {
          continue label
         }
         $8_1 = $2_1 + 16 | 0;
         $1_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
         if ($1_1) {
          continue label
         }
         break label;
        };
        if ($7_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
         break block6
        }
        HEAP32[$7_1 >> 2] = 0;
        break block11;
       }
       $2_1 = 0;
      }
      if (!$9_1) {
       break block8
      }
      block16 : {
       block15 : {
        $8_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
        $1_1 = ($8_1 << 2 | 0) + 67141608 | 0;
        if (($4_1 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
         break block15
        }
        HEAP32[$1_1 >> 2] = $2_1;
        if ($2_1) {
         break block16
        }
        HEAP32[(0 + 67141308 | 0) >> 2] = (HEAP32[(0 + 67141308 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
        break block8;
       }
       if ($9_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
        break block6
       }
       block18 : {
        block17 : {
         if ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block17
         }
         HEAP32[($9_1 + 16 | 0) >> 2] = $2_1;
         break block18;
        }
        HEAP32[($9_1 + 20 | 0) >> 2] = $2_1;
       }
       if (!$2_1) {
        break block8
       }
      }
      $8_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
      if ($2_1 >>> 0 < $8_1 >>> 0) {
       break block6
      }
      HEAP32[($2_1 + 24 | 0) >> 2] = $9_1;
      block19 : {
       $1_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
       if (!$1_1) {
        break block19
       }
       if ($1_1 >>> 0 < $8_1 >>> 0) {
        break block6
       }
       HEAP32[($2_1 + 16 | 0) >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
      }
      $1_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      if (!$1_1) {
       break block8
      }
      if ($1_1 >>> 0 < $8_1 >>> 0) {
       break block6
      }
      HEAP32[($2_1 + 20 | 0) >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $2_1;
     }
     $2_1 = $6_1 & -8 | 0;
     $0_1 = $2_1 + $0_1 | 0;
     $4_1 = $4_1 + $2_1 | 0;
     $6_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = $6_1 & -2 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($5_1 + $0_1 | 0) >> 2] = $0_1;
    block20 : {
     if ($0_1 >>> 0 > 255 >>> 0) {
      break block20
     }
     $2_1 = ($0_1 & -8 | 0) + 67141344 | 0;
     block22 : {
      block21 : {
       $1_1 = HEAP32[(0 + 67141304 | 0) >> 2] | 0;
       $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
       if ($1_1 & $0_1 | 0) {
        break block21
       }
       HEAP32[(0 + 67141304 | 0) >> 2] = $1_1 | $0_1 | 0;
       $0_1 = $2_1;
       break block22;
      }
      $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
      if ($0_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
       break block6
      }
     }
     HEAP32[($2_1 + 8 | 0) >> 2] = $5_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
     break block1;
    }
    $2_1 = 31;
    block23 : {
     if ($0_1 >>> 0 > 16777215 >>> 0) {
      break block23
     }
     $2_1 = Math_clz32($0_1 >>> 8 | 0);
     $2_1 = ((($0_1 >>> (38 - $2_1 | 0) | 0) & 1 | 0) - ($2_1 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = $2_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = 0;
    $1_1 = ($2_1 << 2 | 0) + 67141608 | 0;
    block26 : {
     block25 : {
      block24 : {
       $8_1 = HEAP32[(0 + 67141308 | 0) >> 2] | 0;
       $4_1 = 1 << $2_1 | 0;
       if ($8_1 & $4_1 | 0) {
        break block24
       }
       HEAP32[(0 + 67141308 | 0) >> 2] = $8_1 | $4_1 | 0;
       HEAP32[$1_1 >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
       break block25;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $8_1 = HEAP32[$1_1 >> 2] | 0;
      label1 : while (1) {
       $1_1 = $8_1;
       if (((HEAP32[($1_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break block26
       }
       $8_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $4_1 = $1_1 + ($8_1 & 4 | 0) | 0;
       $8_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
       if ($8_1) {
        continue label1
       }
       break label1;
      };
      $2_1 = $4_1 + 16 | 0;
      if ($2_1 >>> 0 < (HEAP32[(0 + 67141320 | 0) >> 2] | 0) >>> 0) {
       break block6
      }
      HEAP32[$2_1 >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $5_1;
     break block1;
    }
    $0_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $0_1 >>> 0) {
     break block6
    }
    $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    if ($2_1 >>> 0 < $0_1 >>> 0) {
     break block6
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $5_1;
    HEAP32[($5_1 + 24 | 0) >> 2] = 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
   }
   return $3_1 + 8 | 0 | 0;
  }
  $339();
  wasm2js_trap();
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0, $1_1 = 0, $6_1 = 0, $4_1 = 0, $2_1 = 0, $7_1 = 0, $8_1 = 0, $10_1 = 0, $9_1 = 0;
  block1 : {
   block : {
    if (!$0_1) {
     break block
    }
    $1_1 = $0_1 + -8 | 0;
    $2_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $2_1 >>> 0) {
     break block1
    }
    $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
    if (($3_1 & 3 | 0 | 0) == (1 | 0)) {
     break block1
    }
    $0_1 = $3_1 & -8 | 0;
    $4_1 = $1_1 + $0_1 | 0;
    block2 : {
     if ($3_1 & 1 | 0) {
      break block2
     }
     if (!($3_1 & 2 | 0)) {
      break block
     }
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 - $5_1 | 0;
     if ($1_1 >>> 0 < $2_1 >>> 0) {
      break block1
     }
     $0_1 = $5_1 + $0_1 | 0;
     block3 : {
      if (($1_1 | 0) == (HEAP32[(0 + 67141324 | 0) >> 2] | 0 | 0)) {
       break block3
      }
      $3_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      block4 : {
       if ($5_1 >>> 0 > 255 >>> 0) {
        break block4
       }
       block5 : {
        $6_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        $7_1 = $5_1 >>> 3 | 0;
        $5_1 = ($7_1 << 3 | 0) + 67141344 | 0;
        if (($6_1 | 0) == ($5_1 | 0)) {
         break block5
        }
        if ($6_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        if ((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
         break block1
        }
       }
       block6 : {
        if (($3_1 | 0) != ($6_1 | 0)) {
         break block6
        }
        HEAP32[(0 + 67141304 | 0) >> 2] = (HEAP32[(0 + 67141304 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
        break block2;
       }
       block7 : {
        if (($3_1 | 0) == ($5_1 | 0)) {
         break block7
        }
        if ($3_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
         break block1
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
       break block2;
      }
      $8_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      block9 : {
       block8 : {
        if (($3_1 | 0) == ($1_1 | 0)) {
         break block8
        }
        $5_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
        if ($5_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
         break block1
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
         break block1
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        break block9;
       }
       block12 : {
        block11 : {
         block10 : {
          $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
          if (!$5_1) {
           break block10
          }
          $6_1 = $1_1 + 20 | 0;
          break block11;
         }
         $5_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
         if (!$5_1) {
          break block12
         }
         $6_1 = $1_1 + 16 | 0;
        }
        label : while (1) {
         $7_1 = $6_1;
         $3_1 = $5_1;
         $6_1 = $3_1 + 20 | 0;
         $5_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if ($5_1) {
          continue label
         }
         $6_1 = $3_1 + 16 | 0;
         $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($5_1) {
          continue label
         }
         break label;
        };
        if ($7_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        HEAP32[$7_1 >> 2] = 0;
        break block9;
       }
       $3_1 = 0;
      }
      if (!$8_1) {
       break block2
      }
      block14 : {
       block13 : {
        $6_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
        $5_1 = ($6_1 << 2 | 0) + 67141608 | 0;
        if (($1_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
         break block13
        }
        HEAP32[$5_1 >> 2] = $3_1;
        if ($3_1) {
         break block14
        }
        HEAP32[(0 + 67141308 | 0) >> 2] = (HEAP32[(0 + 67141308 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
        break block2;
       }
       if ($8_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       block16 : {
        block15 : {
         if ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break block15
         }
         HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
         break block16;
        }
        HEAP32[($8_1 + 20 | 0) >> 2] = $3_1;
       }
       if (!$3_1) {
        break block2
       }
      }
      if ($3_1 >>> 0 < $2_1 >>> 0) {
       break block1
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = $8_1;
      block17 : {
       $5_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
       if (!$5_1) {
        break block17
       }
       if ($5_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      }
      $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (!$5_1) {
       break block2
      }
      if ($5_1 >>> 0 < $2_1 >>> 0) {
       break block1
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      break block2;
     }
     $3_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break block2
     }
     HEAP32[(0 + 67141312 | 0) >> 2] = $0_1;
     HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[$4_1 >> 2] = $0_1;
     return;
    }
    if ($1_1 >>> 0 >= $4_1 >>> 0) {
     break block1
    }
    $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    if (!($7_1 & 1 | 0)) {
     break block1
    }
    block36 : {
     block18 : {
      if ($7_1 & 2 | 0) {
       break block18
      }
      block19 : {
       if (($4_1 | 0) != (HEAP32[(0 + 67141328 | 0) >> 2] | 0 | 0)) {
        break block19
       }
       HEAP32[(0 + 67141328 | 0) >> 2] = $1_1;
       $0_1 = (HEAP32[(0 + 67141316 | 0) >> 2] | 0) + $0_1 | 0;
       HEAP32[(0 + 67141316 | 0) >> 2] = $0_1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
       if (($1_1 | 0) != (HEAP32[(0 + 67141324 | 0) >> 2] | 0 | 0)) {
        break block
       }
       HEAP32[(0 + 67141312 | 0) >> 2] = 0;
       HEAP32[(0 + 67141324 | 0) >> 2] = 0;
       return;
      }
      block20 : {
       $9_1 = HEAP32[(0 + 67141324 | 0) >> 2] | 0;
       if (($4_1 | 0) != ($9_1 | 0)) {
        break block20
       }
       HEAP32[(0 + 67141324 | 0) >> 2] = $1_1;
       $0_1 = (HEAP32[(0 + 67141312 | 0) >> 2] | 0) + $0_1 | 0;
       HEAP32[(0 + 67141312 | 0) >> 2] = $0_1;
       HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
       HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
       return;
      }
      $3_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      block24 : {
       block21 : {
        if ($7_1 >>> 0 > 255 >>> 0) {
         break block21
        }
        block22 : {
         $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         $8_1 = $7_1 >>> 3 | 0;
         $6_1 = ($8_1 << 3 | 0) + 67141344 | 0;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break block22
         }
         if ($5_1 >>> 0 < $2_1 >>> 0) {
          break block1
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block1
         }
        }
        block23 : {
         if (($3_1 | 0) != ($5_1 | 0)) {
          break block23
         }
         HEAP32[(0 + 67141304 | 0) >> 2] = (HEAP32[(0 + 67141304 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
         break block24;
        }
        block25 : {
         if (($3_1 | 0) == ($6_1 | 0)) {
          break block25
         }
         if ($3_1 >>> 0 < $2_1 >>> 0) {
          break block1
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block1
         }
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        break block24;
       }
       $10_1 = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
       block27 : {
        block26 : {
         if (($3_1 | 0) == ($4_1 | 0)) {
          break block26
         }
         $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         if ($5_1 >>> 0 < $2_1 >>> 0) {
          break block1
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block1
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
          break block1
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
         break block27;
        }
        block30 : {
         block29 : {
          block28 : {
           $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
           if (!$5_1) {
            break block28
           }
           $6_1 = $4_1 + 20 | 0;
           break block29;
          }
          $5_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
          if (!$5_1) {
           break block30
          }
          $6_1 = $4_1 + 16 | 0;
         }
         label1 : while (1) {
          $8_1 = $6_1;
          $3_1 = $5_1;
          $6_1 = $3_1 + 20 | 0;
          $5_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          $6_1 = $3_1 + 16 | 0;
          $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          break label1;
         };
         if ($8_1 >>> 0 < $2_1 >>> 0) {
          break block1
         }
         HEAP32[$8_1 >> 2] = 0;
         break block27;
        }
        $3_1 = 0;
       }
       if (!$10_1) {
        break block24
       }
       block32 : {
        block31 : {
         $6_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
         $5_1 = ($6_1 << 2 | 0) + 67141608 | 0;
         if (($4_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
          break block31
         }
         HEAP32[$5_1 >> 2] = $3_1;
         if ($3_1) {
          break block32
         }
         HEAP32[(0 + 67141308 | 0) >> 2] = (HEAP32[(0 + 67141308 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
         break block24;
        }
        if ($10_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        block34 : {
         block33 : {
          if ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) != ($4_1 | 0)) {
           break block33
          }
          HEAP32[($10_1 + 16 | 0) >> 2] = $3_1;
          break block34;
         }
         HEAP32[($10_1 + 20 | 0) >> 2] = $3_1;
        }
        if (!$3_1) {
         break block24
        }
       }
       if ($3_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       HEAP32[($3_1 + 24 | 0) >> 2] = $10_1;
       block35 : {
        $5_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        if (!$5_1) {
         break block35
        }
        if ($5_1 >>> 0 < $2_1 >>> 0) {
         break block1
        }
        HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
       }
       $5_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
       if (!$5_1) {
        break block24
       }
       if ($5_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      }
      $0_1 = ($7_1 & -8 | 0) + $0_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      if (($1_1 | 0) != ($9_1 | 0)) {
       break block36
      }
      HEAP32[(0 + 67141312 | 0) >> 2] = $0_1;
      return;
     }
     HEAP32[($4_1 + 4 | 0) >> 2] = $7_1 & -2 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    }
    block37 : {
     if ($0_1 >>> 0 > 255 >>> 0) {
      break block37
     }
     $3_1 = ($0_1 & -8 | 0) + 67141344 | 0;
     block39 : {
      block38 : {
       $5_1 = HEAP32[(0 + 67141304 | 0) >> 2] | 0;
       $0_1 = 1 << ($0_1 >>> 3 | 0) | 0;
       if ($5_1 & $0_1 | 0) {
        break block38
       }
       HEAP32[(0 + 67141304 | 0) >> 2] = $5_1 | $0_1 | 0;
       $0_1 = $3_1;
       break block39;
      }
      $0_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      if ($0_1 >>> 0 < $2_1 >>> 0) {
       break block1
      }
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
     return;
    }
    $3_1 = 31;
    block40 : {
     if ($0_1 >>> 0 > 16777215 >>> 0) {
      break block40
     }
     $3_1 = Math_clz32($0_1 >>> 8 | 0);
     $3_1 = ((($0_1 >>> (38 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = 0;
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
    $6_1 = ($3_1 << 2 | 0) + 67141608 | 0;
    block44 : {
     block43 : {
      block42 : {
       block41 : {
        $5_1 = HEAP32[(0 + 67141308 | 0) >> 2] | 0;
        $4_1 = 1 << $3_1 | 0;
        if ($5_1 & $4_1 | 0) {
         break block41
        }
        HEAP32[(0 + 67141308 | 0) >> 2] = $5_1 | $4_1 | 0;
        HEAP32[$6_1 >> 2] = $1_1;
        $0_1 = 8;
        $3_1 = 24;
        break block42;
       }
       $3_1 = $0_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
       $6_1 = HEAP32[$6_1 >> 2] | 0;
       label2 : while (1) {
        $5_1 = $6_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
         break block43
        }
        $6_1 = $3_1 >>> 29 | 0;
        $3_1 = $3_1 << 1 | 0;
        $4_1 = $5_1 + ($6_1 & 4 | 0) | 0;
        $6_1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
        if ($6_1) {
         continue label2
        }
        break label2;
       };
       $0_1 = $4_1 + 16 | 0;
       if ($0_1 >>> 0 < $2_1 >>> 0) {
        break block1
       }
       HEAP32[$0_1 >> 2] = $1_1;
       $0_1 = 8;
       $3_1 = 24;
       $6_1 = $5_1;
      }
      $5_1 = $1_1;
      $4_1 = $5_1;
      break block44;
     }
     if ($5_1 >>> 0 < $2_1 >>> 0) {
      break block1
     }
     $6_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break block1
     }
     HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $1_1;
     $4_1 = 0;
     $0_1 = 24;
     $3_1 = 8;
    }
    HEAP32[($1_1 + $3_1 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $4_1;
    $1_1 = (HEAP32[(0 + 67141336 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[(0 + 67141336 | 0) >> 2] = $1_1 ? $1_1 : -1;
   }
   return;
  }
  $339();
  wasm2js_trap();
 }
 
 function $343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  block : {
   if ($0_1) {
    break block
   }
   return $340($1_1 | 0) | 0 | 0;
  }
  block1 : {
   if ($1_1 >>> 0 < -64 >>> 0) {
    break block1
   }
   HEAP32[($231() | 0) >> 2] = 48;
   return 0 | 0;
  }
  block2 : {
   $2_1 = $344($0_1 + -8 | 0 | 0, ($1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0) | 0) | 0;
   if (!$2_1) {
    break block2
   }
   return $2_1 + 8 | 0 | 0;
  }
  block3 : {
   $2_1 = $340($1_1 | 0) | 0;
   if ($2_1) {
    break block3
   }
   return 0 | 0;
  }
  $3_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
  $3_1 = ($3_1 & 3 | 0 ? -4 : -8) + ($3_1 & -8 | 0) | 0;
  $245($2_1 | 0, $0_1 | 0, ($3_1 >>> 0 < $1_1 >>> 0 ? $3_1 : $1_1) | 0) | 0;
  $342($0_1 | 0);
  return $2_1 | 0;
 }
 
 function $344($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0, $3_1 = 0, $2_1 = 0, $10_1 = 0, $8_1 = 0, $9_1 = 0;
  block2 : {
   block : {
    $2_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
    if ($0_1 >>> 0 < $2_1 >>> 0) {
     break block
    }
    $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    $4_1 = $3_1 & 3 | 0;
    if (($4_1 | 0) == (1 | 0)) {
     break block
    }
    $5_1 = $3_1 & -8 | 0;
    if (!$5_1) {
     break block
    }
    $6_1 = $0_1 + $5_1 | 0;
    $7_1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
    if (!($7_1 & 1 | 0)) {
     break block
    }
    block1 : {
     if ($4_1) {
      break block1
     }
     $4_1 = 0;
     if ($1_1 >>> 0 < 256 >>> 0) {
      break block2
     }
     block3 : {
      if ($5_1 >>> 0 < ($1_1 + 4 | 0) >>> 0) {
       break block3
      }
      $4_1 = $0_1;
      if (($5_1 - $1_1 | 0) >>> 0 <= ((HEAP32[(0 + 67141784 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
       break block2
      }
     }
     $4_1 = 0;
     break block2;
    }
    block4 : {
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break block4
     }
     block5 : {
      $5_1 = $5_1 - $1_1 | 0;
      if ($5_1 >>> 0 < 16 >>> 0) {
       break block5
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($3_1 & 1 | 0) | 0 | 2 | 0;
      $1_1 = $0_1 + $1_1 | 0;
      HEAP32[($1_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $347($1_1 | 0, $5_1 | 0);
     }
     return $0_1 | 0;
    }
    $4_1 = 0;
    block6 : {
     if (($6_1 | 0) != (HEAP32[(0 + 67141328 | 0) >> 2] | 0 | 0)) {
      break block6
     }
     $5_1 = (HEAP32[(0 + 67141316 | 0) >> 2] | 0) + $5_1 | 0;
     if ($5_1 >>> 0 <= $1_1 >>> 0) {
      break block2
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($3_1 & 1 | 0) | 0 | 2 | 0;
     $3_1 = $0_1 + $1_1 | 0;
     $5_1 = $5_1 - $1_1 | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
     HEAP32[(0 + 67141316 | 0) >> 2] = $5_1;
     HEAP32[(0 + 67141328 | 0) >> 2] = $3_1;
     return $0_1 | 0;
    }
    block7 : {
     if (($6_1 | 0) != (HEAP32[(0 + 67141324 | 0) >> 2] | 0 | 0)) {
      break block7
     }
     $4_1 = 0;
     $5_1 = (HEAP32[(0 + 67141312 | 0) >> 2] | 0) + $5_1 | 0;
     if ($5_1 >>> 0 < $1_1 >>> 0) {
      break block2
     }
     block9 : {
      block8 : {
       $4_1 = $5_1 - $1_1 | 0;
       if ($4_1 >>> 0 < 16 >>> 0) {
        break block8
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($3_1 & 1 | 0) | 0 | 2 | 0;
       $1_1 = $0_1 + $1_1 | 0;
       HEAP32[($1_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
       $5_1 = $0_1 + $5_1 | 0;
       HEAP32[$5_1 >> 2] = $4_1;
       HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -2 | 0;
       break block9;
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 & 1 | 0 | $5_1 | 0 | 2 | 0;
      $5_1 = $0_1 + $5_1 | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $4_1 = 0;
      $1_1 = 0;
     }
     HEAP32[(0 + 67141324 | 0) >> 2] = $1_1;
     HEAP32[(0 + 67141312 | 0) >> 2] = $4_1;
     return $0_1 | 0;
    }
    $4_1 = 0;
    if ($7_1 & 2 | 0) {
     break block2
    }
    $8_1 = ($7_1 & -8 | 0) + $5_1 | 0;
    if ($8_1 >>> 0 < $1_1 >>> 0) {
     break block2
    }
    $5_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
    block13 : {
     block10 : {
      if ($7_1 >>> 0 > 255 >>> 0) {
       break block10
      }
      block11 : {
       $4_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       $9_1 = $7_1 >>> 3 | 0;
       $7_1 = ($9_1 << 3 | 0) + 67141344 | 0;
       if (($4_1 | 0) == ($7_1 | 0)) {
        break block11
       }
       if ($4_1 >>> 0 < $2_1 >>> 0) {
        break block
       }
       if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
        break block
       }
      }
      block12 : {
       if (($5_1 | 0) != ($4_1 | 0)) {
        break block12
       }
       HEAP32[(0 + 67141304 | 0) >> 2] = (HEAP32[(0 + 67141304 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $9_1 | 0) | 0) | 0;
       break block13;
      }
      block14 : {
       if (($5_1 | 0) == ($7_1 | 0)) {
        break block14
       }
       if ($5_1 >>> 0 < $2_1 >>> 0) {
        break block
       }
       if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
        break block
       }
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
      break block13;
     }
     $10_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     block16 : {
      block15 : {
       if (($5_1 | 0) == ($6_1 | 0)) {
        break block15
       }
       $4_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
       if ($4_1 >>> 0 < $2_1 >>> 0) {
        break block
       }
       if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
        break block
       }
       if ((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
        break block
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       break block16;
      }
      block19 : {
       block18 : {
        block17 : {
         $4_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
         if (!$4_1) {
          break block17
         }
         $7_1 = $6_1 + 20 | 0;
         break block18;
        }
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if (!$4_1) {
         break block19
        }
        $7_1 = $6_1 + 16 | 0;
       }
       label : while (1) {
        $9_1 = $7_1;
        $5_1 = $4_1;
        $7_1 = $5_1 + 20 | 0;
        $4_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
        if ($4_1) {
         continue label
        }
        $7_1 = $5_1 + 16 | 0;
        $4_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label
        }
        break label;
       };
       if ($9_1 >>> 0 < $2_1 >>> 0) {
        break block
       }
       HEAP32[$9_1 >> 2] = 0;
       break block16;
      }
      $5_1 = 0;
     }
     if (!$10_1) {
      break block13
     }
     block21 : {
      block20 : {
       $7_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
       $4_1 = ($7_1 << 2 | 0) + 67141608 | 0;
       if (($6_1 | 0) != (HEAP32[$4_1 >> 2] | 0 | 0)) {
        break block20
       }
       HEAP32[$4_1 >> 2] = $5_1;
       if ($5_1) {
        break block21
       }
       HEAP32[(0 + 67141308 | 0) >> 2] = (HEAP32[(0 + 67141308 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
       break block13;
      }
      if ($10_1 >>> 0 < $2_1 >>> 0) {
       break block
      }
      block23 : {
       block22 : {
        if ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) != ($6_1 | 0)) {
         break block22
        }
        HEAP32[($10_1 + 16 | 0) >> 2] = $5_1;
        break block23;
       }
       HEAP32[($10_1 + 20 | 0) >> 2] = $5_1;
      }
      if (!$5_1) {
       break block13
      }
     }
     if ($5_1 >>> 0 < $2_1 >>> 0) {
      break block
     }
     HEAP32[($5_1 + 24 | 0) >> 2] = $10_1;
     block24 : {
      $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
      if (!$4_1) {
       break block24
      }
      if ($4_1 >>> 0 < $2_1 >>> 0) {
       break block
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
      HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
     }
     $4_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     if (!$4_1) {
      break block13
     }
     if ($4_1 >>> 0 < $2_1 >>> 0) {
      break block
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = $4_1;
     HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
    }
    block25 : {
     $5_1 = $8_1 - $1_1 | 0;
     if ($5_1 >>> 0 > 15 >>> 0) {
      break block25
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 & 1 | 0 | $8_1 | 0 | 2 | 0;
     $5_1 = $0_1 + $8_1 | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     return $0_1 | 0;
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($3_1 & 1 | 0) | 0 | 2 | 0;
    $1_1 = $0_1 + $1_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
    $3_1 = $0_1 + $8_1 | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
    $347($1_1 | 0, $5_1 | 0);
    return $0_1 | 0;
   }
   $339();
   wasm2js_trap();
  }
  return $4_1 | 0;
 }
 
 function $345($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $6_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = 16;
  block1 : {
   block : {
    $3_1 = $0_1 >>> 0 > 16 >>> 0 ? $0_1 : 16;
    if ($3_1 & ($3_1 + -1 | 0) | 0) {
     break block
    }
    $0_1 = $3_1;
    break block1;
   }
   label : while (1) {
    $0_1 = $2_1;
    $2_1 = $0_1 << 1 | 0;
    if ($0_1 >>> 0 < $3_1 >>> 0) {
     continue label
    }
    break label;
   };
  }
  block2 : {
   if ($1_1 >>> 0 < (-64 - $0_1 | 0) >>> 0) {
    break block2
   }
   HEAP32[($231() | 0) >> 2] = 48;
   return 0 | 0;
  }
  block3 : {
   $1_1 = $1_1 >>> 0 < 11 >>> 0 ? 16 : ($1_1 + 11 | 0) & -8 | 0;
   $2_1 = $340(($1_1 + $0_1 | 0) + 12 | 0 | 0) | 0;
   if ($2_1) {
    break block3
   }
   return 0 | 0;
  }
  $3_1 = $2_1 + -8 | 0;
  block5 : {
   block4 : {
    if (($0_1 + -1 | 0) & $2_1 | 0) {
     break block4
    }
    $0_1 = $3_1;
    break block5;
   }
   $4_1 = $2_1 + -4 | 0;
   $5_1 = HEAP32[$4_1 >> 2] | 0;
   $2_1 = ((($2_1 + $0_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0) + -8 | 0;
   $0_1 = $2_1 + (($2_1 - $3_1 | 0) >>> 0 > 15 >>> 0 ? 0 : $0_1) | 0;
   $2_1 = $0_1 - $3_1 | 0;
   $6_1 = ($5_1 & -8 | 0) - $2_1 | 0;
   block6 : {
    if ($5_1 & 3 | 0) {
     break block6
    }
    $3_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = $6_1;
    HEAP32[$0_1 >> 2] = $3_1 + $2_1 | 0;
    break block5;
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $6_1 | ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $0_1 + $6_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   HEAP32[$4_1 >> 2] = $2_1 | ((HEAP32[$4_1 >> 2] | 0) & 1 | 0) | 0 | 2 | 0;
   $6_1 = $3_1 + $2_1 | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $347($3_1 | 0, $2_1 | 0);
  }
  block7 : {
   $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 3 | 0)) {
    break block7
   }
   $3_1 = $2_1 & -8 | 0;
   if ($3_1 >>> 0 <= ($1_1 + 16 | 0) >>> 0) {
    break block7
   }
   HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | ($2_1 & 1 | 0) | 0 | 2 | 0;
   $2_1 = $0_1 + $1_1 | 0;
   $1_1 = $3_1 - $1_1 | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $1_1 | 3 | 0;
   $3_1 = $0_1 + $3_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 1 | 0;
   $347($2_1 | 0, $1_1 | 0);
  }
  return $0_1 + 8 | 0 | 0;
 }
 
 function $346($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  block2 : {
   block1 : {
    block : {
     if (($1_1 | 0) != (8 | 0)) {
      break block
     }
     $1_1 = $340($2_1 | 0) | 0;
     break block1;
    }
    $3_1 = 28;
    if ($1_1 >>> 0 < 4 >>> 0) {
     break block2
    }
    if ($1_1 & 3 | 0) {
     break block2
    }
    $4_1 = $1_1 >>> 2 | 0;
    if ($4_1 & ($4_1 + -1 | 0) | 0) {
     break block2
    }
    block3 : {
     if ($2_1 >>> 0 <= (-64 - $1_1 | 0) >>> 0) {
      break block3
     }
     return 48 | 0;
    }
    $1_1 = $345(($1_1 >>> 0 > 16 >>> 0 ? $1_1 : 16) | 0, $2_1 | 0) | 0;
   }
   block4 : {
    if ($1_1) {
     break block4
    }
    return 48 | 0;
   }
   HEAP32[$0_1 >> 2] = $1_1;
   $3_1 = 0;
  }
  return $3_1 | 0;
 }
 
 function $347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $3_1 = 0, $6_1 = 0, $2_1 = 0, $4_1 = 0, $8_1 = 0, $7_1 = 0, $10_1 = 0, $9_1 = 0;
  $2_1 = $0_1 + $1_1 | 0;
  block3 : {
   block2 : {
    block1 : {
     block : {
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (!($3_1 & 1 | 0)) {
       break block
      }
      $4_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
      break block1;
     }
     if (!($3_1 & 2 | 0)) {
      break block2
     }
     $5_1 = HEAP32[$0_1 >> 2] | 0;
     $0_1 = $0_1 - $5_1 | 0;
     $4_1 = HEAP32[(0 + 67141320 | 0) >> 2] | 0;
     if ($0_1 >>> 0 < $4_1 >>> 0) {
      break block3
     }
     $1_1 = $5_1 + $1_1 | 0;
     block4 : {
      if (($0_1 | 0) == (HEAP32[(0 + 67141324 | 0) >> 2] | 0 | 0)) {
       break block4
      }
      $3_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      block5 : {
       if ($5_1 >>> 0 > 255 >>> 0) {
        break block5
       }
       block6 : {
        $6_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        $7_1 = $5_1 >>> 3 | 0;
        $5_1 = ($7_1 << 3 | 0) + 67141344 | 0;
        if (($6_1 | 0) == ($5_1 | 0)) {
         break block6
        }
        if ($6_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        if ((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
         break block3
        }
       }
       block7 : {
        if (($3_1 | 0) != ($6_1 | 0)) {
         break block7
        }
        HEAP32[(0 + 67141304 | 0) >> 2] = (HEAP32[(0 + 67141304 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
        break block1;
       }
       block8 : {
        if (($3_1 | 0) == ($5_1 | 0)) {
         break block8
        }
        if ($3_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
         break block3
        }
       }
       HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
       HEAP32[($3_1 + 8 | 0) >> 2] = $6_1;
       break block1;
      }
      $8_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
      block10 : {
       block9 : {
        if (($3_1 | 0) == ($0_1 | 0)) {
         break block9
        }
        $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
        if ($5_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
         break block3
        }
        if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
         break block3
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        break block10;
       }
       block13 : {
        block12 : {
         block11 : {
          $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
          if (!$5_1) {
           break block11
          }
          $6_1 = $0_1 + 20 | 0;
          break block12;
         }
         $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
         if (!$5_1) {
          break block13
         }
         $6_1 = $0_1 + 16 | 0;
        }
        label : while (1) {
         $7_1 = $6_1;
         $3_1 = $5_1;
         $6_1 = $3_1 + 20 | 0;
         $5_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
         if ($5_1) {
          continue label
         }
         $6_1 = $3_1 + 16 | 0;
         $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
         if ($5_1) {
          continue label
         }
         break label;
        };
        if ($7_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        HEAP32[$7_1 >> 2] = 0;
        break block10;
       }
       $3_1 = 0;
      }
      if (!$8_1) {
       break block1
      }
      block15 : {
       block14 : {
        $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
        $5_1 = ($6_1 << 2 | 0) + 67141608 | 0;
        if (($0_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
         break block14
        }
        HEAP32[$5_1 >> 2] = $3_1;
        if ($3_1) {
         break block15
        }
        HEAP32[(0 + 67141308 | 0) >> 2] = (HEAP32[(0 + 67141308 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
        break block1;
       }
       if ($8_1 >>> 0 < $4_1 >>> 0) {
        break block3
       }
       block17 : {
        block16 : {
         if ((HEAP32[($8_1 + 16 | 0) >> 2] | 0 | 0) != ($0_1 | 0)) {
          break block16
         }
         HEAP32[($8_1 + 16 | 0) >> 2] = $3_1;
         break block17;
        }
        HEAP32[($8_1 + 20 | 0) >> 2] = $3_1;
       }
       if (!$3_1) {
        break block1
       }
      }
      if ($3_1 >>> 0 < $4_1 >>> 0) {
       break block3
      }
      HEAP32[($3_1 + 24 | 0) >> 2] = $8_1;
      block18 : {
       $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
       if (!$5_1) {
        break block18
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break block3
       }
       HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      }
      $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
      if (!$5_1) {
       break block1
      }
      if ($5_1 >>> 0 < $4_1 >>> 0) {
       break block3
      }
      HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      break block1;
     }
     $3_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
     if (($3_1 & 3 | 0 | 0) != (3 | 0)) {
      break block1
     }
     HEAP32[(0 + 67141312 | 0) >> 2] = $1_1;
     HEAP32[($2_1 + 4 | 0) >> 2] = $3_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[$2_1 >> 2] = $1_1;
     return;
    }
    if ($2_1 >>> 0 < $4_1 >>> 0) {
     break block3
    }
    block37 : {
     block19 : {
      $8_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
      if ($8_1 & 2 | 0) {
       break block19
      }
      block20 : {
       if (($2_1 | 0) != (HEAP32[(0 + 67141328 | 0) >> 2] | 0 | 0)) {
        break block20
       }
       HEAP32[(0 + 67141328 | 0) >> 2] = $0_1;
       $1_1 = (HEAP32[(0 + 67141316 | 0) >> 2] | 0) + $1_1 | 0;
       HEAP32[(0 + 67141316 | 0) >> 2] = $1_1;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
       if (($0_1 | 0) != (HEAP32[(0 + 67141324 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[(0 + 67141312 | 0) >> 2] = 0;
       HEAP32[(0 + 67141324 | 0) >> 2] = 0;
       return;
      }
      block21 : {
       $9_1 = HEAP32[(0 + 67141324 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($9_1 | 0)) {
        break block21
       }
       HEAP32[(0 + 67141324 | 0) >> 2] = $0_1;
       $1_1 = (HEAP32[(0 + 67141312 | 0) >> 2] | 0) + $1_1 | 0;
       HEAP32[(0 + 67141312 | 0) >> 2] = $1_1;
       HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
       HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
       return;
      }
      $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      block25 : {
       block22 : {
        if ($8_1 >>> 0 > 255 >>> 0) {
         break block22
        }
        block23 : {
         $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         $7_1 = $8_1 >>> 3 | 0;
         $6_1 = ($7_1 << 3 | 0) + 67141344 | 0;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break block23
         }
         if ($5_1 >>> 0 < $4_1 >>> 0) {
          break block3
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break block3
         }
        }
        block24 : {
         if (($3_1 | 0) != ($5_1 | 0)) {
          break block24
         }
         HEAP32[(0 + 67141304 | 0) >> 2] = (HEAP32[(0 + 67141304 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $7_1 | 0) | 0) | 0;
         break block25;
        }
        block26 : {
         if (($3_1 | 0) == ($6_1 | 0)) {
          break block26
         }
         if ($3_1 >>> 0 < $4_1 >>> 0) {
          break block3
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break block3
         }
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
        HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
        break block25;
       }
       $10_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
       block28 : {
        block27 : {
         if (($3_1 | 0) == ($2_1 | 0)) {
          break block27
         }
         $5_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
         if ($5_1 >>> 0 < $4_1 >>> 0) {
          break block3
         }
         if ((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break block3
         }
         if ((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
          break block3
         }
         HEAP32[($5_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
         break block28;
        }
        block31 : {
         block30 : {
          block29 : {
           $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
           if (!$5_1) {
            break block29
           }
           $6_1 = $2_1 + 20 | 0;
           break block30;
          }
          $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
          if (!$5_1) {
           break block31
          }
          $6_1 = $2_1 + 16 | 0;
         }
         label1 : while (1) {
          $7_1 = $6_1;
          $3_1 = $5_1;
          $6_1 = $3_1 + 20 | 0;
          $5_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          $6_1 = $3_1 + 16 | 0;
          $5_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
          if ($5_1) {
           continue label1
          }
          break label1;
         };
         if ($7_1 >>> 0 < $4_1 >>> 0) {
          break block3
         }
         HEAP32[$7_1 >> 2] = 0;
         break block28;
        }
        $3_1 = 0;
       }
       if (!$10_1) {
        break block25
       }
       block33 : {
        block32 : {
         $6_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
         $5_1 = ($6_1 << 2 | 0) + 67141608 | 0;
         if (($2_1 | 0) != (HEAP32[$5_1 >> 2] | 0 | 0)) {
          break block32
         }
         HEAP32[$5_1 >> 2] = $3_1;
         if ($3_1) {
          break block33
         }
         HEAP32[(0 + 67141308 | 0) >> 2] = (HEAP32[(0 + 67141308 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $6_1 | 0) | 0) | 0;
         break block25;
        }
        if ($10_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        block35 : {
         block34 : {
          if ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
           break block34
          }
          HEAP32[($10_1 + 16 | 0) >> 2] = $3_1;
          break block35;
         }
         HEAP32[($10_1 + 20 | 0) >> 2] = $3_1;
        }
        if (!$3_1) {
         break block25
        }
       }
       if ($3_1 >>> 0 < $4_1 >>> 0) {
        break block3
       }
       HEAP32[($3_1 + 24 | 0) >> 2] = $10_1;
       block36 : {
        $5_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
        if (!$5_1) {
         break block36
        }
        if ($5_1 >>> 0 < $4_1 >>> 0) {
         break block3
        }
        HEAP32[($3_1 + 16 | 0) >> 2] = $5_1;
        HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
       }
       $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
       if (!$5_1) {
        break block25
       }
       if ($5_1 >>> 0 < $4_1 >>> 0) {
        break block3
       }
       HEAP32[($3_1 + 20 | 0) >> 2] = $5_1;
       HEAP32[($5_1 + 24 | 0) >> 2] = $3_1;
      }
      $1_1 = ($8_1 & -8 | 0) + $1_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
      HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
      if (($0_1 | 0) != ($9_1 | 0)) {
       break block37
      }
      HEAP32[(0 + 67141312 | 0) >> 2] = $1_1;
      return;
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = $8_1 & -2 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 | 1 | 0;
     HEAP32[($0_1 + $1_1 | 0) >> 2] = $1_1;
    }
    block38 : {
     if ($1_1 >>> 0 > 255 >>> 0) {
      break block38
     }
     $3_1 = ($1_1 & -8 | 0) + 67141344 | 0;
     block40 : {
      block39 : {
       $5_1 = HEAP32[(0 + 67141304 | 0) >> 2] | 0;
       $1_1 = 1 << ($1_1 >>> 3 | 0) | 0;
       if ($5_1 & $1_1 | 0) {
        break block39
       }
       HEAP32[(0 + 67141304 | 0) >> 2] = $5_1 | $1_1 | 0;
       $1_1 = $3_1;
       break block40;
      }
      $1_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
      if ($1_1 >>> 0 < $4_1 >>> 0) {
       break block3
      }
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
     return;
    }
    $3_1 = 31;
    block41 : {
     if ($1_1 >>> 0 > 16777215 >>> 0) {
      break block41
     }
     $3_1 = Math_clz32($1_1 >>> 8 | 0);
     $3_1 = ((($1_1 >>> (38 - $3_1 | 0) | 0) & 1 | 0) - ($3_1 << 1 | 0) | 0) + 62 | 0;
    }
    HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $5_1 = ($3_1 << 2 | 0) + 67141608 | 0;
    block44 : {
     block43 : {
      block42 : {
       $6_1 = HEAP32[(0 + 67141308 | 0) >> 2] | 0;
       $2_1 = 1 << $3_1 | 0;
       if ($6_1 & $2_1 | 0) {
        break block42
       }
       HEAP32[(0 + 67141308 | 0) >> 2] = $6_1 | $2_1 | 0;
       HEAP32[$5_1 >> 2] = $0_1;
       HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
       break block43;
      }
      $3_1 = $1_1 << (($3_1 | 0) == (31 | 0) ? 0 : 25 - ($3_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      label2 : while (1) {
       $5_1 = $6_1;
       if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1_1 | 0)) {
        break block44
       }
       $6_1 = $3_1 >>> 29 | 0;
       $3_1 = $3_1 << 1 | 0;
       $2_1 = $5_1 + ($6_1 & 4 | 0) | 0;
       $6_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
       if ($6_1) {
        continue label2
       }
       break label2;
      };
      $1_1 = $2_1 + 16 | 0;
      if ($1_1 >>> 0 < $4_1 >>> 0) {
       break block3
      }
      HEAP32[$1_1 >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $5_1;
     }
     HEAP32[($0_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $0_1;
     return;
    }
    if ($5_1 >>> 0 < $4_1 >>> 0) {
     break block3
    }
    $1_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break block3
    }
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
   }
   return;
  }
  $339();
  wasm2js_trap();
 }
 
 function $348() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $349($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 67135492 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 7 | 0) & -8 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  block2 : {
   block1 : {
    block : {
     if (!$2_1) {
      break block
     }
     if ($0_1 >>> 0 <= $1_1 >>> 0) {
      break block1
     }
    }
    if ($0_1 >>> 0 <= ($348() | 0) >>> 0) {
     break block2
    }
    if (fimport$6($0_1 | 0) | 0) {
     break block2
    }
   }
   HEAP32[($231() | 0) >> 2] = 48;
   return -1 | 0;
  }
  HEAP32[(0 + 67135492 | 0) >> 2] = $0_1;
  return $1_1 | 0;
 }
 
 function $350($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $10$hi = 0, $10_1 = 0, $6_1 = 0, $9$hi = 0, $7_1 = 0, $9_1 = 0, $5_1 = 0, $12$hi = 0, $12_1 = 0, i64toi32_i32$6 = 0, $8_1 = 0, $11_1 = 0, $11$hi = 0, $139_1 = 0, $140_1 = 0, $141_1 = 0, $142_1 = 0, $143_1 = 0, $144_1 = 0, $145_1 = 0, $146_1 = 0, $148_1 = 0, $149_1 = 0, $150_1 = 0, $151_1 = 0, $152_1 = 0, $153_1 = 0, $154_1 = 0, $155_1 = 0, $156_1 = 0, $157_1 = 0, $158_1 = 0, $159_1 = 0, $160_1 = 0, $20_1 = 0, $30_1 = 0, $34_1 = 0, $40_1 = 0, $48_1 = 0, $50_1 = 0, $58_1 = 0, $58$hi = 0, $64_1 = 0, $64$hi = 0, $68_1 = 0, $68$hi = 0, $78_1 = 0, $78$hi = 0, $106_1 = 0, $109_1 = 0, $136_1 = 0, $137_1 = 0, $137$hi = 0, $138_1 = 0, $138$hi = 0, $145$hi = 0, $147_1 = 0, $147$hi = 0, $166_1 = 0, $167_1 = 0, $167$hi = 0, $168_1 = 0, $168$hi = 0, $175$hi = 0, $177_1 = 0, $177$hi = 0, $189_1 = 0, $189$hi = 0, $191$hi = 0, $195_1 = 0, $195$hi = 0, $197$hi = 0, $224_1 = 0, $224$hi = 0, $226_1 = 0, $226$hi = 0, $228_1 = 0, $228$hi = 0, $230_1 = 0, $231$hi = 0, $243_1 = 0, $243$hi = 0, $246_1 = 0, $246$hi = 0, $254$hi = 0, $257_1 = 0, $258$hi = 0, $263_1 = 0, $264_1 = 0, $264$hi = 0, $265_1 = 0, $265$hi = 0, $272$hi = 0, $274_1 = 0, $274$hi = 0, $288_1 = 0, $288$hi = 0, $294_1 = 0, $295$hi = 0, $301_1 = 0, $301$hi = 0, $303$hi = 0, $304_1 = 0, $304$hi = 0, $306_1 = 0, $306$hi = 0, $333_1 = 0, $333$hi = 0, $335_1 = 0, $335$hi = 0, $337_1 = 0, $337$hi = 0, $339_1 = 0, $340$hi = 0, $345_1 = 0, $345$hi = 0, $347$hi = 0, $351_1 = 0, $351$hi = 0, $354_1 = 0, $354$hi = 0, $355$hi = 0, $364_1 = 0, $364$hi = 0, $368$hi = 0, $372_1 = 0, $373$hi = 0, $376_1 = 0, $376$hi = 0, $379_1 = 0, $379$hi = 0, $383_1 = 0, $384$hi = 0, $387_1 = 0, $387$hi = 0, $393_1 = 0, $394$hi = 0, $398_1 = 0, $399$hi = 0, $402_1 = 0, $402$hi = 0, $408_1 = 0, $409$hi = 0, $413_1 = 0, $414$hi = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $9_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $9$hi = i64toi32_i32$1;
  block3 : {
   block1 : {
    block : {
     i64toi32_i32$1 = $1$hi;
     $6_1 = !($1_1 | i64toi32_i32$1 | 0);
     $20_1 = $6_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $10_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = $10$hi;
     if (!($10_1 | i64toi32_i32$2 | 0) ? $20_1 : i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break block
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9_1;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30_1 : $34_1) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $10_1;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $6_1 : $40_1) {
      break block2
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3_1 = $1_1;
     $3$hi = i64toi32_i32$1;
     break block3;
    }
    block4 : {
     i64toi32_i32$1 = $3$hi;
     $48_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48_1 : $50_1) {
      break block4
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break block3;
    }
    block5 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$5 = $10_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break block5
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64_1 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2_1;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68_1 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64_1;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68_1;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $6_1 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $1_1;
     i64toi32_i32$2 = i64toi32_i32$1 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$2;
     break block3;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $9$hi;
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $78_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $78$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $78$hi;
    i64toi32_i32$3 = $78_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break block3
    }
    block6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$3 = $10_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break block6
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $9$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$5 = $9_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block3
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $3_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $4_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $4$hi = i64toi32_i32$5;
     break block3;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break block1
    }
    i64toi32_i32$1 = $1$hi;
    $3_1 = $1_1;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    $4_1 = $2_1;
    $4$hi = i64toi32_i32$1;
    break block3;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   $106_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$3 = $9_1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   $109_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$2 = $9_1;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = $10_1;
   $7_1 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $106_1 : $109_1;
   i64toi32_i32$4 = $7_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3_1 : $1_1;
   i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
   $9_1 = i64toi32_i32$5;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$3 ? $4_1 : $2_1;
   i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$5;
   $11_1 = i64toi32_i32$2;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $10_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2_1 : $4_1;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
   $12_1 = i64toi32_i32$1;
   $12$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $139_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $139_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $8_1 = $139_1 & 32767 | 0;
   block7 : {
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $140_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $140_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    $6_1 = $140_1 & 32767 | 0;
    if ($6_1) {
     break block7
    }
    $136_1 = $5_1 + 96 | 0;
    i64toi32_i32$5 = $9$hi;
    $137_1 = $9_1;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $138_1 = $10_1;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    $6_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $6_1;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $10$hi;
    i64toi32_i32$2 = i64toi32_i32$3 ? $9_1 : $10_1;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $141_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $141_1 = i64toi32_i32$5
    }
    $145$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ? 64 : 0;
    i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$1;
    $147_1 = i64toi32_i32$5;
    $147$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $145$hi;
    i64toi32_i32$4 = $141_1;
    i64toi32_i32$5 = $147$hi;
    i64toi32_i32$3 = $147_1;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $6_1 = i64toi32_i32$1;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$4 = $138$hi;
    $351($136_1 | 0, $137_1 | 0, i64toi32_i32$0 | 0, $138_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 + -15 | 0 | 0);
    $6_1 = 16 - i64toi32_i32$1 | 0;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 108 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $9_1 = i64toi32_i32$0;
    $9$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $7_1;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$5 ? $1_1 : $3_1;
   i64toi32_i32$2 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$3 = 65535;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $1$hi = i64toi32_i32$3;
   block8 : {
    if ($8_1) {
     break block8
    }
    $166_1 = $5_1 + 80 | 0;
    i64toi32_i32$3 = $3$hi;
    $167_1 = $3_1;
    $167$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    $168_1 = $1_1;
    $168$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $1$hi;
    $7_1 = !($1_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$4 = i64toi32_i32$0 ? $3_1 : $1_1;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$5;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $142_1 = Math_clz32(i64toi32_i32$4) + 32 | 0
    } else {
     $142_1 = i64toi32_i32$3
    }
    $175$hi = i64toi32_i32$0;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 ? 64 : 0;
    i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$0 : i64toi32_i32$2;
    $177_1 = i64toi32_i32$3;
    $177$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $175$hi;
    i64toi32_i32$5 = $142_1;
    i64toi32_i32$3 = $177$hi;
    i64toi32_i32$0 = $177_1;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$2;
    i64toi32_i32$1 = $167$hi;
    i64toi32_i32$5 = $168$hi;
    $351($166_1 | 0, $167_1 | 0, i64toi32_i32$1 | 0, $168_1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $8_1 = 16 - i64toi32_i32$2 | 0;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 88 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 92 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
    $143_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $143_1 = i64toi32_i32$4 << i64toi32_i32$3 | 0;
   }
   $189_1 = $143_1;
   $189$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 61;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $144_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    $144_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $191$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $189$hi;
   i64toi32_i32$1 = $189_1;
   i64toi32_i32$5 = $191$hi;
   i64toi32_i32$0 = $144_1;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   i64toi32_i32$1 = 524288;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    $145_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
    $145_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
   }
   $195_1 = $145_1;
   $195$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$1 = $9_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 61;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $146_1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $146_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
   }
   $197$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $195$hi;
   i64toi32_i32$4 = $195_1;
   i64toi32_i32$1 = $197$hi;
   i64toi32_i32$0 = $146_1;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $12_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $12$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    $148_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
    $148_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
   }
   $10_1 = $148_1;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $3_1 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $3$hi = i64toi32_i32$5;
   block9 : {
    if (($6_1 | 0) == ($8_1 | 0)) {
     break block9
    }
    block10 : {
     $7_1 = $6_1 - $8_1 | 0;
     if ($7_1 >>> 0 <= 127 >>> 0) {
      break block10
     }
     i64toi32_i32$5 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     $10_1 = 1;
     $10$hi = i64toi32_i32$5;
     break block9;
    }
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $1$hi;
    $351($5_1 + 64 | 0 | 0, $10_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, 128 - $7_1 | 0 | 0);
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    $361($5_1 + 48 | 0 | 0, $10_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
    $224_1 = i64toi32_i32$5;
    $224$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 64 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 68 | 0) >> 2] | 0;
    $226_1 = i64toi32_i32$1;
    $226$hi = i64toi32_i32$5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 72 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 76 | 0) >> 2] | 0;
    $228_1 = i64toi32_i32$5;
    $228$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $226$hi;
    i64toi32_i32$4 = $226_1;
    i64toi32_i32$5 = $228$hi;
    i64toi32_i32$0 = $228_1;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    $230_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = 0;
    $231$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $224$hi;
    i64toi32_i32$0 = $224_1;
    i64toi32_i32$5 = $231$hi;
    i64toi32_i32$4 = $230_1;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $10_1 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $10$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 56 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 60 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$1 = $12_1;
   i64toi32_i32$5 = 524288;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $12_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$0 = $9_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $149_1 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $149_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $9_1 = $149_1;
   $9$hi = i64toi32_i32$1;
   block12 : {
    block11 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$4 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
      $150_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0) {
        $151_1 = 0
       } else {
        $151_1 = 1
       }
       $152_1 = $151_1;
      } else {
       $152_1 = 0
      }
      $150_1 = $152_1;
     }
     if ($150_1) {
      break block11
     }
     i64toi32_i32$5 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     $4_1 = 0;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $243_1 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $243$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $246_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
     $246$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $243$hi;
     i64toi32_i32$1 = $243_1;
     i64toi32_i32$5 = $246$hi;
     i64toi32_i32$0 = $246_1;
     i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0 | i64toi32_i32$5 | 0)) {
      break block3
     }
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $9$hi;
     i64toi32_i32$4 = $9_1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     $254$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $9_1;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$0 = $10_1;
     $257_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $258$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $254$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $258$hi;
     i64toi32_i32$5 = $257_1;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$0 = 524287;
     i64toi32_i32$5 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0) {
      break block12
     }
     $263_1 = $5_1 + 32 | 0;
     i64toi32_i32$2 = $2$hi;
     $264_1 = $2_1;
     $264$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$1;
     $265_1 = i64toi32_i32$4;
     $265$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$1;
     $7_1 = !(i64toi32_i32$4 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$3 ? $2_1 : i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$5);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $153_1 = Math_clz32(i64toi32_i32$0) + 32 | 0
     } else {
      $153_1 = i64toi32_i32$2
     }
     $272$hi = i64toi32_i32$3;
     i64toi32_i32$1 = $7_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = i64toi32_i32$1 ? 64 : 0;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$3 : i64toi32_i32$5;
     $274_1 = i64toi32_i32$2;
     $274$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $272$hi;
     i64toi32_i32$1 = $153_1;
     i64toi32_i32$2 = $274$hi;
     i64toi32_i32$3 = $274_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $7_1 = i64toi32_i32$5 + -12 | 0;
     i64toi32_i32$4 = $264$hi;
     i64toi32_i32$1 = $265$hi;
     $351($263_1 | 0, $264_1 | 0, i64toi32_i32$4 | 0, $265_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     $6_1 = $6_1 - $7_1 | 0;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$1;
     break block12;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = $12_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $288_1 = i64toi32_i32$2;
    $288$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $10$hi;
    i64toi32_i32$1 = $10_1;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $2_1 = i64toi32_i32$4;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10_1;
    $294_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$5 = 0;
    $295$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $288$hi;
    i64toi32_i32$3 = $288_1;
    i64toi32_i32$2 = $295$hi;
    i64toi32_i32$1 = $294_1;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4_1 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$3 = 1048576;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    if (!(i64toi32_i32$5 & i64toi32_i32$1 | 0 | i64toi32_i32$3 | 0)) {
     break block12
    }
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $154_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
     $154_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $301_1 = $154_1;
    $301$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 63;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $155_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $155_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $303$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $301$hi;
    i64toi32_i32$5 = $301_1;
    i64toi32_i32$3 = $303$hi;
    i64toi32_i32$1 = $155_1;
    i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
    $304_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $304$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$4 = $10_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $306_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
    $306$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $304$hi;
    i64toi32_i32$3 = $304_1;
    i64toi32_i32$4 = $306$hi;
    i64toi32_i32$1 = $306_1;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $2_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $2$hi = i64toi32_i32$4;
    $6_1 = $6_1 + 1 | 0;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $156_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
     $156_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4_1 = $156_1;
    $4$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$4 = $11_1;
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $10_1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $10$hi = i64toi32_i32$5;
   block13 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break block13
    }
    i64toi32_i32$3 = $10_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$4;
    break block3;
   }
   $7_1 = 0;
   block15 : {
    block14 : {
     if (($6_1 | 0) <= (0 | 0)) {
      break block14
     }
     $7_1 = $6_1;
     break block15;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$3 = $4$hi;
    $351($5_1 + 16 | 0 | 0, $2_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0, $6_1 + 127 | 0 | 0);
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    $361($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
    $333_1 = i64toi32_i32$4;
    $333$hi = i64toi32_i32$3;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 16 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 20 | 0) >> 2] | 0;
    $335_1 = i64toi32_i32$3;
    $335$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 24 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 28 | 0) >> 2] | 0;
    $337_1 = i64toi32_i32$4;
    $337$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $335$hi;
    i64toi32_i32$5 = $335_1;
    i64toi32_i32$4 = $337$hi;
    i64toi32_i32$1 = $337_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 0;
    $339_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | 0;
    i64toi32_i32$3 = 0;
    $340$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $333$hi;
    i64toi32_i32$1 = $333_1;
    i64toi32_i32$4 = $340$hi;
    i64toi32_i32$5 = $339_1;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $157_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    $157_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
   }
   $345_1 = $157_1;
   $345$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $158_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $158_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $347$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $345$hi;
   i64toi32_i32$4 = $345_1;
   i64toi32_i32$1 = $347$hi;
   i64toi32_i32$5 = $158_1;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $3_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    $159_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
    $159_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   }
   $351_1 = $159_1;
   $351$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $160_1 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$2 | 0;
    $160_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$4 = $160_1;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $354_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
   $354$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $351$hi;
   i64toi32_i32$3 = $351_1;
   i64toi32_i32$4 = $354$hi;
   i64toi32_i32$5 = $354_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $355$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = $355$hi;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$5 = $10_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $4_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   $6_1 = $2_1 & 7 | 0;
   block21 : {
    block19 : {
     block18 : {
      switch ($359() | 0 | 0) {
      case 0:
       block20 : {
        if (($6_1 | 0) == (4 | 0)) {
         break block20
        }
        i64toi32_i32$3 = $4$hi;
        $364_1 = $4_1;
        $364$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$3 = 0;
        $368$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$4 = $3_1;
        i64toi32_i32$1 = $368$hi;
        i64toi32_i32$5 = $6_1 >>> 0 > 4 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
        i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
         i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
        }
        $10_1 = i64toi32_i32$2;
        $10$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$5 = $3_1;
        $372_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
        i64toi32_i32$3 = 0;
        $373$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $364$hi;
        i64toi32_i32$5 = $364_1;
        i64toi32_i32$0 = $373$hi;
        i64toi32_i32$4 = $372_1;
        i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
        if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
        }
        $4_1 = i64toi32_i32$1;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        $3_1 = $10_1;
        $3$hi = i64toi32_i32$2;
        break block19;
       }
       i64toi32_i32$2 = $4$hi;
       $376_1 = $4_1;
       $376$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$3 = $3_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$4 = 1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $379_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
       $379$hi = i64toi32_i32$5;
       i64toi32_i32$5 = i64toi32_i32$2;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = $379$hi;
       i64toi32_i32$4 = $379_1;
       i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $10_1 = i64toi32_i32$0;
       $10$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $10$hi;
       i64toi32_i32$5 = i64toi32_i32$0;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$4 = $3_1;
       $383_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $384$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $376$hi;
       i64toi32_i32$4 = $376_1;
       i64toi32_i32$1 = $384$hi;
       i64toi32_i32$2 = $383_1;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
       }
       $4_1 = i64toi32_i32$3;
       $4$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$0;
       break block21;
      case 1:
       i64toi32_i32$0 = $4$hi;
       $387_1 = $4_1;
       $387$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$5 = $10_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$2 = 0;
       $393_1 = ((i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) & ($6_1 | 0) != (0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $394$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$2 = $3_1;
       i64toi32_i32$0 = $394$hi;
       i64toi32_i32$4 = $393_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$5 = i64toi32_i32$1;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$4 = $3_1;
       $398_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$5 = 0;
       $399$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $387$hi;
       i64toi32_i32$4 = $387_1;
       i64toi32_i32$3 = $399$hi;
       i64toi32_i32$2 = $398_1;
       i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
       i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $4_1 = i64toi32_i32$0;
       $4$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $10$hi;
       $3_1 = $10_1;
       $3$hi = i64toi32_i32$1;
       break block19;
      case 2:
       break block18;
      default:
       break block19;
      };
     }
     i64toi32_i32$1 = $4$hi;
     $402_1 = $4_1;
     $402$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     $408_1 = !($10_1 | i64toi32_i32$1 | 0) & ($6_1 | 0) != (0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $409$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$4 = $409$hi;
     i64toi32_i32$2 = $408_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $10_1 = i64toi32_i32$3;
     $10$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     $413_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $414$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $402$hi;
     i64toi32_i32$2 = $402_1;
     i64toi32_i32$0 = $414$hi;
     i64toi32_i32$5 = $413_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $10$hi;
     $3_1 = $10_1;
     $3$hi = i64toi32_i32$3;
    }
    if (!$6_1) {
     break block3
    }
   }
   $360() | 0;
  }
  i64toi32_i32$3 = $3$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 112 | 0;
 }
 
 function $351($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  block1 : {
   block : {
    if (!($3_1 & 64 | 0)) {
     break block
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break block1;
   }
   if (!$3_1) {
    break block1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $352($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $51_1 = 0, $51$hi = 0, $54_1 = 0, $54$hi = 0, $59_1 = 0, $70_1 = 0, $70$hi = 0, $73_1 = 0, $73$hi = 0;
  $4_1 = 1;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break block
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break block
   }
   block1 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break block1
    }
    return 0 | 0;
   }
   block2 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break block2
    }
    block3 : {
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $0$hi;
     i64toi32_i32$1 = $0_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
      $38_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $39_1 = 0
       } else {
        $39_1 = 1
       }
       $41_1 = $39_1;
      } else {
       $41_1 = 0
      }
      $38_1 = $41_1;
     }
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1_1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$2 = $3_1;
     if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1)) {
      break block3
     }
     return -1 | 0;
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $51_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $51$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $54_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $54$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $51$hi;
    i64toi32_i32$0 = $51_1;
    i64toi32_i32$3 = $54$hi;
    i64toi32_i32$1 = $54_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   block4 : {
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $59_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
     $42_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $43_1 = 0
      } else {
       $43_1 = 1
      }
      $44_1 = $43_1;
     } else {
      $44_1 = 0
     }
     $42_1 = $44_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (!((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $59_1 : $42_1)) {
     break block4
    }
    return -1 | 0;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $70_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $70$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $73_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $73$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $70$hi;
   i64toi32_i32$0 = $70_1;
   i64toi32_i32$3 = $73$hi;
   i64toi32_i32$1 = $73_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $353($0_1, $0$hi, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $6_1 = 0, $4_1 = 0, $5$hi = 0, $6$hi = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $8_1 = 0, $12_1 = 0, $17_1 = 0, $21_1 = 0, $27_1 = 0, $27$hi = 0, $30_1 = 0, $30$hi = 0, $40_1 = 0, $50_1 = 0, $50$hi = 0, $53_1 = 0, $53$hi = 0, $58_1 = 0, $68_1 = 0, $68$hi = 0, $71_1 = 0, $71$hi = 0;
  $4_1 = -1;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8_1 : $12_1) {
    break block
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6_1;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6_1;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17_1 : $21_1) {
    break block
   }
   block1 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6_1;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27_1;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break block1
    }
    return 0 | 0;
   }
   block2 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3_1;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break block2
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2_1;
    $40_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39_1 = 0
      } else {
       $39_1 = 1
      }
      $41_1 = $39_1;
     } else {
      $41_1 = 0
     }
     $38_1 = $41_1;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40_1 : $38_1) {
     break block
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3_1;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50_1;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53_1;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0_1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2_1;
   $58_1 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42_1 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43_1 = 0
     } else {
      $43_1 = 1
     }
     $44_1 = $43_1;
    } else {
     $44_1 = 0
    }
    $42_1 = $44_1;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58_1 : $42_1) {
    break block
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71_1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68_1;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4_1 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4_1 | 0;
 }
 
 function $354($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $5_1 = 0, $11$hi = 0, i64toi32_i32$6 = 0, $11_1 = 0, $10$hi = 0, $13$hi = 0, $10_1 = 0, $16$hi = 0, $12$hi = 0, $13_1 = 0, $17$hi = 0, $21$hi = 0, $12_1 = 0, $6_1 = 0, $16_1 = 0, $21_1 = 0, $14$hi = 0, $15$hi = 0, $8_1 = 0, $17_1 = 0, $18$hi = 0, $14_1 = 0, $15_1 = 0, $18_1 = 0, $22_1 = 0, $22$hi = 0, $24$hi = 0, $9_1 = 0, $19_1 = 0, $19$hi = 0, $324_1 = 0, $325_1 = 0, $7_1 = 0, $327_1 = 0, $328_1 = 0, $329_1 = 0, $330_1 = 0, $331_1 = 0, $332_1 = 0, $334_1 = 0, $335_1 = 0, $336_1 = 0, $337_1 = 0, $340_1 = 0, $341_1 = 0, $343_1 = 0, $344_1 = 0, $346_1 = 0, $347_1 = 0, $348_1 = 0, $349_1 = 0, $20_1 = 0, $20$hi = 0, $350_1 = 0, $352_1 = 0, $353_1 = 0, $354_1 = 0, $356_1 = 0, $357_1 = 0, $358_1 = 0, $359_1 = 0, $23_1 = 0, $23$hi = 0, $362_1 = 0, $363_1 = 0, $364_1 = 0, $365_1 = 0, $24_1 = 0, $366_1 = 0, $367_1 = 0, $369_1 = 0, $370_1 = 0, $371_1 = 0, $372_1 = 0, $373_1 = 0, $375_1 = 0, $376_1 = 0, $380_1 = 0, $381_1 = 0, $382_1 = 0, $383_1 = 0, $384_1 = 0, $386_1 = 0, $389_1 = 0, $390_1 = 0, $51_1 = 0, $55_1 = 0, $62_1 = 0, $66_1 = 0, $75_1 = 0, $75$hi = 0, $80_1 = 0, $80$hi = 0, $88_1 = 0, $88$hi = 0, $110_1 = 0, $111_1 = 0, $111$hi = 0, $112_1 = 0, $112$hi = 0, $119$hi = 0, $121_1 = 0, $121$hi = 0, $135_1 = 0, $136_1 = 0, $136$hi = 0, $137_1 = 0, $137$hi = 0, $144$hi = 0, $146_1 = 0, $146$hi = 0, $160_1 = 0, $162_1 = 0, $162$hi = 0, $166$hi = 0, $175_1 = 0, $175$hi = 0, $176$hi = 0, $179_1 = 0, $182_1 = 0, $182$hi = 0, $185$hi = 0, $193_1 = 0, $193$hi = 0, $194$hi = 0, $196_1 = 0, $199_1 = 0, $199$hi = 0, $202$hi = 0, $210_1 = 0, $210$hi = 0, $211$hi = 0, $213_1 = 0, $216_1 = 0, $216$hi = 0, $219$hi = 0, $227_1 = 0, $227$hi = 0, $228$hi = 0, $230_1 = 0, $231_1 = 0, $231$hi = 0, $234_1 = 0, $234$hi = 0, $237$hi = 0, $242_1 = 0, $244$hi = 0, $247_1 = 0, $248_1 = 0, $248$hi = 0, $250_1 = 0, $250$hi = 0, $255_1 = 0, $255$hi = 0, $259_1 = 0, $260$hi = 0, $261$hi = 0, $263_1 = 0, $264$hi = 0, $265$hi = 0, $266$hi = 0, $270$hi = 0, $281_1 = 0, $281$hi = 0, $284_1 = 0, $284$hi = 0, $288$hi = 0, $289_1 = 0, $289$hi = 0, $295_1 = 0, $295$hi = 0, $304_1 = 0, $304$hi = 0, $309_1 = 0, $309$hi = 0, $312_1 = 0, $312$hi = 0, $314$hi = 0, $315_1 = 0, $315$hi = 0, $317$hi = 0, $318$hi = 0, $321_1 = 0, $322$hi = 0, $323$hi = 0, $326_1 = 0, $327$hi = 0, $333_1 = 0, $333$hi = 0, $338_1 = 0, $338$hi = 0, $339_1 = 0, $339$hi = 0, $342_1 = 0, $342$hi = 0, $345_1 = 0, $345$hi = 0, $347$hi = 0, $351_1 = 0, $351$hi = 0, $355_1 = 0, $356$hi = 0, $357$hi = 0, $360_1 = 0, $360$hi = 0, $361_1 = 0, $361$hi = 0, $368_1 = 0, $368$hi = 0, $374_1 = 0, $374$hi = 0, $376$hi = 0, $377_1 = 0, $377$hi = 0, $378_1 = 0, $378$hi = 0, $379_1 = 0, $379$hi = 0, $381$hi = 0, $385_1 = 0, $386$hi = 0, $387_1 = 0, $387$hi = 0, $388_1 = 0, $388$hi = 0, $397_1 = 0, $397$hi = 0, $402_1 = 0, $402$hi = 0, $408_1 = 0, $408$hi = 0, $412_1 = 0, $413$hi = 0, $414$hi = 0, $418_1 = 0, $419$hi = 0, $420_1 = 0, $420$hi = 0, $421_1 = 0, $421$hi = 0, $428_1 = 0, $428$hi = 0, $433_1 = 0, $433$hi = 0, $438_1 = 0, $438$hi = 0, $441_1 = 0, $441$hi = 0, $444_1 = 0, $445$hi = 0, $448_1 = 0, $449$hi = 0, $450$hi = 0, $453_1 = 0, $454$hi = 0, $456$hi = 0, $457_1 = 0, $457$hi = 0, $461_1 = 0, $462$hi = 0, $463_1 = 0, $463$hi = 0, $464_1 = 0, $464$hi = 0, $465_1 = 0, $465$hi = 0, $472_1 = 0, $472$hi = 0, $475_1 = 0, $475$hi = 0, $478_1 = 0, $480$hi = 0, $481_1 = 0, $481$hi = 0, $485_1 = 0, $486_1 = 0, $486$hi = 0, $487_1 = 0, $487$hi = 0, $489$hi = 0, $490$hi = 0, $492_1 = 0, $493$hi = 0, $494$hi = 0, $498_1 = 0, $499$hi = 0, $513$hi = 0, $515_1 = 0, $515$hi = 0, $516$hi = 0, $520_1 = 0, $521$hi = 0, $528_1 = 0, $530_1 = 0, $530$hi = 0, $532$hi = 0, $534_1 = 0, $534$hi = 0, $541$hi = 0, $543_1 = 0, $543$hi = 0, $544$hi = 0, $548_1 = 0, $549$hi = 0, $563_1 = 0, $563$hi = 0, $565$hi = 0, $569$hi = 0, $571_1 = 0, $571$hi = 0, $600_1 = 0, $600$hi = 0, $603_1 = 0, $603$hi = 0, $607$hi = 0, $608_1 = 0, $608$hi = 0, $609_1 = 0, $609$hi = 0, $612_1 = 0, $612$hi = 0, $616_1 = 0, $617$hi = 0, $629_1 = 0, $629$hi = 0, $630_1 = 0, $630$hi = 0, $638_1 = 0, $642_1 = 0, $643$hi = 0, $647_1 = 0, $651_1 = 0, $652$hi = 0, $656_1 = 0, $657$hi = 0, $659_1 = 0, $659$hi = 0, $662_1 = 0, $665_1 = 0, $665$hi = 0, $666_1 = 0, $671_1 = 0, $676_1 = 0, $677$hi = 0, $681_1 = 0, $682$hi = 0, $684_1 = 0, $684$hi = 0, $687_1 = 0, $690_1 = 0, $690$hi = 0, $691_1 = 0, $696_1 = 0, $701_1 = 0, $702$hi = 0, $706_1 = 0, $707$hi = 0, $708$hi = 0;
  $5_1 = global$0 - 336 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $11_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $324_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $324_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $324_1 & 32767 | 0;
  block3 : {
   block1 : {
    block : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $325_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $325_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $325_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break block
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$0 = $1$hi;
     $51_1 = !($1_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $13_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $13_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $55_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $51_1 : $55_1) {
      break block2
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $12$hi = i64toi32_i32$0;
     break block3;
    }
    block4 : {
     i64toi32_i32$0 = $3$hi;
     $62_1 = !($3_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $66_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $62_1 : $66_1) {
      break block4
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$0;
     break block3;
    }
    block5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $75_1 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $75$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$1 = $75$hi;
     i64toi32_i32$2 = $75_1;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block5
     }
     block6 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $80_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $80$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3_1;
      i64toi32_i32$2 = $80$hi;
      i64toi32_i32$0 = $80_1;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break block6
      }
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $12_1 = 0;
      $12$hi = i64toi32_i32$2;
      break block3;
     }
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$1 = $12_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break block3;
    }
    block7 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $88_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $88$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $88$hi;
     i64toi32_i32$0 = $88_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block7
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block8 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block8
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $12_1 = i64toi32_i32$0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block9 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break block9
     }
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $12_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $12_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break block3;
    }
    $8_1 = 0;
    block10 : {
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break block10
     }
     $110_1 = $5_1 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $111_1 = $1_1;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     $112_1 = $11_1;
     $112$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $11$hi;
     $8_1 = !($11_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $8_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1_1 : $11_1;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $327_1 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $327_1 = i64toi32_i32$1
     }
     $119$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $8_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 ? 64 : 0;
     i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$4;
     $121_1 = i64toi32_i32$1;
     $121$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $119$hi;
     i64toi32_i32$0 = $327_1;
     i64toi32_i32$1 = $121$hi;
     i64toi32_i32$3 = $121_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$4;
     i64toi32_i32$5 = $111$hi;
     i64toi32_i32$0 = $112$hi;
     $351($110_1 | 0, $111_1 | 0, i64toi32_i32$5 | 0, $112_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$4 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$4 | 0;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 328 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 332 | 0) >> 2] | 0;
     $11_1 = i64toi32_i32$0;
     $11$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 320 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 324 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$0;
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break block1
    }
    $135_1 = $5_1 + 304 | 0;
    i64toi32_i32$2 = $3$hi;
    $136_1 = $3_1;
    $136$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $10$hi;
    $137_1 = $10_1;
    $137$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$2 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$5 = i64toi32_i32$1 ? $3_1 : $10_1;
    i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
    i64toi32_i32$2 = Math_clz32(i64toi32_i32$3);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$2 | 0) == (32 | 0)) {
     $328_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $328_1 = i64toi32_i32$2
    }
    $144$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $9_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 ? 64 : 0;
    i64toi32_i32$5 = i64toi32_i32$0 ? i64toi32_i32$1 : i64toi32_i32$3;
    $146_1 = i64toi32_i32$2;
    $146$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $144$hi;
    i64toi32_i32$0 = $328_1;
    i64toi32_i32$2 = $146$hi;
    i64toi32_i32$1 = $146_1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $9_1 = i64toi32_i32$3;
    i64toi32_i32$4 = $136$hi;
    i64toi32_i32$0 = $137$hi;
    $351($135_1 | 0, $136_1 | 0, i64toi32_i32$4 | 0, $137_1 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 + -15 | 0 | 0);
    $8_1 = (i64toi32_i32$3 + $8_1 | 0) + -16 | 0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 312 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 316 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 304 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 308 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$0;
   }
   $160_1 = $5_1 + 288 | 0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 49;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $329_1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $329_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   $162_1 = $329_1;
   $162$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$0 = $10_1;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $14_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $14$hi = i64toi32_i32$5;
   i64toi32_i32$4 = $14_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 15;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    $330_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $330_1 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
   }
   $166$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $162$hi;
   i64toi32_i32$5 = $162_1;
   i64toi32_i32$4 = $166$hi;
   i64toi32_i32$1 = $330_1;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $2_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 1963258675;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $4_1 = i64toi32_i32$2;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$1 = 0;
   $363($160_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 296 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 300 | 0) >> 2] | 0;
   $175_1 = i64toi32_i32$1;
   $175$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $175$hi;
   i64toi32_i32$3 = $175_1;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $176$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $176$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = 0;
   $363($5_1 + 272 | 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $179_1 = $5_1 + 256 | 0;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 272 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 276 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 63;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $331_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    $331_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $182_1 = $331_1;
   $182$hi = i64toi32_i32$3;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 280 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 284 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    $332_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $332_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
   }
   $185$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $182$hi;
   i64toi32_i32$0 = $182_1;
   i64toi32_i32$4 = $185$hi;
   i64toi32_i32$2 = $332_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = 0;
   $363($179_1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 264 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 268 | 0) >> 2] | 0;
   $193_1 = i64toi32_i32$2;
   $193$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $193$hi;
   i64toi32_i32$4 = $193_1;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   $194$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = $194$hi;
   i64toi32_i32$4 = 0;
   $363($5_1 + 240 | 0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $196_1 = $5_1 + 224 | 0;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 240 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 244 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 63;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $334_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $334_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   $199_1 = $334_1;
   $199$hi = i64toi32_i32$4;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 248 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 252 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    $335_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $335_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   }
   $202$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $199$hi;
   i64toi32_i32$0 = $199_1;
   i64toi32_i32$3 = $202$hi;
   i64toi32_i32$5 = $335_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$5 = 0;
   $363($196_1 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0);
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 232 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 236 | 0) >> 2] | 0;
   $210_1 = i64toi32_i32$5;
   $210$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = $210$hi;
   i64toi32_i32$3 = $210_1;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
   $211$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $211$hi;
   i64toi32_i32$3 = 0;
   $363($5_1 + 208 | 0 | 0, $4_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $213_1 = $5_1 + 192 | 0;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 208 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 212 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $336_1 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
    $336_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
   }
   $216_1 = $336_1;
   $216$hi = i64toi32_i32$3;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 216 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 220 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    $337_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
    $337_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
   }
   $219$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $216$hi;
   i64toi32_i32$0 = $216_1;
   i64toi32_i32$4 = $219$hi;
   i64toi32_i32$1 = $337_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = 0;
   $363($213_1 | 0, $4_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 200 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 204 | 0) >> 2] | 0;
   $227_1 = i64toi32_i32$1;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $227$hi;
   i64toi32_i32$4 = $227_1;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
   i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
   $228$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = $228$hi;
   i64toi32_i32$4 = 0;
   $363($5_1 + 176 | 0 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $230_1 = $5_1 + 160 | 0;
   i64toi32_i32$4 = $2$hi;
   $231_1 = $2_1;
   $231$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 176 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 180 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 63;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $340_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $340_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $234_1 = $340_1;
   $234$hi = i64toi32_i32$4;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 184 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 188 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $341_1 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $341_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $237$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $234$hi;
   i64toi32_i32$0 = $234_1;
   i64toi32_i32$3 = $237$hi;
   i64toi32_i32$2 = $341_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $231$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$2 = 0;
   $363($230_1 | 0, $231_1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $242_1 = $5_1 + 144 | 0;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$4 = $3_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $343_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $343_1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $244$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $244$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   $363($242_1 | 0, $343_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
   $247_1 = $5_1 + 112 | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   $248_1 = $4_1;
   $248$hi = i64toi32_i32$2;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 168 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 172 | 0) >> 2] | 0;
   $250_1 = i64toi32_i32$5;
   $250$hi = i64toi32_i32$2;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 160 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 164 | 0) >> 2] | 0;
   $10_1 = i64toi32_i32$2;
   $10$hi = i64toi32_i32$5;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 152 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 156 | 0) >> 2] | 0;
   $255_1 = i64toi32_i32$5;
   $255$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$5 = $255$hi;
   i64toi32_i32$3 = $255_1;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$3 = $10_1;
   $259_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   $260$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $250$hi;
   i64toi32_i32$3 = $250_1;
   i64toi32_i32$1 = $260$hi;
   i64toi32_i32$4 = $259_1;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $261$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 1;
   $263_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   $264$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $261$hi;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$0 = $264$hi;
   i64toi32_i32$3 = $263_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $265$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $265$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
   $266$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $248$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = $266$hi;
   i64toi32_i32$3 = 0;
   $363($247_1 | 0, $248_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0;
   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
   $270$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $270$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = 0;
   $363($5_1 + 128 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $6_1 = $8_1 + ($7_1 - $6_1 | 0) | 0;
   block12 : {
    block11 : {
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$1;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
      $344_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
      $344_1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
     }
     $16_1 = $344_1;
     $16$hi = i64toi32_i32$1;
     $281_1 = $16_1;
     $281$hi = i64toi32_i32$1;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 128 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 132 | 0) >> 2] | 0;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $346_1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
      $346_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
     }
     $284_1 = $346_1;
     $284$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 136 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 140 | 0) >> 2] | 0;
     $17_1 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
      $347_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
      $347_1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
     }
     $288$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $284$hi;
     i64toi32_i32$3 = $284_1;
     i64toi32_i32$2 = $288$hi;
     i64toi32_i32$0 = $347_1;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $289_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $289$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $281$hi;
     i64toi32_i32$1 = $281_1;
     i64toi32_i32$3 = $289$hi;
     i64toi32_i32$0 = $289_1;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $13_1 = i64toi32_i32$5;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$1 = -1;
     i64toi32_i32$0 = -13927;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $18_1 = i64toi32_i32$3;
     $18$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $348_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $348_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $2_1 = $348_1;
     $2$hi = i64toi32_i32$2;
     $295_1 = $2_1;
     $295$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$4 = 65536;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $19_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $19$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $19_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
      $349_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $349_1 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
     }
     $20_1 = $349_1;
     $20$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $20_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $350_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $350_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $4_1 = $350_1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $295$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = __wasm_i64_mul($295_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$4;
     $21$hi = i64toi32_i32$2;
     $304_1 = i64toi32_i32$4;
     $304$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $352_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $352_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $22_1 = $352_1;
     $22$hi = i64toi32_i32$4;
     i64toi32_i32$2 = $22_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $353_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
      $353_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
     }
     $10_1 = $353_1;
     $10$hi = i64toi32_i32$5;
     $309_1 = $10_1;
     $309$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 120 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 124 | 0) >> 2] | 0;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $354_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $354_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $312_1 = $354_1;
     $312$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$2 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $356_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $356_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
     }
     $314$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $312$hi;
     i64toi32_i32$5 = $312_1;
     i64toi32_i32$2 = $314$hi;
     i64toi32_i32$0 = $356_1;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $315_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $315$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$4 = $17_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 63;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $357_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $357_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $317$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $315$hi;
     i64toi32_i32$2 = $315_1;
     i64toi32_i32$4 = $317$hi;
     i64toi32_i32$0 = $357_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $318$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$0 = $16_1;
     $321_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $322$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $318$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $322$hi;
     i64toi32_i32$2 = $321_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $323$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$5 = $18_1;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$2 = $13_1;
     $326_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $327$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $323$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = $327$hi;
     i64toi32_i32$0 = $326_1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $15_1 = i64toi32_i32$1;
     $15$hi = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $358_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
      $358_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
     }
     $13_1 = $358_1;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $309$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = __wasm_i64_mul($309_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $333_1 = i64toi32_i32$4;
     $333$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $304$hi;
     i64toi32_i32$3 = $304_1;
     i64toi32_i32$4 = $333$hi;
     i64toi32_i32$0 = $333_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$5 = 0;
     $338_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$1;
     $339_1 = i64toi32_i32$2;
     $339$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$0 = $15_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $15_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $15$hi = i64toi32_i32$1;
     $342_1 = $15_1;
     $342$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 63;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $359_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $359_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
     }
     $23_1 = $359_1;
     $23$hi = i64toi32_i32$0;
     $345_1 = $23_1;
     $345$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = $11_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $362_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $362_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $345$hi;
     i64toi32_i32$0 = $345_1;
     i64toi32_i32$1 = $347$hi;
     i64toi32_i32$3 = $362_1;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $342$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = __wasm_i64_mul($342_1 | 0, i64toi32_i32$0 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $351_1 = i64toi32_i32$5;
     $351$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $339$hi;
     i64toi32_i32$1 = $339_1;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$3 = $351_1;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17_1 = i64toi32_i32$4;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$1 = $16$hi;
     i64toi32_i32$3 = $16_1;
     $355_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $356$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338_1;
     i64toi32_i32$2 = $356$hi;
     i64toi32_i32$1 = $355_1;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($13_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $360_1 = i64toi32_i32$3;
     $360$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $357$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$3 = $360$hi;
     i64toi32_i32$1 = $360_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $361_1 = i64toi32_i32$2;
     $361$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$0;
     $21$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = __wasm_i64_mul($11_1 | 0, i64toi32_i32$5 | 0, $13_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $368_1 = i64toi32_i32$0;
     $368$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$4 = $21_1;
     i64toi32_i32$0 = $368$hi;
     i64toi32_i32$1 = $368_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $16_1 = i64toi32_i32$3;
     $16$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$1 = $21_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $363_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $363_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $374_1 = $363_1;
     $374$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$5 = $16_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $364_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $364_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $374$hi;
     i64toi32_i32$2 = $374_1;
     i64toi32_i32$5 = $376$hi;
     i64toi32_i32$4 = $364_1;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $377_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $377$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $361$hi;
     i64toi32_i32$1 = $361_1;
     i64toi32_i32$2 = $377$hi;
     i64toi32_i32$4 = $377_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $378_1 = i64toi32_i32$0;
     $378$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $17$hi;
     $379_1 = $17_1;
     $379$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$5 = $16_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
      $365_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $365_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     }
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $379$hi;
     i64toi32_i32$3 = $379_1;
     i64toi32_i32$5 = $381$hi;
     i64toi32_i32$4 = $365_1;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $16_1 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$4 = $17_1;
     $385_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $386$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $378$hi;
     i64toi32_i32$4 = $378_1;
     i64toi32_i32$0 = $386$hi;
     i64toi32_i32$3 = $385_1;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $387_1 = i64toi32_i32$5;
     $387$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     $388_1 = $16_1;
     $388$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $18$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$4 | 0, $11_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $21_1 = i64toi32_i32$1;
     $21$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$4 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $397_1 = i64toi32_i32$1;
     $397$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$2 = $21_1;
     i64toi32_i32$1 = $397$hi;
     i64toi32_i32$3 = $397_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $21$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$3 = $21_1;
     i64toi32_i32$4 = 0;
     $402_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $402$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$3 = $22_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -2;
     i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
     $21_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $21$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $21_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $408_1 = i64toi32_i32$3;
     $408$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = $408$hi;
     i64toi32_i32$2 = $408_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $24_1 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$2 = $17_1;
     $412_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $413$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $402$hi;
     i64toi32_i32$2 = $402_1;
     i64toi32_i32$0 = $413$hi;
     i64toi32_i32$4 = $412_1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $414$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $388$hi;
     i64toi32_i32$5 = $388_1;
     i64toi32_i32$2 = $414$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $17_1 = i64toi32_i32$0;
     $17$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $17$hi;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$4 = $16_1;
     $418_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $419$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $387$hi;
     i64toi32_i32$4 = $387_1;
     i64toi32_i32$3 = $419$hi;
     i64toi32_i32$5 = $418_1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $420_1 = i64toi32_i32$2;
     $420$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     $421_1 = $17_1;
     $421$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $16_1 = i64toi32_i32$4;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$0 = $13$hi;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = __wasm_i64_mul($21_1 | 0, i64toi32_i32$0 | 0, $13_1 | 0, i64toi32_i32$4 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $428_1 = i64toi32_i32$4;
     $428$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$1 = $16_1;
     i64toi32_i32$4 = $428$hi;
     i64toi32_i32$5 = $428_1;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $11_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $433_1 = i64toi32_i32$1;
     $433$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$1 = $433$hi;
     i64toi32_i32$5 = $433_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $11_1 = i64toi32_i32$4;
     $11$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $438_1 = i64toi32_i32$0;
     $438$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$5 = $438_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $13_1 = i64toi32_i32$1;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $366_1 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $366_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $441_1 = $366_1;
     $441$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = $4_1;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$5 = $16_1;
     $444_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $445$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$5 = $11_1;
     i64toi32_i32$3 = $4_1;
     $448_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $449$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $445$hi;
     i64toi32_i32$3 = $444_1;
     i64toi32_i32$4 = $449$hi;
     i64toi32_i32$2 = $448_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $450$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$5 = $13_1;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$2 = $11_1;
     $453_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $454$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $450$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$3 = $453_1;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $367_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
      $367_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $456$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $441$hi;
     i64toi32_i32$0 = $441_1;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$3 = $367_1;
     i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $457_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $457$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $421$hi;
     i64toi32_i32$2 = $421_1;
     i64toi32_i32$0 = $457$hi;
     i64toi32_i32$3 = $457_1;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4_1 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = $17_1;
     $461_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $462$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $420$hi;
     i64toi32_i32$3 = $420_1;
     i64toi32_i32$4 = $462$hi;
     i64toi32_i32$2 = $461_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $463_1 = i64toi32_i32$0;
     $463$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     $464_1 = $4_1;
     $464$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $24$hi;
     $465_1 = $24_1;
     $465$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $21_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $472_1 = i64toi32_i32$3;
     $472$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$5 = $2_1;
     i64toi32_i32$3 = $472$hi;
     i64toi32_i32$2 = $472_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $11_1 = i64toi32_i32$4;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $369_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $369_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $475_1 = $369_1;
     $475$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $478_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $478_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $370_1 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $370_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     }
     $480$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $475$hi;
     i64toi32_i32$0 = $475_1;
     i64toi32_i32$2 = $480$hi;
     i64toi32_i32$1 = $370_1;
     i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $481_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $481$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $465$hi;
     i64toi32_i32$5 = $465_1;
     i64toi32_i32$0 = $481$hi;
     i64toi32_i32$1 = $481_1;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $24$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$1 = $24_1;
     $485_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $486_1 = $485_1;
     $486$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$4;
     $487_1 = i64toi32_i32$3;
     $487$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$1 = $13_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $371_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
      $371_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $489$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $487$hi;
     i64toi32_i32$2 = $487_1;
     i64toi32_i32$1 = $489$hi;
     i64toi32_i32$5 = $371_1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $490$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $490$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $492_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $493$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $486$hi;
     i64toi32_i32$5 = $486_1;
     i64toi32_i32$3 = $493$hi;
     i64toi32_i32$2 = $492_1;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $494$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $464$hi;
     i64toi32_i32$4 = $464_1;
     i64toi32_i32$5 = $494$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $2_1 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$2 = $4_1;
     $498_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $499$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $463$hi;
     i64toi32_i32$2 = $463_1;
     i64toi32_i32$1 = $499$hi;
     i64toi32_i32$4 = $498_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $4_1 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$2 = 131071;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break block11
     }
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$0 = $20$hi;
     i64toi32_i32$4 = $20_1;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$2 = $23_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $19_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $19$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $14$hi;
     $363($5_1 + 80 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$4 = $1_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 49;
     i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
      $372_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$1 | 0) | 0;
      $372_1 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     }
     $513$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 88 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 92 | 0) >> 2] | 0;
     $515_1 = i64toi32_i32$0;
     $515$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $513$hi;
     i64toi32_i32$2 = $372_1;
     i64toi32_i32$0 = $515$hi;
     i64toi32_i32$3 = $515_1;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
     $516$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     $520_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$4 = 0;
     $521$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $516$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = $521$hi;
     i64toi32_i32$5 = $520_1;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$1;
     $6_1 = $6_1 + 16382 | 0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$2;
     $11$hi = i64toi32_i32$0;
     break block12;
    }
    $528_1 = $5_1 + 96 | 0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $373_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     $373_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
    }
    $530_1 = $373_1;
    $530$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     $375_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
     $375_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    }
    $532$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $530$hi;
    i64toi32_i32$4 = $530_1;
    i64toi32_i32$0 = $532$hi;
    i64toi32_i32$5 = $375_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $2$hi = i64toi32_i32$0;
    $534_1 = $2_1;
    $534$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $376_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     $376_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
    }
    $4_1 = $376_1;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $14$hi;
    i64toi32_i32$4 = $534$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    $363($528_1 | 0, $534_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$1 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 48;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     $380_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $380_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
    }
    $541$hi = i64toi32_i32$0;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 104 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 108 | 0) >> 2] | 0;
    $543_1 = i64toi32_i32$0;
    $543$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $541$hi;
    i64toi32_i32$5 = $380_1;
    i64toi32_i32$0 = $543$hi;
    i64toi32_i32$4 = $543_1;
    i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    $544$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 100 | 0) >> 2] | 0;
    $11_1 = i64toi32_i32$2;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$1 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 0;
    $548_1 = (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$1 = 0;
    $549$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $544$hi;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$5 = $549$hi;
    i64toi32_i32$2 = $548_1;
    i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$3;
    $6_1 = $6_1 + 16383 | 0;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
    $11_1 = i64toi32_i32$5;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    $22_1 = $1_1;
    $22$hi = i64toi32_i32$0;
   }
   block13 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break block13
    }
    i64toi32_i32$0 = $12$hi;
    i64toi32_i32$3 = $12_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $12_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $12$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break block3;
   }
   block15 : {
    block14 : {
     if (($6_1 | 0) < (1 | 0)) {
      break block14
     }
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$0 = $10_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $381_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $381_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $563_1 = $381_1;
     $563$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$1 = $11_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $382_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      $382_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $565$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $563$hi;
     i64toi32_i32$3 = $563_1;
     i64toi32_i32$1 = $565$hi;
     i64toi32_i32$2 = $382_1;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $1_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 48;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $383_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $383_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $569$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$0 = 65535;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $571_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $571$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $569$hi;
     i64toi32_i32$3 = $383_1;
     i64toi32_i32$1 = $571$hi;
     i64toi32_i32$2 = $571_1;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $10_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$0 = $11_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $384_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $384_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4_1 = $384_1;
     $4$hi = i64toi32_i32$3;
     break block15;
    }
    block16 : {
     if (($6_1 | 0) > (-113 | 0)) {
      break block16
     }
     i64toi32_i32$3 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$3;
     break block3;
    }
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $4$hi;
    $361($5_1 + 64 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 1 - $6_1 | 0 | 0);
    i64toi32_i32$0 = $22$hi;
    i64toi32_i32$0 = $19$hi;
    i64toi32_i32$0 = $22$hi;
    i64toi32_i32$3 = $19$hi;
    $351($5_1 + 48 | 0 | 0, $22_1 | 0, i64toi32_i32$0 | 0, $19_1 | 0, i64toi32_i32$3 | 0, $6_1 + 112 | 0 | 0);
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $14$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $10$hi;
    $363($5_1 + 32 | 0 | 0, $3_1 | 0, i64toi32_i32$3 | 0, $14_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 56 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 60 | 0) >> 2] | 0;
    $600_1 = i64toi32_i32$2;
    $600$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 40 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 44 | 0) >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $386_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $386_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $603_1 = $386_1;
    $603$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
    $1_1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $389_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $389_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $607$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $603$hi;
    i64toi32_i32$0 = $603_1;
    i64toi32_i32$2 = $607$hi;
    i64toi32_i32$3 = $389_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $608_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $608$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $600$hi;
    i64toi32_i32$1 = $600_1;
    i64toi32_i32$0 = $608$hi;
    i64toi32_i32$3 = $608_1;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    $609_1 = i64toi32_i32$4;
    $609$hi = i64toi32_i32$5;
    i64toi32_i32$2 = $5_1;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    $612_1 = i64toi32_i32$5;
    $612$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $390_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $390_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $11_1 = $390_1;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $612$hi;
    i64toi32_i32$1 = $612_1;
    i64toi32_i32$2 = $11$hi;
    i64toi32_i32$3 = $11_1;
    $616_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $617$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $609$hi;
    i64toi32_i32$3 = $609_1;
    i64toi32_i32$5 = $617$hi;
    i64toi32_i32$2 = $616_1;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
    $1_1 = i64toi32_i32$0;
    $1$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$3 = $11$hi;
    i64toi32_i32$2 = $11_1;
    i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$0;
   }
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   $363($5_1 + 16 | 0 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$1 | 0, 3 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 0;
   $363($5_1 | 0, $3_1 | 0, i64toi32_i32$2 | 0, $14_1 | 0, i64toi32_i32$4 | 0, 5 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$0 = $10$hi;
   $629_1 = $10_1;
   $629$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   $630_1 = $2_1;
   $630$hi = i64toi32_i32$0;
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $11_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $11$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$0 = $11_1;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$2 = $3_1;
   $638_1 = i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = $11$hi;
   i64toi32_i32$0 = $11_1;
   $642_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   $643$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$1 = $643$hi;
   i64toi32_i32$5 = $642_1;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $1_1 = i64toi32_i32$4;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$0 = $14$hi;
   i64toi32_i32$5 = $14_1;
   $647_1 = i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = $14_1;
   $651_1 = (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0 ? $638_1 : $647_1;
   i64toi32_i32$5 = 0;
   $652$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $630$hi;
   i64toi32_i32$0 = $630_1;
   i64toi32_i32$2 = $652$hi;
   i64toi32_i32$3 = $651_1;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$3 = $2_1;
   $656_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = 0;
   $657$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $629$hi;
   i64toi32_i32$3 = $629_1;
   i64toi32_i32$4 = $657$hi;
   i64toi32_i32$0 = $656_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $2_1 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$1;
   $659_1 = i64toi32_i32$2;
   $659$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$0 = 0;
   $662_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
   $665_1 = i64toi32_i32$5;
   $665$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$5 = $665$hi;
   i64toi32_i32$3 = $665_1;
   $666_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] | 0;
   $2_1 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$5 = $2_1;
   $671_1 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$0 = $2_1;
   $676_1 = $662_1 & ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $666_1 : $671_1) | 0;
   i64toi32_i32$5 = 0;
   $677$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$0 = $3_1;
   i64toi32_i32$3 = $677$hi;
   i64toi32_i32$1 = $676_1;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $2_1 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$1 = $3_1;
   $681_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$5 = 0;
   $682$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $659$hi;
   i64toi32_i32$1 = $659_1;
   i64toi32_i32$2 = $682$hi;
   i64toi32_i32$0 = $681_1;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$4;
   $684_1 = i64toi32_i32$3;
   $684$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   $687_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $690_1 = i64toi32_i32$5;
   $690$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$5 = $690$hi;
   i64toi32_i32$1 = $690_1;
   $691_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   $696_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = $4_1;
   $701_1 = $687_1 & ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0 ? $691_1 : $696_1) | 0;
   i64toi32_i32$5 = 0;
   $702$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = $702$hi;
   i64toi32_i32$4 = $701_1;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $1_1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $706_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$5 = 0;
   $707$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $684$hi;
   i64toi32_i32$4 = $684_1;
   i64toi32_i32$3 = $707$hi;
   i64toi32_i32$0 = $706_1;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $708$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$2 = $708$hi;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$0 = $12_1;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $12_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $12$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $12$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $12_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$4;
  global$0 = $5_1 + 336 | 0;
 }
 
 function $355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $5$hi = 0, $6_1 = 0, $6$hi = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $4_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $3_1 = 0, $33_1 = 0, $4$hi = 0, $35_1 = 0, $36_1 = 0, $36$hi = 0, $52_1 = 0, $54$hi = 0, $56_1 = 0, $56$hi = 0, $57$hi = 0, $59_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  wasm2js_scratch_store_f64(+$1_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 1048575;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $5$hi = i64toi32_i32$1;
  block2 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $27_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $27_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $27_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 2047;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $6_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $6$hi = i64toi32_i32$0;
    if (!($6_1 | i64toi32_i32$0 | 0)) {
     break block
    }
    block1 : {
     i64toi32_i32$2 = $6_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 2047;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0) {
      break block1
     }
     i64toi32_i32$2 = $5$hi;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 4;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $28_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $28_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $28_1;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$2 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 60;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $29_1 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $5_1 = $29_1;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$0 = $6_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 15360;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $6_1 = i64toi32_i32$4;
     $6$hi = i64toi32_i32$5;
     break block2;
    }
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $30_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $30_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
    }
    $7_1 = $30_1;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
     $31_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
     $31_1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    }
    $5_1 = $31_1;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6_1 = 32767;
    $6$hi = i64toi32_i32$3;
    break block2;
   }
   block3 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break block3
    }
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    break block2;
   }
   $35_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $36_1 = $5_1;
   $36$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $5_1;
   i64toi32_i32$1 = Math_clz32(i64toi32_i32$3);
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$1 | 0) == (32 | 0)) {
    $32_1 = Math_clz32(i64toi32_i32$5) + 32 | 0
   } else {
    $32_1 = i64toi32_i32$1
   }
   $3_1 = $32_1;
   i64toi32_i32$0 = $36$hi;
   i64toi32_i32$3 = 0;
   $351($35_1 | 0, $36_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $7_1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   $6_1 = 15372 - $3_1 | 0;
   $6$hi = i64toi32_i32$3;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$5;
  $52_1 = i64toi32_i32$3;
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$0 = $6_1;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = 48;
  i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $33_1 = 0;
  } else {
   i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $33_1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $54$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
  $56_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $54$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = $56$hi;
  i64toi32_i32$1 = $56_1;
  i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
  $57$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $7$hi;
  i64toi32_i32$5 = $57$hi;
  i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $59_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$0 = $52_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $59_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4_1 = 0, $2_1 = 0, $7$hi = 0, $7_1 = 0, $8_1 = 0, $8$hi = 0, $3_1 = 0, $5_1 = 0, $6_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $36_1 = 0, $50_1 = 0, $53_1 = 0, $53$hi = 0, $57$hi = 0, $58$hi = 0, $60_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $4_1 = $3_1 & 8388607 | 0;
  block2 : {
   block : {
    $5_1 = $3_1 >>> 23 | 0;
    $6_1 = $5_1 & 255 | 0;
    if (!$6_1) {
     break block
    }
    block1 : {
     if (($6_1 | 0) == (255 | 0)) {
      break block1
     }
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = $4_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 25;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
      $23_1 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $23_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     }
     $7_1 = $23_1;
     $7$hi = i64toi32_i32$1;
     $4_1 = ($5_1 & 255 | 0) + 16256 | 0;
     i64toi32_i32$1 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$1;
     break block2;
    }
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $24_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $24_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $7_1 = $24_1;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$2;
    $4_1 = 32767;
    break block2;
   }
   block3 : {
    if ($4_1) {
     break block3
    }
    i64toi32_i32$2 = 0;
    $8_1 = 0;
    $8$hi = i64toi32_i32$2;
    $4_1 = 0;
    i64toi32_i32$2 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$2;
    break block2;
   }
   i64toi32_i32$2 = 0;
   $36_1 = $4_1;
   $4_1 = Math_clz32($4_1);
   i64toi32_i32$0 = 0;
   $351($2_1 | 0, $36_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4_1 + 81 | 0 | 0);
   $4_1 = 16265 - $4_1 | 0;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
   $7_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $8_1 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $8$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $50_1 = i64toi32_i32$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $25_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $25_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $53_1 = $25_1;
  $53$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $3_1 >>> 31 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $26_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $26_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $57$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $53$hi;
  i64toi32_i32$0 = $53_1;
  i64toi32_i32$1 = $57$hi;
  i64toi32_i32$3 = $26_1;
  i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
  $58$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$1 = $58$hi;
  i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $60_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $50_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $60_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $357($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $5_1 = 0, $5$hi = 0, $21_1 = 0, $19_1 = 0, $26_1 = 0, $26$hi = 0, $30$hi = 0, $31$hi = 0, $34_1 = 0, $34$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ($1_1) {
     break block
    }
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$0;
    break block1;
   }
   $3_1 = $1_1 >> 31 | 0;
   $3_1 = ($1_1 ^ $3_1 | 0) - $3_1 | 0;
   i64toi32_i32$0 = 0;
   $19_1 = $3_1;
   $3_1 = Math_clz32($3_1);
   i64toi32_i32$1 = 0;
   $351($2_1 | 0, $19_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $3_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $26_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $26$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $3_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $30$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $26$hi;
   i64toi32_i32$1 = $26_1;
   i64toi32_i32$0 = $30$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $31$hi = i64toi32_i32$5;
   i64toi32_i32$0 = ($1_1 | 0) < (0 | 0);
   i64toi32_i32$5 = -2147483648;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 ? 0 : 0;
   i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
   $34_1 = i64toi32_i32$3;
   $34$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $31$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$3 = $34$hi;
   i64toi32_i32$5 = $34_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $5_1;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ($1_1) {
     break block
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break block1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $351($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, 112 - ($1_1 ^ 31 | 0) | 0 | 0);
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $359() {
  return 0 | 0;
 }
 
 function $360() {
  return 0 | 0;
 }
 
 function $361($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  block1 : {
   block : {
    if (!($3_1 & 64 | 0)) {
     break block
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break block1;
   }
   if (!$3_1) {
    break block1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $362($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $14$hi = 0, $11$hi = 0, $11_1 = 0, $14_1 = 0, $5_1 = 0, $10$hi = 0, $12$hi = 0, $6_1 = 0, $18$hi = 0, $12_1 = 0, $10_1 = 0, $8_1 = 0, $15$hi = 0, $18_1 = 0, $7_1 = 0, $16$hi = 0, $17$hi = 0, $20$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0, $15_1 = 0, $21$hi = 0, $9_1 = 0, $19$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $222_1 = 0, $224_1 = 0, $225_1 = 0, $226_1 = 0, $227_1 = 0, $228_1 = 0, $229_1 = 0, $230_1 = 0, $231_1 = 0, $233_1 = 0, $19_1 = 0, $235_1 = 0, $236_1 = 0, $21_1 = 0, $237_1 = 0, $238_1 = 0, $22_1 = 0, $239_1 = 0, $241_1 = 0, $24_1 = 0, $242_1 = 0, $243_1 = 0, $244_1 = 0, $246_1 = 0, $247_1 = 0, $248_1 = 0, $249_1 = 0, $250_1 = 0, $251_1 = 0, $252_1 = 0, $253_1 = 0, $254_1 = 0, $255_1 = 0, $256_1 = 0, $257_1 = 0, $258_1 = 0, $53_1 = 0, $57_1 = 0, $64_1 = 0, $68_1 = 0, $77_1 = 0, $77$hi = 0, $89_1 = 0, $89$hi = 0, $111_1 = 0, $112_1 = 0, $112$hi = 0, $113_1 = 0, $113$hi = 0, $120$hi = 0, $122_1 = 0, $122$hi = 0, $138_1 = 0, $139_1 = 0, $139$hi = 0, $140_1 = 0, $140$hi = 0, $147$hi = 0, $149_1 = 0, $149$hi = 0, $166_1 = 0, $166$hi = 0, $171_1 = 0, $171$hi = 0, $178_1 = 0, $178$hi = 0, $185_1 = 0, $185$hi = 0, $190_1 = 0, $190$hi = 0, $199_1 = 0, $199$hi = 0, $201_1 = 0, $201$hi = 0, $203_1 = 0, $203$hi = 0, $211_1 = 0, $211$hi = 0, $213_1 = 0, $213$hi = 0, $215_1 = 0, $215$hi = 0, $218_1 = 0, $220$hi = 0, $221_1 = 0, $221$hi = 0, $223_1 = 0, $223$hi = 0, $232_1 = 0, $232$hi = 0, $234_1 = 0, $234$hi = 0, $240_1 = 0, $240$hi = 0, $245_1 = 0, $245$hi = 0, $248$hi = 0, $23_1 = 0, $264_1 = 0, $264$hi = 0, $268_1 = 0, $269_1 = 0, $269$hi = 0, $273_1 = 0, $273$hi = 0, $277_1 = 0, $278$hi = 0, $279$hi = 0, $282_1 = 0, $282$hi = 0, $283_1 = 0, $283$hi = 0, $284_1 = 0, $284$hi = 0, $287_1 = 0, $288$hi = 0, $291_1 = 0, $292$hi = 0, $293$hi = 0, $297_1 = 0, $298$hi = 0, $299_1 = 0, $299$hi = 0, $306_1 = 0, $306$hi = 0, $310_1 = 0, $312_1 = 0, $312$hi = 0, $314$hi = 0, $315_1 = 0, $315$hi = 0, $316_1 = 0, $316$hi = 0, $317_1 = 0, $317$hi = 0, $319$hi = 0, $323_1 = 0, $324$hi = 0, $325_1 = 0, $325$hi = 0, $326_1 = 0, $326$hi = 0, $328_1 = 0, $328$hi = 0, $331_1 = 0, $332$hi = 0, $335_1 = 0, $336$hi = 0, $337$hi = 0, $340_1 = 0, $341$hi = 0, $343$hi = 0, $344_1 = 0, $344$hi = 0, $348_1 = 0, $349$hi = 0, $350_1 = 0, $350$hi = 0, $351_1 = 0, $351$hi = 0, $354_1 = 0, $355$hi = 0, $358_1 = 0, $359$hi = 0, $360$hi = 0, $364_1 = 0, $365$hi = 0, $375_1 = 0, $375$hi = 0, $377$hi = 0, $380_1 = 0, $380$hi = 0, $382$hi = 0, $386_1 = 0, $386$hi = 0, $388$hi = 0, $422_1 = 0, $422$hi = 0, $424_1 = 0, $424$hi = 0, $425_1 = 0, $425$hi = 0, $427_1 = 0, $427$hi = 0, $429_1 = 0, $429$hi = 0, $431_1 = 0, $432$hi = 0, $435_1 = 0, $435$hi = 0, $437_1 = 0, $437$hi = 0, $445$hi = 0, $447_1 = 0, $447$hi = 0, $453_1 = 0, $459_1 = 0, $459$hi = 0, $463_1 = 0, $464$hi = 0, $468_1 = 0, $468$hi = 0, $472_1 = 0, $472$hi = 0, $475_1 = 0, $475$hi = 0, $479_1 = 0, $480$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $10_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $12_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $12_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $222_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $222_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $13_1 = $222_1;
  $13$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $224_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $224_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $224_1 & 32767 | 0;
  block3 : {
   block1 : {
    block : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $225_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $225_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $225_1 & 32767 | 0;
     if (($7_1 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break block
     }
     $8_1 = 0;
     if (($6_1 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break block1
     }
    }
    block2 : {
     i64toi32_i32$1 = $1$hi;
     $53_1 = !($1_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $14_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53_1 : $57_1) {
      break block2
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$1;
     break block3;
    }
    block4 : {
     i64toi32_i32$1 = $3$hi;
     $64_1 = !($3_1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64_1 : $68_1) {
      break block4
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block5 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break block5
     }
     block6 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3_1;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break block6
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$2;
      break block3;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     break block3;
    }
    block7 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89_1 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block7
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1_1;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     block8 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2_1 | i64toi32_i32$2 | 0)) {
       break block8
      }
      i64toi32_i32$2 = 2147450880;
      $11_1 = 0;
      $11$hi = i64toi32_i32$2;
      break block3;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$3 = $11_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11_1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $11$hi = i64toi32_i32$1;
     break block3;
    }
    block9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$3 = $14$hi;
     i64toi32_i32$0 = $14_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break block9
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    block10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break block10
     }
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break block3;
    }
    $8_1 = 0;
    block11 : {
     i64toi32_i32$1 = $14$hi;
     i64toi32_i32$2 = $14_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break block11
     }
     $111_1 = $5_1 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112_1 = $1_1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     $113_1 = $12_1;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $12$hi;
     $8_1 = !($12_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $12_1;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $226_1 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $226_1 = i64toi32_i32$2
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $8_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$1 ? 64 : 0;
     i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$0;
     $122_1 = i64toi32_i32$2;
     $122$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $120$hi;
     i64toi32_i32$1 = $226_1;
     i64toi32_i32$2 = $122$hi;
     i64toi32_i32$4 = $122_1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$0;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$1 = $113$hi;
     $351($111_1 | 0, $112_1 | 0, i64toi32_i32$5 | 0, $113_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 88 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 92 | 0) >> 2] | 0;
     $12_1 = i64toi32_i32$1;
     $12$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $227_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $227_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $13_1 = $227_1;
     $13$hi = i64toi32_i32$1;
     i64toi32_i32$5 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$4 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
     break block1
    }
    $138_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $139_1 = $3_1;
    $139$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $10$hi;
    $140_1 = $10_1;
    $140$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $10$hi;
    $9_1 = !($10_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$2 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$1 = i64toi32_i32$2 ? $3_1 : $10_1;
    i64toi32_i32$4 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$3;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$4);
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $228_1 = Math_clz32(i64toi32_i32$1) + 32 | 0
    } else {
     $228_1 = i64toi32_i32$5
    }
    $147$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $9_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = i64toi32_i32$3 ? 64 : 0;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$4;
    $149_1 = i64toi32_i32$5;
    $149$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $147$hi;
    i64toi32_i32$3 = $228_1;
    i64toi32_i32$5 = $149$hi;
    i64toi32_i32$2 = $149_1;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$0 = $139$hi;
    i64toi32_i32$3 = $140$hi;
    $351($138_1 | 0, $139_1 | 0, i64toi32_i32$0 | 0, $140_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] | 0;
    $10_1 = i64toi32_i32$3;
    $10$hi = i64toi32_i32$0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$1 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 15;
   i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    $229_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
    $229_1 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
   }
   $14_1 = $229_1;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$3 = $14_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = -32768;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $2$hi = i64toi32_i32$1;
   $166_1 = $2_1;
   $166$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $230_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    $230_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
   }
   $4_1 = $230_1;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $166$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($166_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15_1 = i64toi32_i32$0;
   $15$hi = i64toi32_i32$3;
   $171_1 = i64toi32_i32$0;
   $171$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $231_1 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    $231_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$5 | 0) | 0;
   }
   $14_1 = $231_1;
   $14$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $178_1 = i64toi32_i32$3;
   $178$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $171$hi;
   i64toi32_i32$0 = $171_1;
   i64toi32_i32$3 = $178$hi;
   i64toi32_i32$2 = $178_1;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $16_1 = i64toi32_i32$5;
   $16$hi = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 32;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
    $233_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $233_1 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
   }
   $17_1 = $233_1;
   $17$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $185_1 = i64toi32_i32$1;
   $185$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $17$hi;
   i64toi32_i32$4 = $17_1;
   i64toi32_i32$1 = $185$hi;
   i64toi32_i32$2 = $185_1;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $18_1 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $17$hi;
   i64toi32_i32$5 = $18$hi;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$4 = $17$hi;
   i64toi32_i32$2 = $17_1;
   i64toi32_i32$0 = 0;
   $190_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   $190$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $12_1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $12$hi;
   i64toi32_i32$2 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$2;
   $19$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $199_1 = i64toi32_i32$2;
   $199$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $19$hi;
   i64toi32_i32$0 = $19_1;
   i64toi32_i32$2 = $199$hi;
   i64toi32_i32$4 = $199_1;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17_1 = i64toi32_i32$1;
   $17$hi = i64toi32_i32$3;
   $201_1 = i64toi32_i32$1;
   $201$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 49;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $235_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $235_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   $203_1 = $235_1;
   $203$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    $236_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $236_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
   }
   $20_1 = $236_1;
   $20$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $203$hi;
   i64toi32_i32$0 = $203_1;
   i64toi32_i32$3 = $20$hi;
   i64toi32_i32$4 = $20_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $211_1 = i64toi32_i32$5;
   $211$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $201$hi;
   i64toi32_i32$3 = $201_1;
   i64toi32_i32$5 = $211$hi;
   i64toi32_i32$4 = $211_1;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $21_1 = i64toi32_i32$2;
   $21$hi = i64toi32_i32$1;
   $213_1 = i64toi32_i32$2;
   $213$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $16$hi;
   i64toi32_i32$0 = $16_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $237_1 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    $237_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
   }
   $215_1 = $237_1;
   $215$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$1 = $16_1;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$4 = $15_1;
   $218_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $218_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 32;
   i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
    $238_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $238_1 = i64toi32_i32$4 << i64toi32_i32$5 | 0;
   }
   $220$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $215$hi;
   i64toi32_i32$1 = $215_1;
   i64toi32_i32$4 = $220$hi;
   i64toi32_i32$0 = $238_1;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $221_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $221$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $213$hi;
   i64toi32_i32$3 = $213_1;
   i64toi32_i32$1 = $221$hi;
   i64toi32_i32$0 = $221_1;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $16_1 = i64toi32_i32$5;
   $16$hi = i64toi32_i32$2;
   $223_1 = i64toi32_i32$5;
   $223$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$4 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $10$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$4 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $232_1 = i64toi32_i32$4;
   $232$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $22$hi;
   i64toi32_i32$2 = $22_1;
   i64toi32_i32$4 = $232$hi;
   i64toi32_i32$0 = $232_1;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $13_1 = i64toi32_i32$1;
   $13$hi = i64toi32_i32$5;
   $234_1 = i64toi32_i32$1;
   $234$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 32;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $239_1 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    $239_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$5 = $239_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $1_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $240_1 = i64toi32_i32$5;
   $240$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $234$hi;
   i64toi32_i32$2 = $234_1;
   i64toi32_i32$5 = $240$hi;
   i64toi32_i32$0 = $240_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $15_1 = i64toi32_i32$4;
   $15$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $245_1 = i64toi32_i32$2;
   $245$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$2 = $245$hi;
   i64toi32_i32$0 = $245_1;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $20_1 = i64toi32_i32$5;
   $20$hi = i64toi32_i32$4;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 32;
   i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $241_1 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $241_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $248$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $223$hi;
   i64toi32_i32$4 = $223_1;
   i64toi32_i32$1 = $248$hi;
   i64toi32_i32$0 = $241_1;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23_1 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $190$hi;
   i64toi32_i32$3 = $190_1;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   block13 : {
    block12 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $14$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = __wasm_i64_mul($14_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $264_1 = i64toi32_i32$3;
     $264$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24_1;
     i64toi32_i32$3 = $264$hi;
     i64toi32_i32$0 = $264_1;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4_1 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $24$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$0 = $24_1;
     $268_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $269_1 = $268_1;
     $269$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $273_1 = i64toi32_i32$1;
     $273$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$1 = $273$hi;
     i64toi32_i32$5 = $273_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $14_1 = i64toi32_i32$3;
     $14$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $14$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = $4_1;
     $277_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $278$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $269$hi;
     i64toi32_i32$5 = $269_1;
     i64toi32_i32$4 = $278$hi;
     i64toi32_i32$0 = $277_1;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $279$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $282_1 = i64toi32_i32$5;
     $282$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $279$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$5 = $282$hi;
     i64toi32_i32$0 = $282_1;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $283_1 = i64toi32_i32$4;
     $283$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $14$hi;
     $284_1 = $14_1;
     $284$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$2 = $19$hi;
     i64toi32_i32$0 = $19_1;
     $287_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $288$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$0 = $21_1;
     i64toi32_i32$2 = $17_1;
     $291_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $292$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $288$hi;
     i64toi32_i32$2 = $287_1;
     i64toi32_i32$3 = $292$hi;
     i64toi32_i32$1 = $291_1;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $293$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $284$hi;
     i64toi32_i32$0 = $284_1;
     i64toi32_i32$2 = $293$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$1 = $14_1;
     $297_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $298$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $283$hi;
     i64toi32_i32$1 = $283_1;
     i64toi32_i32$5 = $298$hi;
     i64toi32_i32$0 = $297_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $299_1 = i64toi32_i32$2;
     $299$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $10$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$3 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $306_1 = i64toi32_i32$1;
     $306$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$4 = $3_1;
     i64toi32_i32$1 = $306$hi;
     i64toi32_i32$0 = $306_1;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$0 = $3_1;
     $310_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = $310_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
      $242_1 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
      $242_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     }
     $312_1 = $242_1;
     $312$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $243_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $243_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $314$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$2 = $312_1;
     i64toi32_i32$3 = $314$hi;
     i64toi32_i32$4 = $243_1;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $315_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $315$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $299$hi;
     i64toi32_i32$0 = $299_1;
     i64toi32_i32$2 = $315$hi;
     i64toi32_i32$4 = $315_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $316_1 = i64toi32_i32$1;
     $316$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     $317_1 = $4_1;
     $317$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
      $244_1 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $244_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     }
     $319$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $317$hi;
     i64toi32_i32$5 = $317_1;
     i64toi32_i32$3 = $319$hi;
     i64toi32_i32$4 = $244_1;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$4 = $4_1;
     $323_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $324$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $316$hi;
     i64toi32_i32$4 = $316_1;
     i64toi32_i32$1 = $324$hi;
     i64toi32_i32$5 = $323_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $325_1 = i64toi32_i32$3;
     $325$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     $326_1 = $2_1;
     $326$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $20$hi;
     i64toi32_i32$0 = $20_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $246_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
      $246_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
     }
     $328_1 = $246_1;
     $328$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$5 = $22_1;
     $331_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $332$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $15_1;
     i64toi32_i32$0 = $13_1;
     $335_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $336$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $332$hi;
     i64toi32_i32$0 = $331_1;
     i64toi32_i32$2 = $336$hi;
     i64toi32_i32$4 = $335_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $337$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$5 = $20_1;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$4 = $15_1;
     $340_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $341$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $337$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$3 = $341$hi;
     i64toi32_i32$0 = $340_1;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $247_1 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$3 | 0) | 0;
      $247_1 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     }
     $343$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $328$hi;
     i64toi32_i32$1 = $328_1;
     i64toi32_i32$5 = $343$hi;
     i64toi32_i32$0 = $247_1;
     i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $344_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $344$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $326$hi;
     i64toi32_i32$4 = $326_1;
     i64toi32_i32$1 = $344$hi;
     i64toi32_i32$0 = $344_1;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4_1 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2_1;
     $348_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $349$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $325$hi;
     i64toi32_i32$0 = $325_1;
     i64toi32_i32$2 = $349$hi;
     i64toi32_i32$4 = $348_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $350_1 = i64toi32_i32$1;
     $350$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $351_1 = $4_1;
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$5 = $16_1;
     i64toi32_i32$0 = $21$hi;
     i64toi32_i32$4 = $21_1;
     $354_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $355$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$4 = $23_1;
     i64toi32_i32$0 = $16_1;
     $358_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $359$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $355$hi;
     i64toi32_i32$0 = $354_1;
     i64toi32_i32$5 = $359$hi;
     i64toi32_i32$3 = $358_1;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $360$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $351$hi;
     i64toi32_i32$4 = $351_1;
     i64toi32_i32$0 = $360$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4_1;
     $364_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $365$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $350$hi;
     i64toi32_i32$3 = $350_1;
     i64toi32_i32$2 = $365$hi;
     i64toi32_i32$4 = $364_1;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4_1 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$1 & i64toi32_i32$4 | 0 | i64toi32_i32$3 | 0)) {
      break block12
     }
     $6_1 = $6_1 + 1 | 0;
     break block13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$5 = $18_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $248_1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
     $248_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
    }
    $3_1 = $248_1;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $249_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $249_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $375_1 = $249_1;
    $375$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $250_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $250_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    $377$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $375$hi;
    i64toi32_i32$5 = $375_1;
    i64toi32_i32$1 = $377$hi;
    i64toi32_i32$4 = $250_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $251_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $251_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $380_1 = $251_1;
    $380$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $252_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $252_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    $382$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $380$hi;
    i64toi32_i32$5 = $380_1;
    i64toi32_i32$1 = $382$hi;
    i64toi32_i32$4 = $252_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $2_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $18$hi;
    i64toi32_i32$3 = $18_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $253_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $253_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $18_1 = $253_1;
    $18$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    $386_1 = $3_1;
    $386$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $254_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $254_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $388$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $386$hi;
    i64toi32_i32$5 = $386_1;
    i64toi32_i32$1 = $388$hi;
    i64toi32_i32$4 = $254_1;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$1;
   }
   block14 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break block14
    }
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $11_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $11_1 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $11$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$5;
    break block3;
   }
   block17 : {
    block15 : {
     if (($6_1 | 0) > (0 | 0)) {
      break block15
     }
     block16 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 > 127 >>> 0) {
       break block16
      }
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $1$hi;
      $6_1 = $6_1 + 127 | 0;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      $351($5_1 + 48 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $6_1 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$5 = $4$hi;
      $351($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$5 = $1$hi;
      i64toi32_i32$5 = $18$hi;
      i64toi32_i32$3 = $1$hi;
      $361($5_1 + 16 | 0 | 0, $18_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0);
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$5 = $4$hi;
      $361($5_1 | 0, $2_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
      $422_1 = i64toi32_i32$5;
      $422$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
      $424_1 = i64toi32_i32$3;
      $424$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $422$hi;
      i64toi32_i32$1 = $422_1;
      i64toi32_i32$3 = $424$hi;
      i64toi32_i32$4 = $424_1;
      i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
      $425_1 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $425$hi = i64toi32_i32$3;
      i64toi32_i32$5 = $5_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 48 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 52 | 0) >> 2] | 0;
      $427_1 = i64toi32_i32$3;
      $427$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$5 + 56 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 60 | 0) >> 2] | 0;
      $429_1 = i64toi32_i32$1;
      $429$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $427$hi;
      i64toi32_i32$5 = $427_1;
      i64toi32_i32$1 = $429$hi;
      i64toi32_i32$4 = $429_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 0;
      $431_1 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | 0;
      i64toi32_i32$3 = 0;
      $432$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $425$hi;
      i64toi32_i32$4 = $425_1;
      i64toi32_i32$1 = $432$hi;
      i64toi32_i32$5 = $431_1;
      i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
      $18_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
      $18$hi = i64toi32_i32$1;
      i64toi32_i32$3 = $5_1;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 40 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 44 | 0) >> 2] | 0;
      $435_1 = i64toi32_i32$1;
      $435$hi = i64toi32_i32$4;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] | 0;
      $437_1 = i64toi32_i32$4;
      $437$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $435$hi;
      i64toi32_i32$3 = $435_1;
      i64toi32_i32$4 = $437$hi;
      i64toi32_i32$5 = $437_1;
      i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
      $1_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
      $1$hi = i64toi32_i32$4;
      i64toi32_i32$1 = $5_1;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      $4_1 = i64toi32_i32$4;
      $4$hi = i64toi32_i32$3;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $2_1 = i64toi32_i32$3;
      $2$hi = i64toi32_i32$4;
      break block17;
     }
     i64toi32_i32$4 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$4;
     break block3;
    }
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = $6_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 48;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $255_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $255_1 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $445$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$1 = 65535;
    i64toi32_i32$5 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $447_1 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
    $447$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $445$hi;
    i64toi32_i32$3 = $255_1;
    i64toi32_i32$4 = $447$hi;
    i64toi32_i32$5 = $447_1;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
    $4_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $11_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $11$hi = i64toi32_i32$3;
   block18 : {
    i64toi32_i32$3 = $18$hi;
    $453_1 = !($18_1 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$5 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$1 | 0)) {
     $256_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$5 >>> 0) {
       $257_1 = 0
      } else {
       $257_1 = 1
      }
      $258_1 = $257_1;
     } else {
      $258_1 = 0
     }
     $256_1 = $258_1;
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $453_1 : $256_1) {
     break block18
    }
    i64toi32_i32$5 = $11$hi;
    $459_1 = $11_1;
    $459$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$1 = $2_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $1_1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$0;
    $463_1 = !(i64toi32_i32$2 | i64toi32_i32$0 | 0);
    i64toi32_i32$0 = 0;
    $464$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $459$hi;
    i64toi32_i32$5 = $459_1;
    i64toi32_i32$1 = $464$hi;
    i64toi32_i32$3 = $463_1;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $11_1 = i64toi32_i32$4;
    $11$hi = i64toi32_i32$2;
    break block3;
   }
   block19 : {
    i64toi32_i32$2 = $18$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $468_1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
    $468$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$2 = $18_1;
    i64toi32_i32$0 = $468$hi;
    i64toi32_i32$3 = $468_1;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break block19
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break block3;
   }
   i64toi32_i32$5 = $11$hi;
   $472_1 = $11_1;
   $472$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
   $475_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $475$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$3 = $475$hi;
   i64toi32_i32$2 = $475_1;
   i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1_1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = $2_1;
   $479_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $480$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $472$hi;
   i64toi32_i32$2 = $472_1;
   i64toi32_i32$4 = $480$hi;
   i64toi32_i32$5 = $479_1;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $11_1 = i64toi32_i32$3;
   $11$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $0_1;
  HEAP32[i64toi32_i32$2 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $11_1;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $363($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $53_1 = 0, $54_1 = 0, $6_1 = 0, $9_1 = 0, $9$hi = 0, $12_1 = 0, $12$hi = 0, $13_1 = 0, $13$hi = 0, $16_1 = 0, $16$hi = 0, $20_1 = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $5_1 = 0, $5$hi = 0, $30$hi = 0, $33_1 = 0, $33$hi = 0, $36$hi = 0, $37_1 = 0, $37$hi = 0, $39_1 = 0, $39$hi = 0, $42_1 = 0, $42$hi = 0, $45$hi = 0, $47_1 = 0, $49$hi = 0, $51_1 = 0, $51$hi = 0, $52_1 = 0;
  $6_1 = $0_1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9_1 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12_1 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9_1;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12_1;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13_1 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46_1 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2_1 = $46_1;
  $2$hi = i64toi32_i32$2;
  $16_1 = $2_1;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4_1 = $48_1;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $4$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20_1 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13_1;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21_1 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$0 | 0, $1_1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49_1 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3_1 | 0, i64toi32_i32$4 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33_1 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49_1;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33_1;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3_1 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50_1 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21_1;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50_1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37_1 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$1 | 0, $1_1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42_1 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39_1;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42_1;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $1_1 = i64toi32_i32$4;
  $1$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37_1;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53_1;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6_1;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47_1 = $0_1;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54_1;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51_1;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47_1;
  HEAP32[i64toi32_i32$2 >> 2] = $52_1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function $364($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $14_1 = 0, $14$hi = 0, $19_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  $350($5_1 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $2_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0, $14_1 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5_1;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$3;
  $4$hi = i64toi32_i32$0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $0_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $19_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  global$0 = i64toi32_i32$2 + 16 | 0;
 }
 
 function $365($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $8_1 = 0, $8$hi = 0, $6_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $51_1 = 0, $4_1 = 0, $5_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $23_1 = 0, $23$hi = 0, $25$hi = 0, $39$hi = 0, $48$hi = 0, $58_1 = 0, $58$hi = 0, $60$hi = 0, $79_1 = 0, $79$hi = 0, $92_1 = 0, $92$hi = 0, $95$hi = 0, $98_1 = 0, $98$hi = 0, $103_1 = 0, $103$hi = 0, $105_1 = 0, $105$hi = 0, $108_1 = 0, $109$hi = 0, $118$hi = 0, $122_1 = 0, $122$hi = 0, $133$hi = 0, $135_1 = 0, $135$hi = 0, $136$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  block3 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $47_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $47_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $47_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32767;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    $3_1 = $8_1;
    if (($3_1 + -15361 | 0) >>> 0 > 2045 >>> 0) {
     break block
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $48_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $48_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $23_1 = $48_1;
    $23$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $25$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $23$hi;
    i64toi32_i32$1 = $23_1;
    i64toi32_i32$0 = $25$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $7_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $7$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $8_1 = $3_1 + -15360 | 0;
    $8$hi = i64toi32_i32$0;
    block2 : {
     block1 : {
      i64toi32_i32$0 = $0$hi;
      i64toi32_i32$2 = $0_1;
      i64toi32_i32$1 = 268435455;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
      $0_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
      $0$hi = i64toi32_i32$1;
      i64toi32_i32$0 = $0_1;
      i64toi32_i32$2 = 134217728;
      i64toi32_i32$3 = 1;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
       break block1
      }
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $7_1 = i64toi32_i32$4;
      $7$hi = i64toi32_i32$5;
      break block2;
     }
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block2
     }
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 1;
     i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
     $39$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $39$hi;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $7_1 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$0 = 1048575;
    i64toi32_i32$3 = -1;
    $3_1 = i64toi32_i32$4 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$2 ? 0 : $7_1;
    i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$4;
    $0_1 = i64toi32_i32$0;
    $0$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $48$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$3 = $48$hi;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$5 = $8_1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $7_1 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$1;
    break block3;
   }
   block4 : {
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$5 = $7_1;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    if (!(i64toi32_i32$3 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
     break block4
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 32767;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block4
    }
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 60;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $50_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $50_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $58_1 = $50_1;
    $58$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 4;
    i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     $51_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
     $51_1 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
    }
    $60$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $58$hi;
    i64toi32_i32$2 = $58_1;
    i64toi32_i32$1 = $60$hi;
    i64toi32_i32$3 = $51_1;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 524288;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $7_1 = 2047;
    $7$hi = i64toi32_i32$2;
    break block3;
   }
   block5 : {
    if ($3_1 >>> 0 <= 17406 >>> 0) {
     break block5
    }
    i64toi32_i32$2 = 0;
    $7_1 = 2047;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $0_1 = 0;
    $0$hi = i64toi32_i32$2;
    break block3;
   }
   block6 : {
    i64toi32_i32$2 = $8$hi;
    $4_1 = !($8_1 | i64toi32_i32$2 | 0);
    $5_1 = $4_1 ? 15360 : 15361;
    $6_1 = $5_1 - $3_1 | 0;
    if (($6_1 | 0) <= (112 | 0)) {
     break block6
    }
    i64toi32_i32$2 = 0;
    $0_1 = 0;
    $0$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $7_1 = 0;
    $7$hi = i64toi32_i32$2;
    break block3;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $79_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $79$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $4_1;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$1 = $79$hi;
   i64toi32_i32$3 = i64toi32_i32$0 ? $7_1 : $79_1;
   i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$2 : i64toi32_i32$1;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$3 = $7$hi;
   $351($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$3 | 0, 128 - $6_1 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   $361($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $7_1 | 0, i64toi32_i32$2 | 0, $6_1 | 0);
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $7_1 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$3;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $52_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $52_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   $92_1 = $52_1;
   $92$hi = i64toi32_i32$2;
   i64toi32_i32$3 = $2_1;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $53_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$1 | 0) | 0;
    $53_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $95$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $92$hi;
   i64toi32_i32$0 = $92_1;
   i64toi32_i32$3 = $95$hi;
   i64toi32_i32$5 = $53_1;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $0_1 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $0$hi = i64toi32_i32$3;
   block8 : {
    block7 : {
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$2 = $7_1;
     i64toi32_i32$0 = 268435455;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $98_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $98$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $2_1;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
     $103_1 = i64toi32_i32$0;
     $103$hi = i64toi32_i32$2;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 24 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 28 | 0) >> 2] | 0;
     $105_1 = i64toi32_i32$2;
     $105$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $103$hi;
     i64toi32_i32$3 = $103_1;
     i64toi32_i32$2 = $105$hi;
     i64toi32_i32$5 = $105_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     $108_1 = ($5_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) | 0;
     i64toi32_i32$0 = 0;
     $109$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $98$hi;
     i64toi32_i32$5 = $98_1;
     i64toi32_i32$2 = $109$hi;
     i64toi32_i32$3 = $108_1;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $7_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$5 = 134217728;
     i64toi32_i32$3 = 1;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break block7
     }
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $0_1 = i64toi32_i32$1;
     $0$hi = i64toi32_i32$4;
     break block8;
    }
    i64toi32_i32$4 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$3 = 134217728;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break block8
    }
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$5 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $118$hi = i64toi32_i32$4;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$4 = $118$hi;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $0_1 = i64toi32_i32$2;
    $0$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$4 = $0_1;
   i64toi32_i32$0 = 1048576;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   $122_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
   $122$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$4 = 1048575;
   i64toi32_i32$3 = -1;
   $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $3_1;
   i64toi32_i32$1 = $122$hi;
   i64toi32_i32$4 = i64toi32_i32$5 ? $122_1 : $0_1;
   i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$1 : i64toi32_i32$0;
   $0_1 = i64toi32_i32$4;
   $0$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   $7_1 = i64toi32_i32$5;
   $7$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $7$hi;
  i64toi32_i32$5 = $7_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = 52;
  i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
   $54_1 = 0;
  } else {
   i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
   $54_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
  }
  $133$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$5 = -2147483648;
  i64toi32_i32$1 = 0;
  i64toi32_i32$5 = i64toi32_i32$4 & i64toi32_i32$5 | 0;
  $135_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $135$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $133$hi;
  i64toi32_i32$4 = $54_1;
  i64toi32_i32$3 = $135$hi;
  i64toi32_i32$1 = $135_1;
  i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  $136$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $0$hi;
  i64toi32_i32$3 = $136$hi;
  i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  i64toi32_i32$4 = $0$hi;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$5 | i64toi32_i32$1 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $366($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $4_1 = 0, $7_1 = 0, $7$hi = 0, $3_1 = 0, $2_1 = 0, $5_1 = 0, $8_1 = 0, $37_1 = 0, $8$hi = 0, $39_1 = 0, $40_1 = 0, $6_1 = 0, $41_1 = 0, $42_1 = 0, $26_1 = 0, $30_1 = 0, $38_1 = 0, $38$hi = 0, $80_1 = 0, $80$hi = 0, $96_1 = 0, $96$hi = 0, $101_1 = 0, $101$hi = 0, $103_1 = 0, $103$hi = 0, $106_1 = 0, $107$hi = 0, $110_1 = 0, $114_1 = 0, $122_1 = 0, $122$hi = 0, $139_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$1;
  block3 : {
   block : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $37_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    i64toi32_i32$1 = $37_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 32767;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $8_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
    $8$hi = i64toi32_i32$0;
    $3_1 = $8_1;
    if (($3_1 + -16257 | 0) >>> 0 > 253 >>> 0) {
     break block
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $39_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $4_1 = $39_1;
    block2 : {
     block1 : {
      i64toi32_i32$1 = $0$hi;
      $26_1 = !($0_1 | i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $1$hi;
      i64toi32_i32$0 = $1_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 33554431;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $7_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $7_1;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 16777216;
      $30_1 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 16777216;
      if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $26_1 : $30_1) {
       break block1
      }
      $4_1 = $4_1 + 1 | 0;
      break block2;
     }
     i64toi32_i32$3 = $0$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 16777216;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $38_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $38$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$0 = $38$hi;
     i64toi32_i32$2 = $38_1;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break block2
     }
     $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
    }
    $5_1 = $4_1 >>> 0 > 8388607 >>> 0;
    $4_1 = $5_1 ? 0 : $4_1;
    $3_1 = ($5_1 ? -16255 : -16256) + $3_1 | 0;
    break block3;
   }
   block4 : {
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0)) {
     break block4
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32767;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break block4
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 25;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $40_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $40_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $4_1 = $40_1 | 4194304 | 0;
    $3_1 = 255;
    break block3;
   }
   block5 : {
    if ($3_1 >>> 0 <= 16510 >>> 0) {
     break block5
    }
    $3_1 = 255;
    $4_1 = 0;
    break block3;
   }
   block6 : {
    i64toi32_i32$0 = $8$hi;
    $5_1 = !($8_1 | i64toi32_i32$0 | 0);
    $6_1 = $5_1 ? 16256 : 16257;
    $4_1 = $6_1 - $3_1 | 0;
    if (($4_1 | 0) <= (112 | 0)) {
     break block6
    }
    $4_1 = 0;
    $3_1 = 0;
    break block3;
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
   $80_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $80$hi = i64toi32_i32$3;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$1 = $80$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $7_1 : $80_1;
   i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$1;
   $7_1 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $7$hi;
   $351($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $7_1 | 0, i64toi32_i32$2 | 0, 128 - $4_1 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   $361($2_1 | 0, $0_1 | 0, i64toi32_i32$2 | 0, $7_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] | 0;
   $0_1 = i64toi32_i32$0;
   $0$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 25;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $41_1 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $41_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $4_1 = $41_1;
   block8 : {
    block7 : {
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $96_1 = i64toi32_i32$0;
     $96$hi = i64toi32_i32$4;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
     $101_1 = i64toi32_i32$4;
     $101$hi = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 28 | 0) >> 2] | 0;
     $103_1 = i64toi32_i32$0;
     $103$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $101$hi;
     i64toi32_i32$2 = $101_1;
     i64toi32_i32$0 = $103$hi;
     i64toi32_i32$3 = $103_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     $106_1 = ($6_1 | 0) != ($3_1 | 0) & ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) | 0;
     i64toi32_i32$4 = 0;
     $107$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $96$hi;
     i64toi32_i32$3 = $96_1;
     i64toi32_i32$0 = $107$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $7_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$0;
     $110_1 = !($7_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $0$hi;
     i64toi32_i32$4 = $0_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $0_1 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
     $0$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $0_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 16777216;
     $114_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$2 = $0_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = 16777216;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) | 0 ? $110_1 : $114_1) {
      break block7
     }
     $4_1 = $4_1 + 1 | 0;
     break block8;
    }
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$4 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $122_1 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
    $122$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$4 = $122$hi;
    i64toi32_i32$3 = $122_1;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break block8
    }
    $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
   }
   $3_1 = $4_1 >>> 0 > 8388607 >>> 0;
   $4_1 = $3_1 ? $4_1 ^ 8388608 | 0 : $4_1;
  }
  global$0 = $2_1 + 32 | 0;
  $139_1 = $3_1 << 23 | 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$2 = 32;
  i64toi32_i32$1 = i64toi32_i32$2 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $42_1 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$1 | 0;
   $42_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $139_1 | ($42_1 & -2147483648 | 0) | 0 | $4_1 | 0), wasm2js_scratch_load_f32()));
 }
 
 function $367() {
  return ($368() | 0 | 0) > (0 | 0) | 0;
 }
 
 function $368() {
  return $1940() | 0 | 0;
 }
 
 function $369($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = 0;
  $5_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($5_1 | 0) != (0 | 0)) | 0;
  $6_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $5_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $6_1;
  $5_1 = 32;
  block2 : {
   block1 : {
    block : {
     if ($336(fimport$7(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break block
     }
     $5_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($5_1 | 0) > (0 | 0)) {
      break block1
     }
     $5_1 = $5_1 ? 32 : 16;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | $5_1 | 0;
    break block2;
   }
   $4_1 = $5_1;
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($5_1 >>> 0 <= $6_1 >>> 0) {
    break block2
   }
   $4_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $4_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $4_1 + ($5_1 - $6_1 | 0) | 0;
   block3 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break block3
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $4_1 + 1 | 0;
    HEAP8[(($1_1 + $2_1 | 0) + -1 | 0) >> 0] = HEAPU8[$4_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $370($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, i64toi32_i32$1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0;
  block : {
   if ($0_1) {
    break block
   }
   $1_1 = 0;
   block1 : {
    if (!(HEAP32[(0 + 67135488 | 0) >> 2] | 0)) {
     break block1
    }
    $1_1 = $370(HEAP32[(0 + 67135488 | 0) >> 2] | 0 | 0) | 0;
   }
   block2 : {
    if (!(HEAP32[(0 + 67135336 | 0) >> 2] | 0)) {
     break block2
    }
    $1_1 = $370(HEAP32[(0 + 67135336 | 0) >> 2] | 0 | 0) | 0 | $1_1 | 0;
   }
   block3 : {
    $0_1 = HEAP32[($241() | 0) >> 2] | 0;
    if (!$0_1) {
     break block3
    }
    label : while (1) {
     block5 : {
      block4 : {
       if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
        break block4
       }
       $2_1 = 1;
       break block5;
      }
      $2_1 = !($232($0_1 | 0) | 0);
     }
     block6 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
       break block6
      }
      $1_1 = $370($0_1 | 0) | 0 | $1_1 | 0;
     }
     block7 : {
      if ($2_1) {
       break block7
      }
      $233($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label
     }
     break label;
    };
   }
   $242();
   return $1_1 | 0;
  }
  block9 : {
   block8 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block8
    }
    $2_1 = 1;
    break block9;
   }
   $2_1 = !($232($0_1 | 0) | 0);
  }
  block12 : {
   block11 : {
    block10 : {
     if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
      break block10
     }
     FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
     if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
      break block10
     }
     $1_1 = -1;
     if (!$2_1) {
      break block11
     }
     break block12;
    }
    block13 : {
     $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($1_1 | 0) == ($3_1 | 0)) {
      break block13
     }
     i64toi32_i32$1 = $1_1 - $3_1 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    }
    $1_1 = 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$1 = 0;
    HEAP32[($0_1 + 4 | 0) >> 2] = 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
    if ($2_1) {
     break block12
    }
   }
   $233($0_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $371($0_1) {
  $0_1 = $0_1 | 0;
  return $612($0_1 | 0) | 0 | 0;
 }
 
 function $372($0_1) {
  $0_1 = $0_1 | 0;
  $371($0_1 | 0) | 0;
  $1855($0_1 | 0, 84 | 0);
 }
 
 function $373($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67120744;
  $783($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $374($0_1) {
  $0_1 = $0_1 | 0;
  $373($0_1 | 0) | 0;
  $1855($0_1 | 0, 32 | 0);
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 67120744;
  $1391($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $377($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $378($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $379($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $379($0_1, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $1_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $380($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $379($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $381($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $383($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break block
    }
    block2 : {
     block1 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break block1
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = $6_1 - $5_1 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $384($3_1 + 12 | 0 | 0, $384($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $385($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $386($0_1 | 0, $5_1 | 0);
      break block2;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break block
     }
     HEAP8[$1_1 >> 0] = $387($5_1 | 0) | 0;
     $5_1 = 1;
    }
    $1_1 = $1_1 + $5_1 | 0;
    $4_1 = $5_1 + $4_1 | 0;
    continue label;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $384($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $388($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $385($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $389($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + $1_1 | 0;
 }
 
 function $387($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 << 24 >> 24 | 0;
 }
 
 function $388($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $541($2_1 + 15 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $389($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if (!$2_1) {
    break block
   }
   if (!$2_1) {
    break block
   }
   wasm2js_memory_copy($0_1, $1_1, $2_1);
  }
  return $0_1 | 0;
 }
 
 function $390($0_1) {
  $0_1 = $0_1 | 0;
  return $391() | 0 | 0;
 }
 
 function $391() {
  return -1 | 0;
 }
 
 function $392($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($391() | 0 | 0)) {
    break block
   }
   return $391() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $393(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $393($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 & 255 | 0 | 0;
 }
 
 function $394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $391() | 0 | 0;
 }
 
 function $395($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $391() | 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break block
    }
    block1 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break block1
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $393(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break block
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = $7_1 - $6_1 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $384($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $385(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = $6_1 + (HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $6_1 | 0;
    continue label;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $391() | 0 | 0;
 }
 
 function $397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $398($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $397($0_1 | 0, 67120840 | 0) | 0;
  $371($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $399($0_1) {
  $0_1 = $0_1 | 0;
  return $398($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $400($0_1) {
  $0_1 = $0_1 | 0;
  $1855($398($0_1 | 0) | 0 | 0, 92 | 0);
 }
 
 function $401($0_1) {
  $0_1 = $0_1 | 0;
  $400($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $402($0_1) {
  $0_1 = $0_1 | 0;
  return $412($0_1 | 0) | 0 | 0;
 }
 
 function $403($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $404($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  block : {
   if (!($413($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $430($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   block1 : {
    if (!($414($1_1 + 8 | 0 | 0) | 0)) {
     break block1
    }
    if (($415($413($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break block1
    }
    $411($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $431($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $405($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $406($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144512 | 0) | 0 | 0;
 }
 
 function $407($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $416($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $408($0_1) {
  $0_1 = $0_1 | 0;
  return ($417(HEAP32[$0_1 >> 2] | 0 | 0) | 0) << 24 >> 24 | 0;
 }
 
 function $409($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  block : {
   if (($2_1 | 0) < (0 | 0)) {
    break block
   }
   $3_1 = ((HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $410($0_1) {
  $0_1 = $0_1 | 0;
  $418(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $411($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $419($0_1 | 0, $1_1 | 0);
 }
 
 function $412($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[($0_1 + 16 | 0) >> 2] | 0) | 0;
 }
 
 function $413($0_1) {
  $0_1 = $0_1 | 0;
  return $422($0_1 | 0) | 0 | 0;
 }
 
 function $414($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $415($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $416($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($600($0_1 | 0) | 0) ^ ($600($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $417($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $393(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $418($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 1 | 0;
  return $393(HEAP8[$1_1 >> 0] | 0 | 0) | 0 | 0;
 }
 
 function $419($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $610($0_1 | 0, HEAP32[($0_1 + 16 | 0) >> 2] | 0 | $1_1 | 0 | 0);
 }
 
 function $420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $393($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 1 | 0;
  HEAP8[$2_1 >> 0] = $1_1;
  return $393($1_1 | 0) | 0 | 0;
 }
 
 function $422($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0;
 }
 
 function $423() {
  return $424() | 0 | 0;
 }
 
 function $424() {
  return 2147483647 | 0;
 }
 
 function $425($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $426($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $425($0_1 | 0, 67120888 | 0) | 0;
  $371($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $427($0_1) {
  $0_1 = $0_1 | 0;
  return $426($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $428($0_1) {
  $0_1 = $0_1 | 0;
  $1855($426($0_1 | 0) | 0 | 0, 88 | 0);
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  $428($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $430($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  block : {
   if (!($402($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   block1 : {
    if (!($403($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break block1
    }
    $404($403($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($413($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($402($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($405($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break block
   }
   if ($367() | 0) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($415($413($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $411($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144192 | 0) | 0 | 0;
 }
 
 function $433($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $413($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = $0_1 + 76 | 0;
   if ($436($1_1 | 0) | 0) {
    break block
   }
   $438($1_1 | 0, $437($0_1 | 0, 32 | 0) | 0 | 0) | 0;
  }
  return ($439($1_1 | 0) | 0) << 24 >> 24 | 0;
 }
 
 function $435($0_1) {
  $0_1 = $0_1 | 0;
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $436($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[($0_1 + 4 | 0) >> 0] | 0 | 0;
 }
 
 function $437($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $608($2_1 + 12 | 0 | 0, $0_1 | 0);
  $0_1 = $601($406($2_1 + 12 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  $783($2_1 + 12 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $438($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = $1_1;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
  HEAP8[($2_1 + 4 | 0) >> 0] = 1;
  return $2_1 | 0;
 }
 
 function $439($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $0_1;
  return HEAPU8[$1_1 >> 0] | 0 | ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0;
 }
 
 function $440($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $441($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $430($2_1 + 8 | 0 | 0, $0_1 | 0) | 0;
  block : {
   if (!($414($2_1 + 8 | 0 | 0) | 0)) {
    break block
   }
   $405($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0;
   $608($2_1 + 4 | 0 | 0, $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
   $3_1 = $432($2_1 + 4 | 0 | 0) | 0;
   $783($2_1 + 4 | 0 | 0) | 0;
   $4_1 = $433($2_1 | 0, $0_1 | 0) | 0;
   $5_1 = $0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0;
   $6_1 = $434($5_1 | 0) | 0;
   HEAP32[($2_1 + 4 | 0) >> 2] = $440($3_1 | 0, HEAP32[$4_1 >> 2] | 0 | 0, $5_1 | 0, $6_1 | 0, $1_1 | 0) | 0;
   if (!($435($2_1 + 4 | 0 | 0) | 0)) {
    break block
   }
   $411($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 5 | 0);
  }
  $431($2_1 + 8 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $442($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $443($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  block : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break block
   }
   if (!($420($421($2_1 | 0, $1_1 | 0) | 0 | 0, $391() | 0 | 0) | 0)) {
    break block
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $444($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $445($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $446($0_1) {
  $0_1 = $0_1 | 0;
  return $612($0_1 | 0) | 0 | 0;
 }
 
 function $447($0_1) {
  $0_1 = $0_1 | 0;
  $446($0_1 | 0) | 0;
  $1855($0_1 | 0, 84 | 0);
 }
 
 function $448($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67120904;
  $783($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $449($0_1) {
  $0_1 = $0_1 | 0;
  $448($0_1 | 0) | 0;
  $1855($0_1 | 0, 32 | 0);
 }
 
 function $450($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[$0_1 >> 2] = 67120904;
  $1391($0_1 + 4 | 0 | 0) | 0;
  i64toi32_i32$1 = $0_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$0 = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = i64toi32_i32$0;
  return $0_1 | 0;
 }
 
 function $451($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $452($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $0_1 | 0;
 }
 
 function $453($0_1, $1_1, $2_1, $2$hi, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $379($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $454($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $379($0_1 | 0, -1 | 0, -1 | 0) | 0;
 }
 
 function $455($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $456($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $457($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break block
    }
    block2 : {
     block1 : {
      $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
      $6_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
      if ($5_1 >>> 0 >= $6_1 >>> 0) {
       break block1
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = 2147483647;
      HEAP32[($3_1 + 8 | 0) >> 2] = ($6_1 - $5_1 | 0) >> 2 | 0;
      HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 - $4_1 | 0;
      $5_1 = $384($3_1 + 12 | 0 | 0, $384($3_1 + 8 | 0 | 0, $3_1 + 4 | 0 | 0) | 0 | 0) | 0;
      $5_1 = HEAP32[$5_1 >> 2] | 0;
      $458($1_1 | 0, HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0;
      $459($0_1 | 0, $5_1 | 0);
      $1_1 = $1_1 + ($5_1 << 2 | 0) | 0;
      break block2;
     }
     $5_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0;
     if (($5_1 | 0) == (-1 | 0)) {
      break block
     }
     HEAP32[$1_1 >> 2] = $460($5_1 | 0) | 0;
     $1_1 = $1_1 + 4 | 0;
     $5_1 = 1;
    }
    $4_1 = $5_1 + $4_1 | 0;
    continue label;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $458($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $461($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = (HEAP32[($0_1 + 12 | 0) >> 2] | 0) + ($1_1 << 2 | 0) | 0;
 }
 
 function $460($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $461($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if (!$2_1) {
    break block
   }
   $2_1 = $2_1 << 2 | 0;
   if (!$2_1) {
    break block
   }
   wasm2js_memory_copy($0_1, $1_1, $2_1);
  }
  return $0_1 | 0;
 }
 
 function $462($0_1) {
  $0_1 = $0_1 | 0;
  return $463() | 0 | 0;
 }
 
 function $463() {
  return -1 | 0;
 }
 
 function $464($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   if ((FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0) != ($463() | 0 | 0)) {
    break block
   }
   return $463() | 0 | 0;
  }
  $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $465(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $465($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $466($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $463() | 0 | 0;
 }
 
 function $467($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $6_1 = 0, $4_1 = 0, $3_1 = 0, $7_1 = 0, $5_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  $5_1 = $463() | 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) <= ($4_1 | 0)) {
     break block
    }
    block1 : {
     $6_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
     $7_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
     if ($6_1 >>> 0 < $7_1 >>> 0) {
      break block1
     }
     if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $465(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) == ($5_1 | 0)) {
      break block
     }
     $4_1 = $4_1 + 1 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label;
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = ($7_1 - $6_1 | 0) >> 2 | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $2_1 - $4_1 | 0;
    $6_1 = $384($3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
    $6_1 = HEAP32[$6_1 >> 2] | 0;
    $458(HEAP32[($0_1 + 24 | 0) >> 2] | 0 | 0, $1_1 | 0, $6_1 | 0) | 0;
    $7_1 = $6_1 << 2 | 0;
    HEAP32[($0_1 + 24 | 0) >> 2] = (HEAP32[($0_1 + 24 | 0) >> 2] | 0) + $7_1 | 0;
    $4_1 = $6_1 + $4_1 | 0;
    $1_1 = $1_1 + $7_1 | 0;
    continue label;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $468($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $463() | 0 | 0;
 }
 
 function $469($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $470($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $469($0_1 | 0, 67121e3 | 0) | 0;
  $446($0_1 + 8 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $471($0_1) {
  $0_1 = $0_1 | 0;
  return $470($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $472($0_1) {
  $0_1 = $0_1 | 0;
  $1855($470($0_1 | 0) | 0 | 0, 92 | 0);
 }
 
 function $473($0_1) {
  $0_1 = $0_1 | 0;
  $472($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $474($0_1) {
  $0_1 = $0_1 | 0;
  return $412($0_1 | 0) | 0 | 0;
 }
 
 function $475($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0;
 }
 
 function $476($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  block : {
   if (!($483($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $496($1_1 + 8 | 0 | 0, $0_1 | 0) | 0;
   block1 : {
    if (!($484($1_1 + 8 | 0 | 0) | 0)) {
     break block1
    }
    if (($485($483($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
     break block1
    }
    $482($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
   }
   $497($1_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $477($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144504 | 0) | 0 | 0;
 }
 
 function $478($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $486($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $479($0_1) {
  $0_1 = $0_1 | 0;
  return $487(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $480($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $481($0_1) {
  $0_1 = $0_1 | 0;
  $488(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $482($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $419($0_1 | 0, $1_1 | 0);
 }
 
 function $483($0_1) {
  $0_1 = $0_1 | 0;
  return $422($0_1 | 0) | 0 | 0;
 }
 
 function $484($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 >> 0] | 0 | 0;
 }
 
 function $485($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($602($0_1 | 0) | 0) ^ ($602($1_1 | 0) | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $487($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  return $465(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $488($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
   if (($1_1 | 0) != (HEAP32[($0_1 + 16 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
  }
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1 + 4 | 0;
  return $465(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $489($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($0_1 | 0) == ($1_1 | 0) | 0;
 }
 
 function $490($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block : {
   $2_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
   if (($2_1 | 0) != (HEAP32[($0_1 + 28 | 0) >> 2] | 0 | 0)) {
    break block
   }
   return (((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $465($1_1 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0;
  }
  HEAP32[($0_1 + 24 | 0) >> 2] = $2_1 + 4 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  return $465($1_1 | 0) | 0 | 0;
 }
 
 function $491($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $492($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $491($0_1 | 0, 67121048 | 0) | 0;
  $446($0_1 + 4 | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $493($0_1) {
  $0_1 = $0_1 | 0;
  return $492($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0;
 }
 
 function $494($0_1) {
  $0_1 = $0_1 | 0;
  $1855($492($0_1 | 0) | 0 | 0, 88 | 0);
 }
 
 function $495($0_1) {
  $0_1 = $0_1 | 0;
  $494($0_1 + (HEAP32[((HEAP32[$0_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0);
 }
 
 function $496($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP8[$0_1 >> 0] = 0;
  block : {
   if (!($474($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   block1 : {
    if (!($475($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
     break block1
    }
    $476($475($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0;
   }
   HEAP8[$0_1 >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $497($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($483($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!($474($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (!(($405($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0) & 8192 | 0)) {
    break block
   }
   if ($367() | 0) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   if (($485($483($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0) | 0 | 0) | 0 | 0) != (-1 | 0)) {
    break block
   }
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $482($1_1 + (HEAP32[((HEAP32[$1_1 >> 2] | 0) + -12 | 0) >> 2] | 0) | 0 | 0, 1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $498($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  block : {
   $2_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$2_1) {
    break block
   }
   if (!($489($490($2_1 | 0, $1_1 | 0) | 0 | 0, $463() | 0 | 0) | 0)) {
    break block
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return $0_1 | 0;
 }
 
 function $500($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $501($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $502($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $503($0_1 | 0, $1_1 + 15 | 0 | 0, $1_1 + 14 | 0 | 0) | 0;
  $504($0_1 | 0, 0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $503($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $543($542($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $505($0_1) {
  $0_1 = $0_1 | 0;
  return $509($508($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $510($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $507($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1388($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $508($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($512($0_1 | 0) | 0)) {
    break block
   }
   return $546($0_1 | 0) | 0 | 0;
  }
  return $547($0_1 | 0) | 0 | 0;
 }
 
 function $509($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $510($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $513($0_1 | 0);
  block : {
   if (!($512($0_1 | 0) | 0)) {
    break block
   }
   $551($515($0_1 | 0) | 0 | 0, $546($0_1 | 0) | 0 | 0, $529($0_1 | 0) | 0 | 0);
  }
  $3_1 = $525($1_1 | 0) | 0;
  $4_1 = $512($1_1 | 0) | 0;
  $552($0_1 | 0, $1_1 | 0);
  $5_1 = $514($1_1 | 0) | 0;
  $6_1 = $514($0_1 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $37_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $553($1_1 | 0, 0 | 0);
  $5_1 = $547($1_1 | 0) | 0;
  HEAP8[($2_1 + 15 | 0) >> 0] = 0;
  $554($5_1 | 0, $2_1 + 15 | 0 | 0);
  block2 : {
   block1 : {
    $5_1 = ($0_1 | 0) == ($1_1 | 0);
    if ($5_1) {
     break block1
    }
    if ($4_1) {
     break block1
    }
    $523($1_1 | 0, $3_1 | 0);
    break block2;
   }
   $504($1_1 | 0, 0 | 0);
  }
  $1_1 = $512($0_1 | 0) | 0;
  block3 : {
   if ($5_1) {
    break block3
   }
   if ($1_1) {
    break block3
   }
   $504($0_1 | 0, $516($0_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $511($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $512($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($522($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $513($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $514($0_1) {
  $0_1 = $0_1 | 0;
  return $550($0_1 | 0) | 0 | 0;
 }
 
 function $515($0_1) {
  $0_1 = $0_1 | 0;
  return $556($0_1 | 0) | 0 | 0;
 }
 
 function $516($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($522($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0 | 0;
 }
 
 function $517($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $519($0_1 | 0, $4_1 + 15 | 0 | 0, $3_1 | 0) | 0;
  $520($3_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $518($0_1) {
  $0_1 = $0_1 | 0;
  return $565($0_1 | 0) | 0 | 0;
 }
 
 function $519($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $568($567($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $520($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $570($0_1 | 0, $1_1 | 0, $2_1 | 0, $569($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $521($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $522($0_1) {
  $0_1 = $0_1 | 0;
  return $549($0_1 | 0) | 0 | 0;
 }
 
 function $523($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $524($0_1) {
  $0_1 = $0_1 | 0;
  return $595($594($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $525($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($512($0_1 | 0) | 0)) {
    break block
   }
   return $530($0_1 | 0) | 0 | 0;
  }
  return $516($0_1 | 0) | 0 | 0;
 }
 
 function $526($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 10;
  block : {
   if (!($512($0_1 | 0) | 0)) {
    break block
   }
   $1_1 = ($529($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $527($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1886($0_1 | 0, $1_1 | 0, 0 | 0);
 }
 
 function $528($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($420($0_1 | 0, $391() | 0 | 0) | 0)) {
    break block
   }
   $0_1 = ($391() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $529($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($522($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $530($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($522($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $531($0_1) {
  $0_1 = $0_1 | 0;
  return $524($0_1 | 0) | 0 | 0;
 }
 
 function $532($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144520 | 0) | 0 | 0;
 }
 
 function $533($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $534($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $537($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $535($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $536() {
  $339();
  wasm2js_trap();
 }
 
 function $537($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $599($2_1 + 15 | 0 | 0, $1_1 | 0, $0_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $538($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $539($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $540($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $541($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $542($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $543($0_1) {
  $0_1 = $0_1 | 0;
  return $544($0_1 | 0) | 0 | 0;
 }
 
 function $544($0_1) {
  $0_1 = $0_1 | 0;
  return $545($0_1 | 0) | 0 | 0;
 }
 
 function $545($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $546($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($514($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $547($0_1) {
  $0_1 = $0_1 | 0;
  return $548($514($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $548($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $549($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $550($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $551($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $555($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $552($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $557($0_1 | 0, $1_1 | 0);
 }
 
 function $553($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $514($0_1 | 0) | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($1_1 & 127 | 0) | 0;
  $0_1 = $514($0_1 | 0) | 0;
  HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
 }
 
 function $554($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
 }
 
 function $555($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $558($1_1 | 0, $2_1 | 0, 1 | 0);
 }
 
 function $556($0_1) {
  $0_1 = $0_1 | 0;
  return $564($0_1 | 0) | 0 | 0;
 }
 
 function $557($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $515($1_1 | 0) | 0;
  $515($0_1 | 0) | 0;
 }
 
 function $558($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if (!($559($2_1 | 0) | 0)) {
    break block
   }
   $560($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return;
  }
  $561($0_1 | 0, $1_1 | 0);
 }
 
 function $559($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 > 8 >>> 0 | 0;
 }
 
 function $560($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $562($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $561($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $563($0_1 | 0, $1_1 | 0);
 }
 
 function $562($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1862($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $563($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1855($0_1 | 0, $1_1 | 0);
 }
 
 function $564($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $565($0_1) {
  $0_1 = $0_1 | 0;
  return $566($0_1 | 0) | 0 | 0;
 }
 
 function $566($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $567($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $568($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $569($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $571($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $570($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block : {
   if ($3_1 >>> 0 > ($572($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($573($3_1 | 0) | 0)) {
      break block1
     }
     $553($0_1 | 0, $3_1 | 0);
     $5_1 = $547($0_1 | 0) | 0;
     break block2;
    }
    $575($4_1 + 8 | 0 | 0, $515($0_1 | 0) | 0 | 0, ($574($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $576($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $577($0_1 | 0, $5_1 | 0);
    $578($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $579($0_1 | 0, $3_1 | 0);
   }
   $5_1 = $580($1_1 | 0, $2_1 | 0, $509($5_1 | 0) | 0 | 0) | 0;
   HEAP8[($4_1 + 7 | 0) >> 0] = 0;
   $554($5_1 | 0, $4_1 + 7 | 0 | 0);
   $504($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $581($0_1 | 0);
  wasm2js_trap();
 }
 
 function $571($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $572($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $582($518($0_1 | 0) | 0 | 0) | 0;
  return ($0_1 >>> ($0_1 >>> 0 > (($583() | 0) >>> 1 | 0) >>> 0) | 0) + -8 | 0 | 0;
 }
 
 function $573($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 11 >>> 0 | 0;
 }
 
 function $574($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 10;
  block : {
   if ($0_1 >>> 0 < 11 >>> 0) {
    break block
   }
   $0_1 = $586($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (11 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $575($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $585($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $576($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $577($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($514($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $578($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $514($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
  $0_1 = $514($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
 }
 
 function $579($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($514($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $580($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = $509($0_1 | 0) | 0;
  $0_1 = $1_1 - $0_1 | 0;
  $385($2_1 | 0, $5_1 | 0, $0_1 | 0) | 0;
  return $2_1 + $0_1 | 0 | 0;
 }
 
 function $581($0_1) {
  $0_1 = $0_1 | 0;
  $584(67109801 | 0);
  wasm2js_trap();
 }
 
 function $582($0_1) {
  $0_1 = $0_1 | 0;
  return $583() | 0 | 0;
 }
 
 function $583() {
  return $587() | 0 | 0;
 }
 
 function $584($0_1) {
  $0_1 = $0_1 | 0;
  $339();
  wasm2js_trap();
 }
 
 function $585($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $588($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $586($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 7 | 0) & -8 | 0 | 0;
 }
 
 function $587() {
  return -1 | 0;
 }
 
 function $588($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $589($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $589($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 <= ($582($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $590();
   wasm2js_trap();
  }
  return $591($1_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $590() {
  $339();
  wasm2js_trap();
 }
 
 function $591($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (!($559($1_1 | 0) | 0)) {
    break block
   }
   return $592($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  return $593($0_1 | 0) | 0 | 0;
 }
 
 function $592($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1857($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $593($0_1) {
  $0_1 = $0_1 | 0;
  return $1851($0_1 | 0) | 0 | 0;
 }
 
 function $594($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($512($0_1 | 0) | 0)) {
    break block
   }
   return $596($0_1 | 0) | 0 | 0;
  }
  return $597($0_1 | 0) | 0 | 0;
 }
 
 function $595($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $596($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($522($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $597($0_1) {
  $0_1 = $0_1 | 0;
  return $598($522($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $598($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $599($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $600($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break block
   }
   block1 : {
    if ($420($417($1_1 | 0) | 0 | 0, $391() | 0 | 0) | 0) {
     break block1
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $601($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $602($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break block
   }
   block1 : {
    if ($489($487($1_1 | 0) | 0 | 0, $463() | 0 | 0) | 0) {
     break block1
    }
    return !(HEAP32[$0_1 >> 2] | 0) | 0;
   }
   HEAP32[$0_1 >> 2] = 0;
  }
  return 1 | 0;
 }
 
 function $603($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $604($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = $605($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  $1875($0_1 | 0, $1_1 | 0, $606($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $605($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $543($567($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $606($0_1) {
  $0_1 = $0_1 | 0;
  return $616($0_1 | 0) | 0 | 0;
 }
 
 function $607($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  label : while (1) {
   block : {
    if ($2_1) {
     break block
    }
    return;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $2_1 << 2 | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 32 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0 | 0]($1_1, $0_1, HEAP32[((HEAP32[($0_1 + 36 | 0) >> 2] | 0) + $3_1 | 0) >> 2] | 0);
   continue label;
  };
 }
 
 function $608($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1388($0_1 | 0, $1_1 + 28 | 0 | 0) | 0;
 }
 
 function $609($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $611($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $610($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1_1 | !(HEAP32[($0_1 + 24 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1;
  block : {
   if (!((HEAP32[($0_1 + 20 | 0) >> 2] | 0) & $1_1 | 0)) {
    break block
   }
   $614(67109394 | 0);
   wasm2js_trap();
  }
 }
 
 function $611($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $599($2_1 + 15 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $612($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67121616;
  block : {
   if (!(HEAP32[($0_1 + 28 | 0) >> 2] | 0)) {
    break block
   }
   $607($0_1 | 0, 0 | 0);
   $783($0_1 + 28 | 0 | 0) | 0;
   $342(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0);
   $342(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0);
   $342(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0);
   $342(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $613($0_1) {
  $0_1 = $0_1 | 0;
  $1855($612($0_1 | 0) | 0 | 0, 72 | 0);
 }
 
 function $614($0_1) {
  $0_1 = $0_1 | 0;
  $339();
  wasm2js_trap();
 }
 
 function $615($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  HEAP32[($0_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 4098;
  HEAP32[($0_1 + 8 | 0) >> 2] = 6;
  HEAP32[($0_1 + 16 | 0) >> 2] = !$1_1;
  block : {
   if (!40) {
    break block
   }
   wasm2js_memory_fill($0_1 + 32 | 0, 0, 40);
  }
  $1391($0_1 + 28 | 0 | 0) | 0;
 }
 
 function $616($0_1) {
  $0_1 = $0_1 | 0;
  return $291($0_1 | 0) | 0 | 0;
 }
 
 function $617($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $618($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $619($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 0 | 0;
 }
 
 function $620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = -1;
  block : {
   if (($0_1 | 0) == (-1 | 0)) {
    break block
   }
   block2 : {
    block1 : {
     if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break block1
     }
     $3_1 = 1;
     break block2;
    }
    $3_1 = !($232($1_1 | 0) | 0);
   }
   block5 : {
    block4 : {
     block3 : {
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if ($4_1) {
       break block3
      }
      $301($1_1 | 0) | 0;
      $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      if (!$4_1) {
       break block4
      }
     }
     if ($4_1 >>> 0 > ((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + -8 | 0) >>> 0) {
      break block5
     }
    }
    if ($3_1) {
     break block
    }
    $233($1_1 | 0);
    return -1 | 0;
   }
   $2_1 = $4_1 + -1 | 0;
   HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
   HEAP8[$2_1 >> 0] = $0_1;
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   block6 : {
    if ($3_1) {
     break block6
    }
    $233($1_1 | 0);
   }
   $2_1 = $0_1 & 255 | 0;
  }
  return $2_1 | 0;
 }
 
 function $621($0_1) {
  $0_1 = $0_1 | 0;
  return $622($0_1 | 0) | 0 | 0;
 }
 
 function $622($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block1 : {
   block : {
    $1_1 = HEAP32[($0_1 + 76 | 0) >> 2] | 0;
    if (($1_1 | 0) < (0 | 0)) {
     break block
    }
    if (!$1_1) {
     break block1
    }
    if (($1_1 & 1073741823 | 0 | 0) != (HEAP32[(($274() | 0) + 24 | 0) >> 2] | 0 | 0)) {
     break block1
    }
   }
   block2 : {
    $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($1_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break block2
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
    return HEAPU8[$1_1 >> 0] | 0 | 0;
   }
   return $302($0_1 | 0) | 0 | 0;
  }
  return $623($0_1 | 0) | 0 | 0;
 }
 
 function $623($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  block : {
   $1_1 = $0_1 + 76 | 0;
   if (!($624($1_1 | 0) | 0)) {
    break block
   }
   $232($0_1 | 0) | 0;
  }
  block2 : {
   block1 : {
    $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
    if (($2_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
    $0_1 = HEAPU8[$2_1 >> 0] | 0;
    break block2;
   }
   $0_1 = $302($0_1 | 0) | 0;
  }
  block3 : {
   if (!(($625($1_1 | 0) | 0) & 1073741824 | 0)) {
    break block3
   }
   $626($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $624($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1 ? $1_1 : 1073741823;
  return $1_1 | 0;
 }
 
 function $625($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $626($0_1) {
  $0_1 = $0_1 | 0;
  $234($0_1 | 0, 1 | 0) | 0;
 }
 
 function $627($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  block1 : {
   block : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block
    }
    $2_1 = 1;
    break block1;
   }
   $2_1 = !($232($0_1 | 0) | 0);
  }
  block3 : {
   block2 : {
    if ($1_1) {
     break block2
    }
    $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
    break block3;
   }
   block4 : {
    if (HEAP32[($0_1 + 136 | 0) >> 2] | 0) {
     break block4
    }
    HEAP32[($0_1 + 136 | 0) >> 2] = HEAP32[(HEAP32[(($274() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0 ? 67121744 : 67121720;
   }
   $3_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
   if ($3_1) {
    break block3
   }
   $3_1 = ($1_1 | 0) < (1 | 0) ? -1 : 1;
   HEAP32[($0_1 + 72 | 0) >> 2] = $3_1;
  }
  block5 : {
   if ($2_1) {
    break block5
   }
   $233($0_1 | 0);
  }
  return $3_1 | 0;
 }
 
 function $628($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0;
  block : {
   if ($1_1) {
    break block
   }
   return 0 | 0;
  }
  block5 : {
   block1 : {
    if (!$2_1) {
     break block1
    }
    block2 : {
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     $4_1 = $3_1 << 24 >> 24;
     if (($4_1 | 0) < (0 | 0)) {
      break block2
     }
     block3 : {
      if (!$0_1) {
       break block3
      }
      HEAP32[$0_1 >> 2] = $3_1;
     }
     return ($4_1 | 0) != (0 | 0) | 0;
    }
    block4 : {
     if (HEAP32[(HEAP32[(($274() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
      break block4
     }
     $1_1 = 1;
     if (!$0_1) {
      break block5
     }
     HEAP32[$0_1 >> 2] = $4_1 & 57343 | 0;
     return 1 | 0;
    }
    $4_1 = $3_1 + -194 | 0;
    if ($4_1 >>> 0 > 50 >>> 0) {
     break block1
    }
    $4_1 = HEAP32[(($4_1 << 2 | 0) + 67121776 | 0) >> 2] | 0;
    block6 : {
     if ($2_1 >>> 0 > 3 >>> 0) {
      break block6
     }
     if (($4_1 << (Math_imul($2_1, 6) + -6 | 0) | 0 | 0) < (0 | 0)) {
      break block1
     }
    }
    $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $2_1 = $3_1 >>> 3 | 0;
    if (($2_1 + -16 | 0 | ($2_1 + ($4_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
     break block1
    }
    block7 : {
     $2_1 = $3_1 + -128 | 0 | ($4_1 << 6 | 0) | 0;
     if (($2_1 | 0) < (0 | 0)) {
      break block7
     }
     $1_1 = 2;
     if (!$0_1) {
      break block5
     }
     HEAP32[$0_1 >> 2] = $2_1;
     return 2 | 0;
    }
    $4_1 = (HEAPU8[($1_1 + 2 | 0) >> 0] | 0) + -128 | 0;
    if ($4_1 >>> 0 > 63 >>> 0) {
     break block1
    }
    $2_1 = $2_1 << 6 | 0;
    $4_1 = $4_1 | $2_1 | 0;
    block8 : {
     if (($2_1 | 0) < (0 | 0)) {
      break block8
     }
     $1_1 = 3;
     if (!$0_1) {
      break block5
     }
     HEAP32[$0_1 >> 2] = $4_1;
     return 3 | 0;
    }
    $2_1 = (HEAPU8[($1_1 + 3 | 0) >> 0] | 0) + -128 | 0;
    if ($2_1 >>> 0 > 63 >>> 0) {
     break block1
    }
    $1_1 = 4;
    if (!$0_1) {
     break block5
    }
    HEAP32[$0_1 >> 2] = $2_1 | ($4_1 << 6 | 0) | 0;
    return 4 | 0;
   }
   HEAP32[($231() | 0) >> 2] = 25;
   $1_1 = -1;
  }
  return $1_1 | 0;
 }
 
 function $629($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $5_1 = 0, $4_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = $3_1 ? $3_1 : 67142840;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block8 : {
   block2 : {
    block1 : {
     block : {
      if ($1_1) {
       break block
      }
      if ($3_1) {
       break block1
      }
      return 0 | 0;
     }
     $5_1 = -2;
     if (!$2_1) {
      break block2
     }
     block4 : {
      block3 : {
       if (!$3_1) {
        break block3
       }
       $5_1 = $2_1;
       break block4;
      }
      block5 : {
       $5_1 = HEAPU8[$1_1 >> 0] | 0;
       $3_1 = $5_1 << 24 >> 24;
       if (($3_1 | 0) < (0 | 0)) {
        break block5
       }
       block6 : {
        if (!$0_1) {
         break block6
        }
        HEAP32[$0_1 >> 2] = $5_1;
       }
       return ($3_1 | 0) != (0 | 0) | 0;
      }
      block7 : {
       if (HEAP32[(HEAP32[(($274() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
        break block7
       }
       $5_1 = 1;
       if (!$0_1) {
        break block2
       }
       HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
       return 1 | 0;
      }
      $3_1 = $5_1 + -194 | 0;
      if ($3_1 >>> 0 > 50 >>> 0) {
       break block1
      }
      $3_1 = HEAP32[(($3_1 << 2 | 0) + 67121776 | 0) >> 2] | 0;
      $5_1 = $2_1 + -1 | 0;
      if (!$5_1) {
       break block8
      }
      $1_1 = $1_1 + 1 | 0;
     }
     $6_1 = HEAPU8[$1_1 >> 0] | 0;
     $7_1 = $6_1 >>> 3 | 0;
     if (($7_1 + -16 | 0 | (($3_1 >> 26 | 0) + $7_1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break block1
     }
     label : while (1) {
      $5_1 = $5_1 + -1 | 0;
      block9 : {
       $3_1 = ($6_1 & 255 | 0) + -128 | 0 | ($3_1 << 6 | 0) | 0;
       if (($3_1 | 0) < (0 | 0)) {
        break block9
       }
       HEAP32[$4_1 >> 2] = 0;
       block10 : {
        if (!$0_1) {
         break block10
        }
        HEAP32[$0_1 >> 2] = $3_1;
       }
       return $2_1 - $5_1 | 0 | 0;
      }
      if (!$5_1) {
       break block8
      }
      $1_1 = $1_1 + 1 | 0;
      $6_1 = HEAP8[$1_1 >> 0] | 0;
      if (($6_1 | 0) < (-64 | 0)) {
       continue label
      }
      break label;
     };
    }
    HEAP32[$4_1 >> 2] = 0;
    HEAP32[($231() | 0) >> 2] = 25;
    $5_1 = -1;
   }
   return $5_1 | 0;
  }
  HEAP32[$4_1 >> 2] = $3_1;
  return -2 | 0;
 }
 
 function $630($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $274() | 0;
  $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  block : {
   if ((HEAP32[($0_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
    break block
   }
   $627($0_1 | 0, 1 | 0) | 0;
  }
  HEAP32[($1_1 + 96 | 0) >> 2] = HEAP32[($0_1 + 136 | 0) >> 2] | 0;
  $0_1 = $631($0_1 | 0) | 0;
  HEAP32[($1_1 + 96 | 0) >> 2] = $2_1;
  return $0_1 | 0;
 }
 
 function $631($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0, $3_1 = 0, $4_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  block4 : {
   block1 : {
    block : {
     $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     $3_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     if (($2_1 | 0) == ($3_1 | 0)) {
      break block
     }
     $2_1 = $628($1_1 + 28 | 0 | 0, $2_1 | 0, $3_1 - $2_1 | 0 | 0) | 0;
     if (($2_1 | 0) == (-1 | 0)) {
      break block
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + ($2_1 >>> 0 > 1 >>> 0 ? $2_1 : 1) | 0;
     break block1;
    }
    HEAP32[($1_1 + 16 | 0) >> 2] = 0;
    HEAP32[($1_1 + 20 | 0) >> 2] = 0;
    $2_1 = 0;
    label : while (1) {
     $4_1 = $2_1;
     block3 : {
      block2 : {
       $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($2_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 + 1 | 0;
       HEAP8[($1_1 + 15 | 0) >> 0] = HEAPU8[$2_1 >> 0] | 0;
       break block3;
      }
      $2_1 = $302($0_1 | 0) | 0;
      HEAP8[($1_1 + 15 | 0) >> 0] = $2_1;
      if (($2_1 | 0) > (-1 | 0)) {
       break block3
      }
      $2_1 = -1;
      if (!($4_1 & 1 | 0)) {
       break block4
      }
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
      HEAP32[($231() | 0) >> 2] = 25;
      break block4;
     }
     $2_1 = 1;
     $3_1 = $629($1_1 + 28 | 0 | 0, $1_1 + 15 | 0 | 0, 1 | 0, $1_1 + 16 | 0 | 0) | 0;
     if (($3_1 | 0) == (-2 | 0)) {
      continue label
     }
     break label;
    };
    $2_1 = -1;
    if (($3_1 | 0) != (-1 | 0)) {
     break block1
    }
    if (!($4_1 & 1 | 0)) {
     break block4
    }
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
    $620(HEAPU8[($1_1 + 15 | 0) >> 0] | 0 | 0, $0_1 | 0) | 0;
    break block4;
   }
   $2_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
  }
  global$0 = $1_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $632($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  block : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break block
   }
   return $630($0_1 | 0) | 0 | 0;
  }
  $1_1 = $232($0_1 | 0) | 0;
  $2_1 = $630($0_1 | 0) | 0;
  block1 : {
   if (!$1_1) {
    break block1
   }
   $233($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $633($0_1) {
  $0_1 = $0_1 | 0;
  return $632($0_1 | 0) | 0 | 0;
 }
 
 function $634($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $7_1 = 0, $6_1 = 0, $2_1 = 0, $3_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $274() | 0;
  $4_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  block1 : {
   block : {
    if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block
    }
    $5_1 = 1;
    break block1;
   }
   $5_1 = !($232($1_1 | 0) | 0);
  }
  block2 : {
   if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
    break block2
   }
   $627($1_1 | 0, 1 | 0) | 0;
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
  $6_1 = 0;
  block3 : {
   if (HEAP32[($1_1 + 4 | 0) >> 2] | 0) {
    break block3
   }
   $301($1_1 | 0) | 0;
   $6_1 = !(HEAP32[($1_1 + 4 | 0) >> 2] | 0);
  }
  $7_1 = -1;
  block4 : {
   if (($0_1 | 0) == (-1 | 0)) {
    break block4
   }
   if ($6_1) {
    break block4
   }
   $6_1 = $337($2_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0) | 0;
   if (($6_1 | 0) < (0 | 0)) {
    break block4
   }
   $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
   if ($8_1 >>> 0 < (((HEAP32[($1_1 + 44 | 0) >> 2] | 0) + $6_1 | 0) + -8 | 0) >>> 0) {
    break block4
   }
   block6 : {
    block5 : {
     if ($0_1 >>> 0 > 127 >>> 0) {
      break block5
     }
     $7_1 = $8_1 + -1 | 0;
     HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
     HEAP8[$7_1 >> 0] = $0_1;
     break block6;
    }
    $7_1 = $8_1 - $6_1 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $7_1;
    $245($7_1 | 0, $2_1 + 12 | 0 | 0, $6_1 | 0) | 0;
   }
   HEAP32[$1_1 >> 2] = (HEAP32[$1_1 >> 2] | 0) & -17 | 0;
   $7_1 = $0_1;
  }
  block7 : {
   if ($5_1) {
    break block7
   }
   $233($1_1 | 0);
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = $4_1;
  global$0 = $2_1 + 16 | 0;
  return $7_1 | 0;
 }
 
 function $635($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, $3_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $274() | 0;
  $4_1 = HEAP32[($3_1 + 96 | 0) >> 2] | 0;
  block : {
   if ((HEAP32[($1_1 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
    break block
   }
   $627($1_1 | 0, 1 | 0) | 0;
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = HEAP32[($1_1 + 136 | 0) >> 2] | 0;
  block3 : {
   block6 : {
    block4 : {
     block1 : {
      if ($0_1 >>> 0 > 127 >>> 0) {
       break block1
      }
      block2 : {
       if (($0_1 | 0) == (HEAP32[($1_1 + 80 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
       if (($5_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       HEAP32[($1_1 + 20 | 0) >> 2] = $5_1 + 1 | 0;
       HEAP8[$5_1 >> 0] = $0_1;
       break block3;
      }
      $0_1 = $248($1_1 | 0, $0_1 | 0) | 0;
      break block4;
     }
     block5 : {
      $5_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      if (($5_1 + 4 | 0) >>> 0 >= (HEAP32[($1_1 + 16 | 0) >> 2] | 0) >>> 0) {
       break block5
      }
      $5_1 = $338($5_1 | 0, $0_1 | 0) | 0;
      if (($5_1 | 0) < (0 | 0)) {
       break block6
      }
      HEAP32[($1_1 + 20 | 0) >> 2] = (HEAP32[($1_1 + 20 | 0) >> 2] | 0) + $5_1 | 0;
      break block4;
     }
     $5_1 = $338($2_1 + 12 | 0 | 0, $0_1 | 0) | 0;
     if (($5_1 | 0) < (0 | 0)) {
      break block6
     }
     if (($246($2_1 + 12 | 0 | 0, $5_1 | 0, $1_1 | 0) | 0) >>> 0 < $5_1 >>> 0) {
      break block6
     }
    }
    if (($0_1 | 0) != (-1 | 0)) {
     break block3
    }
   }
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 0 | 32 | 0;
   $0_1 = -1;
  }
  HEAP32[($3_1 + 96 | 0) >> 2] = $4_1;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $636($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  block : {
   if ((HEAP32[($1_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break block
   }
   return $635($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  $2_1 = $232($1_1 | 0) | 0;
  $0_1 = $635($0_1 | 0, $1_1 | 0) | 0;
  block1 : {
   if (!$2_1) {
    break block1
   }
   $233($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $637() {
  $638(67143556 | 0) | 0;
 }
 
 function $638($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 67143913 | 0) >> 0] | 0) {
    break block
   }
   $639(67143912 | 0) | 0;
   $619(61 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67143913 | 0) >> 0] = 1;
  }
  return $0_1 | 0;
 }
 
 function $639($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = HEAP32[(0 + 67121652 | 0) >> 2] | 0;
  $640(67143560 | 0, $1_1 | 0, 67143616 | 0) | 0;
  $641(67142844 | 0, 67143560 | 0) | 0;
  $2_1 = HEAP32[(0 + 67117924 | 0) >> 2] | 0;
  $642(67143624 | 0, $2_1 | 0, 67143672 | 0) | 0;
  $643(67143028 | 0, 67143624 | 0) | 0;
  $3_1 = HEAP32[(0 + 67117920 | 0) >> 2] | 0;
  $642(67143680 | 0, $3_1 | 0, 67143728 | 0) | 0;
  $643(67143204 | 0, 67143680 | 0) | 0;
  $643(67143380 | 0, $413((HEAP32[((HEAP32[(0 + 67143204 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 67143204 | 0 | 0) | 0 | 0) | 0;
  $644((HEAP32[((HEAP32[(0 + 67142844 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 67142844 | 0 | 0, 67143028 | 0) | 0;
  $645((HEAP32[((HEAP32[(0 + 67143204 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 67143204 | 0 | 0) | 0;
  $644((HEAP32[((HEAP32[(0 + 67143204 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 67143204 | 0 | 0, 67143028 | 0) | 0;
  $646(67143736 | 0, $1_1 | 0, 67143792 | 0) | 0;
  $647(67142936 | 0, 67143736 | 0) | 0;
  $648(67143800 | 0, $2_1 | 0, 67143848 | 0) | 0;
  $649(67143116 | 0, 67143800 | 0) | 0;
  $648(67143856 | 0, $3_1 | 0, 67143904 | 0) | 0;
  $649(67143292 | 0, 67143856 | 0) | 0;
  $649(67143468 | 0, $483((HEAP32[((HEAP32[(0 + 67143292 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 67143292 | 0 | 0) | 0 | 0) | 0;
  $650((HEAP32[((HEAP32[(0 + 67142936 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 67142936 | 0 | 0, 67143116 | 0) | 0;
  $645((HEAP32[((HEAP32[(0 + 67143292 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 67143292 | 0 | 0) | 0;
  $650((HEAP32[((HEAP32[(0 + 67143292 | 0) >> 2] | 0) + -12 | 0) >> 2] | 0) + 67143292 | 0 | 0, 67143116 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $640($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $375($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 67121988;
  $2_1 = $391() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
  $507($3_1 + 12 | 0 | 0, $0_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 12 | 0);
  $783($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $641($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $651($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 67120800 + 12 | 0;
  HEAP32[$2_1 >> 2] = 67120800 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $652($0_1 + (HEAP32[(0 + 67120800 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $642($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $375($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 67122088;
  $507($3_1 + 12 | 0 | 0, $0_1 | 0);
  $1_1 = $532($3_1 + 12 | 0 | 0) | 0;
  $783($3_1 + 12 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $533($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $643($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $651($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 67120848 + 12 | 0;
  HEAP32[$2_1 >> 2] = 67120848 + 32 | 0;
  $652($0_1 + (HEAP32[(0 + 67120848 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $644($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $645($0_1) {
  $0_1 = $0_1 | 0;
  $653($0_1 | 0, 8192 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $646($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $450($0_1 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 67122192;
  $2_1 = $463() | 0;
  HEAP8[($0_1 + 52 | 0) >> 0] = 0;
  HEAP32[($0_1 + 48 | 0) >> 2] = $2_1;
  $654($3_1 + 12 | 0 | 0, $0_1 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1, $3_1 + 12 | 0);
  $783($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $647($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $655($0_1 + 8 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 67120960 + 12 | 0;
  HEAP32[$2_1 >> 2] = 67120960 + 32 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  $656($0_1 + (HEAP32[(0 + 67120960 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $648($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $450($0_1 | 0) | 0;
  HEAP32[($0_1 + 32 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 67122292;
  $654($3_1 + 12 | 0 | 0, $0_1 | 0);
  $1_1 = $657($3_1 + 12 | 0 | 0) | 0;
  $783($3_1 + 12 | 0 | 0) | 0;
  HEAP32[($0_1 + 40 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $658($1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $649($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $655($0_1 + 4 | 0 | 0) | 0;
  HEAP32[$0_1 >> 2] = 67121008 + 12 | 0;
  HEAP32[$2_1 >> 2] = 67121008 + 32 | 0;
  $656($0_1 + (HEAP32[(0 + 67121008 | 0) >> 2] | 0) | 0 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $650($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 72 | 0) >> 2] | 0;
  HEAP32[($0_1 + 72 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $651($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $672($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 67121056 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $652($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $615($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  $673($0_1 + 76 | 0 | 0);
 }
 
 function $653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1 | $1_1 | 0;
  return $2_1 | 0;
 }
 
 function $654($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1388($0_1 | 0, $1_1 + 4 | 0 | 0) | 0;
 }
 
 function $655($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $672($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 67121332 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $656($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $615($0_1 | 0, $1_1 | 0);
  HEAP32[($0_1 + 72 | 0) >> 2] = 0;
  $691($0_1 + 76 | 0 | 0);
 }
 
 function $657($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144528 | 0) | 0 | 0;
 }
 
 function $658($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $659($0_1) {
  $0_1 = $0_1 | 0;
  $404(67143028 | 0) | 0;
  $404(67143380 | 0) | 0;
  $476(67143116 | 0) | 0;
  $476(67143468 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $660($0_1) {
  $0_1 = $0_1 | 0;
  $659(67143912 | 0) | 0;
 }
 
 function $661($0_1) {
  $0_1 = $0_1 | 0;
  $1855($373($0_1 | 0) | 0 | 0, 56 | 0);
 }
 
 function $662($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $532($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $539($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $533(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  block : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break block
   }
   $1869(67109050 | 0);
   wasm2js_trap();
  }
 }
 
 function $663($0_1) {
  $0_1 = $0_1 | 0;
  return $664($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $664($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ((HEAPU8[($0_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break block1
    }
    $4_1 = $391() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break block1;
   }
   block3 : {
    block2 : {
     if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break block2
     }
     if (!($668(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
      break block3
     }
     $3_1 = $393(HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0;
     block5 : {
      block4 : {
       if ($1_1) {
        break block4
       }
       if (!($667($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0)) {
        break block3
       }
       break block5;
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
     }
     $3_1 = $393(HEAP8[($2_1 + 24 | 0) >> 0] | 0 | 0) | 0;
     break block1;
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = 1;
    $3_1 = 0;
    $5_1 = HEAP32[($669($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
    $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
    block6 : {
     label : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break block6
      }
      $4_1 = $621(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break block3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label;
     };
    }
    $6_1 = ($2_1 + 23 | 0) + 1 | 0;
    block9 : {
     block8 : {
      label1 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       block7 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($535(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 23 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 1:
         break block3;
        case 0:
         break block7;
        case 2:
         break block8;
        default:
         break block9;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break block3
       }
       $3_1 = $621(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break block3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label1;
      };
     }
     HEAP8[($2_1 + 23 | 0) >> 0] = HEAPU8[($2_1 + 24 | 0) >> 0] | 0;
    }
    block11 : {
     block10 : {
      if ($1_1) {
       break block10
      }
      label2 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break block11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($620($393(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break block3
       }
       continue label2;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $393(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    }
    $3_1 = $393(HEAP8[($2_1 + 23 | 0) >> 0] | 0 | 0) | 0;
    break block1;
   }
   $3_1 = $391() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $665($0_1) {
  $0_1 = $0_1 | 0;
  return $664($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $666($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if (!($420($1_1 | 0, $391() | 0 | 0) | 0)) {
     break block
    }
    if (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) {
     break block1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($420($1_1 | 0, $391() | 0 | 0) | 0) ^ 1 | 0;
    break block1;
   }
   $3_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
   block4 : {
    block3 : {
     block2 : {
      if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block2
      }
      if (!($3_1 & 1 | 0)) {
       break block3
      }
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if ($667($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $387($3_1 | 0) | 0 | 0) | 0) {
       break block3
      }
      break block4;
     }
     if (!($3_1 & 1 | 0)) {
      break block3
     }
     HEAP8[($2_1 + 19 | 0) >> 0] = $387(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     block6 : {
      switch (($538(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 19 | 0 | 0, ($2_1 + 19 | 0) + 1 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
      case 2:
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = ($2_1 + 24 | 0) + 1 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
       break;
      case 0:
      case 1:
       break block4;
      default:
       break block6;
      };
     }
     label : while (1) {
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
       break block3
      }
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      if (($620(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
       break block4
      }
      continue label;
     };
    }
    HEAP8[($0_1 + 52 | 0) >> 0] = 1;
    HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
    break block1;
   }
   $1_1 = $391() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $667($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($620($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
 }
 
 function $668($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   $0_1 = $621($0_1 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break block
   }
   HEAP8[$1_1 >> 0] = $0_1;
  }
  return ($0_1 | 0) != (-1 | 0) | 0;
 }
 
 function $669($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $670($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $670($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $671($2_1 + 15 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($3_1 ? $1_1 : $0_1) | 0;
 }
 
 function $671($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0 | 0) < (HEAP32[$2_1 >> 2] | 0 | 0) | 0;
 }
 
 function $672($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[$0_1 >> 2] = 67121608 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $673($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 4 | 0) >> 0] = 0;
 }
 
 function $674($0_1) {
  $0_1 = $0_1 | 0;
  $1855($373($0_1 | 0) | 0 | 0, 48 | 0);
 }
 
 function $675($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $532($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $533($1_1 | 0) | 0;
 }
 
 function $676($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  block : {
   label : while (1) {
    $3_1 = $540(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($247($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break block
    }
    block1 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break block;
     case 0:
      continue label;
     default:
      break block1;
     };
    }
    break label;
   };
   $4_1 = $370(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $677($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block1 : {
   block : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break block
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break block1
     }
     block2 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $393(HEAP8[$1_1 >> 0] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($391() | 0 | 0)) {
       break block2
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label;
    };
   }
   $2_1 = $247($1_1 | 0, 1 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $678($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block4 : {
   block2 : {
    block : {
     if ($420($1_1 | 0, $391() | 0 | 0) | 0) {
      break block
     }
     $3_1 = $387($1_1 | 0) | 0;
     HEAP8[($2_1 + 23 | 0) >> 0] = $3_1;
     block1 : {
      if ((HEAPU8[($0_1 + 44 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block1
      }
      if (!($679($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
       break block2
      }
      break block;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $4_1 = $2_1 + 32 | 0;
     $5_1 = ($2_1 + 23 | 0) + 1 | 0;
     $6_1 = $2_1 + 23 | 0;
     label : while (1) {
      $3_1 = $538(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
       break block2
      }
      block3 : {
       if (($3_1 | 0) != (3 | 0)) {
        break block3
       }
       if (($247($6_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break block
       }
       break block2;
      }
      if ($3_1 >>> 0 > 1 >>> 0) {
       break block2
      }
      $6_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($247($2_1 + 24 | 0 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
       break block2
      }
      $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($3_1 | 0) == (1 | 0)) {
       continue label
      }
      break label;
     };
    }
    $0_1 = $528($1_1 | 0) | 0;
    break block4;
   }
   $0_1 = $391() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $679($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $0_1;
  $0_1 = $247($2_1 + 15 | 0 | 0, 1 | 0, 1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return ($0_1 | 0) == (1 | 0) | 0;
 }
 
 function $680($0_1) {
  $0_1 = $0_1 | 0;
  $1855($448($0_1 | 0) | 0 | 0, 56 | 0);
 }
 
 function $681($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $657($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 44 | 0) >> 2] = $682($1_1 | 0) | 0;
  HEAP8[($0_1 + 53 | 0) >> 0] = $658(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0) | 0;
  block : {
   if ((HEAP32[($0_1 + 44 | 0) >> 2] | 0 | 0) < (9 | 0)) {
    break block
   }
   $1869(67109050 | 0);
   wasm2js_trap();
  }
 }
 
 function $682($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $683($0_1) {
  $0_1 = $0_1 | 0;
  return $684($0_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $684($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $5_1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, $7$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ((HEAPU8[($0_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block
    }
    $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    if (!$1_1) {
     break block1
    }
    $4_1 = $463() | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = $4_1;
    break block1;
   }
   block3 : {
    block2 : {
     if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break block2
     }
     if (!($689(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $2_1 + 24 | 0 | 0) | 0)) {
      break block3
     }
     $3_1 = $465(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
     block5 : {
      block4 : {
       if ($1_1) {
        break block4
       }
       if (!($687($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0)) {
        break block3
       }
       break block5;
      }
      HEAP32[($0_1 + 48 | 0) >> 2] = $3_1;
     }
     $3_1 = $465(HEAP32[($2_1 + 24 | 0) >> 2] | 0 | 0) | 0;
     break block1;
    }
    HEAP32[($2_1 + 24 | 0) >> 2] = 1;
    $3_1 = 0;
    $5_1 = HEAP32[($669($2_1 + 24 | 0 | 0, $0_1 + 44 | 0 | 0) | 0) >> 2] | 0;
    $6_1 = ($5_1 | 0) > (0 | 0) ? $5_1 : 0;
    block6 : {
     label : while (1) {
      if (($3_1 | 0) == ($6_1 | 0)) {
       break block6
      }
      $4_1 = $621(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
      if (($4_1 | 0) == (-1 | 0)) {
       break block3
      }
      HEAP8[(($2_1 + 24 | 0) + $3_1 | 0) >> 0] = $4_1;
      $3_1 = $3_1 + 1 | 0;
      continue label;
     };
    }
    $6_1 = $2_1 + 24 | 0;
    block9 : {
     block8 : {
      label1 : while (1) {
       $3_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       block7 : {
        $4_1 = ($2_1 + 24 | 0) + $5_1 | 0;
        switch (($690(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, $3_1 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $6_1 | 0, $2_1 + 12 | 0 | 0) | 0) + -1 | 0 | 0) {
        case 1:
         break block3;
        case 0:
         break block7;
        case 2:
         break block8;
        default:
         break block9;
        };
       }
       i64toi32_i32$1 = $7$hi;
       i64toi32_i32$0 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $7_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       if (($5_1 | 0) == (8 | 0)) {
        break block3
       }
       $3_1 = $621(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
       if (($3_1 | 0) == (-1 | 0)) {
        break block3
       }
       HEAP8[$4_1 >> 0] = $3_1;
       $5_1 = $5_1 + 1 | 0;
       continue label1;
      };
     }
     HEAP32[($2_1 + 20 | 0) >> 2] = HEAP8[($2_1 + 24 | 0) >> 0] | 0;
    }
    block11 : {
     block10 : {
      if ($1_1) {
       break block10
      }
      label2 : while (1) {
       if (($5_1 | 0) < (1 | 0)) {
        break block11
       }
       $5_1 = $5_1 + -1 | 0;
       if (($620($465(HEAP8[(($2_1 + 24 | 0) + $5_1 | 0) >> 0] | 0 | 0) | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
        break block3
       }
       continue label2;
      };
     }
     HEAP32[($0_1 + 48 | 0) >> 2] = $465(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    }
    $3_1 = $465(HEAP32[($2_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    break block1;
   }
   $3_1 = $463() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $685($0_1) {
  $0_1 = $0_1 | 0;
  return $684($0_1 | 0, 1 | 0) | 0 | 0;
 }
 
 function $686($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if (!($489($1_1 | 0, $463() | 0 | 0) | 0)) {
     break block
    }
    if (HEAPU8[($0_1 + 52 | 0) >> 0] | 0) {
     break block1
    }
    $1_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
    HEAP8[($0_1 + 52 | 0) >> 0] = ($489($1_1 | 0, $463() | 0 | 0) | 0) ^ 1 | 0;
    break block1;
   }
   $3_1 = HEAPU8[($0_1 + 52 | 0) >> 0] | 0;
   block4 : {
    block3 : {
     block2 : {
      if ((HEAPU8[($0_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block2
      }
      if (!($3_1 & 1 | 0)) {
       break block3
      }
      $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
      if ($687($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0, $460($3_1 | 0) | 0 | 0) | 0) {
       break block3
      }
      break block4;
     }
     if (!($3_1 & 1 | 0)) {
      break block3
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $460(HEAP32[($0_1 + 48 | 0) >> 2] | 0 | 0) | 0;
     block6 : {
      switch (($688(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $2_1 + 16 | 0 | 0, $2_1 + 20 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $2_1 + 32 | 0 | 0, $2_1 + 20 | 0 | 0) | 0) + -1 | 0 | 0) {
      case 2:
       $3_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
       HEAP32[($2_1 + 20 | 0) >> 2] = $2_1 + 25 | 0;
       HEAP8[($2_1 + 24 | 0) >> 0] = $3_1;
       break;
      case 0:
      case 1:
       break block4;
      default:
       break block6;
      };
     }
     label : while (1) {
      $3_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
      if ($3_1 >>> 0 <= ($2_1 + 24 | 0) >>> 0) {
       break block3
      }
      $3_1 = $3_1 + -1 | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
      if (($620(HEAP8[$3_1 >> 0] | 0 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (-1 | 0)) {
       break block4
      }
      continue label;
     };
    }
    HEAP8[($0_1 + 52 | 0) >> 0] = 1;
    HEAP32[($0_1 + 48 | 0) >> 2] = $1_1;
    break block1;
   }
   $1_1 = $463() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $687($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($634($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
 }
 
 function $688($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $689($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   $0_1 = $633($0_1 | 0) | 0;
   if (($0_1 | 0) == (-1 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = $0_1;
  }
  return ($0_1 | 0) != (-1 | 0) | 0;
 }
 
 function $690($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) | 0 | 0;
 }
 
 function $691($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 4 | 0) >> 0] = 0;
 }
 
 function $692($0_1) {
  $0_1 = $0_1 | 0;
  $1855($448($0_1 | 0) | 0 | 0, 48 | 0);
 }
 
 function $693($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1) | 0;
  $1_1 = $657($1_1 | 0) | 0;
  HEAP32[($0_1 + 36 | 0) >> 2] = $1_1;
  HEAP8[($0_1 + 44 | 0) >> 0] = $658($1_1 | 0) | 0;
 }
 
 function $694($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 16 | 0;
  block : {
   label : while (1) {
    $3_1 = $695(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $1_1 + 8 | 0 | 0, $2_1 | 0, $1_1 + 4 | 0 | 0) | 0;
    $4_1 = -1;
    $5_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) - ($1_1 + 8 | 0) | 0;
    if (($247($1_1 + 8 | 0 | 0, 1 | 0, $5_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($5_1 | 0)) {
     break block
    }
    block1 : {
     switch ($3_1 + -1 | 0 | 0) {
     case 1:
      break block;
     case 0:
      continue label;
     default:
      break block1;
     };
    }
    break label;
   };
   $4_1 = $370(HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 ? -1 : 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $695($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0 | 0;
 }
 
 function $696($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  block1 : {
   block : {
    if (HEAPU8[($0_1 + 44 | 0) >> 0] | 0) {
     break block
    }
    $3_1 = 0;
    $2_1 = ($2_1 | 0) > (0 | 0) ? $2_1 : 0;
    label : while (1) {
     if (($3_1 | 0) == ($2_1 | 0)) {
      break block1
     }
     block2 : {
      if (((((wasm2js_i32$1 = $0_1, wasm2js_i32$2 = $465(HEAP32[$1_1 >> 2] | 0 | 0) | 0), wasm2js_i32$0 = HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0) | 0) != ($463() | 0 | 0)) {
       break block2
      }
      return $3_1 | 0;
     }
     $1_1 = $1_1 + 4 | 0;
     $3_1 = $3_1 + 1 | 0;
     continue label;
    };
   }
   $2_1 = $247($1_1 | 0, 4 | 0, $2_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0;
  }
  return $2_1 | 0;
 }
 
 function $697($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block4 : {
   block2 : {
    block : {
     if ($489($1_1 | 0, $463() | 0 | 0) | 0) {
      break block
     }
     $3_1 = $460($1_1 | 0) | 0;
     HEAP32[($2_1 + 20 | 0) >> 2] = $3_1;
     block1 : {
      if ((HEAPU8[($0_1 + 44 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block1
      }
      if (!($698($3_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
       break block2
      }
      break block;
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $2_1 + 24 | 0;
     $4_1 = $2_1 + 32 | 0;
     $5_1 = $2_1 + 24 | 0;
     $6_1 = $2_1 + 20 | 0;
     label : while (1) {
      $3_1 = $688(HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0, $6_1 | 0, $5_1 | 0, $2_1 + 12 | 0 | 0, $2_1 + 24 | 0 | 0, $4_1 | 0, $2_1 + 16 | 0 | 0) | 0;
      if ((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) == ($6_1 | 0)) {
       break block2
      }
      block3 : {
       if (($3_1 | 0) != (3 | 0)) {
        break block3
       }
       if (($247($6_1 | 0, 1 | 0, 1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) == (1 | 0)) {
        break block
       }
       break block2;
      }
      if ($3_1 >>> 0 > 1 >>> 0) {
       break block2
      }
      $6_1 = (HEAP32[($2_1 + 16 | 0) >> 2] | 0) - ($2_1 + 24 | 0) | 0;
      if (($247($2_1 + 24 | 0 | 0, 1 | 0, $6_1 | 0, HEAP32[($0_1 + 32 | 0) >> 2] | 0 | 0) | 0 | 0) != ($6_1 | 0)) {
       break block2
      }
      $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
      if (($3_1 | 0) == (1 | 0)) {
       continue label
      }
      break label;
     };
    }
    $0_1 = $699($1_1 | 0) | 0;
    break block4;
   }
   $0_1 = $463() | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $698($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($636($0_1 | 0, $1_1 | 0) | 0 | 0) != (-1 | 0) | 0;
 }
 
 function $699($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($489($0_1 | 0, $463() | 0 | 0) | 0)) {
    break block
   }
   $0_1 = ($463() | 0) ^ -1 | 0;
  }
  return $0_1 | 0;
 }
 
 function $700() {
  $637();
 }
 
 function $701($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $5_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, $10$hi = 0, $10_1 = 0, $11$hi = 0, $7_1 = 0, $12$hi = 0, $11_1 = 0, $12_1 = 0, $13$hi = 0, $6_1 = 0, $13_1 = 0, $4_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $8_1 = 0, $9_1 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $195_1 = 0, $195$hi = 0, $249_1 = 0, $249$hi = 0, $348$hi = 0, $415$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block2 : {
   block1 : {
    block : {
     if ($1_1 >>> 0 > 36 >>> 0) {
      break block
     }
     if (($1_1 | 0) != (1 | 0)) {
      break block1
     }
    }
    HEAP32[($231() | 0) >> 2] = 28;
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    break block2;
   }
   label : while (1) {
    block4 : {
     block3 : {
      $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
       break block3
      }
      HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
      $5_1 = HEAPU8[$5_1 >> 0] | 0;
      break block4;
     }
     $5_1 = $304($0_1 | 0) | 0;
    }
    if ($702($5_1 | 0) | 0) {
     continue label
    }
    break label;
   };
   $6_1 = 0;
   block6 : {
    block5 : {
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block5;
     default:
      break block6;
     };
    }
    $6_1 = ($5_1 | 0) == (45 | 0) ? -1 : 0;
    block7 : {
     $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
     if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
      break block7
     }
     HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
     $5_1 = HEAPU8[$5_1 >> 0] | 0;
     break block6;
    }
    $5_1 = $304($0_1 | 0) | 0;
   }
   block23 : {
    block29 : {
     block14 : {
      block17 : {
       block8 : {
        if (($1_1 | 0) != (0 | 0) & ($1_1 | 0) != (16 | 0) | 0) {
         break block8
        }
        if (($5_1 | 0) != (48 | 0)) {
         break block8
        }
        block10 : {
         block9 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block9
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break block10;
         }
         $5_1 = $304($0_1 | 0) | 0;
        }
        block11 : {
         if (($5_1 & -33 | 0 | 0) != (88 | 0)) {
          break block11
         }
         block13 : {
          block12 : {
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break block12
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
           $5_1 = HEAPU8[$5_1 >> 0] | 0;
           break block13;
          }
          $5_1 = $304($0_1 | 0) | 0;
         }
         $1_1 = 16;
         if ((HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
          break block14
         }
         i64toi32_i32$0 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$0;
         block16 : {
          block15 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $31_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $32_1 = 0
             } else {
              $32_1 = 1
             }
             $33_1 = $32_1;
            } else {
             $33_1 = 0
            }
            $31_1 = $33_1;
           }
           if ($31_1) {
            break block15
           }
           $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -1 | 0;
           if (!$2_1) {
            break block16
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + -2 | 0;
           break block2;
          }
          if ($2_1) {
           break block2
          }
         }
         i64toi32_i32$2 = 0;
         $3_1 = 0;
         $3$hi = i64toi32_i32$2;
         i64toi32_i32$2 = 0;
         $303($0_1 | 0, 0 | 0, i64toi32_i32$2 | 0);
         break block2;
        }
        if ($1_1) {
         break block17
        }
        $1_1 = 8;
        break block14;
       }
       $1_1 = $1_1 ? $1_1 : 10;
       if ($1_1 >>> 0 > (HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0) >>> 0) {
        break block17
       }
       i64toi32_i32$2 = 0;
       $3_1 = 0;
       $3$hi = i64toi32_i32$2;
       block18 : {
        i64toi32_i32$3 = $0_1;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $34_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $35_1 = 0
          } else {
           $35_1 = 1
          }
          $36_1 = $35_1;
         } else {
          $36_1 = 0
         }
         $34_1 = $36_1;
        }
        if ($34_1) {
         break block18
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       i64toi32_i32$3 = 0;
       $303($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
       HEAP32[($231() | 0) >> 2] = 28;
       break block2;
      }
      if (($1_1 | 0) != (10 | 0)) {
       break block14
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      block19 : {
       $2_1 = $5_1 + -48 | 0;
       if ($2_1 >>> 0 > 9 >>> 0) {
        break block19
       }
       $5_1 = 0;
       label1 : while (1) {
        block21 : {
         block20 : {
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block20
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
          $1_1 = HEAPU8[$1_1 >> 0] | 0;
          break block21;
         }
         $1_1 = $304($0_1 | 0) | 0;
        }
        $5_1 = Math_imul($5_1, 10) + $2_1 | 0;
        block22 : {
         $2_1 = $1_1 + -48 | 0;
         if ($2_1 >>> 0 > 9 >>> 0) {
          break block22
         }
         if ($5_1 >>> 0 < 429496729 >>> 0) {
          continue label1
         }
        }
        break label1;
       };
       i64toi32_i32$3 = 0;
       $10_1 = $5_1;
       $10$hi = i64toi32_i32$3;
      }
      if ($2_1 >>> 0 > 9 >>> 0) {
       break block23
      }
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
      $11_1 = i64toi32_i32$1;
      $11$hi = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      $12_1 = $2_1;
      $12$hi = i64toi32_i32$3;
      label2 : while (1) {
       block25 : {
        block24 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break block24
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break block25;
        }
        $5_1 = $304($0_1 | 0) | 0;
       }
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $12$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$0 = $11_1;
       i64toi32_i32$1 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $10_1 = i64toi32_i32$4;
       $10$hi = i64toi32_i32$5;
       block28 : {
        block27 : {
         block26 : {
          $1_1 = $5_1 + -48 | 0;
          if ($1_1 >>> 0 > 9 >>> 0) {
           break block26
          }
          i64toi32_i32$3 = i64toi32_i32$4;
          i64toi32_i32$0 = 429496729;
          i64toi32_i32$2 = -1717986918;
          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
           break block27
          }
         }
         if ($1_1 >>> 0 <= 9 >>> 0) {
          break block28
         }
         break block23;
        }
        i64toi32_i32$3 = $10$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $11_1 = i64toi32_i32$5;
        $11$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $12_1 = $1_1;
        $12$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $1_1;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $195_1 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $195$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $11$hi;
        i64toi32_i32$3 = $11_1;
        i64toi32_i32$2 = $195$hi;
        i64toi32_i32$0 = $195_1;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
         continue label2
        }
       }
       break label2;
      };
      $1_1 = 10;
      break block29;
     }
     block30 : {
      if (!($1_1 & ($1_1 + -1 | 0) | 0)) {
       break block30
      }
      i64toi32_i32$3 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$3;
      block31 : {
       $7_1 = HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break block31
       }
       $2_1 = 0;
       label3 : while (1) {
        block33 : {
         block32 : {
          $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
           break block32
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
          $5_1 = HEAPU8[$5_1 >> 0] | 0;
          break block33;
         }
         $5_1 = $304($0_1 | 0) | 0;
        }
        $2_1 = $7_1 + Math_imul($2_1, $1_1) | 0;
        block34 : {
         $7_1 = HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0;
         if ($1_1 >>> 0 <= $7_1 >>> 0) {
          break block34
         }
         if ($2_1 >>> 0 < 119304647 >>> 0) {
          continue label3
         }
        }
        break label3;
       };
       i64toi32_i32$3 = 0;
       $10_1 = $2_1;
       $10$hi = i64toi32_i32$3;
      }
      if ($1_1 >>> 0 <= $7_1 >>> 0) {
       break block29
      }
      i64toi32_i32$3 = 0;
      $11_1 = $1_1;
      $11$hi = i64toi32_i32$3;
      label4 : while (1) {
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $11$hi;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$5 = $11$hi;
       i64toi32_i32$5 = __wasm_i64_mul($10_1 | 0, i64toi32_i32$3 | 0, $11_1 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $12_1 = i64toi32_i32$5;
       $12$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = $7_1;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $13_1 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $13$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $249_1 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $249$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $12$hi;
       i64toi32_i32$5 = $12_1;
       i64toi32_i32$3 = $249$hi;
       i64toi32_i32$2 = $249_1;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break block29
       }
       block36 : {
        block35 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break block35
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break block36;
        }
        $5_1 = $304($0_1 | 0) | 0;
       }
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$5 = $13$hi;
       i64toi32_i32$5 = $12$hi;
       i64toi32_i32$2 = $12_1;
       i64toi32_i32$0 = $13$hi;
       i64toi32_i32$3 = $13_1;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $10_1 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$4;
       $7_1 = HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0;
       if ($1_1 >>> 0 <= $7_1 >>> 0) {
        break block29
       }
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$4 = $11$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$3 = 0;
       $363($4_1 | 0, $11_1 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break block29
       }
       continue label4;
      };
     }
     $8_1 = HEAP8[(((Math_imul($1_1, 23) >>> 5 | 0) & 7 | 0) + 67122657 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $10_1 = 0;
     $10$hi = i64toi32_i32$2;
     block37 : {
      $2_1 = HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break block37
      }
      $7_1 = 0;
      label5 : while (1) {
       block39 : {
        block38 : {
         $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
         if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
          break block38
         }
         HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
         $5_1 = HEAPU8[$5_1 >> 0] | 0;
         break block39;
        }
        $5_1 = $304($0_1 | 0) | 0;
       }
       $9_1 = $7_1 << $8_1 | 0;
       $7_1 = $2_1 | $9_1 | 0;
       block40 : {
        $2_1 = HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0;
        if ($1_1 >>> 0 <= $2_1 >>> 0) {
         break block40
        }
        if ($9_1 >>> 0 < 134217728 >>> 0) {
         continue label5
        }
       }
       break label5;
      };
      i64toi32_i32$2 = 0;
      $10_1 = $7_1;
      $10$hi = i64toi32_i32$2;
     }
     if ($1_1 >>> 0 <= $2_1 >>> 0) {
      break block29
     }
     i64toi32_i32$2 = 0;
     $12_1 = $8_1;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$3 = $12_1;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $37_1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $13_1 = $37_1;
     $13$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$2 = $13_1;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$3 = $10_1;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break block29
     }
     label6 : while (1) {
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = $2_1;
      i64toi32_i32$5 = 0;
      i64toi32_i32$4 = 255;
      i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
      $11_1 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
      $11$hi = i64toi32_i32$5;
      block42 : {
       block41 : {
        $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
        if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
         break block41
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
        $5_1 = HEAPU8[$5_1 >> 0] | 0;
        break block42;
       }
       $5_1 = $304($0_1 | 0) | 0;
      }
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$5 = $12$hi;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$2 = $10_1;
      i64toi32_i32$3 = $12$hi;
      i64toi32_i32$4 = $12_1;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
       $38_1 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
       $38_1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
      }
      $348$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$3 = $348$hi;
      i64toi32_i32$5 = $38_1;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$4 = $11_1;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $10_1 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $10$hi = i64toi32_i32$2;
      $2_1 = HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0;
      if ($1_1 >>> 0 <= $2_1 >>> 0) {
       break block29
      }
      i64toi32_i32$2 = $13$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$3 = $10_1;
      i64toi32_i32$5 = $13$hi;
      i64toi32_i32$4 = $13_1;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
       continue label6
      }
      break label6;
     };
    }
    if ($1_1 >>> 0 <= (HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0) >>> 0) {
     break block23
    }
    label7 : while (1) {
     block44 : {
      block43 : {
       $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
       if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
        break block43
       }
       HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
       $5_1 = HEAPU8[$5_1 >> 0] | 0;
       break block44;
      }
      $5_1 = $304($0_1 | 0) | 0;
     }
     if ($1_1 >>> 0 > (HEAPU8[($5_1 + 67122401 | 0) >> 0] | 0) >>> 0) {
      continue label7
     }
     break label7;
    };
    HEAP32[($231() | 0) >> 2] = 68;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$4 = $3_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $6_1 = !(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0) ? $6_1 : 0;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$2 = i64toi32_i32$3;
    $10_1 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$3;
   }
   block45 : {
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$4 | 0) < (i64toi32_i32$2 | 0)) {
     $39_1 = 1
    } else {
     if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $40_1 = 0
      } else {
       $40_1 = 1
      }
      $41_1 = $40_1;
     } else {
      $41_1 = 0
     }
     $39_1 = $41_1;
    }
    if ($39_1) {
     break block45
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   block46 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block46
    }
    block47 : {
     i64toi32_i32$5 = i64toi32_i32$4;
     if (i64toi32_i32$2 & 1 | 0) {
      break block47
     }
     if ($6_1) {
      break block47
     }
     HEAP32[($231() | 0) >> 2] = 68;
     i64toi32_i32$3 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$1;
     break block2;
    }
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$5 = $10_1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$4 = $3_1;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
     break block46
    }
    HEAP32[($231() | 0) >> 2] = 68;
    break block2;
   }
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $10$hi;
   i64toi32_i32$4 = $10_1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3_1;
   i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
   $415$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $415$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$0 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$5 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$5 | 0;
 }
 
 function $702($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $703($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if ($0_1) {
    break block
   }
   return 1 | 0;
  }
  return !(HEAP32[$0_1 >> 2] | 0) | 0;
 }
 
 function $704($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $8_1 = 0, i64toi32_i32$5 = 0, $13_1 = 0, $10_1 = 0, $3_1 = 0, $7_1 = 0, $18$hi = 0, $11_1 = 0, $12_1 = 0, $19$hi = 0, $15_1 = 0, $6_1 = 0, $18_1 = 0, $9_1 = 0, $19_1 = 0, $16_1 = 0, $20$hi = 0, $14_1 = 0, $20_1 = 0, $17_1 = 0, i64toi32_i32$6 = 0, $4_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77$hi = 0, $79$hi = 0, $84_1 = 0, $84$hi = 0, $143$hi = 0, $145$hi = 0, $151_1 = 0, $151$hi = 0, $282$hi = 0, $284$hi = 0, $289_1 = 0, $289$hi = 0, $329_1 = 0, $329$hi = 0, $335_1 = 0, $335$hi = 0, $336$hi = 0, $441_1 = 0, $441$hi = 0, $447_1 = 0, $447$hi = 0, $448$hi = 0, $653_1 = 0, $653$hi = 0, $658_1 = 0, $658$hi = 0, $685$hi = 0, $687$hi = 0, $693_1 = 0, $693$hi = 0;
  $3_1 = global$0 - 304 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
     break block
    }
    $4_1 = 1;
    break block1;
   }
   $4_1 = !($232($0_1 | 0) | 0);
  }
  block5 : {
   block3 : {
    block2 : {
     if (HEAP32[($0_1 + 4 | 0) >> 2] | 0) {
      break block2
     }
     $301($0_1 | 0) | 0;
     if (!(HEAP32[($0_1 + 4 | 0) >> 2] | 0)) {
      break block3
     }
    }
    block4 : {
     $5_1 = HEAPU8[$1_1 >> 0] | 0;
     if ($5_1) {
      break block4
     }
     $6_1 = 0;
     break block5;
    }
    i64toi32_i32$0 = 0;
    $18_1 = 0;
    $18$hi = i64toi32_i32$0;
    $6_1 = 0;
    block50 : {
     block27 : {
      block67 : {
       label13 : while (1) {
        block10 : {
         block6 : {
          $5_1 = $5_1 & 255 | 0;
          if (!($705($5_1 | 0) | 0)) {
           break block6
          }
          label : while (1) {
           $5_1 = $1_1;
           $1_1 = $1_1 + 1 | 0;
           if ($705(HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
            continue label
           }
           break label;
          };
          i64toi32_i32$0 = 0;
          $303($0_1 | 0, 0 | 0, i64toi32_i32$0 | 0);
          label1 : while (1) {
           block8 : {
            block7 : {
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
              break block7
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
             $1_1 = HEAPU8[$1_1 >> 0] | 0;
             break block8;
            }
            $1_1 = $304($0_1 | 0) | 0;
           }
           if ($705($1_1 | 0) | 0) {
            continue label1
           }
           break label1;
          };
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          block9 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $61_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $62_1 = 0
             } else {
              $62_1 = 1
             }
             $63_1 = $62_1;
            } else {
             $63_1 = 0
            }
            $61_1 = $63_1;
           }
           if ($61_1) {
            break block9
           }
           $1_1 = $1_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
          }
          i64toi32_i32$3 = $0_1;
          i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $77$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $77$hi;
          i64toi32_i32$3 = i64toi32_i32$2;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$0 = $18_1;
          i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $79$hi = i64toi32_i32$5;
          i64toi32_i32$3 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
          $84_1 = i64toi32_i32$3;
          $84$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $79$hi;
          i64toi32_i32$1 = i64toi32_i32$4;
          i64toi32_i32$3 = $84$hi;
          i64toi32_i32$0 = $84_1;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
          i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
           i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
          }
          $18_1 = i64toi32_i32$2;
          $18$hi = i64toi32_i32$4;
          break block10;
         }
         block21 : {
          block13 : {
           block12 : {
            block11 : {
             if (($5_1 | 0) != (37 | 0)) {
              break block11
             }
             $5_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
             if (($5_1 | 0) == (42 | 0)) {
              break block12
             }
             if (($5_1 | 0) != (37 | 0)) {
              break block13
             }
            }
            i64toi32_i32$4 = 0;
            $303($0_1 | 0, 0 | 0, i64toi32_i32$4 | 0);
            block17 : {
             block14 : {
              if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (37 | 0)) {
               break block14
              }
              label2 : while (1) {
               block16 : {
                block15 : {
                 $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                 if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                  break block15
                 }
                 HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
                 $5_1 = HEAPU8[$5_1 >> 0] | 0;
                 break block16;
                }
                $5_1 = $304($0_1 | 0) | 0;
               }
               if ($705($5_1 | 0) | 0) {
                continue label2
               }
               break label2;
              };
              $1_1 = $1_1 + 1 | 0;
              break block17;
             }
             block18 : {
              $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($5_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
               break block18
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
              $5_1 = HEAPU8[$5_1 >> 0] | 0;
              break block17;
             }
             $5_1 = $304($0_1 | 0) | 0;
            }
            block19 : {
             if (($5_1 | 0) == (HEAPU8[$1_1 >> 0] | 0 | 0)) {
              break block19
             }
             block20 : {
              i64toi32_i32$5 = $0_1;
              i64toi32_i32$4 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
              i64toi32_i32$5 = i64toi32_i32$4;
              i64toi32_i32$4 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
               $64_1 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                 $65_1 = 0
                } else {
                 $65_1 = 1
                }
                $66_1 = $65_1;
               } else {
                $66_1 = 0
               }
               $64_1 = $66_1;
              }
              if ($64_1) {
               break block20
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
             }
             if (($5_1 | 0) > (-1 | 0)) {
              break block5
             }
             if ($6_1) {
              break block5
             }
             break block3;
            }
            i64toi32_i32$0 = $0_1;
            i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
            i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
            $143$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $18$hi;
            i64toi32_i32$1 = $143$hi;
            i64toi32_i32$0 = i64toi32_i32$5;
            i64toi32_i32$5 = $18$hi;
            i64toi32_i32$4 = $18_1;
            i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
            i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $145$hi = i64toi32_i32$2;
            i64toi32_i32$0 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
            $151_1 = i64toi32_i32$0;
            $151$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $145$hi;
            i64toi32_i32$1 = i64toi32_i32$3;
            i64toi32_i32$0 = $151$hi;
            i64toi32_i32$4 = $151_1;
            i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
            if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
            }
            $18_1 = i64toi32_i32$5;
            $18$hi = i64toi32_i32$3;
            $5_1 = $1_1;
            break block10;
           }
           $5_1 = $1_1 + 2 | 0;
           $7_1 = 0;
           break block21;
          }
          block22 : {
           $8_1 = $5_1 + -48 | 0;
           if ($8_1 >>> 0 > 9 >>> 0) {
            break block22
           }
           if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
            break block22
           }
           $5_1 = $1_1 + 3 | 0;
           $7_1 = $706($2_1 | 0, $8_1 | 0) | 0;
           break block21;
          }
          $5_1 = $1_1 + 1 | 0;
          $7_1 = HEAP32[$2_1 >> 2] | 0;
          $2_1 = $2_1 + 4 | 0;
         }
         $9_1 = 0;
         $8_1 = 0;
         block23 : {
          $1_1 = HEAPU8[$5_1 >> 0] | 0;
          if ((($1_1 + -48 | 0) & 255 | 0) >>> 0 > 9 >>> 0) {
           break block23
          }
          label3 : while (1) {
           $8_1 = (Math_imul($8_1, 10) + ($1_1 & 255 | 0) | 0) + -48 | 0;
           $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
           $5_1 = $5_1 + 1 | 0;
           if ((($1_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
            continue label3
           }
           break label3;
          };
         }
         block25 : {
          block24 : {
           if (($1_1 & 255 | 0 | 0) == (109 | 0)) {
            break block24
           }
           $10_1 = $5_1;
           break block25;
          }
          $10_1 = $5_1 + 1 | 0;
          $11_1 = 0;
          $9_1 = ($7_1 | 0) != (0 | 0);
          $1_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
          $12_1 = 0;
         }
         $5_1 = $10_1 + 1 | 0;
         $13_1 = 3;
         block30 : {
          block26 : {
           switch (($1_1 & 255 | 0) + -65 | 0 | 0) {
           case 39:
            $1_1 = (HEAPU8[($10_1 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
            $5_1 = $1_1 ? $10_1 + 2 | 0 : $5_1;
            $13_1 = $1_1 ? -2 : -1;
            break block30;
           case 43:
            $1_1 = (HEAPU8[($10_1 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
            $5_1 = $1_1 ? $10_1 + 2 | 0 : $5_1;
            $13_1 = $1_1 ? 3 : 1;
            break block30;
           case 51:
           case 57:
            $13_1 = 1;
            break block30;
           case 11:
            $13_1 = 2;
            break block30;
           case 0:
           case 2:
           case 4:
           case 5:
           case 6:
           case 18:
           case 23:
           case 26:
           case 32:
           case 34:
           case 35:
           case 36:
           case 37:
           case 38:
           case 40:
           case 45:
           case 46:
           case 47:
           case 50:
           case 52:
           case 55:
            break block26;
           case 41:
            break block30;
           default:
            break block27;
           };
          }
          $13_1 = 0;
          $5_1 = $10_1;
         }
         $1_1 = HEAPU8[$5_1 >> 0] | 0;
         $10_1 = ($1_1 & 47 | 0 | 0) == (3 | 0);
         $14_1 = $10_1 ? 1 : $13_1;
         block33 : {
          $15_1 = $10_1 ? $1_1 | 32 | 0 : $1_1;
          if (($15_1 | 0) == (91 | 0)) {
           break block33
          }
          block35 : {
           block34 : {
            if (($15_1 | 0) == (110 | 0)) {
             break block34
            }
            if (($15_1 | 0) != (99 | 0)) {
             break block35
            }
            $8_1 = ($8_1 | 0) > (1 | 0) ? $8_1 : 1;
            break block33;
           }
           i64toi32_i32$3 = $18$hi;
           $707($7_1 | 0, $14_1 | 0, $18_1 | 0, i64toi32_i32$3 | 0);
           break block10;
          }
          i64toi32_i32$3 = 0;
          $303($0_1 | 0, 0 | 0, i64toi32_i32$3 | 0);
          label4 : while (1) {
           block37 : {
            block36 : {
             $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
             if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
              break block36
             }
             HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
             $1_1 = HEAPU8[$1_1 >> 0] | 0;
             break block37;
            }
            $1_1 = $304($0_1 | 0) | 0;
           }
           if ($705($1_1 | 0) | 0) {
            continue label4
           }
           break label4;
          };
          $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          block38 : {
           i64toi32_i32$2 = $0_1;
           i64toi32_i32$3 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$3;
           i64toi32_i32$3 = 0;
           i64toi32_i32$4 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
            $67_1 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
              $68_1 = 0
             } else {
              $68_1 = 1
             }
             $69_1 = $68_1;
            } else {
             $69_1 = 0
            }
            $67_1 = $69_1;
           }
           if ($67_1) {
            break block38
           }
           $1_1 = $1_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
          }
          i64toi32_i32$4 = $0_1;
          i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $282$hi = i64toi32_i32$1;
          i64toi32_i32$1 = $18$hi;
          i64toi32_i32$1 = $282$hi;
          i64toi32_i32$4 = i64toi32_i32$2;
          i64toi32_i32$2 = $18$hi;
          i64toi32_i32$3 = $18_1;
          i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
          if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $284$hi = i64toi32_i32$5;
          i64toi32_i32$4 = $1_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
          i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
          $289_1 = i64toi32_i32$4;
          $289$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $284$hi;
          i64toi32_i32$1 = i64toi32_i32$0;
          i64toi32_i32$4 = $289$hi;
          i64toi32_i32$3 = $289_1;
          i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
          i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
          }
          $18_1 = i64toi32_i32$2;
          $18$hi = i64toi32_i32$0;
         }
         i64toi32_i32$1 = $8_1;
         i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
         $19_1 = i64toi32_i32$1;
         $19$hi = i64toi32_i32$0;
         $303($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
         block40 : {
          block39 : {
           $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
            break block39
           }
           HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
           break block40;
          }
          if (($304($0_1 | 0) | 0 | 0) < (0 | 0)) {
           break block27
          }
         }
         block41 : {
          i64toi32_i32$5 = $0_1;
          i64toi32_i32$0 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
          i64toi32_i32$5 = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
           $70_1 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
             $71_1 = 0
            } else {
             $71_1 = 1
            }
            $72_1 = $71_1;
           } else {
            $72_1 = 0
           }
           $70_1 = $72_1;
          }
          if ($70_1) {
           break block41
          }
          HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         $1_1 = 16;
         block43 : {
          block55 : {
           block53 : {
            block52 : {
             block51 : {
              block42 : {
               block47 : {
                switch ($15_1 + -88 | 0 | 0) {
                default:
                 $1_1 = $15_1 + -65 | 0;
                 if ($1_1 >>> 0 > 6 >>> 0) {
                  break block43
                 }
                 if (!((1 << $1_1 | 0) & 113 | 0)) {
                  break block43
                 }
                case 9:
                case 13:
                case 14:
                case 15:
                 $311($3_1 + 8 | 0 | 0, $0_1 | 0, $14_1 | 0, 0 | 0);
                 i64toi32_i32$3 = $0_1;
                 i64toi32_i32$5 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
                 $329_1 = i64toi32_i32$5;
                 $329$hi = i64toi32_i32$1;
                 i64toi32_i32$5 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
                 i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                 $335_1 = i64toi32_i32$5;
                 $335$hi = i64toi32_i32$1;
                 i64toi32_i32$1 = 0;
                 i64toi32_i32$3 = 0;
                 i64toi32_i32$5 = $335$hi;
                 i64toi32_i32$0 = $335_1;
                 i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                 i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                 i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                 i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                 $336$hi = i64toi32_i32$2;
                 i64toi32_i32$2 = $329$hi;
                 i64toi32_i32$1 = $329_1;
                 i64toi32_i32$3 = $336$hi;
                 i64toi32_i32$0 = i64toi32_i32$4;
                 if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) | 0) {
                  break block50
                 }
                 if (!$7_1) {
                  break block43
                 }
                 i64toi32_i32$0 = $3_1;
                 i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
                 i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
                 $19_1 = i64toi32_i32$1;
                 $19$hi = i64toi32_i32$2;
                 i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] | 0;
                 $20_1 = i64toi32_i32$2;
                 $20$hi = i64toi32_i32$1;
                 switch ($14_1 | 0) {
                 case 0:
                  break block51;
                 case 1:
                  break block52;
                 case 2:
                  break block53;
                 default:
                  break block43;
                 };
                case 3:
                case 11:
                case 27:
                 block54 : {
                  if (($15_1 | 16 | 0 | 0) != (115 | 0)) {
                   break block54
                  }
                  $322($3_1 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                  HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                  if (($15_1 | 0) != (115 | 0)) {
                   break block55
                  }
                  HEAP8[($3_1 + 65 | 0) >> 0] = 0;
                  HEAP8[($3_1 + 46 | 0) >> 0] = 0;
                  $73_1 = 0;
                  HEAP16[($3_1 + 42 | 0) >> 1] = $73_1;
                  HEAP16[($3_1 + 44 | 0) >> 1] = $73_1 >>> 16 | 0;
                  break block55;
                 }
                 $13_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                 $1_1 = ($13_1 | 0) == (94 | 0);
                 $322($3_1 + 32 | 0 | 0, $1_1 | 0, 257 | 0) | 0;
                 HEAP8[($3_1 + 32 | 0) >> 0] = 0;
                 $16_1 = $1_1 ? $5_1 + 2 | 0 : $5_1 + 1 | 0;
                 block58 : {
                  block59 : {
                   block57 : {
                    block56 : {
                     $1_1 = HEAPU8[($5_1 + ($1_1 ? 2 : 1) | 0) >> 0] | 0;
                     if (($1_1 | 0) == (45 | 0)) {
                      break block56
                     }
                     if (($1_1 | 0) == (93 | 0)) {
                      break block57
                     }
                     $10_1 = ($13_1 | 0) != (94 | 0);
                     $5_1 = $16_1;
                     break block58;
                    }
                    $10_1 = ($13_1 | 0) != (94 | 0);
                    HEAP8[($3_1 + 78 | 0) >> 0] = $10_1;
                    break block59;
                   }
                   $10_1 = ($13_1 | 0) != (94 | 0);
                   HEAP8[($3_1 + 126 | 0) >> 0] = $10_1;
                  }
                  $5_1 = $16_1 + 1 | 0;
                 }
                 label6 : while (1) {
                  block61 : {
                   block60 : {
                    $13_1 = HEAPU8[$5_1 >> 0] | 0;
                    if (($13_1 | 0) == (45 | 0)) {
                     break block60
                    }
                    if (!$13_1) {
                     break block27
                    }
                    if (($13_1 | 0) == (93 | 0)) {
                     break block55
                    }
                    break block61;
                   }
                   $13_1 = 45;
                   $17_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
                   if (!$17_1) {
                    break block61
                   }
                   if (($17_1 | 0) == (93 | 0)) {
                    break block61
                   }
                   $16_1 = $5_1 + 1 | 0;
                   block63 : {
                    block62 : {
                     $1_1 = HEAPU8[($5_1 + -1 | 0) >> 0] | 0;
                     if ($1_1 >>> 0 < $17_1 >>> 0) {
                      break block62
                     }
                     $13_1 = $17_1;
                     break block63;
                    }
                    label5 : while (1) {
                     $1_1 = $1_1 + 1 | 0;
                     HEAP8[(($3_1 + 32 | 0) + $1_1 | 0) >> 0] = $10_1;
                     $13_1 = HEAPU8[$16_1 >> 0] | 0;
                     if ($1_1 >>> 0 < $13_1 >>> 0) {
                      continue label5
                     }
                     break label5;
                    };
                   }
                   $5_1 = $16_1;
                  }
                  HEAP8[(($13_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] = $10_1;
                  $5_1 = $5_1 + 1 | 0;
                  continue label6;
                 };
                case 23:
                 $1_1 = 8;
                 break block42;
                case 12:
                case 29:
                 $1_1 = 10;
                 break block42;
                case 0:
                case 24:
                case 32:
                 break block42;
                case 1:
                case 2:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 10:
                case 16:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 25:
                case 26:
                case 28:
                case 30:
                case 31:
                 break block43;
                case 17:
                 break block47;
                };
               }
               $1_1 = 0;
              }
              i64toi32_i32$1 = -1;
              i64toi32_i32$1 = $701($0_1 | 0, $1_1 | 0, 0 | 0, -1 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              $19_1 = i64toi32_i32$1;
              $19$hi = i64toi32_i32$2;
              i64toi32_i32$0 = $0_1;
              i64toi32_i32$2 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
              $441_1 = i64toi32_i32$2;
              $441$hi = i64toi32_i32$1;
              i64toi32_i32$2 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
              i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
              $447_1 = i64toi32_i32$2;
              $447$hi = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$2 = $447$hi;
              i64toi32_i32$3 = $447_1;
              i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
              i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
              i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
              i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
              $448$hi = i64toi32_i32$4;
              i64toi32_i32$4 = $441$hi;
              i64toi32_i32$1 = $441_1;
              i64toi32_i32$0 = $448$hi;
              i64toi32_i32$3 = i64toi32_i32$5;
              if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
               break block50
              }
              block64 : {
               if (($15_1 | 0) != (112 | 0)) {
                break block64
               }
               if (!$7_1) {
                break block64
               }
               i64toi32_i32$1 = $19$hi;
               HEAP32[$7_1 >> 2] = $19_1;
               break block43;
              }
              i64toi32_i32$1 = $19$hi;
              $707($7_1 | 0, $14_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
              break block43;
             }
             i64toi32_i32$1 = $20$hi;
             i64toi32_i32$1 = $19$hi;
             i64toi32_i32$1 = $20$hi;
             i64toi32_i32$4 = $19$hi;
             HEAPF32[$7_1 >> 2] = Math_fround($366($20_1 | 0, i64toi32_i32$1 | 0, $19_1 | 0, i64toi32_i32$4 | 0));
             break block43;
            }
            i64toi32_i32$4 = $20$hi;
            i64toi32_i32$4 = $19$hi;
            i64toi32_i32$4 = $20$hi;
            i64toi32_i32$1 = $19$hi;
            HEAPF64[$7_1 >> 3] = +$365($20_1 | 0, i64toi32_i32$4 | 0, $19_1 | 0, i64toi32_i32$1 | 0);
            break block43;
           }
           i64toi32_i32$1 = $20$hi;
           i64toi32_i32$4 = $7_1;
           HEAP32[i64toi32_i32$4 >> 2] = $20_1;
           HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
           i64toi32_i32$1 = $19$hi;
           HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19_1;
           HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
           break block43;
          }
          $16_1 = ($15_1 | 0) != (99 | 0);
          $10_1 = $16_1 ? 31 : $8_1 + 1 | 0;
          block74 : {
           block65 : {
            if (($14_1 | 0) != (1 | 0)) {
             break block65
            }
            $8_1 = $7_1;
            block66 : {
             if (!$9_1) {
              break block66
             }
             $8_1 = $340($10_1 << 2 | 0 | 0) | 0;
             if (!$8_1) {
              break block67
             }
            }
            i64toi32_i32$4 = $3_1;
            i64toi32_i32$1 = 0;
            HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
            HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
            $1_1 = 0;
            block72 : {
             block70 : {
              label8 : while (1) {
               $13_1 = $8_1;
               label7 : while (1) {
                block69 : {
                 block68 : {
                  $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                  if (($8_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                   break block68
                  }
                  HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                  $8_1 = HEAPU8[$8_1 >> 0] | 0;
                  break block69;
                 }
                 $8_1 = $304($0_1 | 0) | 0;
                }
                if (!(HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                 break block70
                }
                HEAP8[($3_1 + 27 | 0) >> 0] = $8_1;
                $8_1 = $629($3_1 + 28 | 0 | 0, $3_1 + 27 | 0 | 0, 1 | 0, $3_1 + 296 | 0 | 0) | 0;
                if (($8_1 | 0) == (-2 | 0)) {
                 continue label7
                }
                block71 : {
                 if (($8_1 | 0) != (-1 | 0)) {
                  break block71
                 }
                 $11_1 = 0;
                 break block72;
                }
                block73 : {
                 if (!$13_1) {
                  break block73
                 }
                 HEAP32[($13_1 + ($1_1 << 2 | 0) | 0) >> 2] = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                 $1_1 = $1_1 + 1 | 0;
                }
                if (!$9_1) {
                 continue label7
                }
                if (($1_1 | 0) != ($10_1 | 0)) {
                 continue label7
                }
                break label7;
               };
               $10_1 = $10_1 << 1 | 0 | 1 | 0;
               $8_1 = $343($13_1 | 0, $10_1 << 2 | 0 | 0) | 0;
               if ($8_1) {
                continue label8
               }
               break label8;
              };
              $11_1 = 0;
              $12_1 = $13_1;
              $9_1 = 1;
              break block27;
             }
             $11_1 = 0;
             $12_1 = $13_1;
             if ($703($3_1 + 296 | 0 | 0) | 0) {
              break block74
             }
            }
            $12_1 = $13_1;
            break block27;
           }
           block75 : {
            if (!$9_1) {
             break block75
            }
            $1_1 = 0;
            $8_1 = $340($10_1 | 0) | 0;
            if (!$8_1) {
             break block67
            }
            label10 : while (1) {
             $13_1 = $8_1;
             label9 : while (1) {
              block77 : {
               block76 : {
                $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
                if (($8_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                 break block76
                }
                HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
                $8_1 = HEAPU8[$8_1 >> 0] | 0;
                break block77;
               }
               $8_1 = $304($0_1 | 0) | 0;
              }
              block78 : {
               if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                break block78
               }
               $12_1 = 0;
               $11_1 = $13_1;
               break block74;
              }
              HEAP8[($13_1 + $1_1 | 0) >> 0] = $8_1;
              $1_1 = $1_1 + 1 | 0;
              if (($1_1 | 0) != ($10_1 | 0)) {
               continue label9
              }
              break label9;
             };
             $10_1 = $10_1 << 1 | 0 | 1 | 0;
             $8_1 = $343($13_1 | 0, $10_1 | 0) | 0;
             if ($8_1) {
              continue label10
             }
             break label10;
            };
            $12_1 = 0;
            $11_1 = $13_1;
            $9_1 = 1;
            break block27;
           }
           $1_1 = 0;
           block79 : {
            if (!$7_1) {
             break block79
            }
            label11 : while (1) {
             block81 : {
              block80 : {
               $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
               if (($8_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
                break block80
               }
               HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + 1 | 0;
               $8_1 = HEAPU8[$8_1 >> 0] | 0;
               break block81;
              }
              $8_1 = $304($0_1 | 0) | 0;
             }
             block82 : {
              if (HEAPU8[(($8_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
               break block82
              }
              $12_1 = 0;
              $13_1 = $7_1;
              $11_1 = $13_1;
              break block74;
             }
             HEAP8[($7_1 + $1_1 | 0) >> 0] = $8_1;
             $1_1 = $1_1 + 1 | 0;
             continue label11;
            };
           }
           label12 : while (1) {
            block84 : {
             block83 : {
              $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
              if (($1_1 | 0) == (HEAP32[($0_1 + 104 | 0) >> 2] | 0 | 0)) {
               break block83
              }
              HEAP32[($0_1 + 4 | 0) >> 2] = $1_1 + 1 | 0;
              $1_1 = HEAPU8[$1_1 >> 0] | 0;
              break block84;
             }
             $1_1 = $304($0_1 | 0) | 0;
            }
            if (HEAPU8[(($1_1 + ($3_1 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
             continue label12
            }
            break label12;
           };
           $13_1 = 0;
           $11_1 = 0;
           $12_1 = 0;
           $1_1 = 0;
          }
          $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
          block85 : {
           i64toi32_i32$3 = $0_1;
           i64toi32_i32$1 = HEAP32[($0_1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$4 = HEAP32[($0_1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$3 = i64toi32_i32$1;
           i64toi32_i32$1 = 0;
           i64toi32_i32$0 = 0;
           if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
            $74_1 = 1
           } else {
            if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
             if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
              $75_1 = 0
             } else {
              $75_1 = 1
             }
             $76_1 = $75_1;
            } else {
             $76_1 = 0
            }
            $74_1 = $76_1;
           }
           if ($74_1) {
            break block85
           }
           $8_1 = $8_1 + -1 | 0;
           HEAP32[($0_1 + 4 | 0) >> 2] = $8_1;
          }
          i64toi32_i32$0 = $0_1;
          i64toi32_i32$3 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
          $653_1 = i64toi32_i32$3;
          $653$hi = i64toi32_i32$4;
          i64toi32_i32$3 = $8_1 - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
          i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
          $658_1 = i64toi32_i32$3;
          $658$hi = i64toi32_i32$4;
          i64toi32_i32$4 = $653$hi;
          i64toi32_i32$0 = $653_1;
          i64toi32_i32$3 = $658$hi;
          i64toi32_i32$1 = $658_1;
          i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
          i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
          if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
           i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
          }
          $20_1 = i64toi32_i32$2;
          $20$hi = i64toi32_i32$5;
          if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
           break block50
          }
          i64toi32_i32$5 = $19$hi;
          i64toi32_i32$5 = $20$hi;
          i64toi32_i32$4 = i64toi32_i32$2;
          i64toi32_i32$0 = $19$hi;
          i64toi32_i32$1 = $19_1;
          if (!($16_1 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) | 0) | 0)) {
           break block50
          }
          block86 : {
           if (!$9_1) {
            break block86
           }
           HEAP32[$7_1 >> 2] = $13_1;
          }
          if (($15_1 | 0) == (99 | 0)) {
           break block43
          }
          block87 : {
           if (!$12_1) {
            break block87
           }
           HEAP32[($12_1 + ($1_1 << 2 | 0) | 0) >> 2] = 0;
          }
          block88 : {
           if ($11_1) {
            break block88
           }
           $11_1 = 0;
           break block43;
          }
          HEAP8[($11_1 + $1_1 | 0) >> 0] = 0;
         }
         i64toi32_i32$1 = $0_1;
         i64toi32_i32$4 = HEAP32[($0_1 + 120 | 0) >> 2] | 0;
         i64toi32_i32$5 = HEAP32[($0_1 + 124 | 0) >> 2] | 0;
         $685$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $18$hi;
         i64toi32_i32$5 = $685$hi;
         i64toi32_i32$1 = i64toi32_i32$4;
         i64toi32_i32$4 = $18$hi;
         i64toi32_i32$0 = $18_1;
         i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
         i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
         if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
         }
         $687$hi = i64toi32_i32$2;
         i64toi32_i32$1 = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[($0_1 + 44 | 0) >> 2] | 0) | 0;
         i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
         $693_1 = i64toi32_i32$1;
         $693$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $687$hi;
         i64toi32_i32$5 = i64toi32_i32$3;
         i64toi32_i32$1 = $693$hi;
         i64toi32_i32$0 = $693_1;
         i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
         i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
         }
         $18_1 = i64toi32_i32$4;
         $18$hi = i64toi32_i32$3;
         $6_1 = $6_1 + (($7_1 | 0) != (0 | 0)) | 0;
        }
        $1_1 = $5_1 + 1 | 0;
        $5_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
        if ($5_1) {
         continue label13
        }
        break block5;
       };
      }
      $9_1 = 1;
      $11_1 = 0;
      $12_1 = 0;
     }
     $6_1 = $6_1 ? $6_1 : -1;
    }
    if (!$9_1) {
     break block5
    }
    $342($11_1 | 0);
    $342($12_1 | 0);
    break block5;
   }
   $6_1 = -1;
  }
  block89 : {
   if ($4_1) {
    break block89
   }
   $233($0_1 | 0);
  }
  global$0 = $3_1 + 304 | 0;
  return $6_1 | 0;
 }
 
 function $705($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $706($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1_1 >>> 0 > 1 >>> 0 ? ($0_1 + ($1_1 << 2 | 0) | 0) + -4 | 0 : $0_1;
  HEAP32[($2_1 + 8 | 0) >> 2] = $0_1 + 4 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $707($0_1, $1_1, $2_1, $2$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  block : {
   if (!$0_1) {
    break block
   }
   block4 : {
    switch ($1_1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0_1 >> 0] = $2_1;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break block4;
    default:
     break block;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function $708($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 144 | 0;
  global$0 = $3_1;
  block : {
   if (!144) {
    break block
   }
   wasm2js_memory_fill($3_1, 0, 144);
  }
  HEAP32[($3_1 + 76 | 0) >> 2] = -1;
  HEAP32[($3_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 32 | 0) >> 2] = 82;
  HEAP32[($3_1 + 84 | 0) >> 2] = $0_1;
  $0_1 = $704($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 144 | 0;
  return $0_1 | 0;
 }
 
 function $709($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = $2_1 + 256 | 0;
  $5_1 = $295($3_1 | 0, 0 | 0, $4_1 | 0) | 0;
  $4_1 = $5_1 ? $5_1 - $3_1 | 0 : $4_1;
  $2_1 = $4_1 >>> 0 < $2_1 >>> 0 ? $4_1 : $2_1;
  $245($1_1 | 0, $3_1 | 0, $2_1 | 0) | 0;
  $4_1 = $3_1 + $4_1 | 0;
  HEAP32[($0_1 + 84 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + $2_1 | 0;
  return $2_1 | 0;
 }
 
 function $710() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  block : {
   if (fimport$8($0_1 + 12 | 0 | 0, $0_1 + 8 | 0 | 0) | 0) {
    break block
   }
   $1_1 = $340(((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 67143916 | 0) >> 2] = $1_1;
   if (!$1_1) {
    break block
   }
   block1 : {
    $1_1 = $340(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!$1_1) {
     break block1
    }
    $2_1 = HEAP32[(0 + 67143916 | 0) >> 2] | 0;
    HEAP32[($2_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    if (!(fimport$9($2_1 | 0, $1_1 | 0) | 0)) {
     break block
    }
   }
   HEAP32[(0 + 67143916 | 0) >> 2] = 0;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $711($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  block : {
   if ($2_1) {
    break block
   }
   return 0 | 0;
  }
  block2 : {
   block1 : {
    $3_1 = HEAPU8[$0_1 >> 0] | 0;
    if ($3_1) {
     break block1
    }
    $0_1 = 0;
    break block2;
   }
   block3 : {
    label : while (1) {
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 & 255 | 0 | 0) != ($4_1 | 0)) {
      break block3
     }
     if (!$4_1) {
      break block3
     }
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break block3
     }
     $1_1 = $1_1 + 1 | 0;
     $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
     $0_1 = $0_1 + 1 | 0;
     if ($3_1) {
      continue label
     }
     break label;
    };
    $3_1 = 0;
   }
   $0_1 = $3_1 & 255 | 0;
  }
  return $0_1 - (HEAPU8[$1_1 >> 0] | 0) | 0 | 0;
 }
 
 function $712($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0;
  block : {
   $1_1 = $292($0_1 | 0, 61 | 0) | 0;
   if (($1_1 | 0) != ($0_1 | 0)) {
    break block
   }
   return 0 | 0;
  }
  $2_1 = 0;
  block1 : {
   $3_1 = $1_1 - $0_1 | 0;
   if (HEAPU8[($0_1 + $3_1 | 0) >> 0] | 0) {
    break block1
   }
   $1_1 = HEAP32[(0 + 67143916 | 0) >> 2] | 0;
   if (!$1_1) {
    break block1
   }
   $4_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$4_1) {
    break block1
   }
   block3 : {
    label : while (1) {
     block2 : {
      if ($711($0_1 | 0, $4_1 | 0, $3_1 | 0) | 0) {
       break block2
      }
      $4_1 = (HEAP32[$1_1 >> 2] | 0) + $3_1 | 0;
      if ((HEAPU8[$4_1 >> 0] | 0 | 0) == (61 | 0)) {
       break block3
      }
     }
     $4_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     if ($4_1) {
      continue label
     }
     break block1;
    };
   }
   $2_1 = $4_1 + 1 | 0;
  }
  return $2_1 | 0;
 }
 
 function $713($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  block : {
   if (HEAPU8[$1_1 >> 0] | 0) {
    break block
   }
   block1 : {
    $1_1 = $712(67110065 | 0) | 0;
    if (!$1_1) {
     break block1
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break block
    }
   }
   block2 : {
    $1_1 = $712(Math_imul($0_1, 12) + 67122672 | 0 | 0) | 0;
    if (!$1_1) {
     break block2
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break block
    }
   }
   block3 : {
    $1_1 = $712(67110078 | 0) | 0;
    if (!$1_1) {
     break block3
    }
    if (HEAPU8[$1_1 >> 0] | 0) {
     break block
    }
   }
   $1_1 = 67110798;
  }
  $2_1 = 0;
  block5 : {
   block4 : {
    label : while (1) {
     $3_1 = HEAPU8[($1_1 + $2_1 | 0) >> 0] | 0;
     if (!$3_1) {
      break block4
     }
     if (($3_1 | 0) == (47 | 0)) {
      break block4
     }
     $3_1 = 23;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != (23 | 0)) {
      continue label
     }
     break block5;
    };
   }
   $3_1 = $2_1;
  }
  $4_1 = 67110798;
  block11 : {
   block9 : {
    block8 : {
     block7 : {
      block6 : {
       $2_1 = HEAPU8[$1_1 >> 0] | 0;
       if (($2_1 | 0) == (46 | 0)) {
        break block6
       }
       if (HEAPU8[($1_1 + $3_1 | 0) >> 0] | 0) {
        break block6
       }
       $4_1 = $1_1;
       if (($2_1 | 0) != (67 | 0)) {
        break block7
       }
      }
      if (!(HEAPU8[($4_1 + 1 | 0) >> 0] | 0)) {
       break block8
      }
     }
     if (!($286($4_1 | 0, 67110798 | 0) | 0)) {
      break block8
     }
     if ($286($4_1 | 0, 67110034 | 0) | 0) {
      break block9
     }
    }
    block10 : {
     if ($0_1) {
      break block10
     }
     $2_1 = 67121684;
     if ((HEAPU8[($4_1 + 1 | 0) >> 0] | 0 | 0) == (46 | 0)) {
      break block11
     }
    }
    return 0 | 0;
   }
   block12 : {
    $2_1 = HEAP32[(0 + 67143924 | 0) >> 2] | 0;
    if (!$2_1) {
     break block12
    }
    label1 : while (1) {
     if (!($286($4_1 | 0, $2_1 + 8 | 0 | 0) | 0)) {
      break block11
     }
     $2_1 = HEAP32[($2_1 + 32 | 0) >> 2] | 0;
     if ($2_1) {
      continue label1
     }
     break label1;
    };
   }
   block13 : {
    $2_1 = $340(36 | 0) | 0;
    if (!$2_1) {
     break block13
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67121688 | 0) >> 2] | 0;
    HEAP32[$2_1 >> 2] = HEAP32[(i64toi32_i32$2 + 67121684 | 0) >> 2] | 0;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1_1 = $2_1 + 8 | 0;
    $245($1_1 | 0, $4_1 | 0, $3_1 | 0) | 0;
    HEAP8[($1_1 + $3_1 | 0) >> 0] = 0;
    HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[(0 + 67143924 | 0) >> 2] | 0;
    HEAP32[(0 + 67143924 | 0) >> 2] = $2_1;
   }
   $2_1 = $0_1 | $2_1 | 0 ? $2_1 : 67121684;
  }
  return $2_1 | 0;
 }
 
 function $714($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) != (67143952 | 0) & (($0_1 | 0) != (67143928 | 0) & (($0_1 | 0) != (67121744 | 0) & (($0_1 | 0) != (0 | 0) & ($0_1 | 0) != (67121720 | 0) | 0) | 0) | 0) | 0 | 0;
 }
 
 function $715($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $239(67143920 | 0);
  $2_1 = $716($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $240(67143920 | 0);
  return $2_1 | 0;
 }
 
 function $716($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5_1 = 0, i64toi32_i32$2 = 0, $72_1 = 0, $78_1 = 0, $84_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = 0;
  block4 : {
   block2 : {
    label : while (1) {
     $5_1 = (1 << $4_1 | 0) & $0_1 | 0;
     block1 : {
      block : {
       if (!$2_1) {
        break block
       }
       if ($5_1) {
        break block
       }
       $5_1 = HEAP32[($2_1 + ($4_1 << 2 | 0) | 0) >> 2] | 0;
       break block1;
      }
      $5_1 = $713($4_1 | 0, ($5_1 ? $1_1 : 67111587) | 0) | 0;
     }
     HEAP32[(($3_1 + 8 | 0) + ($4_1 << 2 | 0) | 0) >> 2] = $5_1;
     if (($5_1 | 0) == (-1 | 0)) {
      break block2
     }
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != (6 | 0)) {
      continue label
     }
     break label;
    };
    block3 : {
     if ($714($2_1 | 0) | 0) {
      break block3
     }
     $2_1 = 67121720;
     if (!($294($3_1 + 8 | 0 | 0, 67121720 | 0, 24 | 0) | 0)) {
      break block4
     }
     $2_1 = 67121744;
     if (!($294($3_1 + 8 | 0 | 0, 67121744 | 0, 24 | 0) | 0)) {
      break block4
     }
     $4_1 = 0;
     block5 : {
      if (HEAPU8[(0 + 67143976 | 0) >> 0] | 0) {
       break block5
      }
      label1 : while (1) {
       HEAP32[(($4_1 << 2 | 0) + 67143928 | 0) >> 2] = $713($4_1 | 0, 67111587 | 0) | 0;
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != (6 | 0)) {
        continue label1
       }
       break label1;
      };
      HEAP8[(0 + 67143976 | 0) >> 0] = 1;
      HEAP32[(0 + 67143952 | 0) >> 2] = HEAP32[(0 + 67143928 | 0) >> 2] | 0;
     }
     $2_1 = 67143928;
     if (!($294($3_1 + 8 | 0 | 0, 67143928 | 0, 24 | 0) | 0)) {
      break block4
     }
     $2_1 = 67143952;
     if (!($294($3_1 + 8 | 0 | 0, 67143952 | 0, 24 | 0) | 0)) {
      break block4
     }
     $2_1 = $340(24 | 0) | 0;
     if (!$2_1) {
      break block2
     }
    }
    i64toi32_i32$2 = $3_1;
    i64toi32_i32$0 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
    $72_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1;
    HEAP32[$2_1 >> 2] = $72_1;
    HEAP32[($2_1 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = ($3_1 + 8 | 0) + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $78_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $2_1 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $78_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = ($3_1 + 8 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $84_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $2_1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $84_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    break block4;
   }
   $2_1 = 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $717($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 + -97 | 0) >>> 0 < 26 >>> 0 ? $0_1 & 95 | 0 : $0_1) | 0;
 }
 
 function $718($0_1) {
  $0_1 = $0_1 | 0;
  return (($0_1 + -65 | 0) >>> 0 < 26 >>> 0 ? $0_1 | 32 | 0 : $0_1) | 0;
 }
 
 function $719($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $0_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
  HEAP32[($4_1 + 148 | 0) >> 2] = $0_1;
  $5_1 = $1_1 + -1 | 0;
  HEAP32[($4_1 + 152 | 0) >> 2] = $5_1 >>> 0 > $1_1 >>> 0 ? 0 : $5_1;
  block : {
   if (!144) {
    break block
   }
   wasm2js_memory_fill($4_1, 0, 144);
  }
  HEAP32[($4_1 + 76 | 0) >> 2] = -1;
  HEAP32[($4_1 + 36 | 0) >> 2] = 83;
  HEAP32[($4_1 + 80 | 0) >> 2] = -1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $4_1 + 159 | 0;
  HEAP32[($4_1 + 84 | 0) >> 2] = $4_1 + 148 | 0;
  HEAP8[$0_1 >> 0] = 0;
  $1_1 = $332($4_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 160 | 0;
  return $1_1 | 0;
 }
 
 function $720($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0, $6_1 = 0;
  $3_1 = HEAP32[($0_1 + 84 | 0) >> 2] | 0;
  $4_1 = HEAP32[$3_1 >> 2] | 0;
  block : {
   $5_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   $6_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
   $7_1 = (HEAP32[($0_1 + 20 | 0) >> 2] | 0) - $6_1 | 0;
   $7_1 = $5_1 >>> 0 < $7_1 >>> 0 ? $5_1 : $7_1;
   if (!$7_1) {
    break block
   }
   $245($4_1 | 0, $6_1 | 0, $7_1 | 0) | 0;
   $4_1 = (HEAP32[$3_1 >> 2] | 0) + $7_1 | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   $5_1 = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $7_1 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $5_1;
  }
  block1 : {
   $5_1 = $5_1 >>> 0 < $2_1 >>> 0 ? $5_1 : $2_1;
   if (!$5_1) {
    break block1
   }
   $245($4_1 | 0, $1_1 | 0, $5_1 | 0) | 0;
   $4_1 = (HEAP32[$3_1 >> 2] | 0) + $5_1 | 0;
   HEAP32[$3_1 >> 2] = $4_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) - $5_1 | 0;
  }
  HEAP8[$4_1 >> 0] = 0;
  $3_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $3_1;
  return $2_1 | 0;
 }
 
 function $721($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | (($0_1 | 32 | 0) + -97 | 0) >>> 0 < 6 >>> 0 | 0 | 0;
 }
 
 function $722($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $721($0_1 | 0) | 0 | 0;
 }
 
 function $723($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $724($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $723($0_1 | 0) | 0 | 0;
 }
 
 function $725($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $3_1 = 0, $6_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $5_1 = 0, $6$hi = 0, $39_1 = 0, $39$hi = 0, $7_1 = 0, $7$hi = 0, $50_1 = 0, $51_1 = 0, $83_1 = 0, $83$hi = 0, $29_1 = 0, $94_1 = 0, $94$hi = 0;
  block : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -2;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 136;
   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
    break block
   }
   i64toi32_i32$0 = $0$hi;
   $2_1 = $0_1;
   $3_1 = ($2_1 + -68 | 0) >> 2 | 0;
   block2 : {
    block3 : {
     block1 : {
      if ($2_1 & 3 | 0) {
       break block1
      }
      $3_1 = $3_1 + -1 | 0;
      if (!$1_1) {
       break block2
      }
      $4_1 = 1;
      break block3;
     }
     if (!$1_1) {
      break block2
     }
     $4_1 = 0;
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   i64toi32_i32$5 = (Math_imul($2_1, 31536e3) + Math_imul($3_1, 86400) | 0) + 2087447296 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 >> 31 | 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $0$hi;
  i64toi32_i32$3 = $0_1;
  i64toi32_i32$0 = -1;
  i64toi32_i32$2 = -100;
  i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $0_1 = i64toi32_i32$1;
  $0$hi = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$3 = __wasm_i64_sdiv(i64toi32_i32$1 | 0, i64toi32_i32$4 | 0, 400 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $6_1 = i64toi32_i32$3;
  $6$hi = i64toi32_i32$4;
  i64toi32_i32$3 = 0;
  i64toi32_i32$3 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$4 | 0, 400 | 0, i64toi32_i32$3 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $39_1 = i64toi32_i32$3;
  $39$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $0$hi;
  i64toi32_i32$5 = i64toi32_i32$1;
  i64toi32_i32$3 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
  i64toi32_i32$1 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 - i64toi32_i32$1 | 0;
  $7_1 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$0;
  i64toi32_i32$5 = 0;
  i64toi32_i32$2 = 63;
  i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
   $25_1 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
   $25_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
  }
  i64toi32_i32$5 = $6$hi;
  $3_1 = $25_1 + $6_1 | 0;
  block11 : {
   block10 : {
    block9 : {
     block5 : {
      block4 : {
       i64toi32_i32$5 = $7$hi;
       $2_1 = $7_1;
       $50_1 = $2_1 + 400 | 0;
       $51_1 = $2_1;
       i64toi32_i32$1 = $2_1;
       i64toi32_i32$4 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$5 | 0) < (i64toi32_i32$4 | 0)) {
        $26_1 = 1
       } else {
        if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$4 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $27_1 = 0
         } else {
          $27_1 = 1
         }
         $28_1 = $27_1;
        } else {
         $28_1 = 0
        }
        $26_1 = $28_1;
       }
       $2_1 = $26_1 ? $50_1 : $51_1;
       if ($2_1) {
        break block4
       }
       $2_1 = 1;
       $4_1 = 0;
       break block5;
      }
      block8 : {
       block6 : {
        if (($2_1 | 0) < (200 | 0)) {
         break block6
        }
        block7 : {
         if ($2_1 >>> 0 < 300 >>> 0) {
          break block7
         }
         $2_1 = $2_1 + -300 | 0;
         $4_1 = 3;
         break block8;
        }
        $2_1 = $2_1 + -200 | 0;
        $4_1 = 2;
        break block8;
       }
       $4_1 = ($2_1 | 0) > (99 | 0);
       $2_1 = $4_1 ? $2_1 + -100 | 0 : $2_1;
      }
      if ($2_1) {
       break block9
      }
      $2_1 = 0;
     }
     $5_1 = 0;
     if ($1_1) {
      break block10
     }
     break block11;
    }
    $5_1 = $2_1 >>> 2 | 0;
    $2_1 = !($2_1 & 3 | 0);
    if (!$1_1) {
     break block11
    }
   }
   HEAP32[$1_1 >> 2] = $2_1;
  }
  i64toi32_i32$1 = $0$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_i64_mul($0_1 | 0, i64toi32_i32$1 | 0, 31536e3 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $83_1 = i64toi32_i32$5;
  $83$hi = i64toi32_i32$1;
  i64toi32_i32$5 = ($5_1 + (Math_imul($4_1, 24) + Math_imul($3_1, 97) | 0) | 0) - $2_1 | 0;
  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
  $29_1 = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_i64_mul($29_1 | 0, i64toi32_i32$1 | 0, 86400 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $94_1 = i64toi32_i32$5;
  $94$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $83$hi;
  i64toi32_i32$2 = $83_1;
  i64toi32_i32$5 = $94$hi;
  i64toi32_i32$4 = $94_1;
  i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = 946771200;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
  i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$1 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function $726($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[(($0_1 << 2 | 0) + 67122752 | 0) >> 2] | 0;
  return (($0_1 | 0) > (1 | 0) ? ($1_1 ? $2_1 + 86400 | 0 : $2_1) : $2_1) | 0;
 }
 
 function $727($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $5$hi = 0, $4_1 = 0, $5_1 = 0, $1_1 = 0, $3_1 = 0, $34$hi = 0, $6_1 = 0, $6$hi = 0, $7_1 = 0, $7$hi = 0, $55_1 = 0, $55$hi = 0, $58$hi = 0, $59$hi = 0, $31_1 = 0, $63_1 = 0, $63$hi = 0, $64$hi = 0, $66_1 = 0, $66$hi = 0, $67$hi = 0, $69_1 = 0, $69$hi = 0, $70$hi = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  i64toi32_i32$2 = $0_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  block : {
   $2_1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
   if ($2_1 >>> 0 < 12 >>> 0) {
    break block
   }
   $3_1 = ($2_1 | 0) / (12 | 0) | 0;
   $4_1 = $2_1 - Math_imul($3_1, 12) | 0;
   $2_1 = ($4_1 | 0) < (0 | 0) ? $4_1 + 12 | 0 : $4_1;
   i64toi32_i32$0 = $3_1 + ($4_1 >> 31 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $34$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$1 = $34$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $5_1 = i64toi32_i32$4;
   $5$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$5 = $725($5_1 | 0, i64toi32_i32$5 | 0, $1_1 + 12 | 0 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$5;
  $5$hi = i64toi32_i32$2;
  $2_1 = $726($2_1 | 0, HEAP32[($1_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = $0_1;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $6_1 = i64toi32_i32$2;
  $6$hi = i64toi32_i32$5;
  i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
  $7_1 = i64toi32_i32$5;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  global$0 = $1_1 + 16 | 0;
  $55_1 = i64toi32_i32$2;
  $55$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
  $58$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$1 = $5_1;
  i64toi32_i32$2 = $58$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $59$hi = i64toi32_i32$4;
  i64toi32_i32$1 = $4_1 + -1 | 0;
  i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
  $31_1 = i64toi32_i32$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$1 = __wasm_i64_mul($31_1 | 0, i64toi32_i32$4 | 0, 86400 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $63_1 = i64toi32_i32$1;
  $63$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $59$hi;
  i64toi32_i32$5 = i64toi32_i32$0;
  i64toi32_i32$1 = $63$hi;
  i64toi32_i32$3 = $63_1;
  i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $64$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$5 = 0;
  i64toi32_i32$5 = __wasm_i64_mul($6_1 | 0, i64toi32_i32$0 | 0, 3600 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $66_1 = i64toi32_i32$5;
  $66$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $64$hi;
  i64toi32_i32$4 = i64toi32_i32$2;
  i64toi32_i32$5 = $66$hi;
  i64toi32_i32$3 = $66_1;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $67$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$4 = 0;
  i64toi32_i32$4 = __wasm_i64_mul($7_1 | 0, i64toi32_i32$2 | 0, 60 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
  $69_1 = i64toi32_i32$4;
  $69$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $67$hi;
  i64toi32_i32$0 = i64toi32_i32$1;
  i64toi32_i32$4 = $69$hi;
  i64toi32_i32$3 = $69_1;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $70$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $55$hi;
  i64toi32_i32$2 = $55_1;
  i64toi32_i32$0 = $70$hi;
  i64toi32_i32$3 = i64toi32_i32$5;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$2 | 0;
 }
 
 function $728($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $719($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $729() {
  block : {
   if ((HEAPU8[(0 + 67144024 | 0) >> 0] | 0) & 1 | 0) {
    break block
   }
   $235(67144e3 | 0) | 0;
   block1 : {
    if ((HEAPU8[(0 + 67144024 | 0) >> 0] | 0) & 1 | 0) {
     break block1
    }
    fimport$10(67143980 | 0, 67143984 | 0, 67144032 | 0, 67144064 | 0);
    HEAP32[(0 + 67143992 | 0) >> 2] = 67144064;
    HEAP32[(0 + 67143988 | 0) >> 2] = 67144032;
    HEAP8[(0 + 67144024 | 0) >> 0] = 1;
   }
   $236(67144e3 | 0) | 0;
  }
 }
 
 function $730($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = HEAP32[($0_1 + 40 | 0) >> 2] | 0;
  $239(67143996 | 0);
  $729();
  $240(67143996 | 0);
  return $0_1 | 0;
 }
 
 function $731($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  block : {
   if (($0_1 | 0) != (14 | 0)) {
    break block
   }
   return (HEAP32[$1_1 >> 2] | 0 ? 67110800 : 67110072) | 0;
  }
  $2_1 = $0_1 >> 16 | 0;
  block1 : {
   $3_1 = $0_1 & 65535 | 0;
   if (($3_1 | 0) != (65535 | 0)) {
    break block1
   }
   if (($2_1 | 0) > (5 | 0)) {
    break block1
   }
   $0_1 = HEAP32[($1_1 + ($2_1 << 2 | 0) | 0) >> 2] | 0;
   return ($0_1 ? $0_1 + 8 | 0 : 67110087) | 0;
  }
  $4_1 = 67111587;
  block4 : {
   block6 : {
    block5 : {
     switch ($2_1 + -1 | 0 | 0) {
     case 0:
      if ($3_1 >>> 0 > 1 >>> 0) {
       break block4
      }
      $0_1 = 67122800;
      break block6;
     case 1:
      if ($3_1 >>> 0 > 49 >>> 0) {
       break block4
      }
      $0_1 = 67122816;
      break block6;
     case 4:
      break block5;
     default:
      break block4;
     };
    }
    if ($3_1 >>> 0 > 3 >>> 0) {
     break block4
    }
    $0_1 = 67123136;
   }
   block7 : {
    if ($3_1) {
     break block7
    }
    return $0_1 | 0;
   }
   label : while (1) {
    $1_1 = HEAPU8[$0_1 >> 0] | 0;
    $4_1 = $0_1 + 1 | 0;
    $0_1 = $4_1;
    if ($1_1) {
     continue label
    }
    $3_1 = $3_1 + -1 | 0;
    if ($3_1) {
     continue label
    }
    break label;
   };
  }
  return $4_1 | 0;
 }
 
 function $732($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  i64toi32_i32$0 = $733($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $733($0_1, $1_1, $2_1, $3_1, $3$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, $7_1 = 0, $6_1 = 0, $12$hi = 0, $11$hi = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, $5_1 = 0, $4_1 = 0, $10_1 = 0, $9_1 = 0, $13_1 = 0, $14_1 = 0, $14$hi = 0, $13$hi = 0, $105_1 = 0, $105$hi = 0, $150$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block3 : {
   block2 : {
    block1 : {
     block : {
      if (($2_1 | 0) > (36 | 0)) {
       break block
      }
      $5_1 = 0;
      $6_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1) {
       break block1
      }
      $7_1 = $0_1;
      break block2;
     }
     HEAP32[($231() | 0) >> 2] = 28;
     i64toi32_i32$0 = 0;
     $3_1 = 0;
     $3$hi = i64toi32_i32$0;
     break block3;
    }
    $7_1 = $0_1;
    block4 : {
     label : while (1) {
      if (!($734($6_1 << 24 >> 24 | 0) | 0)) {
       break block4
      }
      $6_1 = HEAPU8[($7_1 + 1 | 0) >> 0] | 0;
      $8_1 = $7_1 + 1 | 0;
      $7_1 = $8_1;
      if ($6_1) {
       continue label
      }
      break label;
     };
     break block2;
    }
    block5 : {
     $6_1 = $6_1 & 255 | 0;
     switch ($6_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block5;
     default:
      break block2;
     };
    }
    $5_1 = ($6_1 | 0) == (45 | 0) ? -1 : 0;
    $7_1 = $7_1 + 1 | 0;
   }
   block8 : {
    block6 : {
     if (($2_1 | 16 | 0 | 0) != (16 | 0)) {
      break block6
     }
     if ((HEAPU8[$7_1 >> 0] | 0 | 0) != (48 | 0)) {
      break block6
     }
     $9_1 = 1;
     block7 : {
      if (((HEAPU8[($7_1 + 1 | 0) >> 0] | 0) & 223 | 0 | 0) != (88 | 0)) {
       break block7
      }
      $7_1 = $7_1 + 2 | 0;
      $10_1 = 16;
      break block8;
     }
     $7_1 = $7_1 + 1 | 0;
     $10_1 = $2_1 ? $2_1 : 8;
     break block8;
    }
    $10_1 = $2_1 ? $2_1 : 10;
    $9_1 = 0;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $10_1;
   $11$hi = i64toi32_i32$0;
   $2_1 = 0;
   i64toi32_i32$0 = 0;
   $12_1 = 0;
   $12$hi = i64toi32_i32$0;
   block11 : {
    label1 : while (1) {
     block9 : {
      $8_1 = HEAPU8[$7_1 >> 0] | 0;
      $6_1 = $8_1 + -48 | 0;
      if (($6_1 & 255 | 0) >>> 0 < 10 >>> 0) {
       break block9
      }
      block10 : {
       if ((($8_1 + -97 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
        break block10
       }
       $6_1 = $8_1 + -87 | 0;
       break block9;
      }
      if ((($8_1 + -65 | 0) & 255 | 0) >>> 0 > 25 >>> 0) {
       break block11
      }
      $6_1 = $8_1 + -55 | 0;
     }
     if (($10_1 | 0) <= ($6_1 & 255 | 0 | 0)) {
      break block11
     }
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $11$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = 0;
     $363($4_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $12_1 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
     $8_1 = 1;
     block12 : {
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
      i64toi32_i32$1 = i64toi32_i32$3;
      i64toi32_i32$3 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
       break block12
      }
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$1 = $11$hi;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$2 = __wasm_i64_mul($12_1 | 0, i64toi32_i32$1 | 0, $11_1 | 0, i64toi32_i32$2 | 0) | 0;
      i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
      $13_1 = i64toi32_i32$2;
      $13$hi = i64toi32_i32$1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$0 = $6_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$3 = 255;
      i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
      $14_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
      $14$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $105_1 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
      $105$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $13$hi;
      i64toi32_i32$2 = $13_1;
      i64toi32_i32$1 = $105$hi;
      i64toi32_i32$3 = $105_1;
      if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
       break block12
      }
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$2 = $14$hi;
      i64toi32_i32$2 = i64toi32_i32$0;
      i64toi32_i32$3 = $13_1;
      i64toi32_i32$0 = $14$hi;
      i64toi32_i32$1 = $14_1;
      i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $12_1 = i64toi32_i32$4;
      $12$hi = i64toi32_i32$5;
      $9_1 = 1;
      $8_1 = $2_1;
     }
     $7_1 = $7_1 + 1 | 0;
     $2_1 = $8_1;
     continue label1;
    };
   }
   block13 : {
    if (!$1_1) {
     break block13
    }
    HEAP32[$1_1 >> 2] = $9_1 ? $7_1 : $0_1;
   }
   block16 : {
    block15 : {
     block14 : {
      if (!$2_1) {
       break block14
      }
      HEAP32[($231() | 0) >> 2] = 68;
      i64toi32_i32$5 = $3$hi;
      i64toi32_i32$2 = $3_1;
      i64toi32_i32$3 = 0;
      i64toi32_i32$1 = 1;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $11_1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
      $11$hi = i64toi32_i32$3;
      $5_1 = !($11_1 | i64toi32_i32$3 | 0) ? $5_1 : 0;
      i64toi32_i32$3 = i64toi32_i32$5;
      $12_1 = i64toi32_i32$2;
      $12$hi = i64toi32_i32$3;
      break block15;
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$5 = $12_1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break block16
     }
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $11_1 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $11$hi = i64toi32_i32$3;
    }
    block17 : {
     i64toi32_i32$3 = $11$hi;
     if ($11_1) {
      break block17
     }
     if ($5_1) {
      break block17
     }
     HEAP32[($231() | 0) >> 2] = 68;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$5 = $3_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$4;
     break block3;
    }
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = $12_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3_1;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break block16
    }
    HEAP32[($231() | 0) >> 2] = 68;
    break block3;
   }
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = i64toi32_i32$4 >> 31 | 0;
   $11_1 = i64toi32_i32$4;
   $11$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$2 = $12_1;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$5 = $11_1;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $150$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $11$hi;
   i64toi32_i32$4 = $150$hi;
   i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
   i64toi32_i32$0 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
   $3_1 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $3_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$3 | 0;
 }
 
 function $734($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $735($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$0 = $733($0_1 | 0, $1_1 | 0, $2_1 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $736($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $733($0_1 | 0, $1_1 | 0, $2_1 | 0, -1 | 0, i64toi32_i32$0 | 0) | 0;
  return i64toi32_i32$0 | 0;
 }
 
 function $737($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $10_1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $11$hi = 0, $11_1 = 0, $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $12$hi = 0, i64toi32_i32$6 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $54_1 = 0, $54$hi = 0, $56$hi = 0, $64$hi = 0, $80$hi = 0, $101_1 = 0, $101$hi = 0, $103_1 = 0, $103$hi = 0, $141_1 = 0, $141$hi = 0, $145$hi = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  $7_1 = 67109e3;
  $8_1 = 48;
  $9_1 = 131112;
  $10_1 = 0;
  block1 : {
   block52 : {
    block38 : {
     block47 : {
      block45 : {
       block41 : {
        block40 : {
         block5 : {
          block22 : {
           block29 : {
            block39 : {
             block37 : {
              block44 : {
               block : {
                block19 : {
                 block36 : {
                  block18 : {
                   block35 : {
                    block17 : {
                     block34 : {
                      block48 : {
                       block33 : {
                        switch ($2_1 + -37 | 0 | 0) {
                        case 60:
                         $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 <= 6 >>> 0) {
                          break block37
                         }
                         break block38;
                        case 28:
                         $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 > 6 >>> 0) {
                          break block38
                         }
                         $10_1 = $10_1 + 131079 | 0;
                         break block39;
                        case 61:
                        case 67:
                         $10_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 > 11 >>> 0) {
                          break block38
                         }
                         $10_1 = $10_1 + 131086 | 0;
                         break block39;
                        case 29:
                         $10_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
                         if ($10_1 >>> 0 > 11 >>> 0) {
                          break block38
                         }
                         $10_1 = $10_1 + 131098 | 0;
                         break block39;
                        case 30:
                         i64toi32_i32$2 = $3_1;
                         i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
                         i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
                         i64toi32_i32$2 = i64toi32_i32$0;
                         i64toi32_i32$0 = 0;
                         i64toi32_i32$3 = 1900;
                         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
                         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                         if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
                          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                         }
                         i64toi32_i32$2 = 0;
                         i64toi32_i32$2 = __wasm_i64_sdiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 100 | 0, i64toi32_i32$2 | 0) | 0;
                         i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$5;
                         break block40;
                        case 64:
                         $8_1 = 95;
                        case 63:
                         i64toi32_i32$1 = $3_1;
                         i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] | 0;
                         i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
                         $11_1 = i64toi32_i32$5;
                         $11$hi = i64toi32_i32$2;
                         break block41;
                        case 33:
                         $7_1 = 67109975;
                         break block5;
                        case 34:
                        case 66:
                         i64toi32_i32$1 = $3_1;
                         i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
                         i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
                         $12_1 = i64toi32_i32$2;
                         $12$hi = i64toi32_i32$5;
                         i64toi32_i32$1 = i64toi32_i32$2;
                         i64toi32_i32$2 = 0;
                         i64toi32_i32$3 = 1900;
                         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
                         i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
                         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
                          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
                         }
                         $11_1 = i64toi32_i32$0;
                         $11$hi = i64toi32_i32$4;
                         block43 : {
                          block42 : {
                           $10_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
                           if (($10_1 | 0) > (2 | 0)) {
                            break block42
                           }
                           $54_1 = i64toi32_i32$0;
                           $54$hi = i64toi32_i32$4;
                           i64toi32_i32$4 = $12$hi;
                           i64toi32_i32$5 = $12_1;
                           i64toi32_i32$1 = 0;
                           i64toi32_i32$3 = 1899;
                           i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
                           i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
                            i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
                           }
                           $56$hi = i64toi32_i32$0;
                           i64toi32_i32$1 = ($738($3_1 | 0) | 0 | 0) == (1 | 0);
                           i64toi32_i32$0 = $54$hi;
                           i64toi32_i32$5 = $56$hi;
                           i64toi32_i32$3 = i64toi32_i32$1 ? $54_1 : i64toi32_i32$2;
                           i64toi32_i32$4 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$5;
                           $11_1 = i64toi32_i32$3;
                           $11$hi = i64toi32_i32$4;
                           break block43;
                          }
                          if ($10_1 >>> 0 < 361 >>> 0) {
                           break block43
                          }
                          i64toi32_i32$4 = $12$hi;
                          i64toi32_i32$1 = $12_1;
                          i64toi32_i32$3 = 0;
                          i64toi32_i32$0 = 1901;
                          i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
                          i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
                          if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
                           i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
                          }
                          $64$hi = i64toi32_i32$2;
                          i64toi32_i32$2 = $11$hi;
                          i64toi32_i32$3 = ($738($3_1 | 0) | 0 | 0) == (1 | 0);
                          i64toi32_i32$2 = $64$hi;
                          i64toi32_i32$1 = $11$hi;
                          i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$5 : $11_1;
                          i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$1;
                          $11_1 = i64toi32_i32$0;
                          $11$hi = i64toi32_i32$4;
                         }
                         $8_1 = 48;
                         if (($2_1 | 0) == (103 | 0)) {
                          break block44
                         }
                         break block45;
                        case 35:
                         i64toi32_i32$3 = $3_1;
                         i64toi32_i32$4 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                         i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
                         $11_1 = i64toi32_i32$4;
                         $11$hi = i64toi32_i32$0;
                         break block40;
                        case 36:
                         $8_1 = 48;
                         $10_1 = 2;
                         block46 : {
                          $3_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                          if ($3_1) {
                           break block46
                          }
                          i64toi32_i32$0 = 0;
                          $11_1 = 12;
                          $11$hi = i64toi32_i32$0;
                          break block47;
                         }
                         i64toi32_i32$4 = $3_1;
                         i64toi32_i32$0 = i64toi32_i32$4 >> 31 | 0;
                         $11_1 = i64toi32_i32$4;
                         $11$hi = i64toi32_i32$0;
                         i64toi32_i32$3 = i64toi32_i32$4;
                         i64toi32_i32$4 = -1;
                         i64toi32_i32$2 = -12;
                         i64toi32_i32$1 = $3_1 + i64toi32_i32$2 | 0;
                         i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
                         if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
                          i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
                         }
                         $80$hi = i64toi32_i32$5;
                         i64toi32_i32$5 = $11$hi;
                         i64toi32_i32$4 = ($3_1 | 0) > (12 | 0);
                         i64toi32_i32$5 = $80$hi;
                         i64toi32_i32$3 = $11$hi;
                         i64toi32_i32$2 = i64toi32_i32$4 ? i64toi32_i32$1 : $11_1;
                         i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$5 : i64toi32_i32$3;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$0;
                         break block47;
                        case 69:
                         i64toi32_i32$2 = (HEAP32[($3_1 + 28 | 0) >> 2] | 0) + 1 | 0;
                         i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$0;
                         $8_1 = 48;
                         $10_1 = 3;
                         break block47;
                        case 72:
                         i64toi32_i32$2 = (HEAP32[($3_1 + 16 | 0) >> 2] | 0) + 1 | 0;
                         i64toi32_i32$0 = i64toi32_i32$2 >> 31 | 0;
                         $11_1 = i64toi32_i32$2;
                         $11$hi = i64toi32_i32$0;
                         break block40;
                        case 40:
                         i64toi32_i32$4 = $3_1;
                         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
                         i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                         $11_1 = i64toi32_i32$0;
                         $11$hi = i64toi32_i32$2;
                         break block40;
                        case 73:
                         HEAP32[$1_1 >> 2] = 1;
                         $10_1 = 67111584;
                         break block1;
                        case 75:
                         $10_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) > (11 | 0) ? 131111 : 131110;
                         break block39;
                        case 45:
                         $7_1 = 67110059;
                         break block5;
                        case 78:
                         i64toi32_i32$2 = $727($3_1 | 0) | 0;
                         i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
                         $101_1 = i64toi32_i32$2;
                         $101$hi = i64toi32_i32$0;
                         i64toi32_i32$4 = $3_1;
                         i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
                         i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                         $103_1 = i64toi32_i32$0;
                         $103$hi = i64toi32_i32$2;
                         i64toi32_i32$2 = $101$hi;
                         i64toi32_i32$4 = $101_1;
                         i64toi32_i32$0 = $103$hi;
                         i64toi32_i32$5 = $103_1;
                         i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
                         i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
                         i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
                         i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
                         $11_1 = i64toi32_i32$3;
                         $11$hi = i64toi32_i32$1;
                         break block48;
                        case 46:
                         i64toi32_i32$2 = $3_1;
                         i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                         i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                         $11_1 = i64toi32_i32$1;
                         $11$hi = i64toi32_i32$4;
                         break block40;
                        case 79:
                         HEAP32[$1_1 >> 2] = 1;
                         $10_1 = 67111586;
                         break block1;
                        case 47:
                         $7_1 = 67110040;
                         break block5;
                        case 80:
                         $10_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
                         i64toi32_i32$1 = $10_1 ? $10_1 : 7;
                         i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                         $11_1 = i64toi32_i32$1;
                         $11$hi = i64toi32_i32$4;
                         break block48;
                        case 48:
                         i64toi32_i32$4 = 0;
                         $11_1 = ((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) - (HEAP32[($3_1 + 24 | 0) >> 2] | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
                         $11$hi = i64toi32_i32$4;
                         break block40;
                        case 50:
                         i64toi32_i32$4 = 0;
                         $11_1 = ((((HEAP32[($3_1 + 28 | 0) >> 2] | 0) - ((((HEAP32[($3_1 + 24 | 0) >> 2] | 0) + 6 | 0) >>> 0) % (7 >>> 0) | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
                         $11$hi = i64toi32_i32$4;
                         break block40;
                        case 49:
                         i64toi32_i32$4 = 0;
                         $11_1 = $738($3_1 | 0) | 0;
                         $11$hi = i64toi32_i32$4;
                         break block40;
                        case 0:
                         break block;
                        case 51:
                         break block17;
                        case 52:
                         break block18;
                        case 53:
                         break block19;
                        case 62:
                         break block22;
                        case 77:
                         break block29;
                        case 82:
                         break block33;
                        case 83:
                         break block34;
                        case 84:
                         break block35;
                        case 85:
                         break block36;
                        case 31:
                         break block5;
                        default:
                         break block1;
                        };
                       }
                       i64toi32_i32$2 = $3_1;
                       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
                       i64toi32_i32$1 = i64toi32_i32$4 >> 31 | 0;
                       $11_1 = i64toi32_i32$4;
                       $11$hi = i64toi32_i32$1;
                      }
                      $8_1 = 48;
                      $10_1 = 1;
                      break block47;
                     }
                     $9_1 = 131113;
                     break block22;
                    }
                    $9_1 = 131114;
                    break block22;
                   }
                   i64toi32_i32$2 = $3_1;
                   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
                   i64toi32_i32$4 = i64toi32_i32$1 >> 31 | 0;
                   i64toi32_i32$2 = i64toi32_i32$1;
                   i64toi32_i32$1 = 0;
                   i64toi32_i32$5 = 1900;
                   i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
                   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
                   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
                    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
                   }
                   i64toi32_i32$2 = 0;
                   i64toi32_i32$2 = __wasm_i64_srem(i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, 100 | 0, i64toi32_i32$2 | 0) | 0;
                   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
                   $11_1 = i64toi32_i32$2;
                   $11$hi = i64toi32_i32$3;
                   $141_1 = i64toi32_i32$2;
                   $141$hi = i64toi32_i32$3;
                   i64toi32_i32$4 = i64toi32_i32$2;
                   i64toi32_i32$2 = 0;
                   i64toi32_i32$5 = 63;
                   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
                   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
                    i64toi32_i32$2 = i64toi32_i32$3 >> 31 | 0;
                    $34_1 = i64toi32_i32$3 >> i64toi32_i32$1 | 0;
                   } else {
                    i64toi32_i32$2 = i64toi32_i32$3 >> i64toi32_i32$1 | 0;
                    $34_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
                   }
                   $11_1 = $34_1;
                   $11$hi = i64toi32_i32$2;
                   i64toi32_i32$2 = $141$hi;
                   i64toi32_i32$3 = $141_1;
                   i64toi32_i32$4 = $11$hi;
                   i64toi32_i32$5 = $11_1;
                   i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
                   $145$hi = i64toi32_i32$4;
                   i64toi32_i32$4 = $11$hi;
                   i64toi32_i32$4 = $145$hi;
                   i64toi32_i32$2 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
                   i64toi32_i32$3 = $11$hi;
                   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                   i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
                   i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
                   i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
                   $11_1 = i64toi32_i32$1;
                   $11$hi = i64toi32_i32$0;
                   break block40;
                  }
                  i64toi32_i32$4 = $3_1;
                  i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
                  i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
                  $12_1 = i64toi32_i32$0;
                  $12$hi = i64toi32_i32$2;
                  i64toi32_i32$4 = i64toi32_i32$0;
                  i64toi32_i32$0 = 0;
                  i64toi32_i32$5 = 1900;
                  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
                  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
                  if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
                   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
                  }
                  $11_1 = i64toi32_i32$3;
                  $11$hi = i64toi32_i32$1;
                  block49 : {
                   i64toi32_i32$1 = $12$hi;
                   i64toi32_i32$2 = $12_1;
                   i64toi32_i32$4 = 0;
                   i64toi32_i32$5 = 8100;
                   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$4 | 0)) {
                    $35_1 = 1
                   } else {
                    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$4 | 0)) {
                     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
                      $36_1 = 0
                     } else {
                      $36_1 = 1
                     }
                     $37_1 = $36_1;
                    } else {
                     $37_1 = 0
                    }
                    $35_1 = $37_1;
                   }
                   if ($35_1) {
                    break block49
                   }
                   $8_1 = 48;
                   break block45;
                  }
                  i64toi32_i32$2 = $11$hi;
                  i64toi32_i32$1 = $6_1;
                  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = $11_1;
                  HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[$1_1 >> 2] = $728($0_1 | 0, 100 | 0, 67109932 | 0, i64toi32_i32$1 + 48 | 0 | 0) | 0;
                  $10_1 = $0_1;
                  break block1;
                 }
                 block50 : {
                  if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                   break block50
                  }
                  HEAP32[$1_1 >> 2] = 0;
                  $10_1 = 67111587;
                  break block1;
                 }
                 $10_1 = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
                 $3_1 = ($10_1 | 0) / (3600 | 0) | 0;
                 HEAP32[($6_1 + 64 | 0) >> 2] = Math_imul($3_1, 100) + (((($10_1 - Math_imul($3_1, 3600) | 0) << 16 >> 16 | 0) / (60 | 0) | 0) << 16 >> 16) | 0;
                 HEAP32[$1_1 >> 2] = $728($0_1 | 0, 100 | 0, 67109938 | 0, $6_1 + 64 | 0 | 0) | 0;
                 $10_1 = $0_1;
                 break block1;
                }
                block51 : {
                 if ((HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
                  break block51
                 }
                 HEAP32[$1_1 >> 2] = 0;
                 $10_1 = 67111587;
                 break block1;
                }
                $10_1 = $730($3_1 | 0) | 0;
                break block52;
               }
               HEAP32[$1_1 >> 2] = 1;
               $10_1 = 67110869;
               break block1;
              }
              i64toi32_i32$2 = $11$hi;
              i64toi32_i32$1 = 0;
              i64toi32_i32$1 = __wasm_i64_srem($11_1 | 0, i64toi32_i32$2 | 0, 100 | 0, i64toi32_i32$1 | 0) | 0;
              i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
              $11_1 = i64toi32_i32$1;
              $11$hi = i64toi32_i32$2;
              break block41;
             }
             $10_1 = $10_1 | 131072 | 0;
            }
            $10_1 = $731($10_1 | 0, $4_1 | 0) | 0;
            break block52;
           }
           $9_1 = 131115;
          }
          $7_1 = $731($9_1 | 0, $4_1 | 0) | 0;
         }
         $10_1 = $739($0_1 | 0, 100 | 0, $7_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
         HEAP32[$1_1 >> 2] = $10_1;
         $10_1 = $10_1 ? $0_1 : 0;
         break block1;
        }
        $8_1 = 48;
       }
       $10_1 = 2;
       break block47;
      }
      $10_1 = 4;
     }
     block54 : {
      block53 : {
       $3_1 = $5_1 ? $5_1 : $8_1;
       if (($3_1 | 0) == (95 | 0)) {
        break block53
       }
       if (($3_1 | 0) != (45 | 0)) {
        break block54
       }
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$1 = $6_1;
       HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = $11_1;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$2;
       HEAP32[$1_1 >> 2] = $728($0_1 | 0, 100 | 0, 67109933 | 0, i64toi32_i32$1 + 16 | 0 | 0) | 0;
       $10_1 = $0_1;
       break block1;
      }
      i64toi32_i32$2 = $11$hi;
      i64toi32_i32$1 = $6_1;
      HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = $11_1;
      HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] = i64toi32_i32$2;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $10_1;
      HEAP32[$1_1 >> 2] = $728($0_1 | 0, 100 | 0, 67109926 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
      $10_1 = $0_1;
      break block1;
     }
     i64toi32_i32$2 = $11$hi;
     i64toi32_i32$1 = $6_1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $11_1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$2;
     HEAP32[i64toi32_i32$1 >> 2] = $10_1;
     HEAP32[$1_1 >> 2] = $728($0_1 | 0, 100 | 0, 67109919 | 0, i64toi32_i32$1 | 0) | 0;
     $10_1 = $0_1;
     break block1;
    }
    $10_1 = 67110808;
   }
   HEAP32[$1_1 >> 2] = $291($10_1 | 0) | 0;
  }
  global$0 = $6_1 + 80 | 0;
  return $10_1 | 0;
 }
 
 function $738($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $3_1 = 0, $1_1 = 0, $14_1 = 0;
  $1_1 = 53;
  block1 : {
   block : {
    $2_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
    $3_1 = HEAP32[($0_1 + 24 | 0) >> 2] | 0;
    $14_1 = ((($2_1 - ((($3_1 + 6 | 0) >>> 0) % (7 >>> 0) | 0) | 0) + 7 | 0) >>> 0) / (7 >>> 0) | 0;
    $3_1 = $3_1 - $2_1 | 0;
    $2_1 = $14_1 + (((($3_1 + 369 | 0) >>> 0) % (7 >>> 0) | 0) >>> 0 < 3 >>> 0) | 0;
    if (($2_1 | 0) == (53 | 0)) {
     break block
    }
    $1_1 = $2_1;
    if ($2_1) {
     break block1
    }
    $1_1 = 52;
    block2 : {
     switch (((($3_1 + 6 | 0) >>> 0) % (7 >>> 0) | 0) + -4 | 0 | 0) {
     case 1:
      if (!($740(((HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) % (400 | 0) | 0) + -1 | 0 | 0) | 0)) {
       break block1
      }
      break;
     case 0:
      break block2;
     default:
      break block1;
     };
    }
    return 53 | 0;
   }
   block5 : {
    switch (((($3_1 + 371 | 0) >>> 0) % (7 >>> 0) | 0) + -3 | 0 | 0) {
    case 0:
     if ($740(HEAP32[($0_1 + 20 | 0) >> 2] | 0 | 0) | 0) {
      break block1
     }
     break;
    case 1:
     break block1;
    default:
     break block5;
    };
   }
   $1_1 = 1;
  }
  return $1_1 | 0;
 }
 
 function $739($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $5_1 = 0, $8_1 = 0, $12_1 = 0, $11_1 = 0, $13_1 = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  block1 : {
   block : {
    if ($1_1) {
     break block
    }
    $6_1 = 0;
    break block1;
   }
   $7_1 = 0;
   block4 : {
    block14 : {
     label3 : while (1) {
      block8 : {
       block6 : {
        block5 : {
         block3 : {
          block2 : {
           $6_1 = HEAPU8[$2_1 >> 0] | 0;
           if (($6_1 | 0) == (37 | 0)) {
            break block2
           }
           if ($6_1) {
            break block3
           }
           $6_1 = $7_1;
           break block4;
          }
          $8_1 = 0;
          $9_1 = 1;
          block7 : {
           $10_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
           switch ($10_1 + -45 | 0 | 0) {
           case 0:
           case 3:
            break block5;
           case 1:
           case 2:
            break block6;
           default:
            break block7;
           };
          }
          if (($10_1 | 0) == (95 | 0)) {
           break block5
          }
          if ($10_1) {
           break block6
          }
         }
         HEAP8[($0_1 + $7_1 | 0) >> 0] = $6_1;
         $7_1 = $7_1 + 1 | 0;
         break block8;
        }
        $8_1 = $10_1;
        $10_1 = HEAPU8[($2_1 + 2 | 0) >> 0] | 0;
        $9_1 = 2;
       }
       block10 : {
        block9 : {
         $11_1 = $10_1 & 255 | 0;
         $9_1 = ($2_1 + $9_1 | 0) + (($11_1 | 0) == (43 | 0)) | 0;
         if (((HEAP8[$9_1 >> 0] | 0) + -48 | 0) >>> 0 > 9 >>> 0) {
          break block9
         }
         $2_1 = $736($9_1 | 0, $5_1 + 12 | 0 | 0, 10 | 0) | 0;
         $10_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
         break block10;
        }
        HEAP32[($5_1 + 12 | 0) >> 2] = $9_1;
        $2_1 = 0;
        $10_1 = $9_1;
       }
       $12_1 = 0;
       block11 : {
        $6_1 = HEAPU8[$10_1 >> 0] | 0;
        $13_1 = $6_1 + -67 | 0;
        if ($13_1 >>> 0 > 22 >>> 0) {
         break block11
        }
        if (!((1 << $13_1 | 0) & 4194329 | 0)) {
         break block11
        }
        $12_1 = $2_1;
        if ($2_1) {
         break block11
        }
        $12_1 = ($10_1 | 0) != ($9_1 | 0);
       }
       block13 : {
        block12 : {
         if (($6_1 | 0) == (79 | 0)) {
          break block12
         }
         if (($6_1 | 0) == (69 | 0)) {
          break block12
         }
         $2_1 = $10_1;
         break block13;
        }
        $2_1 = $10_1 + 1 | 0;
        $6_1 = HEAPU8[($10_1 + 1 | 0) >> 0] | 0;
       }
       $8_1 = $737($5_1 + 16 | 0 | 0, $5_1 + 124 | 0 | 0, $6_1 << 24 >> 24 | 0, $3_1 | 0, $4_1 | 0, $8_1 | 0) | 0;
       if (!$8_1) {
        break block14
       }
       block16 : {
        block15 : {
         if ($12_1) {
          break block15
         }
         $9_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
         break block16;
        }
        block19 : {
         block17 : {
          block18 : {
           $6_1 = HEAPU8[$8_1 >> 0] | 0;
           switch ($6_1 + -43 | 0 | 0) {
           case 0:
           case 2:
            break block17;
           default:
            break block18;
           };
          }
          $9_1 = HEAP32[($5_1 + 124 | 0) >> 2] | 0;
          break block19;
         }
         $9_1 = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + -1 | 0;
         $6_1 = HEAPU8[($8_1 + 1 | 0) >> 0] | 0;
         $8_1 = $8_1 + 1 | 0;
        }
        block20 : {
         if (($6_1 & 255 | 0 | 0) != (48 | 0)) {
          break block20
         }
         label : while (1) {
          $6_1 = HEAP8[($8_1 + 1 | 0) >> 0] | 0;
          if (($6_1 + -48 | 0) >>> 0 > 9 >>> 0) {
           break block20
          }
          $8_1 = $8_1 + 1 | 0;
          $9_1 = $9_1 + -1 | 0;
          if (($6_1 | 0) == (48 | 0)) {
           continue label
          }
          break label;
         };
        }
        HEAP32[($5_1 + 124 | 0) >> 2] = $9_1;
        $6_1 = 0;
        label1 : while (1) {
         $10_1 = $6_1;
         $6_1 = $6_1 + 1 | 0;
         if (((HEAP8[($8_1 + $10_1 | 0) >> 0] | 0) + -48 | 0) >>> 0 < 10 >>> 0) {
          continue label1
         }
         break label1;
        };
        $6_1 = $12_1 >>> 0 > $9_1 >>> 0 ? $12_1 : $9_1;
        block23 : {
         block22 : {
          block21 : {
           if ((HEAP32[($3_1 + 20 | 0) >> 2] | 0 | 0) >= (-1900 | 0)) {
            break block21
           }
           $10_1 = 45;
           break block22;
          }
          if (($11_1 | 0) != (43 | 0)) {
           break block23
          }
          if ((($6_1 - $9_1 | 0) + $10_1 | 0) >>> 0 < ((HEAPU8[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 0] | 0 | 0) == (67 | 0) ? 3 : 5) >>> 0) {
           break block23
          }
          $10_1 = 43;
         }
         HEAP8[($0_1 + $7_1 | 0) >> 0] = $10_1;
         $6_1 = $6_1 + -1 | 0;
         $7_1 = $7_1 + 1 | 0;
        }
        if ($6_1 >>> 0 <= $9_1 >>> 0) {
         break block16
        }
        if ($7_1 >>> 0 >= $1_1 >>> 0) {
         break block16
        }
        label2 : while (1) {
         HEAP8[($0_1 + $7_1 | 0) >> 0] = 48;
         $7_1 = $7_1 + 1 | 0;
         $6_1 = $6_1 + -1 | 0;
         if ($6_1 >>> 0 <= $9_1 >>> 0) {
          break block16
         }
         if ($7_1 >>> 0 < $1_1 >>> 0) {
          continue label2
         }
         break label2;
        };
       }
       $6_1 = $1_1 - $7_1 | 0;
       $6_1 = $9_1 >>> 0 < $6_1 >>> 0 ? $9_1 : $6_1;
       HEAP32[($5_1 + 124 | 0) >> 2] = $6_1;
       $245($0_1 + $7_1 | 0 | 0, $8_1 | 0, $6_1 | 0) | 0;
       $7_1 = (HEAP32[($5_1 + 124 | 0) >> 2] | 0) + $7_1 | 0;
      }
      $2_1 = $2_1 + 1 | 0;
      if ($7_1 >>> 0 < $1_1 >>> 0) {
       continue label3
      }
      break label3;
     };
    }
    $7_1 = ($7_1 | 0) == ($1_1 | 0) ? $1_1 + -1 | 0 : $7_1;
    $6_1 = 0;
   }
   HEAP8[($0_1 + $7_1 | 0) >> 0] = 0;
  }
  global$0 = $5_1 + 128 | 0;
  return $6_1 | 0;
 }
 
 function $740($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   $0_1 = ($0_1 | 0) > (2147481747 | 0) ? $0_1 + -2e3 | 0 : $0_1;
   if (!($0_1 & 3 | 0)) {
    break block
   }
   return 0 | 0;
  }
  block1 : {
   $0_1 = $0_1 + 1900 | 0;
   if (!(($0_1 | 0) % (100 | 0) | 0)) {
    break block1
   }
   return 1 | 0;
  }
  return !(($0_1 | 0) % (400 | 0) | 0) | 0;
 }
 
 function $741($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $708($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $742($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2_1;
  $4_1 = -1;
  block : {
   $2_1 = $719(0 | 0, 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   if (($2_1 | 0) < (0 | 0)) {
    break block
   }
   $5_1 = $2_1 + 1 | 0;
   $2_1 = $340($5_1 | 0) | 0;
   HEAP32[$0_1 >> 2] = $2_1;
   if (!$2_1) {
    break block
   }
   $4_1 = $719($2_1 | 0, $5_1 | 0, $1_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $743($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $744(67144084 | 0) | 0;
  block : {
   label : while (1) {
    if ((HEAP32[$0_1 >> 2] | 0 | 0) != (1 | 0)) {
     break block
    }
    $745(67144108 | 0, 67144084 | 0) | 0;
    continue label;
   };
  }
  block1 : {
   if (HEAP32[$0_1 >> 2] | 0) {
    break block1
   }
   $746($0_1 | 0);
   $747(67144084 | 0) | 0;
   FUNCTION_TABLE[$2_1 | 0]($1_1);
   $744(67144084 | 0) | 0;
   $748($0_1 | 0);
   $747(67144084 | 0) | 0;
   $749(67144108 | 0) | 0;
   return;
  }
  $747(67144084 | 0) | 0;
 }
 
 function $744($0_1) {
  $0_1 = $0_1 | 0;
  return $235($0_1 | 0) | 0 | 0;
 }
 
 function $745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $237($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $746($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 1;
 }
 
 function $747($0_1) {
  $0_1 = $0_1 | 0;
  return $236($0_1 | 0) | 0 | 0;
 }
 
 function $748($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = -1;
 }
 
 function $749($0_1) {
  $0_1 = $0_1 | 0;
  return $238($0_1 | 0) | 0 | 0;
 }
 
 function $750($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($714($0_1 | 0) | 0)) {
    break block
   }
   $342($0_1 | 0);
  }
 }
 
 function $751($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1;
  label : while (1) {
   $2_1 = $1_1;
   $1_1 = $2_1 + 4 | 0;
   if (HEAP32[$2_1 >> 2] | 0) {
    continue label
   }
   break label;
  };
  return ($2_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $752() {
  return 67123156 | 0;
 }
 
 function $753() {
  return 67124704 | 0;
 }
 
 function $754($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  block : {
   $7_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$7_1) {
    break block
   }
   if (!$2_1) {
    break block
   }
   $8_1 = $0_1 ? $3_1 : 0;
   $6_1 = 0;
   label : while (1) {
    block1 : {
     $3_1 = $337(($8_1 >>> 0 < 4 >>> 0 ? $5_1 + 12 | 0 : $0_1) | 0, HEAP32[$7_1 >> 2] | 0 | 0, 0 | 0) | 0;
     if (($3_1 | 0) != (-1 | 0)) {
      break block1
     }
     $6_1 = -1;
     break block;
    }
    block3 : {
     block2 : {
      if ($0_1) {
       break block2
      }
      $0_1 = 0;
      break block3;
     }
     block4 : {
      if ($8_1 >>> 0 > 3 >>> 0) {
       break block4
      }
      if ($8_1 >>> 0 < $3_1 >>> 0) {
       break block
      }
      $245($0_1 | 0, $5_1 + 12 | 0 | 0, $3_1 | 0) | 0;
     }
     $8_1 = $8_1 - $3_1 | 0;
     $0_1 = $0_1 + $3_1 | 0;
    }
    block5 : {
     if (HEAP32[$7_1 >> 2] | 0) {
      break block5
     }
     $7_1 = 0;
     break block;
    }
    $6_1 = $3_1 + $6_1 | 0;
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label
    }
    break label;
   };
  }
  block6 : {
   if (!$0_1) {
    break block6
   }
   HEAP32[$1_1 >> 2] = $7_1;
  }
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $755($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $4_1 = HEAP32[$1_1 >> 2] | 0;
  block6 : {
   block35 : {
    block33 : {
     block17 : {
      block22 : {
       block13 : {
        block9 : {
         block10 : {
          block8 : {
           block2 : {
            block3 : {
             block : {
              if (!$3_1) {
               break block
              }
              $5_1 = HEAP32[$3_1 >> 2] | 0;
              if (!$5_1) {
               break block
              }
              block1 : {
               if ($0_1) {
                break block1
               }
               $3_1 = $2_1;
               break block2;
              }
              HEAP32[$3_1 >> 2] = 0;
              $3_1 = $2_1;
              break block3;
             }
             block5 : {
              block4 : {
               if (HEAP32[(HEAP32[(($274() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0) {
                break block4
               }
               if (!$0_1) {
                break block5
               }
               if (!$2_1) {
                break block6
               }
               $5_1 = $2_1;
               block7 : {
                label : while (1) {
                 $3_1 = HEAP8[$4_1 >> 0] | 0;
                 if (!$3_1) {
                  break block7
                 }
                 HEAP32[$0_1 >> 2] = $3_1 & 57343 | 0;
                 $0_1 = $0_1 + 4 | 0;
                 $4_1 = $4_1 + 1 | 0;
                 $5_1 = $5_1 + -1 | 0;
                 if ($5_1) {
                  continue label
                 }
                 break block6;
                };
               }
               HEAP32[$0_1 >> 2] = 0;
               HEAP32[$1_1 >> 2] = 0;
               return $2_1 - $5_1 | 0 | 0;
              }
              $3_1 = $2_1;
              if (!$0_1) {
               break block8
              }
              $6_1 = 0;
              break block9;
             }
             return $291($4_1 | 0) | 0 | 0;
            }
            $6_1 = 1;
            break block9;
           }
           $6_1 = 0;
           break block10;
          }
          $6_1 = 1;
         }
         label1 : while (1) {
          block12 : {
           switch ($6_1 | 0) {
           case 0:
            $6_1 = (HEAPU8[$4_1 >> 0] | 0) >>> 3 | 0;
            if (($6_1 + -16 | 0 | (($5_1 >> 26 | 0) + $6_1 | 0) | 0) >>> 0 > 7 >>> 0) {
             break block13
            }
            $6_1 = $4_1 + 1 | 0;
            block15 : {
             block14 : {
              if ($5_1 & 33554432 | 0) {
               break block14
              }
              $4_1 = $6_1;
              break block15;
             }
             block16 : {
              if ((HEAP8[$6_1 >> 0] | 0 | 0) < (-64 | 0)) {
               break block16
              }
              $4_1 = $4_1 + -1 | 0;
              break block17;
             }
             $6_1 = $4_1 + 2 | 0;
             block18 : {
              if ($5_1 & 524288 | 0) {
               break block18
              }
              $4_1 = $6_1;
              break block15;
             }
             block19 : {
              if ((HEAP8[$6_1 >> 0] | 0 | 0) < (-64 | 0)) {
               break block19
              }
              $4_1 = $4_1 + -1 | 0;
              break block17;
             }
             $4_1 = $4_1 + 3 | 0;
            }
            $3_1 = $3_1 + -1 | 0;
            $6_1 = 1;
            continue label1;
           default:
            break block12;
           };
          }
          label3 : while (1) {
           block20 : {
            $5_1 = HEAP8[$4_1 >> 0] | 0;
            if (($5_1 | 0) < (1 | 0)) {
             break block20
            }
            if ($4_1 & 3 | 0) {
             break block20
            }
            $5_1 = HEAP32[$4_1 >> 2] | 0;
            if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
             break block20
            }
            label2 : while (1) {
             $3_1 = $3_1 + -4 | 0;
             $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
             $6_1 = $4_1 + 4 | 0;
             $4_1 = $6_1;
             if (!(($5_1 | ($5_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
              continue label2
             }
             break label2;
            };
           }
           block21 : {
            if (($5_1 << 24 >> 24 | 0) < (1 | 0)) {
             break block21
            }
            $3_1 = $3_1 + -1 | 0;
            $4_1 = $4_1 + 1 | 0;
            continue label3;
           }
           break label3;
          };
          $6_1 = ($5_1 & 255 | 0) + -194 | 0;
          if ($6_1 >>> 0 > 50 >>> 0) {
           break block22
          }
          $4_1 = $4_1 + 1 | 0;
          $5_1 = HEAP32[(($6_1 << 2 | 0) + 67121776 | 0) >> 2] | 0;
          $6_1 = 0;
          continue label1;
         };
        }
        label6 : while (1) {
         block24 : {
          switch ($6_1 | 0) {
          case 0:
           if (!$3_1) {
            break block6
           }
           block25 : {
            label5 : while (1) {
             $6_1 = HEAPU8[$4_1 >> 0] | 0;
             $5_1 = $6_1 << 24 >> 24;
             if (($5_1 | 0) <= (0 | 0)) {
              break block25
             }
             block26 : {
              if ($3_1 >>> 0 < 5 >>> 0) {
               break block26
              }
              if ($4_1 & 3 | 0) {
               break block26
              }
              block27 : {
               label4 : while (1) {
                $5_1 = HEAP32[$4_1 >> 2] | 0;
                if (($5_1 + -16843009 | 0 | $5_1 | 0) & -2139062144 | 0) {
                 break block27
                }
                HEAP32[$0_1 >> 2] = $5_1 & 255 | 0;
                HEAP32[($0_1 + 4 | 0) >> 2] = HEAPU8[($4_1 + 1 | 0) >> 0] | 0;
                HEAP32[($0_1 + 8 | 0) >> 2] = HEAPU8[($4_1 + 2 | 0) >> 0] | 0;
                HEAP32[($0_1 + 12 | 0) >> 2] = HEAPU8[($4_1 + 3 | 0) >> 0] | 0;
                $0_1 = $0_1 + 16 | 0;
                $4_1 = $4_1 + 4 | 0;
                $3_1 = $3_1 + -4 | 0;
                if ($3_1 >>> 0 > 4 >>> 0) {
                 continue label4
                }
                break label4;
               };
               $5_1 = HEAPU8[$4_1 >> 0] | 0;
              }
              $6_1 = $5_1 & 255 | 0;
              if (($5_1 << 24 >> 24 | 0) < (1 | 0)) {
               break block25
              }
             }
             HEAP32[$0_1 >> 2] = $6_1;
             $0_1 = $0_1 + 4 | 0;
             $4_1 = $4_1 + 1 | 0;
             $3_1 = $3_1 + -1 | 0;
             if (!$3_1) {
              break block6
             }
             continue label5;
            };
           }
           $6_1 = $6_1 + -194 | 0;
           if ($6_1 >>> 0 > 50 >>> 0) {
            break block22
           }
           $4_1 = $4_1 + 1 | 0;
           $5_1 = HEAP32[(($6_1 << 2 | 0) + 67121776 | 0) >> 2] | 0;
           $6_1 = 1;
           continue label6;
          default:
           break block24;
          };
         }
         $7_1 = HEAPU8[$4_1 >> 0] | 0;
         $6_1 = $7_1 >>> 3 | 0;
         if (($6_1 + -16 | 0 | ($6_1 + ($5_1 >> 26 | 0) | 0) | 0) >>> 0 > 7 >>> 0) {
          break block13
         }
         $8_1 = $4_1 + 1 | 0;
         block32 : {
          block30 : {
           block29 : {
            block28 : {
             $6_1 = $7_1 + -128 | 0 | ($5_1 << 6 | 0) | 0;
             if (($6_1 | 0) <= (-1 | 0)) {
              break block28
             }
             $4_1 = $8_1;
             break block29;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break block30
            }
            $8_1 = $4_1 + 2 | 0;
            $9_1 = $6_1 << 6 | 0;
            $6_1 = $7_1 | $9_1 | 0;
            block31 : {
             if (($9_1 | 0) <= (-1 | 0)) {
              break block31
             }
             $4_1 = $8_1;
             break block29;
            }
            $7_1 = (HEAPU8[$8_1 >> 0] | 0) + -128 | 0;
            if ($7_1 >>> 0 > 63 >>> 0) {
             break block30
            }
            $4_1 = $4_1 + 3 | 0;
            $6_1 = $7_1 | ($6_1 << 6 | 0) | 0;
           }
           HEAP32[$0_1 >> 2] = $6_1;
           $3_1 = $3_1 + -1 | 0;
           $0_1 = $0_1 + 4 | 0;
           break block32;
          }
          HEAP32[($231() | 0) >> 2] = 25;
          $4_1 = $4_1 + -1 | 0;
          break block33;
         }
         $6_1 = 0;
         continue label6;
        };
       }
       $4_1 = $4_1 + -1 | 0;
       if ($5_1) {
        break block17
       }
       $5_1 = HEAPU8[$4_1 >> 0] | 0;
      }
      if ($5_1 & 255 | 0) {
       break block17
      }
      block34 : {
       if (!$0_1) {
        break block34
       }
       HEAP32[$0_1 >> 2] = 0;
       HEAP32[$1_1 >> 2] = 0;
      }
      return $2_1 - $3_1 | 0 | 0;
     }
     HEAP32[($231() | 0) >> 2] = 25;
     if (!$0_1) {
      break block35
     }
    }
    HEAP32[$1_1 >> 2] = $4_1;
   }
   return -1 | 0;
  }
  HEAP32[$1_1 >> 2] = $4_1;
  return $2_1 | 0;
 }
 
 function $756($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $9_1 = 0, $8_1 = 0, $5_1 = 0, $10_1 = 0, $7_1 = 0, $6_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 1040 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = $6_1;
  $3_1 = $0_1 ? $3_1 : 256;
  $7_1 = $0_1 ? $0_1 : $5_1 + 16 | 0;
  $8_1 = 0;
  block5 : {
   block2 : {
    block4 : {
     block : {
      if (!$6_1) {
       break block
      }
      if (!$3_1) {
       break block
      }
      label : while (1) {
       $9_1 = $2_1 >>> 2 | 0;
       block1 : {
        if ($2_1 >>> 0 > 131 >>> 0) {
         break block1
        }
        if ($9_1 >>> 0 >= $3_1 >>> 0) {
         break block1
        }
        $9_1 = $6_1;
        break block2;
       }
       $10_1 = $755($7_1 | 0, $5_1 + 12 | 0 | 0, ($9_1 >>> 0 < $3_1 >>> 0 ? $9_1 : $3_1) | 0, $4_1 | 0) | 0;
       $9_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
       block3 : {
        if (($10_1 | 0) != (-1 | 0)) {
         break block3
        }
        $3_1 = 0;
        $8_1 = -1;
        break block4;
       }
       $11_1 = ($7_1 | 0) == ($5_1 + 16 | 0 | 0) ? 0 : $10_1;
       $3_1 = $3_1 - $11_1 | 0;
       $7_1 = $7_1 + ($11_1 << 2 | 0) | 0;
       $2_1 = $9_1 ? ($2_1 + $6_1 | 0) - $9_1 | 0 : 0;
       $8_1 = $10_1 + $8_1 | 0;
       if (!$9_1) {
        break block4
       }
       $6_1 = $9_1;
       if ($3_1) {
        continue label
       }
       break block4;
      };
     }
     $9_1 = $6_1;
    }
    if (!$9_1) {
     break block5
    }
   }
   if (!$3_1) {
    break block5
   }
   if (!$2_1) {
    break block5
   }
   $10_1 = $8_1;
   label1 : while (1) {
    block10 : {
     block9 : {
      block6 : {
       $8_1 = $629($7_1 | 0, $9_1 | 0, $2_1 | 0, $4_1 | 0) | 0;
       if (($8_1 + 2 | 0) >>> 0 > 2 >>> 0) {
        break block6
       }
       block8 : {
        switch ($8_1 + 1 | 0 | 0) {
        case 1:
         HEAP32[($5_1 + 12 | 0) >> 2] = 0;
         break block9;
        case 0:
         break block5;
        default:
         break block8;
        };
       }
       HEAP32[$4_1 >> 2] = 0;
       break block9;
      }
      $9_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + $8_1 | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $9_1;
      $10_1 = $10_1 + 1 | 0;
      $3_1 = $3_1 + -1 | 0;
      if ($3_1) {
       break block10
      }
     }
     $8_1 = $10_1;
     break block5;
    }
    $7_1 = $7_1 + 4 | 0;
    $2_1 = $2_1 - $8_1 | 0;
    $8_1 = $10_1;
    if ($2_1) {
     continue label1
    }
    break label1;
   };
  }
  block11 : {
   if (!$0_1) {
    break block11
   }
   HEAP32[$1_1 >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $5_1 + 1040 | 0;
  return $8_1 | 0;
 }
 
 function $757() {
  return (HEAP32[(HEAP32[(($274() | 0) + 96 | 0) >> 2] | 0) >> 2] | 0 ? 4 : 1) | 0;
 }
 
 function $758($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $629(0 | 0, $0_1 | 0, $1_1 | 0, ($2_1 ? $2_1 : 67144156) | 0) | 0 | 0;
 }
 
 function $759($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $274() | 0;
  $2_1 = HEAP32[($1_1 + 96 | 0) >> 2] | 0;
  block : {
   if (!$0_1) {
    break block
   }
   HEAP32[($1_1 + 96 | 0) >> 2] = ($0_1 | 0) == (-1 | 0) ? 67140096 : $0_1;
  }
  return (($2_1 | 0) == (67140096 | 0) ? -1 : $2_1) | 0;
 }
 
 function $760($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if (!$2_1) {
    break block
   }
   label : while (1) {
    block1 : {
     if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break block1
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 4 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label
    }
    break label;
   };
  }
  return 0 | 0;
 }
 
 function $761($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $732($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $762($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $735($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $763($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround($316($0_1 | 0, $1_1 | 0)));
 }
 
 function $764($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return +(+$318($0_1 | 0, $1_1 | 0));
 }
 
 function $765($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $319($4_1 | 0, $1_1 | 0, $2_1 | 0);
  i64toi32_i32$0 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $5_1 = i64toi32_i32$0;
  $5$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $5$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $5_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $766($0_1) {
  $0_1 = $0_1 | 0;
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $767($0_1) {
  $0_1 = $0_1 | 0;
  return $1848($0_1 | 0) | 0 | 0;
 }
 
 function $768($0_1) {
  $0_1 = $0_1 | 0;
  $766($0_1 | 0) | 0;
  $1855($0_1 | 0, 8 | 0);
 }
 
 function $769($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $5_1 = 0;
  $5_1 = $1_1 + ($4_1 - $3_1 | 0) | 0;
  block1 : {
   block : {
    label : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break block
     }
     $6_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break block1
     }
     $7_1 = HEAP8[$1_1 >> 0] | 0;
     $8_1 = HEAP8[$3_1 >> 0] | 0;
     if (($7_1 | 0) < ($8_1 | 0)) {
      break block1
     }
     block2 : {
      if (($8_1 | 0) >= ($7_1 | 0)) {
       break block2
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     continue label;
    };
   }
   $6_1 = ($5_1 | 0) != ($2_1 | 0);
  }
  return $6_1 | 0;
 }
 
 function $770($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $771($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $771($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $605($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $772($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $772($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1569($0_1 | 0, $1_1 | 0, $2_1 | 0, $1568($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $773($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $26_1 = 0, $28_1 = 0, $24_1 = 0;
  $3_1 = 0;
  label : while (1) {
   block : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break block
    }
    return $3_1 | 0;
   }
   $3_1 = ($3_1 << 4 | 0) + (HEAP8[$1_1 >> 0] | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 1 | 0;
   continue label;
  };
 }
 
 function $774($0_1) {
  $0_1 = $0_1 | 0;
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $775($0_1) {
  $0_1 = $0_1 | 0;
  $774($0_1 | 0) | 0;
  $1855($0_1 | 0, 8 | 0);
 }
 
 function $776($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  block1 : {
   block : {
    label : while (1) {
     if (($3_1 | 0) == ($4_1 | 0)) {
      break block
     }
     $5_1 = -1;
     if (($1_1 | 0) == ($2_1 | 0)) {
      break block1
     }
     $6_1 = HEAP32[$1_1 >> 2] | 0;
     $7_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) < ($7_1 | 0)) {
      break block1
     }
     block2 : {
      if (($7_1 | 0) >= ($6_1 | 0)) {
       break block2
      }
      return 1 | 0;
     }
     $3_1 = $3_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     continue label;
    };
   }
   $5_1 = ($1_1 | 0) != ($2_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $777($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $778($0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
 }
 
 function $778($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $779($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $780($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $779($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1573($1572($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $780($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1575($0_1 | 0, $1_1 | 0, $2_1 | 0, $1574($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $781($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $26_1 = 0, $28_1 = 0, $24_1 = 0;
  $3_1 = 0;
  label : while (1) {
   block : {
    if (($1_1 | 0) != ($2_1 | 0)) {
     break block
    }
    return $3_1 | 0;
   }
   $3_1 = (HEAP32[$1_1 >> 2] | 0) + ($3_1 << 4 | 0) | 0;
   $4_1 = $3_1 & -268435456 | 0;
   $3_1 = ($4_1 >>> 24 | 0 | $4_1 | 0) ^ $3_1 | 0;
   $1_1 = $1_1 + 4 | 0;
   continue label;
  };
 }
 
 function $782($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  block4 : {
   block : {
    if (($405($3_1 | 0) | 0) & 1 | 0) {
     break block
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    block3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break block4;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break block4;
     default:
      break block3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break block4;
   }
   $608($6_1 | 0, $3_1 | 0);
   $1_1 = $406($6_1 | 0) | 0;
   $783($6_1 | 0) | 0;
   $608($6_1 | 0, $3_1 | 0);
   $3_1 = $784($6_1 | 0) | 0;
   $783($6_1 | 0) | 0;
   $785($6_1 | 0, $3_1 | 0);
   $786($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($787($6_1 + 28 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   label : while (1) {
    $3_1 = $1872($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label
    }
    break label;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $783($0_1) {
  $0_1 = $0_1 | 0;
  $1390(HEAP32[$0_1 >> 2] | 0 | 0);
  return $0_1 | 0;
 }
 
 function $784($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144568 | 0) | 0 | 0;
 }
 
 function $785($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $786($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $787($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $17_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 124 | 0) >> 2] = $1_1;
  $8_1 = $789($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 84;
  $9_1 = 0;
  $10_1 = $790($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  block7 : {
   block6 : {
    block1 : {
     block : {
      if ($8_1 >>> 0 < 101 >>> 0) {
       break block
      }
      $11_1 = $340($8_1 | 0) | 0;
      if (!$11_1) {
       break block1
      }
      $791($10_1 | 0, $11_1 | 0);
     }
     $12_1 = $11_1;
     $1_1 = $2_1;
     label4 : while (1) {
      block2 : {
       if (($1_1 | 0) != ($3_1 | 0)) {
        break block2
       }
       $13_1 = 0;
       label1 : while (1) {
        block4 : {
         block3 : {
          if ($407($0_1 | 0, $7_1 + 124 | 0 | 0) | 0) {
           break block3
          }
          if ($8_1) {
           break block4
          }
         }
         block5 : {
          if (!($407($0_1 | 0, $7_1 + 124 | 0 | 0) | 0)) {
           break block5
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
         }
         label : while (1) {
          if (($2_1 | 0) == ($3_1 | 0)) {
           break block6
          }
          if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
           break block7
          }
          $11_1 = $11_1 + 1 | 0;
          $2_1 = $2_1 + 12 | 0;
          continue label;
         };
        }
        $14_1 = $408($0_1 | 0) | 0;
        block8 : {
         if ($6_1) {
          break block8
         }
         $14_1 = $792($4_1 | 0, $14_1 | 0) | 0;
        }
        $15_1 = $13_1 + 1 | 0;
        $16_1 = 0;
        $12_1 = $11_1;
        $1_1 = $2_1;
        label3 : while (1) {
         block9 : {
          if (($1_1 | 0) != ($3_1 | 0)) {
           break block9
          }
          $13_1 = $15_1;
          if (!($16_1 & 1 | 0)) {
           continue label1
          }
          $410($0_1 | 0) | 0;
          $13_1 = $15_1;
          $12_1 = $11_1;
          $1_1 = $2_1;
          if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
           continue label1
          }
          label2 : while (1) {
           block10 : {
            if (($1_1 | 0) != ($3_1 | 0)) {
             break block10
            }
            $13_1 = $15_1;
            continue label1;
           }
           block11 : {
            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
             break block11
            }
            if (($525($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
             break block11
            }
            HEAP8[$12_1 >> 0] = 0;
            $9_1 = $9_1 + -1 | 0;
           }
           $12_1 = $12_1 + 1 | 0;
           $1_1 = $1_1 + 12 | 0;
           continue label2;
          };
         }
         block12 : {
          if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
           break block12
          }
          $17_1 = HEAP8[($793($1_1 | 0, $13_1 | 0) | 0) >> 0] | 0;
          block13 : {
           if ($6_1) {
            break block13
           }
           $17_1 = $792($4_1 | 0, $17_1 | 0) | 0;
          }
          block15 : {
           block14 : {
            if (($14_1 | 0) != ($17_1 | 0)) {
             break block14
            }
            $16_1 = 1;
            if (($525($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
             break block12
            }
            HEAP8[$12_1 >> 0] = 2;
            $16_1 = 1;
            $9_1 = $9_1 + 1 | 0;
            break block15;
           }
           HEAP8[$12_1 >> 0] = 0;
          }
          $8_1 = $8_1 + -1 | 0;
         }
         $12_1 = $12_1 + 1 | 0;
         $1_1 = $1_1 + 12 | 0;
         continue label3;
        };
       };
      }
      $17_1 = $794($1_1 | 0) | 0;
      HEAP8[$12_1 >> 0] = $17_1 ? 2 : 1;
      $12_1 = $12_1 + 1 | 0;
      $1_1 = $1_1 + 12 | 0;
      $9_1 = $9_1 + $17_1 | 0;
      $8_1 = $8_1 - $17_1 | 0;
      continue label4;
     };
    }
    $1863();
    wasm2js_trap();
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
  }
  $795($10_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $2_1 | 0;
 }
 
 function $788($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1364(HEAP32[$0_1 >> 2] | 0 | 0, $1325($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $789($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1833($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $790($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1827($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $791($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1828($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1828($0_1 | 0) | 0) >> 2] = $1_1;
  block : {
   if (!$2_1) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($1829($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $792($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($524($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $794($0_1) {
  $0_1 = $0_1 | 0;
  return !($525($0_1 | 0) | 0) | 0;
 }
 
 function $795($0_1) {
  $0_1 = $0_1 | 0;
  $791($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $796($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $797($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $797($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $799($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $800($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($802($408($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $410($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $803($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $798($0_1) {
  $0_1 = $0_1 | 0;
  block2 : {
   block : {
    $0_1 = ($405($0_1 | 0) | 0) & 74 | 0;
    if (!$0_1) {
     break block
    }
    block1 : {
     if (($0_1 | 0) != (64 | 0)) {
      break block1
     }
     return 8 | 0;
    }
    if (($0_1 | 0) != (8 | 0)) {
     break block2
    }
    return 16 | 0;
   }
   return 0 | 0;
  }
  return 10 | 0;
 }
 
 function $799($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $881($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $800($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $608($3_1 + 12 | 0 | 0, $1_1 | 0);
  $1_1 = $784($3_1 + 12 | 0 | 0) | 0;
  HEAP8[$2_1 >> 0] = $875($1_1 | 0) | 0;
  $876($0_1 | 0, $1_1 | 0);
  $783($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $801($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($508($0_1 | 0) | 0) + $1_1 | 0 | 0;
 }
 
 function $802($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP8[($10_1 + 15 | 0) >> 0] = $0_1;
  block5 : {
   block3 : {
    block : {
     $11_1 = HEAP32[$3_1 >> 2] | 0;
     if (($11_1 | 0) != ($2_1 | 0)) {
      break block
     }
     block2 : {
      block1 : {
       $12_1 = $0_1 & 255 | 0;
       if (($12_1 | 0) != (HEAPU8[($9_1 + 24 | 0) >> 0] | 0 | 0)) {
        break block1
       }
       $0_1 = 43;
       break block2;
      }
      if (($12_1 | 0) != (HEAPU8[($9_1 + 25 | 0) >> 0] | 0 | 0)) {
       break block
      }
      $0_1 = 45;
     }
     HEAP32[$3_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = $0_1;
     break block3;
    }
    block4 : {
     if (!($525($6_1 | 0) | 0)) {
      break block4
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break block4
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break block5
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break block3;
    }
    $0_1 = -1;
    $9_1 = ($835($9_1 | 0, $9_1 + 26 | 0 | 0, $10_1 + 15 | 0 | 0) | 0) - $9_1 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break block5
    }
    block7 : {
     block8 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break block7
       }
       break block5;
      case 1:
       break block7;
      default:
       break block8;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break block7
     }
     if (($9_1 | 0) < (22 | 0)) {
      break block7
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break block5
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break block5
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break block5
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 67126256 | 0) >> 0] | 0;
     break block5;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 67126256 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break block5;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $803($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $7$hi = 0, i64toi32_i32$3 = 0, $4_1 = 0, $5_1 = 0, $7_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $6_1 = 0, $44_1 = 0, $44$hi = 0, $48_1 = 0, $48$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block6 : {
   block3 : {
    block4 : {
     block5 : {
      block : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break block
       }
       $5_1 = $231() | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = 0;
       i64toi32_i32$0 = $762($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $833() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       block2 : {
        block1 : {
         $0_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$0_1) {
          break block1
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break block2
         }
         if (($0_1 | 0) == (68 | 0)) {
          break block3
         }
         break block4;
        }
        HEAP32[$5_1 >> 2] = $6_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break block4
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break block5;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     $1_1 = 0;
     break block6;
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$0 = $1834() | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $44_1 = i64toi32_i32$0;
    $44$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$3 = $44_1;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $17_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $18_1 = 0
      } else {
       $18_1 = 1
      }
      $19_1 = $18_1;
     } else {
      $19_1 = 0
     }
     $17_1 = $19_1;
    }
    if ($17_1) {
     break block3
    }
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $423() | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $48_1 = i64toi32_i32$1;
    $48$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$1 = $48$hi;
    i64toi32_i32$0 = $48_1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
     $20_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
       $21_1 = 0
      } else {
       $21_1 = 1
      }
      $22_1 = $21_1;
     } else {
      $22_1 = 0
     }
     $20_1 = $22_1;
    }
    if ($20_1) {
     break block3
    }
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $7$hi;
    $1_1 = $7_1;
    break block6;
   }
   HEAP32[$2_1 >> 2] = 4;
   block7 : {
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1;
    if (($7$hi | 0) < (i64toi32_i32$2 | 0)) {
     $23_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $24_1 = 0
      } else {
       $24_1 = 1
      }
      $25_1 = $24_1;
     } else {
      $25_1 = 0
     }
     $23_1 = $25_1;
    }
    if ($23_1) {
     break block7
    }
    $1_1 = $423() | 0;
    break block6;
   }
   $1_1 = $1834() | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $804($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = $525($0_1 | 0) | 0;
  block : {
   if (($2_1 - $1_1 | 0 | 0) < (5 | 0)) {
    break block
   }
   if (!$4_1) {
    break block
   }
   $1144($1_1 | 0, $2_1 | 0);
   $4_1 = $2_1 + -4 | 0;
   $2_1 = $524($0_1 | 0) | 0;
   $5_1 = $2_1 + ($525($0_1 | 0) | 0) | 0;
   block3 : {
    block1 : {
     label : while (1) {
      $0_1 = HEAP8[$2_1 >> 0] | 0;
      if ($1_1 >>> 0 >= $4_1 >>> 0) {
       break block1
      }
      block2 : {
       if (($0_1 | 0) < (1 | 0)) {
        break block2
       }
       if (($0_1 | 0) >= ($1035() | 0 | 0)) {
        break block2
       }
       if ((HEAP32[$1_1 >> 2] | 0 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
        break block3
       }
      }
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + (($5_1 - $2_1 | 0 | 0) > (1 | 0)) | 0;
      continue label;
     };
    }
    if (($0_1 | 0) < (1 | 0)) {
     break block
    }
    if (($0_1 | 0) >= ($1035() | 0 | 0)) {
     break block
    }
    if (((HEAP32[$4_1 >> 2] | 0) + -1 | 0) >>> 0 < (HEAP8[$2_1 >> 0] | 0) >>> 0) {
     break block
    }
   }
   HEAP32[$3_1 >> 2] = 4;
  }
 }
 
 function $805($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $806($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $806($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $799($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $800($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($802($408($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $410($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $807($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $807($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $7$hi = 0, $7_1 = 0, i64toi32_i32$2 = 0, $4_1 = 0, $5_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $6_1 = 0, $43_1 = 0, $43$hi = 0, $45$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block6 : {
   block3 : {
    block4 : {
     block5 : {
      block : {
       if (($0_1 | 0) == ($1_1 | 0)) {
        break block
       }
       $5_1 = $231() | 0;
       $6_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = 0;
       i64toi32_i32$0 = $762($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $833() | 0 | 0) | 0;
       i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
       $7_1 = i64toi32_i32$0;
       $7$hi = i64toi32_i32$1;
       block2 : {
        block1 : {
         $0_1 = HEAP32[$5_1 >> 2] | 0;
         if (!$0_1) {
          break block1
         }
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
          break block2
         }
         if (($0_1 | 0) == (68 | 0)) {
          break block3
         }
         break block4;
        }
        HEAP32[$5_1 >> 2] = $6_1;
        if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break block4
        }
       }
       HEAP32[$2_1 >> 2] = 4;
       break block5;
      }
      HEAP32[$2_1 >> 2] = 4;
     }
     i64toi32_i32$1 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$1;
     break block6;
    }
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$1 = $1836() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $43_1 = i64toi32_i32$1;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$2 = $7_1;
    i64toi32_i32$1 = $43$hi;
    i64toi32_i32$3 = $43_1;
    if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
     $16_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $17_1 = 0
      } else {
       $17_1 = 1
      }
      $18_1 = $17_1;
     } else {
      $18_1 = 0
     }
     $16_1 = $18_1;
    }
    if ($16_1) {
     break block3
    }
    i64toi32_i32$2 = $1837() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $45$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$0 = $45$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    if ((i64toi32_i32$0 | 0) > ($7$hi | 0)) {
     $19_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
       $20_1 = 0
      } else {
       $20_1 = 1
      }
      $21_1 = $20_1;
     } else {
      $21_1 = 0
     }
     $19_1 = $21_1;
    }
    if ($19_1) {
     break block6
    }
   }
   HEAP32[$2_1 >> 2] = 4;
   block7 : {
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 1;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $22_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $23_1 = 0
      } else {
       $23_1 = 1
      }
      $24_1 = $23_1;
     } else {
      $24_1 = 0
     }
     $22_1 = $24_1;
    }
    if ($22_1) {
     break block7
    }
    i64toi32_i32$1 = $1837() | 0;
    i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
    $7_1 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$3;
    break block6;
   }
   i64toi32_i32$3 = $1836() | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $7_1 = i64toi32_i32$3;
   $7$hi = i64toi32_i32$1;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$3 = $7_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$3 | 0;
 }
 
 function $808($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $809($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $809($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $799($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $800($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($802($408($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $410($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $810($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $810($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block7 : {
   block8 : {
    block5 : {
     block6 : {
      block2 : {
       block : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break block
        }
        block1 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break block1
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break block1
         }
         HEAP32[$2_1 >> 2] = 4;
         break block2;
        }
        $6_1 = $231() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $761($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $833() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        block4 : {
         block3 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break block3
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break block4
          }
          if (($0_1 | 0) == (68 | 0)) {
           break block5
          }
          break block6;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break block6
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break block2;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break block7;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($1840() | 0) >>> 0 | 0) | 0) {
      break block8
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1840() | 0;
    break block7;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 & 65535 | 0 | 0;
 }
 
 function $811($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $812($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $812($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $799($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $800($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($802($408($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $410($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $813($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $813($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block7 : {
   block8 : {
    block5 : {
     block6 : {
      block2 : {
       block : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break block
        }
        block1 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break block1
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break block1
         }
         HEAP32[$2_1 >> 2] = 4;
         break block2;
        }
        $6_1 = $231() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $761($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $833() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        block4 : {
         block3 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break block3
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break block4
          }
          if (($0_1 | 0) == (68 | 0)) {
           break block5
          }
          break block6;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break block6
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break block2;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break block7;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($1221() | 0) >>> 0 | 0) | 0) {
      break block8
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $1221() | 0;
    break block7;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $814($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $815($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $815($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $799($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $800($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($802($408($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $410($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $816($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $816($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $8_1 = 0, $8$hi = 0, $7_1 = 0, $55$hi = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block7 : {
   block8 : {
    block5 : {
     block6 : {
      block2 : {
       block : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break block
        }
        block1 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break block1
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break block1
         }
         HEAP32[$2_1 >> 2] = 4;
         break block2;
        }
        $6_1 = $231() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $761($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $833() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        block4 : {
         block3 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break block3
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break block4
          }
          if (($0_1 | 0) == (68 | 0)) {
           break block5
          }
          break block6;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break block6
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break block2;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      $0_1 = 0;
      break block7;
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = 0;
     $55$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$0 = $55$hi;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & $8_1 >>> 0 <= ($583() | 0) >>> 0 | 0) | 0) {
      break block8
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    $0_1 = $583() | 0;
    break block7;
   }
   $0_1 = $8_1;
   $0_1 = ($5_1 | 0) == (45 | 0) ? 0 - $0_1 | 0 : $0_1;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $817($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $818($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $818($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $799($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $800($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 247 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($802($408($6_1 + 252 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP8[($6_1 + 247 | 0) >> 0] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $410($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $819($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $819($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $8$hi = 0, $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$3 = 0, $5_1 = 0, $7_1 = 0, $53$hi = 0, $59$hi = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block7 : {
   block8 : {
    block5 : {
     block6 : {
      block2 : {
       block : {
        if (($0_1 | 0) == ($1_1 | 0)) {
         break block
        }
        block1 : {
         $5_1 = HEAPU8[$0_1 >> 0] | 0;
         if (($5_1 | 0) != (45 | 0)) {
          break block1
         }
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != ($1_1 | 0)) {
          break block1
         }
         HEAP32[$2_1 >> 2] = 4;
         break block2;
        }
        $6_1 = $231() | 0;
        $7_1 = HEAP32[$6_1 >> 2] | 0;
        HEAP32[$6_1 >> 2] = 0;
        i64toi32_i32$0 = $761($0_1 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0, $833() | 0 | 0) | 0;
        i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
        $8_1 = i64toi32_i32$0;
        $8$hi = i64toi32_i32$1;
        block4 : {
         block3 : {
          $0_1 = HEAP32[$6_1 >> 2] | 0;
          if (!$0_1) {
           break block3
          }
          if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
           break block4
          }
          if (($0_1 | 0) == (68 | 0)) {
           break block5
          }
          break block6;
         }
         HEAP32[$6_1 >> 2] = $7_1;
         if ((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
          break block6
         }
        }
        HEAP32[$2_1 >> 2] = 4;
        break block2;
       }
       HEAP32[$2_1 >> 2] = 4;
      }
      i64toi32_i32$1 = 0;
      $8_1 = 0;
      $8$hi = i64toi32_i32$1;
      break block7;
     }
     i64toi32_i32$1 = $1842() | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $53$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = $53$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$3 = $8_1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= $8_1 >>> 0 | 0) | 0) {
      break block8
     }
    }
    HEAP32[$2_1 >> 2] = 4;
    i64toi32_i32$2 = $1842() | 0;
    i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
    $8_1 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$0;
    break block7;
   }
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$1 = $8_1;
   i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + $8$hi | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $59$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$2 = ($5_1 | 0) == (45 | 0);
   i64toi32_i32$5 = $59$hi;
   $17_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$1 = i64toi32_i32$2 ? $17_1 : i64toi32_i32$1;
   i64toi32_i32$0 = i64toi32_i32$2 ? i64toi32_i32$5 : $8$hi;
   $8_1 = i64toi32_i32$1;
   $8$hi = i64toi32_i32$0;
  }
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $820($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $821($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $821($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $182_1 = 0, $184_1 = 0, $180_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $822($6_1 + 192 | 0 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0, $6_1 + 207 | 0 | 0, $6_1 + 206 | 0 | 0);
  $2_1 = $502($6_1 + 180 | 0 | 0) | 0;
  $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
  $1_1 = $801($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 176 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != ($1_1 + ($525($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $525($2_1 | 0) | 0;
       $527($2_1 | 0, ($525($2_1 | 0) | 0) << 1 | 0 | 0);
       $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
       $1_1 = $801($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 176 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($823($408($6_1 + 252 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 206 | 0) >> 0] | 0 | 0, $6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 176 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($525($6_1 + 192 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAPF32[$5_1 >> 2] = Math_fround($824($1_1 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, $4_1 | 0));
     $804($6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
     $1872($2_1 | 0) | 0;
     $1872($6_1 + 192 | 0 | 0) | 0;
     global$0 = $6_1 + 256 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $410($6_1 + 252 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $822($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $608($5_1 + 12 | 0 | 0, $1_1 | 0);
  $832($406($5_1 + 12 | 0 | 0) | 0 | 0, 67126256 | 0, 67126284 | 0, $2_1 | 0) | 0;
  $1_1 = $784($5_1 + 12 | 0 | 0) | 0;
  HEAP8[$3_1 >> 0] = $874($1_1 | 0) | 0;
  HEAP8[$4_1 >> 0] = $875($1_1 | 0) | 0;
  $876($0_1 | 0, $1_1 | 0);
  $783($5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $823($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP8[($12_1 + 15 | 0) >> 0] = $0_1;
  block2 : {
   block1 : {
    block : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break block
     }
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
      break block1
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($525($7_1 | 0) | 0)) {
      break block2
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break block2
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break block2;
    }
    block4 : {
     block3 : {
      if (($0_1 | 0) != ($6_1 | 0)) {
       break block3
      }
      if (!($525($7_1 | 0) | 0)) {
       break block3
      }
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break block1
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break block4
      }
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $11_1;
      $0_1 = 0;
      HEAP32[$10_1 >> 2] = 0;
      break block2;
     }
     $11_1 = ($877($11_1 | 0, $11_1 + 28 | 0 | 0, $12_1 + 15 | 0 | 0) | 0) - $11_1 | 0;
     if (($11_1 | 0) > (27 | 0)) {
      break block1
     }
     $5_1 = HEAP8[($11_1 + 67126256 | 0) >> 0] | 0;
     block9 : {
      block6 : {
       switch (($11_1 & -2 | 0) + -22 | 0 | 0) {
       case 2:
        block8 : {
         $11_1 = HEAP32[$4_1 >> 2] | 0;
         if (($11_1 | 0) == ($3_1 | 0)) {
          break block8
         }
         $0_1 = -1;
         if (($717(HEAP8[($11_1 + -1 | 0) >> 0] | 0 | 0) | 0 | 0) != ($717(HEAP8[$2_1 >> 0] | 0 | 0) | 0 | 0)) {
          break block2
         }
        }
        HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
        HEAP8[$11_1 >> 0] = $5_1;
        break block4;
       case 0:
        HEAP8[$2_1 >> 0] = 80;
        break block9;
       default:
        break block6;
       };
      }
      $0_1 = $717($5_1 | 0) | 0;
      if (($0_1 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
       break block9
      }
      HEAP8[$2_1 >> 0] = $718($0_1 | 0) | 0;
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break block9
      }
      HEAP8[$1_1 >> 0] = 0;
      if (!($525($7_1 | 0) | 0)) {
       break block9
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break block9
      }
      $1_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $1_1;
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
     HEAP8[$0_1 >> 0] = $5_1;
     $0_1 = 0;
     if (($11_1 | 0) > (21 | 0)) {
      break block2
     }
     HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
     break block2;
    }
    $0_1 = 0;
    break block2;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $824($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = Math_fround(0), $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block4 : {
   block5 : {
    block3 : {
     block : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break block
      }
      $4_1 = $231() | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = 0;
      $6_1 = Math_fround($1844($0_1 | 0, $3_1 + 12 | 0 | 0));
      block2 : {
       block1 : {
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        if (!$0_1) {
         break block1
        }
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break block2
        }
        break block3;
       }
       HEAP32[$4_1 >> 2] = $5_1;
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break block3
       }
       break block4;
      }
      if (($0_1 | 0) != (68 | 0)) {
       break block4
      }
      break block5;
     }
     HEAP32[$2_1 >> 2] = 4;
     $6_1 = Math_fround(0.0);
     break block4;
    }
    $6_1 = Math_fround(0.0);
   }
   HEAP32[$2_1 >> 2] = 4;
  }
  global$0 = $3_1 + 16 | 0;
  return Math_fround($6_1);
 }
 
 function $825($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $826($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $826($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $182_1 = 0, $184_1 = 0, $180_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $822($6_1 + 192 | 0 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0, $6_1 + 207 | 0 | 0, $6_1 + 206 | 0 | 0);
  $2_1 = $502($6_1 + 180 | 0 | 0) | 0;
  $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
  $1_1 = $801($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 176 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0) != ($1_1 + ($525($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $525($2_1 | 0) | 0;
       $527($2_1 | 0, ($525($2_1 | 0) | 0) << 1 | 0 | 0);
       $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
       $1_1 = $801($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 176 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($823($408($6_1 + 252 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 176 | 0 | 0, HEAP8[($6_1 + 207 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 206 | 0) >> 0] | 0 | 0, $6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 176 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($525($6_1 + 192 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAPF64[$5_1 >> 3] = +$827($1_1 | 0, HEAP32[($6_1 + 176 | 0) >> 2] | 0 | 0, $4_1 | 0);
     $804($6_1 + 192 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
     $1872($2_1 | 0) | 0;
     $1872($6_1 + 192 | 0 | 0) | 0;
     global$0 = $6_1 + 256 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $410($6_1 + 252 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $827($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $6_1 = 0.0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block4 : {
   block5 : {
    block3 : {
     block : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break block
      }
      $4_1 = $231() | 0;
      $5_1 = HEAP32[$4_1 >> 2] | 0;
      HEAP32[$4_1 >> 2] = 0;
      $6_1 = +$1845($0_1 | 0, $3_1 + 12 | 0 | 0);
      block2 : {
       block1 : {
        $0_1 = HEAP32[$4_1 >> 2] | 0;
        if (!$0_1) {
         break block1
        }
        if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
         break block2
        }
        break block3;
       }
       HEAP32[$4_1 >> 2] = $5_1;
       if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != ($1_1 | 0)) {
        break block3
       }
       break block4;
      }
      if (($0_1 | 0) != (68 | 0)) {
       break block4
      }
      break block5;
     }
     HEAP32[$2_1 >> 2] = 4;
     $6_1 = 0.0;
     break block4;
    }
    $6_1 = 0.0;
   }
   HEAP32[$2_1 >> 2] = 4;
  }
  global$0 = $3_1 + 16 | 0;
  return +$6_1;
 }
 
 function $828($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $829($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $829($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $10$hi = 0, $154_1 = 0, $189_1 = 0, $191_1 = 0, $187_1 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 268 | 0) >> 2] = $1_1;
  $822($6_1 + 208 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 223 | 0 | 0, $6_1 + 222 | 0 | 0);
  $2_1 = $502($6_1 + 196 | 0 | 0) | 0;
  $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
  $1_1 = $801($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 192 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($407($6_1 + 268 | 0 | 0, $6_1 + 264 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 192 | 0) >> 2] | 0 | 0) != ($1_1 + ($525($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $525($2_1 | 0) | 0;
       $527($2_1 | 0, ($525($2_1 | 0) | 0) << 1 | 0 | 0);
       $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
       $1_1 = $801($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 192 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($823($408($6_1 + 268 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 192 | 0 | 0, HEAP8[($6_1 + 223 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 222 | 0) >> 0] | 0 | 0, $6_1 + 208 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 192 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($525($6_1 + 208 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 23 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     }
     $830($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 192 | 0) >> 2] | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
     $154_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $154_1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     HEAP32[i64toi32_i32$1 >> 2] = $10_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $804($6_1 + 208 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($407($6_1 + 268 | 0 | 0, $6_1 + 264 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 268 | 0) >> 2] | 0;
     $1872($2_1 | 0) | 0;
     $1872($6_1 + 208 | 0 | 0) | 0;
     global$0 = $6_1 + 272 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $410($6_1 + 268 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $830($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $5_1 = 0, $7_1 = 0, $7$hi = 0, $8$hi = 0, $8_1 = 0, $9_1 = 0, $9$hi = 0, $10_1 = 0, $10$hi = 0, $6_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  block3 : {
   block2 : {
    block1 : {
     block : {
      if (($1_1 | 0) == ($2_1 | 0)) {
       break block
      }
      $5_1 = $231() | 0;
      $6_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = 0;
      $1846($4_1 + 8 | 0 | 0, $1_1 | 0, $4_1 + 28 | 0 | 0);
      i64toi32_i32$0 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      $7_1 = i64toi32_i32$0;
      $7$hi = i64toi32_i32$1;
      i64toi32_i32$1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
      $8_1 = i64toi32_i32$1;
      $8$hi = i64toi32_i32$0;
      $1_1 = HEAP32[$5_1 >> 2] | 0;
      if (!$1_1) {
       break block1
      }
      i64toi32_i32$0 = 0;
      $9_1 = 0;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $10_1 = 0;
      $10$hi = i64toi32_i32$0;
      if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
       break block2
      }
      i64toi32_i32$0 = $8$hi;
      $9_1 = i64toi32_i32$1;
      $9$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $7$hi;
      $10_1 = $7_1;
      $10$hi = i64toi32_i32$0;
      if (($1_1 | 0) != (68 | 0)) {
       break block3
      }
      break block2;
     }
     HEAP32[$3_1 >> 2] = 4;
     i64toi32_i32$0 = 0;
     $8_1 = 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $7_1 = 0;
     $7$hi = i64toi32_i32$0;
     break block3;
    }
    HEAP32[$5_1 >> 2] = $6_1;
    i64toi32_i32$0 = 0;
    $9_1 = 0;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $10_1 = 0;
    $10$hi = i64toi32_i32$0;
    if ((HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0) == ($2_1 | 0)) {
     break block3
    }
   }
   HEAP32[$3_1 >> 2] = 4;
   i64toi32_i32$0 = $9$hi;
   $8_1 = $9_1;
   $8$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $10$hi;
   $7_1 = $10_1;
   $7$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $8$hi;
  i64toi32_i32$1 = $0_1;
  HEAP32[i64toi32_i32$1 >> 2] = $8_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $7$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $7_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $4_1 + 32 | 0;
 }
 
 function $831($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 248 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $1_1;
  $7_1 = $502($6_1 + 196 | 0 | 0) | 0;
  $608($6_1 + 16 | 0 | 0, $3_1 | 0);
  $832($406($6_1 + 16 | 0 | 0) | 0 | 0, 67126256 | 0, 67126282 | 0, $6_1 + 208 | 0 | 0) | 0;
  $783($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
  $1_1 = $801($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($525($2_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $3_1 = $525($2_1 | 0) | 0;
     $527($2_1 | 0, ($525($2_1 | 0) | 0) << 1 | 0 | 0);
     $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
     $1_1 = $801($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($802($408($6_1 + 252 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
     break block
    }
    $410($6_1 + 252 | 0 | 0) | 0;
    continue label;
   };
  }
  $527($2_1 | 0, (HEAP32[($6_1 + 180 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $531($2_1 | 0) | 0;
  $3_1 = $833() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  block2 : {
   if (($834($1_1 | 0, $3_1 | 0, 67109491 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break block2
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  block3 : {
   if (!($407($6_1 + 252 | 0 | 0, $6_1 + 248 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  $1872($2_1 | 0) | 0;
  $1872($7_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $1_1 | 0;
 }
 
 function $832($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $833() {
  var $0_1 = 0;
  block : {
   if (!(HEAPU8[(0 + 67144324 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 67144320 | 0) >> 2] | 0 | 0;
  }
  $0_1 = $715(2147483647 | 0, 67110087 | 0, 0 | 0) | 0;
  HEAP8[(0 + 67144324 | 0) >> 0] = 1;
  HEAP32[(0 + 67144320 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $834($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $3_1 = $836($4_1 + 4 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $1_1 = $708($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $837($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $835($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $884($0_1 | 0, $883($882($0_1 | 0) | 0 | 0, $882($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $836($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $759(HEAP32[$1_1 >> 2] | 0 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $837($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!$1_1) {
    break block
   }
   $759($1_1 | 0) | 0;
  }
  return $0_1 | 0;
 }
 
 function $838($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $1_1;
  block4 : {
   block : {
    if (($405($3_1 | 0) | 0) & 1 | 0) {
     break block
    }
    HEAP32[$6_1 >> 2] = -1;
    $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $6_1) | 0;
    block3 : {
     switch (HEAP32[$6_1 >> 2] | 0 | 0) {
     case 0:
      HEAP8[$5_1 >> 0] = 0;
      break block4;
     case 1:
      HEAP8[$5_1 >> 0] = 1;
      break block4;
     default:
      break block3;
     };
    }
    HEAP8[$5_1 >> 0] = 1;
    HEAP32[$4_1 >> 2] = 4;
    break block4;
   }
   $608($6_1 | 0, $3_1 | 0);
   $1_1 = $477($6_1 | 0) | 0;
   $783($6_1 | 0) | 0;
   $608($6_1 | 0, $3_1 | 0);
   $3_1 = $839($6_1 | 0) | 0;
   $783($6_1 | 0) | 0;
   $840($6_1 | 0, $3_1 | 0);
   $841($6_1 | 12 | 0 | 0, $3_1 | 0);
   $3_1 = $6_1 + 24 | 0;
   HEAP8[$5_1 >> 0] = ($842($6_1 + 28 | 0 | 0, $2_1 | 0, $6_1 | 0, $3_1 | 0, $1_1 | 0, $4_1 | 0, 1 | 0) | 0 | 0) == ($6_1 | 0);
   $1_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
   label : while (1) {
    $3_1 = $1889($3_1 + -12 | 0 | 0) | 0;
    if (($3_1 | 0) != ($6_1 | 0)) {
     continue label
    }
    break label;
   };
  }
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $839($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144576 | 0) | 0 | 0;
 }
 
 function $840($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $841($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $842($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $12_1 = 0, $7_1 = 0, $11_1 = 0, $8_1 = 0, $9_1 = 0, $17_1 = 0, $13_1 = 0, $15_1 = 0, $14_1 = 0, $16_1 = 0, $10_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 124 | 0) >> 2] = $1_1;
  $8_1 = $843($2_1 | 0, $3_1 | 0) | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 84;
  $9_1 = 0;
  $10_1 = $790($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $11_1 = $7_1 + 16 | 0;
  block7 : {
   block6 : {
    block1 : {
     block : {
      if ($8_1 >>> 0 < 101 >>> 0) {
       break block
      }
      $11_1 = $340($8_1 | 0) | 0;
      if (!$11_1) {
       break block1
      }
      $791($10_1 | 0, $11_1 | 0);
     }
     $12_1 = $11_1;
     $1_1 = $2_1;
     label4 : while (1) {
      block2 : {
       if (($1_1 | 0) != ($3_1 | 0)) {
        break block2
       }
       $13_1 = 0;
       label1 : while (1) {
        block4 : {
         block3 : {
          if ($478($0_1 | 0, $7_1 + 124 | 0 | 0) | 0) {
           break block3
          }
          if ($8_1) {
           break block4
          }
         }
         block5 : {
          if (!($478($0_1 | 0, $7_1 + 124 | 0 | 0) | 0)) {
           break block5
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
         }
         label : while (1) {
          if (($2_1 | 0) == ($3_1 | 0)) {
           break block6
          }
          if ((HEAPU8[$11_1 >> 0] | 0 | 0) == (2 | 0)) {
           break block7
          }
          $11_1 = $11_1 + 1 | 0;
          $2_1 = $2_1 + 12 | 0;
          continue label;
         };
        }
        $14_1 = $479($0_1 | 0) | 0;
        block8 : {
         if ($6_1) {
          break block8
         }
         $14_1 = $844($4_1 | 0, $14_1 | 0) | 0;
        }
        $15_1 = $13_1 + 1 | 0;
        $16_1 = 0;
        $12_1 = $11_1;
        $1_1 = $2_1;
        label3 : while (1) {
         block9 : {
          if (($1_1 | 0) != ($3_1 | 0)) {
           break block9
          }
          $13_1 = $15_1;
          if (!($16_1 & 1 | 0)) {
           continue label1
          }
          $481($0_1 | 0) | 0;
          $13_1 = $15_1;
          $12_1 = $11_1;
          $1_1 = $2_1;
          if (($9_1 + $8_1 | 0) >>> 0 < 2 >>> 0) {
           continue label1
          }
          label2 : while (1) {
           block10 : {
            if (($1_1 | 0) != ($3_1 | 0)) {
             break block10
            }
            $13_1 = $15_1;
            continue label1;
           }
           block11 : {
            if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (2 | 0)) {
             break block11
            }
            if (($845($1_1 | 0) | 0 | 0) == ($15_1 | 0)) {
             break block11
            }
            HEAP8[$12_1 >> 0] = 0;
            $9_1 = $9_1 + -1 | 0;
           }
           $12_1 = $12_1 + 1 | 0;
           $1_1 = $1_1 + 12 | 0;
           continue label2;
          };
         }
         block12 : {
          if ((HEAPU8[$12_1 >> 0] | 0 | 0) != (1 | 0)) {
           break block12
          }
          $17_1 = HEAP32[($846($1_1 | 0, $13_1 | 0) | 0) >> 2] | 0;
          block13 : {
           if ($6_1) {
            break block13
           }
           $17_1 = $844($4_1 | 0, $17_1 | 0) | 0;
          }
          block15 : {
           block14 : {
            if (($14_1 | 0) != ($17_1 | 0)) {
             break block14
            }
            $16_1 = 1;
            if (($845($1_1 | 0) | 0 | 0) != ($15_1 | 0)) {
             break block12
            }
            HEAP8[$12_1 >> 0] = 2;
            $16_1 = 1;
            $9_1 = $9_1 + 1 | 0;
            break block15;
           }
           HEAP8[$12_1 >> 0] = 0;
          }
          $8_1 = $8_1 + -1 | 0;
         }
         $12_1 = $12_1 + 1 | 0;
         $1_1 = $1_1 + 12 | 0;
         continue label3;
        };
       };
      }
      $17_1 = $847($1_1 | 0) | 0;
      HEAP8[$12_1 >> 0] = $17_1 ? 2 : 1;
      $12_1 = $12_1 + 1 | 0;
      $1_1 = $1_1 + 12 | 0;
      $9_1 = $9_1 + $17_1 | 0;
      $8_1 = $8_1 - $17_1 | 0;
      continue label4;
     };
    }
    $1863();
    wasm2js_trap();
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
  }
  $795($10_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $2_1 | 0;
 }
 
 function $843($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1847($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $844($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1) | 0 | 0;
 }
 
 function $845($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($999($0_1 | 0) | 0)) {
    break block
   }
   return $1000($0_1 | 0) | 0 | 0;
  }
  return $1001($0_1 | 0) | 0 | 0;
 }
 
 function $846($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($996($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $847($0_1) {
  $0_1 = $0_1 | 0;
  return !($845($0_1 | 0) | 0) | 0;
 }
 
 function $848($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $849($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $849($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $850($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $851($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($852($479($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $481($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $803($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $850($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $892($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $851($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $608($3_1 + 12 | 0 | 0, $1_1 | 0);
  $1_1 = $839($3_1 + 12 | 0 | 0) | 0;
  HEAP32[$2_1 >> 2] = $886($1_1 | 0) | 0;
  $887($0_1 | 0, $1_1 | 0);
  $783($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $852($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  HEAP32[($10_1 + 12 | 0) >> 2] = $0_1;
  block5 : {
   block3 : {
    block : {
     $11_1 = HEAP32[$3_1 >> 2] | 0;
     if (($11_1 | 0) != ($2_1 | 0)) {
      break block
     }
     block2 : {
      block1 : {
       if (($0_1 | 0) != (HEAP32[($9_1 + 96 | 0) >> 2] | 0 | 0)) {
        break block1
       }
       $0_1 = 43;
       break block2;
      }
      if (($0_1 | 0) != (HEAP32[($9_1 + 100 | 0) >> 2] | 0 | 0)) {
       break block
      }
      $0_1 = 45;
     }
     HEAP32[$3_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = $0_1;
     break block3;
    }
    block4 : {
     if (!($525($6_1 | 0) | 0)) {
      break block4
     }
     if (($0_1 | 0) != ($5_1 | 0)) {
      break block4
     }
     $0_1 = 0;
     $9_1 = HEAP32[$8_1 >> 2] | 0;
     if (($9_1 - $7_1 | 0 | 0) > (159 | 0)) {
      break block5
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$8_1 >> 2] = $9_1 + 4 | 0;
     HEAP32[$9_1 >> 2] = $0_1;
     break block3;
    }
    $0_1 = -1;
    $9_1 = (($873($9_1 | 0, $9_1 + 104 | 0 | 0, $10_1 + 12 | 0 | 0) | 0) - $9_1 | 0) >> 2 | 0;
    if (($9_1 | 0) > (23 | 0)) {
     break block5
    }
    block7 : {
     block8 : {
      switch ($1_1 + -8 | 0 | 0) {
      case 0:
      case 2:
       if (($9_1 | 0) < ($1_1 | 0)) {
        break block7
       }
       break block5;
      case 1:
       break block7;
      default:
       break block8;
      };
     }
     if (($1_1 | 0) != (16 | 0)) {
      break block7
     }
     if (($9_1 | 0) < (22 | 0)) {
      break block7
     }
     $6_1 = HEAP32[$3_1 >> 2] | 0;
     if (($6_1 | 0) == ($2_1 | 0)) {
      break block5
     }
     if (($6_1 - $2_1 | 0 | 0) > (2 | 0)) {
      break block5
     }
     $0_1 = -1;
     if ((HEAPU8[($6_1 + -1 | 0) >> 0] | 0 | 0) != (48 | 0)) {
      break block5
     }
     $0_1 = 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$3_1 >> 2] = $6_1 + 1 | 0;
     HEAP8[$6_1 >> 0] = HEAPU8[($9_1 + 67126256 | 0) >> 0] | 0;
     break block5;
    }
    $0_1 = HEAP32[$3_1 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = HEAPU8[($9_1 + 67126256 | 0) >> 0] | 0;
    HEAP32[$4_1 >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
    $0_1 = 0;
    break block5;
   }
   $0_1 = 0;
   HEAP32[$4_1 >> 2] = 0;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $853($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $854($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $854($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $850($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $851($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($852($479($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $481($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $807($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $855($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $856($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $856($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $850($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $851($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($852($479($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $481($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP16[$5_1 >> 1] = $810($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $857($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $858($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $858($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $850($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $851($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($852($479($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $481($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $813($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $859($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $860($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $860($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $850($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $851($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($852($479($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $481($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  HEAP32[$5_1 >> 2] = $816($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $861($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $862($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $862($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0, i64toi32_i32$1 = 0, $113_1 = 0;
  $6_1 = global$0 - 336 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 328 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 332 | 0) >> 2] = $1_1;
  $1_1 = $798($3_1 | 0) | 0;
  $0_1 = $850($0_1 | 0, $3_1 | 0, $6_1 + 208 | 0 | 0) | 0;
  $851($6_1 + 196 | 0 | 0, $3_1 | 0, $6_1 + 324 | 0 | 0);
  $3_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
  $2_1 = $801($3_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($2_1 + ($525($3_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $7_1 = $525($3_1 | 0) | 0;
     $527($3_1 | 0, ($525($3_1 | 0) | 0) << 1 | 0 | 0);
     $527($3_1 | 0, $526($3_1 | 0) | 0 | 0);
     $2_1 = $801($3_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $7_1 + $2_1 | 0;
    }
    if ($852($479($6_1 + 332 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, HEAP32[($6_1 + 324 | 0) >> 2] | 0 | 0, $6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $0_1 | 0) | 0) {
     break block
    }
    $481($6_1 + 332 | 0 | 0) | 0;
    continue label;
   };
  }
  block2 : {
   if (!($525($6_1 + 196 | 0 | 0) | 0)) {
    break block2
   }
   $0_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
   if (($0_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
    break block2
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $0_1 + 4 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  i64toi32_i32$0 = $819($2_1 | 0, HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0, $4_1 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $113_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $5_1;
  HEAP32[i64toi32_i32$0 >> 2] = $113_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $804($6_1 + 196 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
  block3 : {
   if (!($478($6_1 + 332 | 0 | 0, $6_1 + 328 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($6_1 + 332 | 0) >> 2] | 0;
  $1872($3_1 | 0) | 0;
  $1872($6_1 + 196 | 0 | 0) | 0;
  global$0 = $6_1 + 336 | 0;
  return $2_1 | 0;
 }
 
 function $863($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $864($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $864($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $182_1 = 0, $184_1 = 0, $180_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 348 | 0) >> 2] = $1_1;
  $865($6_1 + 204 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $2_1 = $502($6_1 + 192 | 0 | 0) | 0;
  $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
  $1_1 = $801($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($478($6_1 + 348 | 0 | 0, $6_1 + 344 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($525($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $525($2_1 | 0) | 0;
       $527($2_1 | 0, ($525($2_1 | 0) | 0) << 1 | 0 | 0);
       $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
       $1_1 = $801($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($866($479($6_1 + 348 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($525($6_1 + 204 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAPF32[$5_1 >> 2] = Math_fround($824($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0));
     $804($6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($478($6_1 + 348 | 0 | 0, $6_1 + 344 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 348 | 0) >> 2] | 0;
     $1872($2_1 | 0) | 0;
     $1872($6_1 + 204 | 0 | 0) | 0;
     global$0 = $6_1 + 352 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $481($6_1 + 348 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $865($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $608($5_1 + 12 | 0 | 0, $1_1 | 0);
  $872($477($5_1 + 12 | 0 | 0) | 0 | 0, 67126256 | 0, 67126284 | 0, $2_1 | 0) | 0;
  $1_1 = $839($5_1 + 12 | 0 | 0) | 0;
  HEAP32[$3_1 >> 2] = $885($1_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $886($1_1 | 0) | 0;
  $887($0_1 | 0, $1_1 | 0);
  $783($5_1 + 12 | 0 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $866($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  HEAP32[($12_1 + 12 | 0) >> 2] = $0_1;
  block2 : {
   block1 : {
    block : {
     if (($0_1 | 0) != ($5_1 | 0)) {
      break block
     }
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
      break block1
     }
     $0_1 = 0;
     HEAP8[$1_1 >> 0] = 0;
     $11_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
     HEAP8[$11_1 >> 0] = 46;
     if (!($525($7_1 | 0) | 0)) {
      break block2
     }
     $11_1 = HEAP32[$9_1 >> 2] | 0;
     if (($11_1 - $8_1 | 0 | 0) > (159 | 0)) {
      break block2
     }
     $5_1 = HEAP32[$10_1 >> 2] | 0;
     HEAP32[$9_1 >> 2] = $11_1 + 4 | 0;
     HEAP32[$11_1 >> 2] = $5_1;
     break block2;
    }
    block4 : {
     block3 : {
      if (($0_1 | 0) != ($6_1 | 0)) {
       break block3
      }
      if (!($525($7_1 | 0) | 0)) {
       break block3
      }
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break block1
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break block4
      }
      $11_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $11_1;
      $0_1 = 0;
      HEAP32[$10_1 >> 2] = 0;
      break block2;
     }
     $0_1 = ($888($11_1 | 0, $11_1 + 112 | 0 | 0, $12_1 + 12 | 0 | 0) | 0) - $11_1 | 0;
     $11_1 = $0_1 >> 2 | 0;
     if (($11_1 | 0) > (27 | 0)) {
      break block1
     }
     $5_1 = HEAP8[($11_1 + 67126256 | 0) >> 0] | 0;
     block8 : {
      block6 : {
       block5 : {
        $0_1 = $0_1 & -5 | 0;
        if (($0_1 | 0) == (88 | 0)) {
         break block5
        }
        if (($0_1 | 0) != (96 | 0)) {
         break block6
        }
        block7 : {
         $11_1 = HEAP32[$4_1 >> 2] | 0;
         if (($11_1 | 0) == ($3_1 | 0)) {
          break block7
         }
         $0_1 = -1;
         if (($717(HEAP8[($11_1 + -1 | 0) >> 0] | 0 | 0) | 0 | 0) != ($717(HEAP8[$2_1 >> 0] | 0 | 0) | 0 | 0)) {
          break block2
         }
        }
        HEAP32[$4_1 >> 2] = $11_1 + 1 | 0;
        HEAP8[$11_1 >> 0] = $5_1;
        break block4;
       }
       HEAP8[$2_1 >> 0] = 80;
       break block8;
      }
      $0_1 = $717($5_1 | 0) | 0;
      if (($0_1 | 0) != (HEAP8[$2_1 >> 0] | 0 | 0)) {
       break block8
      }
      HEAP8[$2_1 >> 0] = $718($0_1 | 0) | 0;
      if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (1 | 0)) {
       break block8
      }
      HEAP8[$1_1 >> 0] = 0;
      if (!($525($7_1 | 0) | 0)) {
       break block8
      }
      $0_1 = HEAP32[$9_1 >> 2] | 0;
      if (($0_1 - $8_1 | 0 | 0) > (159 | 0)) {
       break block8
      }
      $1_1 = HEAP32[$10_1 >> 2] | 0;
      HEAP32[$9_1 >> 2] = $0_1 + 4 | 0;
      HEAP32[$0_1 >> 2] = $1_1;
     }
     $0_1 = HEAP32[$4_1 >> 2] | 0;
     HEAP32[$4_1 >> 2] = $0_1 + 1 | 0;
     HEAP8[$0_1 >> 0] = $5_1;
     $0_1 = 0;
     if (($11_1 | 0) > (21 | 0)) {
      break block2
     }
     HEAP32[$10_1 >> 2] = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
     break block2;
    }
    $0_1 = 0;
    break block2;
   }
   $0_1 = -1;
  }
  global$0 = $12_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $867($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $868($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $868($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $182_1 = 0, $184_1 = 0, $180_1 = 0;
  $6_1 = global$0 - 352 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 344 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 348 | 0) >> 2] = $1_1;
  $865($6_1 + 204 | 0 | 0, $3_1 | 0, $6_1 + 224 | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 216 | 0 | 0);
  $2_1 = $502($6_1 + 192 | 0 | 0) | 0;
  $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
  $1_1 = $801($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 188 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 7 | 0) >> 0] = 1;
  HEAP8[($6_1 + 6 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($478($6_1 + 348 | 0 | 0, $6_1 + 344 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0) != ($1_1 + ($525($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $525($2_1 | 0) | 0;
       $527($2_1 | 0, ($525($2_1 | 0) | 0) << 1 | 0 | 0);
       $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
       $1_1 = $801($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 188 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($866($479($6_1 + 348 | 0 | 0) | 0 | 0, $6_1 + 7 | 0 | 0, $6_1 + 6 | 0 | 0, $1_1 | 0, $6_1 + 188 | 0 | 0, HEAP32[($6_1 + 220 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 216 | 0) >> 2] | 0 | 0, $6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 224 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 188 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($525($6_1 + 204 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 7 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 16 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAPF64[$5_1 >> 3] = +$827($1_1 | 0, HEAP32[($6_1 + 188 | 0) >> 2] | 0 | 0, $4_1 | 0);
     $804($6_1 + 204 | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($478($6_1 + 348 | 0 | 0, $6_1 + 344 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 348 | 0) >> 2] | 0;
     $1872($2_1 | 0) | 0;
     $1872($6_1 + 204 | 0 | 0) | 0;
     global$0 = $6_1 + 352 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $481($6_1 + 348 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $869($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  return $870($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0) | 0 | 0;
 }
 
 function $870($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $10$hi = 0, $154_1 = 0, $189_1 = 0, $191_1 = 0, $187_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 364 | 0) >> 2] = $1_1;
  $865($6_1 + 220 | 0 | 0, $3_1 | 0, $6_1 + 240 | 0 | 0, $6_1 + 236 | 0 | 0, $6_1 + 232 | 0 | 0);
  $2_1 = $502($6_1 + 208 | 0 | 0) | 0;
  $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
  $1_1 = $801($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 204 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 32 | 0;
  HEAP32[($6_1 + 24 | 0) >> 2] = 0;
  HEAP8[($6_1 + 23 | 0) >> 0] = 1;
  HEAP8[($6_1 + 22 | 0) >> 0] = 69;
  $3_1 = 0;
  label : while (1) {
   block3 : {
    block2 : {
     block : {
      if ($478($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0) {
       break block
      }
      block1 : {
       if ((HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0) != ($1_1 + ($525($2_1 | 0) | 0) | 0 | 0)) {
        break block1
       }
       $7_1 = $525($2_1 | 0) | 0;
       $527($2_1 | 0, ($525($2_1 | 0) | 0) << 1 | 0 | 0);
       $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
       $1_1 = $801($2_1 | 0, 0 | 0) | 0;
       HEAP32[($6_1 + 204 | 0) >> 2] = $7_1 + $1_1 | 0;
      }
      if ($866($479($6_1 + 364 | 0 | 0) | 0 | 0, $6_1 + 23 | 0 | 0, $6_1 + 22 | 0 | 0, $1_1 | 0, $6_1 + 204 | 0 | 0, HEAP32[($6_1 + 236 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, $6_1 + 220 | 0 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 240 | 0 | 0) | 0) {
       break block
      }
      if ($3_1 & 1 | 0) {
       break block2
      }
      $3_1 = 0;
      $7_1 = (HEAP32[($6_1 + 204 | 0) >> 2] | 0) - $1_1 | 0;
      if (($7_1 | 0) < (1 | 0)) {
       break block3
      }
      block4 : {
       block5 : {
        $8_1 = HEAPU8[$1_1 >> 0] | 0;
        $9_1 = $8_1 + -43 | 0;
        switch ($9_1 | 0) {
        case 0:
        case 2:
         break block4;
        default:
         break block5;
        };
       }
       if (($8_1 | 0) == (46 | 0)) {
        break block2
       }
       $3_1 = 1;
       if ((($8_1 + -48 | 0) & 255 | 0) >>> 0 < 10 >>> 0) {
        break block3
       }
       break block;
      }
      if (($7_1 | 0) == (1 | 0)) {
       break block3
      }
      block6 : {
       switch ($9_1 | 0) {
       case 0:
       case 2:
        break block6;
       default:
        break block3;
       };
      }
      $7_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
      if (($7_1 | 0) == (46 | 0)) {
       break block2
      }
      $3_1 = 1;
      if ((($7_1 + -48 | 0) & 255 | 0) >>> 0 <= 9 >>> 0) {
       break block3
      }
     }
     block7 : {
      if (!($525($6_1 + 220 | 0 | 0) | 0)) {
       break block7
      }
      if ((HEAPU8[($6_1 + 23 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block7
      }
      $3_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      if (($3_1 - ($6_1 + 32 | 0) | 0 | 0) > (159 | 0)) {
       break block7
      }
      HEAP32[($6_1 + 28 | 0) >> 2] = $3_1 + 4 | 0;
      HEAP32[$3_1 >> 2] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
     }
     $830($6_1 | 0, $1_1 | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0 | 0, $4_1 | 0);
     i64toi32_i32$0 = HEAP32[$6_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
     $10_1 = i64toi32_i32$0;
     $10$hi = i64toi32_i32$1;
     i64toi32_i32$1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
     $154_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $5_1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $154_1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     HEAP32[i64toi32_i32$1 >> 2] = $10_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $804($6_1 + 220 | 0 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $4_1 | 0);
     block8 : {
      if (!($478($6_1 + 364 | 0 | 0, $6_1 + 360 | 0 | 0) | 0)) {
       break block8
      }
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
     }
     $1_1 = HEAP32[($6_1 + 364 | 0) >> 2] | 0;
     $1872($2_1 | 0) | 0;
     $1872($6_1 + 220 | 0 | 0) | 0;
     global$0 = $6_1 + 368 | 0;
     return $1_1 | 0;
    }
    $3_1 = 1;
   }
   $481($6_1 + 364 | 0 | 0) | 0;
   continue label;
  };
 }
 
 function $871($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 320 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 312 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 316 | 0) >> 2] = $1_1;
  $7_1 = $502($6_1 + 196 | 0 | 0) | 0;
  $608($6_1 + 16 | 0 | 0, $3_1 | 0);
  $872($477($6_1 + 16 | 0 | 0) | 0 | 0, 67126256 | 0, 67126282 | 0, $6_1 + 208 | 0 | 0) | 0;
  $783($6_1 + 16 | 0 | 0) | 0;
  $2_1 = $502($6_1 + 184 | 0 | 0) | 0;
  $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
  $1_1 = $801($2_1 | 0, 0 | 0) | 0;
  HEAP32[($6_1 + 180 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 16 | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  block : {
   label : while (1) {
    if ($478($6_1 + 316 | 0 | 0, $6_1 + 312 | 0 | 0) | 0) {
     break block
    }
    block1 : {
     if ((HEAP32[($6_1 + 180 | 0) >> 2] | 0 | 0) != ($1_1 + ($525($2_1 | 0) | 0) | 0 | 0)) {
      break block1
     }
     $3_1 = $525($2_1 | 0) | 0;
     $527($2_1 | 0, ($525($2_1 | 0) | 0) << 1 | 0 | 0);
     $527($2_1 | 0, $526($2_1 | 0) | 0 | 0);
     $1_1 = $801($2_1 | 0, 0 | 0) | 0;
     HEAP32[($6_1 + 180 | 0) >> 2] = $3_1 + $1_1 | 0;
    }
    if ($852($479($6_1 + 316 | 0 | 0) | 0 | 0, 16 | 0, $1_1 | 0, $6_1 + 180 | 0 | 0, $6_1 + 8 | 0 | 0, 0 | 0, $7_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 208 | 0 | 0) | 0) {
     break block
    }
    $481($6_1 + 316 | 0 | 0) | 0;
    continue label;
   };
  }
  $527($2_1 | 0, (HEAP32[($6_1 + 180 | 0) >> 2] | 0) - $1_1 | 0 | 0);
  $1_1 = $531($2_1 | 0) | 0;
  $3_1 = $833() | 0;
  HEAP32[$6_1 >> 2] = $5_1;
  block2 : {
   if (($834($1_1 | 0, $3_1 | 0, 67109491 | 0, $6_1 | 0) | 0 | 0) == (1 | 0)) {
    break block2
   }
   HEAP32[$4_1 >> 2] = 4;
  }
  block3 : {
   if (!($478($6_1 + 316 | 0 | 0, $6_1 + 312 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $1_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
  $1872($2_1 | 0) | 0;
  $1872($7_1 | 0) | 0;
  global$0 = $6_1 + 320 | 0;
  return $1_1 | 0;
 }
 
 function $872($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 48 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1) | 0 | 0;
 }
 
 function $873($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $895($0_1 | 0, $894($893($0_1 | 0) | 0 | 0, $893($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $874($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $875($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $876($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $877($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $880($0_1 | 0, $879($878($0_1 | 0) | 0 | 0, $878($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $878($0_1) {
  $0_1 = $0_1 | 0;
  return $1609($0_1 | 0) | 0 | 0;
 }
 
 function $879($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $1608($0_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, $1_1 - $0_1 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $880($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1607($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $881($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return 67126256 | 0;
 }
 
 function $882($0_1) {
  $0_1 = $0_1 | 0;
  return $1612($0_1 | 0) | 0 | 0;
 }
 
 function $883($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $1611($0_1 | 0, HEAP8[$2_1 >> 0] | 0 | 0, $1_1 - $0_1 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $884($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1610($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $885($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $886($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $887($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $888($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $891($0_1 | 0, $890($889($0_1 | 0) | 0 | 0, $889($1_1 | 0) | 0 | 0, $2_1 | 0, $3_1 + 15 | 0 | 0) | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $889($0_1) {
  $0_1 = $0_1 | 0;
  return $1615($0_1 | 0) | 0 | 0;
 }
 
 function $890($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $1614($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $891($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1613($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $892($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $608($3_1 + 12 | 0 | 0, $1_1 | 0);
  $872($477($3_1 + 12 | 0 | 0) | 0 | 0, 67126256 | 0, 67126282 | 0, $2_1 | 0) | 0;
  $783($3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $893($0_1) {
  $0_1 = $0_1 | 0;
  return $1618($0_1 | 0) | 0 | 0;
 }
 
 function $894($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $0_1 = $1617($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0;
  return ($0_1 ? $0_1 : $1_1) | 0;
 }
 
 function $895($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1616($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $896($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (($405($2_1 | 0) | 0) & 1 | 0) {
     break block
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break block1;
   }
   $608($5_1 + 16 | 0 | 0, $2_1 | 0);
   $2_1 = $784($5_1 + 16 | 0 | 0) | 0;
   $783($5_1 + 16 | 0 | 0) | 0;
   block3 : {
    block2 : {
     if (!$4_1) {
      break block2
     }
     $785($5_1 + 16 | 0 | 0, $2_1 | 0);
     break block3;
    }
    $786($5_1 + 16 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $897($5_1 + 16 | 0 | 0) | 0;
   label : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $898($5_1 + 16 | 0 | 0) | 0;
    block4 : {
     if (!($899($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
      break block4
     }
     $2_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     $1872($5_1 + 16 | 0 | 0) | 0;
     break block1;
    }
    $2_1 = HEAP8[($900($5_1 + 12 | 0 | 0) | 0) >> 0] | 0;
    $443($442($5_1 + 28 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $901($5_1 + 12 | 0 | 0) | 0;
    $444($5_1 + 28 | 0 | 0) | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $897($0_1) {
  $0_1 = $0_1 | 0;
  return $902($0_1 | 0, $508($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $898($0_1) {
  $0_1 = $0_1 | 0;
  return $902($0_1 | 0, ($508($0_1 | 0) | 0) + ($525($0_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $899($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($903($0_1 | 0) | 0 | 0) == ($903($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $900($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $901($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $902($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($1619($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $903($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $904($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $905($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 67109737 | 0) | 0 | 0;
 }
 
 function $905($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = 37;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  $906($6_1 + 56 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $405($2_1 | 0) | 0 | 0);
  $5_1 = $833() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 43 | 0) + ($907($6_1 + 43 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 56 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $908($6_1 + 43 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $608($6_1 + 4 | 0 | 0, $2_1 | 0);
  $909($6_1 + 43 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $783($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $910($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
  return $2_1 | 0;
 }
 
 function $906($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  block : {
   if (!($3_1 & 2048 | 0)) {
    break block
   }
   $4_1 = $3_1 & 74 | 0;
   if (($4_1 | 0) == (8 | 0)) {
    break block
   }
   if (($4_1 | 0) == (64 | 0)) {
    break block
   }
   if (!$2_1) {
    break block
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  block1 : {
   if (!($3_1 & 512 | 0)) {
    break block1
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  block2 : {
   label : while (1) {
    $4_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$4_1) {
     break block2
    }
    HEAP8[$0_1 >> 0] = $4_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  block4 : {
   block3 : {
    $1_1 = $3_1 & 74 | 0;
    if (($1_1 | 0) != (64 | 0)) {
     break block3
    }
    $1_1 = 111;
    break block4;
   }
   block5 : {
    if (($1_1 | 0) != (8 | 0)) {
     break block5
    }
    $1_1 = $3_1 & 16384 | 0 ? 88 : 120;
    break block4;
   }
   $1_1 = $2_1 ? 100 : 117;
  }
  HEAP8[$0_1 >> 0] = $1_1;
 }
 
 function $907($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
  $4_1 = $836($5_1 + 4 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $2_1 = $719($0_1 | 0, $1_1 | 0, $3_1 | 0, HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $837($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $908($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   $2_1 = ($405($2_1 | 0) | 0) & 176 | 0;
   if (($2_1 | 0) != (32 | 0)) {
    break block
   }
   return $1_1 | 0;
  }
  block1 : {
   if (($2_1 | 0) != (16 | 0)) {
    break block1
   }
   block3 : {
    block2 : {
     $2_1 = HEAPU8[$0_1 >> 0] | 0;
     switch ($2_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block2;
     default:
      break block3;
     };
    }
    return $0_1 + 1 | 0 | 0;
   }
   if (($1_1 - $0_1 | 0 | 0) < (2 | 0)) {
    break block1
   }
   if (($2_1 | 0) != (48 | 0)) {
    break block1
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
    break block1
   }
   $0_1 = $0_1 + 2 | 0;
  }
  return $0_1 | 0;
 }
 
 function $909($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $406($6_1 | 0) | 0;
  $6_1 = $784($6_1 | 0) | 0;
  $876($7_1 + 4 | 0 | 0, $6_1 | 0);
  block1 : {
   block : {
    if (!($794($7_1 + 4 | 0 | 0) | 0)) {
     break block
    }
    $832($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + ($2_1 - $0_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break block1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   block3 : {
    block2 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block2;
     default:
      break block3;
     };
    }
    $10_1 = $601($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   block4 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break block4
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break block4
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break block4
    }
    $10_1 = $601($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $10_1 = $601($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $962($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $875($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label : while (1) {
    block5 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break block5
     }
     $962($3_1 + ($9_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break block1;
    }
    block6 : {
     if (!(HEAPU8[($801($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break block6
     }
     if (($10_1 | 0) != (HEAP8[($801($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break block6
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 1 | 0;
     HEAP8[$10_1 >> 0] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($525($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $601($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 1 | 0;
    HEAP8[$14_1 >> 0] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
  $1872($7_1 + 4 | 0 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $910($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  block4 : {
   block : {
    if (!$0_1) {
     break block
    }
    $7_1 = $929($4_1 | 0) | 0;
    block1 : {
     $8_1 = $2_1 - $1_1 | 0;
     if (($8_1 | 0) < (1 | 0)) {
      break block1
     }
     if (($445($0_1 | 0, $1_1 | 0, $8_1 | 0) | 0 | 0) != ($8_1 | 0)) {
      break block
     }
    }
    block2 : {
     $1_1 = $3_1 - $1_1 | 0;
     $1_1 = ($7_1 | 0) > ($1_1 | 0) ? $7_1 - $1_1 | 0 : 0;
     if (($1_1 | 0) < (1 | 0)) {
      break block2
     }
     $7_1 = $930($6_1 + 4 | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
     $8_1 = $445($0_1 | 0, $505($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
     $1872($7_1 | 0) | 0;
     if (($8_1 | 0) != ($1_1 | 0)) {
      break block
     }
    }
    block3 : {
     $1_1 = $3_1 - $2_1 | 0;
     if (($1_1 | 0) < (1 | 0)) {
      break block3
     }
     if (($445($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
      break block
     }
    }
    $931($4_1 | 0, 0 | 0) | 0;
    break block4;
   }
   $0_1 = 0;
  }
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $911($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $912($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 67109730 | 0) | 0 | 0;
 }
 
 function $912($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = 37;
  HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  $906($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $405($2_1 | 0) | 0 | 0);
  $5_1 = $833() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 80 | 0) + ($907($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $908($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $608($6_1 + 20 | 0 | 0, $2_1 | 0);
  $909($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $783($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $910($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 112 | 0;
  return $2_1 | 0;
 }
 
 function $913($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $914($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 67109737 | 0) | 0 | 0;
 }
 
 function $914($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 56 | 0) >> 2] = 37;
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  $906($6_1 + 56 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $405($2_1 | 0) | 0 | 0);
  $5_1 = $833() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 43 | 0) + ($907($6_1 + 43 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 56 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $908($6_1 + 43 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $608($6_1 + 4 | 0 | 0, $2_1 | 0);
  $909($6_1 + 43 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $783($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $910($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 64 | 0;
  return $2_1 | 0;
 }
 
 function $915($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $916($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 67109730 | 0) | 0 | 0;
 }
 
 function $916($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 104 | 0) >> 2] = 37;
  HEAP32[($6_1 + 108 | 0) >> 2] = i64toi32_i32$0;
  $906($6_1 + 104 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $405($2_1 | 0) | 0 | 0);
  $5_1 = $833() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 80 | 0) + ($907($6_1 + 80 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 104 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $908($6_1 + 80 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $608($6_1 + 20 | 0 | 0, $2_1 | 0);
  $909($6_1 + 80 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $783($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $910($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 112 | 0;
  return $2_1 | 0;
 }
 
 function $917($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return $918($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 67111587 | 0) | 0 | 0;
 }
 
 function $918($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $158_1 = 0;
  $6_1 = global$0 - 208 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 200 | 0) >> 2] = 37;
  HEAP32[($6_1 + 204 | 0) >> 2] = 0;
  $7_1 = $919($6_1 + 200 | 0 | 1 | 0 | 0, $5_1 | 0, $405($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 156 | 0) >> 2] = $6_1 + 160 | 0;
  $5_1 = $833() | 0;
  block1 : {
   block : {
    if (!$7_1) {
     break block
    }
    $8_1 = $920($2_1 | 0) | 0;
    HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
    $5_1 = $907($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    break block1;
   }
   HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
   $5_1 = $907($6_1 + 160 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 80 | 0) >> 2] = 84;
  $9_1 = $921($6_1 + 148 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  $8_1 = $6_1 + 160 | 0;
  block5 : {
   block2 : {
    if (($5_1 | 0) < (30 | 0)) {
     break block2
    }
    $5_1 = $833() | 0;
    block4 : {
     block3 : {
      if (!$7_1) {
       break block3
      }
      $8_1 = $920($2_1 | 0) | 0;
      HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$6_1 >> 2] = $8_1;
      $5_1 = $922($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 | 0) | 0;
      break block4;
     }
     HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
     $5_1 = $922($6_1 + 156 | 0 | 0, $5_1 | 0, $6_1 + 200 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    }
    if (($5_1 | 0) == (-1 | 0)) {
     break block5
    }
    $923($9_1 | 0, HEAP32[($6_1 + 156 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
   }
   $10_1 = $8_1 + $5_1 | 0;
   $11_1 = $908($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = 84;
   $8_1 = $921($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
   block7 : {
    block6 : {
     $7_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
     if (($7_1 | 0) != ($6_1 + 160 | 0 | 0)) {
      break block6
     }
     $5_1 = $6_1 + 80 | 0;
     break block7;
    }
    $5_1 = $340($5_1 << 1 | 0 | 0) | 0;
    if (!$5_1) {
     break block5
    }
    $923($8_1 | 0, $5_1 | 0);
    $7_1 = HEAP32[($6_1 + 156 | 0) >> 2] | 0;
   }
   $608($6_1 + 60 | 0 | 0, $2_1 | 0);
   $924($7_1 | 0, $11_1 | 0, $10_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 60 | 0 | 0);
   $783($6_1 + 60 | 0 | 0) | 0;
   $2_1 = $910($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $925($8_1 | 0) | 0;
   $925($9_1 | 0) | 0;
   global$0 = $6_1 + 208 | 0;
   return $2_1 | 0;
  }
  $1863();
  wasm2js_trap();
 }
 
 function $919($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  block : {
   if (!($2_1 & 2048 | 0)) {
    break block
   }
   HEAP8[$0_1 >> 0] = 43;
   $0_1 = $0_1 + 1 | 0;
  }
  block1 : {
   if (!($2_1 & 1024 | 0)) {
    break block1
   }
   HEAP8[$0_1 >> 0] = 35;
   $0_1 = $0_1 + 1 | 0;
  }
  block2 : {
   $3_1 = $2_1 & 260 | 0;
   if (($3_1 | 0) == (260 | 0)) {
    break block2
   }
   $5_1 = 10798;
   HEAP8[$0_1 >> 0] = $5_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $5_1 >>> 8 | 0;
   $0_1 = $0_1 + 2 | 0;
  }
  $4_1 = $2_1 & 16384 | 0;
  block3 : {
   label : while (1) {
    $2_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$2_1) {
     break block3
    }
    HEAP8[$0_1 >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  block6 : {
   block5 : {
    block4 : {
     if (($3_1 | 0) == (256 | 0)) {
      break block4
     }
     if (($3_1 | 0) != (4 | 0)) {
      break block5
     }
     $1_1 = $4_1 ? 70 : 102;
     break block6;
    }
    $1_1 = $4_1 ? 69 : 101;
    break block6;
   }
   block7 : {
    if (($3_1 | 0) != (260 | 0)) {
     break block7
    }
    $1_1 = $4_1 ? 65 : 97;
    break block6;
   }
   $1_1 = $4_1 ? 71 : 103;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return ($3_1 | 0) != (260 | 0) | 0;
 }
 
 function $920($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $921($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1089($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $922($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
  $3_1 = $836($4_1 + 4 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $1_1 = $742($0_1 | 0, $2_1 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $837($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $923($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1106($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1106($0_1 | 0) | 0) >> 2] = $1_1;
  block : {
   if (!$2_1) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($1107($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $924($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $12_1 = 0, $10_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $406($6_1 | 0) | 0;
  $9_1 = $784($6_1 | 0) | 0;
  $876($7_1 + 4 | 0 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  block1 : {
   block : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break block;
    default:
     break block1;
    };
   }
   $6_1 = $601($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
   HEAP8[$11_1 >> 0] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  block3 : {
   block2 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break block2
    }
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break block2
    }
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break block2
    }
    $6_1 = $601($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $6_1 = $601($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 1 | 0;
    HEAP8[$11_1 >> 0] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break block3
     }
     if (!($722(HEAP8[$6_1 >> 0] | 0 | 0, $833() | 0 | 0) | 0)) {
      break block3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label;
    };
   }
   label1 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break block3
    }
    if (!($724(HEAP8[$6_1 >> 0] | 0 | 0, $833() | 0 | 0) | 0)) {
     break block3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label1;
   };
  }
  block5 : {
   block4 : {
    if (!($794($7_1 + 4 | 0 | 0) | 0)) {
     break block4
    }
    $832($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + ($6_1 - $10_1 | 0) | 0;
    break block5;
   }
   $962($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $875($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label2 : while (1) {
    block6 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break block6
     }
     $962($3_1 + ($10_1 - $0_1 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break block5;
    }
    block7 : {
     if ((HEAP8[($801($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break block7
     }
     if (($12_1 | 0) != (HEAP8[($801($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break block7
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($525($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $601($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 1 | 0;
    HEAP8[$16_1 >> 0] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label2;
   };
  }
  label3 : while (1) {
   block10 : {
    block9 : {
     block8 : {
      if ($6_1 >>> 0 < $2_1 >>> 0) {
       break block8
      }
      $11_1 = $6_1;
      break block9;
     }
     $11_1 = $6_1 + 1 | 0;
     $6_1 = HEAP8[$6_1 >> 0] | 0;
     if (($6_1 | 0) != (46 | 0)) {
      break block10
     }
     $6_1 = $874($9_1 | 0) | 0;
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
     HEAP8[$12_1 >> 0] = $6_1;
    }
    $832($8_1 | 0, $11_1 | 0, $2_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    $6_1 = (HEAP32[$5_1 >> 2] | 0) + ($2_1 - $11_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + ($1_1 - $0_1 | 0) | 0;
    $1872($7_1 + 4 | 0 | 0) | 0;
    global$0 = $7_1 + 16 | 0;
    return;
   }
   $6_1 = $601($8_1 | 0, $6_1 | 0) | 0;
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $12_1 + 1 | 0;
   HEAP8[$12_1 >> 0] = $6_1;
   $6_1 = $11_1;
   continue label3;
  };
 }
 
 function $925($0_1) {
  $0_1 = $0_1 | 0;
  $923($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $926($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $4$hi;
  return $927($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 67110070 | 0) | 0 | 0;
 }
 
 function $927($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $169_1 = 0;
  $7_1 = global$0 - 256 | 0;
  global$0 = $7_1;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 248 | 0) >> 2] = 37;
  HEAP32[($7_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = $919($7_1 + 248 | 0 | 1 | 0 | 0, $6_1 | 0, $405($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($7_1 + 204 | 0) >> 2] = $7_1 + 208 | 0;
  $6_1 = $833() | 0;
  block1 : {
   block : {
    if (!$8_1) {
     break block
    }
    $9_1 = $920($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
    $6_1 = $907($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    break block1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $907($7_1 + 208 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($7_1 + 128 | 0) >> 2] = 84;
  $10_1 = $921($7_1 + 196 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
  $9_1 = $7_1 + 208 | 0;
  block5 : {
   block2 : {
    if (($6_1 | 0) < (30 | 0)) {
     break block2
    }
    $6_1 = $833() | 0;
    block4 : {
     block3 : {
      if (!$8_1) {
       break block3
      }
      $9_1 = $920($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = $9_1;
      $6_1 = $922($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 | 0) | 0;
      break block4;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $922($7_1 + 204 | 0 | 0, $6_1 | 0, $7_1 + 248 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
    }
    if (($6_1 | 0) == (-1 | 0)) {
     break block5
    }
    $923($10_1 | 0, HEAP32[($7_1 + 204 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
   }
   $11_1 = $9_1 + $6_1 | 0;
   $12_1 = $908($9_1 | 0, $11_1 | 0, $2_1 | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = 84;
   $9_1 = $921($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   block7 : {
    block6 : {
     $8_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
     if (($8_1 | 0) != ($7_1 + 208 | 0 | 0)) {
      break block6
     }
     $6_1 = $7_1 + 128 | 0;
     break block7;
    }
    $6_1 = $340($6_1 << 1 | 0 | 0) | 0;
    if (!$6_1) {
     break block5
    }
    $923($9_1 | 0, $6_1 | 0);
    $8_1 = HEAP32[($7_1 + 204 | 0) >> 2] | 0;
   }
   $608($7_1 + 108 | 0 | 0, $2_1 | 0);
   $924($8_1 | 0, $12_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 108 | 0 | 0);
   $783($7_1 + 108 | 0 | 0) | 0;
   $2_1 = $910($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $925($9_1 | 0) | 0;
   $925($10_1 | 0) | 0;
   global$0 = $7_1 + 256 | 0;
   return $2_1 | 0;
  }
  $1863();
  wasm2js_trap();
 }
 
 function $928($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  $6_1 = $833() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $907($5_1 + 64 | 0 | 0, 20 | 0, $6_1 | 0, 67109491 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 64 | 0) + $7_1 | 0;
  $6_1 = $908($5_1 + 64 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $608($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $406($5_1 + 16 | 0 | 0) | 0;
  $783($5_1 + 16 | 0 | 0) | 0;
  $832($8_1 | 0, $5_1 + 64 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = $7_1 + ($5_1 + 16 | 0) | 0;
  $2_1 = $910($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + ($6_1 - ($5_1 + 64 | 0) | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 96 | 0;
  return $2_1 | 0;
 }
 
 function $929($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $930($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $605($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $1880($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $931($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $932($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (($405($2_1 | 0) | 0) & 1 | 0) {
     break block
    }
    $2_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1) | 0;
    break block1;
   }
   $608($5_1 + 16 | 0 | 0, $2_1 | 0);
   $2_1 = $839($5_1 + 16 | 0 | 0) | 0;
   $783($5_1 + 16 | 0 | 0) | 0;
   block3 : {
    block2 : {
     if (!$4_1) {
      break block2
     }
     $840($5_1 + 16 | 0 | 0, $2_1 | 0);
     break block3;
    }
    $841($5_1 + 16 | 0 | 0, $2_1 | 0);
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $933($5_1 + 16 | 0 | 0) | 0;
   label : while (1) {
    HEAP32[($5_1 + 8 | 0) >> 2] = $934($5_1 + 16 | 0 | 0) | 0;
    block4 : {
     if (!($935($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0)) {
      break block4
     }
     $2_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     $1889($5_1 + 16 | 0 | 0) | 0;
     break block1;
    }
    $2_1 = HEAP32[($936($5_1 + 12 | 0 | 0) | 0) >> 2] | 0;
    $499($498($5_1 + 28 | 0 | 0) | 0 | 0, $2_1 | 0) | 0;
    $937($5_1 + 12 | 0 | 0) | 0;
    $500($5_1 + 28 | 0 | 0) | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $933($0_1) {
  $0_1 = $0_1 | 0;
  return $939($0_1 | 0, $938($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $934($0_1) {
  $0_1 = $0_1 | 0;
  return $939($0_1 | 0, ($938($0_1 | 0) | 0) + (($845($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $935($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($940($0_1 | 0) | 0 | 0) == ($940($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $936($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $937($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $938($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($999($0_1 | 0) | 0)) {
    break block
   }
   return $1167($0_1 | 0) | 0 | 0;
  }
  return $1170($0_1 | 0) | 0 | 0;
 }
 
 function $939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($1620($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $940($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $941($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $942($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 67109737 | 0) | 0 | 0;
 }
 
 function $942($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 136 | 0) >> 2] = 37;
  HEAP32[($6_1 + 140 | 0) >> 2] = 0;
  $906($6_1 + 136 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $405($2_1 | 0) | 0 | 0);
  $5_1 = $833() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 123 | 0) + ($907($6_1 + 123 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 136 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $908($6_1 + 123 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $608($6_1 + 4 | 0 | 0, $2_1 | 0);
  $943($6_1 + 123 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $783($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $944($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
  return $2_1 | 0;
 }
 
 function $943($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $10_1 = 0, $11_1 = 0, $9_1 = 0, $7_1 = 0, $8_1 = 0, $14_1 = 0, $12_1 = 0, $13_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $477($6_1 | 0) | 0;
  $6_1 = $839($6_1 | 0) | 0;
  $887($7_1 + 4 | 0 | 0, $6_1 | 0);
  block1 : {
   block : {
    if (!($794($7_1 + 4 | 0 | 0) | 0)) {
     break block
    }
    $872($8_1 | 0, $0_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
    $6_1 = $3_1 + (($2_1 - $0_1 | 0) << 2 | 0) | 0;
    HEAP32[$5_1 >> 2] = $6_1;
    break block1;
   }
   HEAP32[$5_1 >> 2] = $3_1;
   $9_1 = $0_1;
   block3 : {
    block2 : {
     $10_1 = HEAPU8[$9_1 >> 0] | 0;
     switch ($10_1 + -43 | 0 | 0) {
     case 0:
     case 2:
      break block2;
     default:
      break block3;
     };
    }
    $10_1 = $603($8_1 | 0, $10_1 << 24 >> 24 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $0_1 + 1 | 0;
   }
   block4 : {
    if (($2_1 - $9_1 | 0 | 0) < (2 | 0)) {
     break block4
    }
    if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (48 | 0)) {
     break block4
    }
    if ((HEAPU8[($9_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break block4
    }
    $10_1 = $603($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $10_1 = $603($8_1 | 0, HEAP8[($9_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $10_1;
    $9_1 = $9_1 + 2 | 0;
   }
   $962($9_1 | 0, $2_1 | 0);
   $10_1 = 0;
   $12_1 = $886($6_1 | 0) | 0;
   $11_1 = 0;
   $6_1 = $9_1;
   label : while (1) {
    block5 : {
     if ($6_1 >>> 0 < $2_1 >>> 0) {
      break block5
     }
     $964($3_1 + (($9_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     $6_1 = HEAP32[$5_1 >> 2] | 0;
     break block1;
    }
    block6 : {
     if (!(HEAPU8[($801($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0)) {
      break block6
     }
     if (($10_1 | 0) != (HEAP8[($801($7_1 + 4 | 0 | 0, $11_1 | 0) | 0) >> 0] | 0 | 0)) {
      break block6
     }
     $10_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $10_1 + 4 | 0;
     HEAP32[$10_1 >> 2] = $12_1;
     $11_1 = $11_1 + ($11_1 >>> 0 < (($525($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $10_1 = 0;
    }
    $13_1 = $603($8_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $14_1 + 4 | 0;
    HEAP32[$14_1 >> 2] = $13_1;
    $6_1 = $6_1 + 1 | 0;
    $10_1 = $10_1 + 1 | 0;
    continue label;
   };
  }
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1872($7_1 + 4 | 0 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $944($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $8_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  block4 : {
   block : {
    if (!$0_1) {
     break block
    }
    $7_1 = $929($4_1 | 0) | 0;
    block1 : {
     $8_1 = ($2_1 - $1_1 | 0) >> 2 | 0;
     if (($8_1 | 0) < (1 | 0)) {
      break block1
     }
     if (($501($0_1 | 0, $1_1 | 0, $8_1 | 0) | 0 | 0) != ($8_1 | 0)) {
      break block
     }
    }
    block2 : {
     $1_1 = ($3_1 - $1_1 | 0) >> 2 | 0;
     $1_1 = ($7_1 | 0) > ($1_1 | 0) ? $7_1 - $1_1 | 0 : 0;
     if (($1_1 | 0) < (1 | 0)) {
      break block2
     }
     $7_1 = $960($6_1 + 4 | 0 | 0, $1_1 | 0, $5_1 | 0) | 0;
     $8_1 = $501($0_1 | 0, $961($7_1 | 0) | 0 | 0, $1_1 | 0) | 0;
     $1889($7_1 | 0) | 0;
     if (($8_1 | 0) != ($1_1 | 0)) {
      break block
     }
    }
    block3 : {
     $1_1 = ($3_1 - $2_1 | 0) >> 2 | 0;
     if (($1_1 | 0) < (1 | 0)) {
      break block3
     }
     if (($501($0_1 | 0, $2_1 | 0, $1_1 | 0) | 0 | 0) != ($1_1 | 0)) {
      break block
     }
    }
    $931($4_1 | 0, 0 | 0) | 0;
    break block4;
   }
   $0_1 = 0;
  }
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $945($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $946($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 67109730 | 0) | 0 | 0;
 }
 
 function $946($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $906($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 1 | 0, $405($2_1 | 0) | 0 | 0);
  $5_1 = $833() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 224 | 0) + ($907($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $908($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $608($6_1 + 20 | 0 | 0, $2_1 | 0);
  $943($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $783($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $944($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $947($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $948($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, 67109737 | 0) | 0 | 0;
 }
 
 function $948($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 136 | 0) >> 2] = 37;
  HEAP32[($6_1 + 140 | 0) >> 2] = 0;
  $906($6_1 + 136 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $405($2_1 | 0) | 0 | 0);
  $5_1 = $833() | 0;
  HEAP32[$6_1 >> 2] = $4_1;
  $5_1 = ($6_1 + 123 | 0) + ($907($6_1 + 123 | 0 | 0, 13 | 0, $5_1 | 0, $6_1 + 136 | 0 | 0, $6_1 | 0) | 0) | 0;
  $4_1 = $908($6_1 + 123 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $608($6_1 + 4 | 0 | 0, $2_1 | 0);
  $943($6_1 + 123 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $6_1 + 8 | 0 | 0, $6_1 + 4 | 0 | 0);
  $783($6_1 + 4 | 0 | 0) | 0;
  $2_1 = $944($1_1 | 0, $6_1 + 16 | 0 | 0, HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
  return $2_1 | 0;
 }
 
 function $949($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  return $950($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, 67109730 | 0) | 0 | 0;
 }
 
 function $950($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 256 | 0;
  global$0 = $6_1;
  i64toi32_i32$0 = 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = 37;
  HEAP32[($6_1 + 252 | 0) >> 2] = i64toi32_i32$0;
  $906($6_1 + 248 | 0 | 1 | 0 | 0, $5_1 | 0, 0 | 0, $405($2_1 | 0) | 0 | 0);
  $5_1 = $833() | 0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[$6_1 >> 2] = $4_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = ($6_1 + 224 | 0) + ($907($6_1 + 224 | 0 | 0, 24 | 0, $5_1 | 0, $6_1 + 248 | 0 | 0, $6_1 | 0) | 0) | 0;
  $7_1 = $908($6_1 + 224 | 0 | 0, $5_1 | 0, $2_1 | 0) | 0;
  $608($6_1 + 20 | 0 | 0, $2_1 | 0);
  $943($6_1 + 224 | 0 | 0, $7_1 | 0, $5_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $6_1 + 24 | 0 | 0, $6_1 + 20 | 0 | 0);
  $783($6_1 + 20 | 0 | 0) | 0;
  $2_1 = $944($1_1 | 0, $6_1 + 32 | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $6_1 + 256 | 0;
  return $2_1 | 0;
 }
 
 function $951($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  return $952($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, +$4_1, 67111587 | 0) | 0 | 0;
 }
 
 function $952($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $8_1 = 0, $7_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $158_1 = 0;
  $6_1 = global$0 - 368 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 360 | 0) >> 2] = 37;
  HEAP32[($6_1 + 364 | 0) >> 2] = 0;
  $7_1 = $919($6_1 + 360 | 0 | 1 | 0 | 0, $5_1 | 0, $405($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($6_1 + 316 | 0) >> 2] = $6_1 + 320 | 0;
  $5_1 = $833() | 0;
  block1 : {
   block : {
    if (!$7_1) {
     break block
    }
    $8_1 = $920($2_1 | 0) | 0;
    HEAPF64[($6_1 + 40 | 0) >> 3] = $4_1;
    HEAP32[($6_1 + 32 | 0) >> 2] = $8_1;
    $5_1 = $907($6_1 + 320 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 32 | 0 | 0) | 0;
    break block1;
   }
   HEAPF64[($6_1 + 48 | 0) >> 3] = $4_1;
   $5_1 = $907($6_1 + 320 | 0 | 0, 30 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 48 | 0 | 0) | 0;
  }
  HEAP32[($6_1 + 80 | 0) >> 2] = 84;
  $9_1 = $921($6_1 + 308 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
  $8_1 = $6_1 + 320 | 0;
  block5 : {
   block2 : {
    if (($5_1 | 0) < (30 | 0)) {
     break block2
    }
    $5_1 = $833() | 0;
    block4 : {
     block3 : {
      if (!$7_1) {
       break block3
      }
      $8_1 = $920($2_1 | 0) | 0;
      HEAPF64[($6_1 + 8 | 0) >> 3] = $4_1;
      HEAP32[$6_1 >> 2] = $8_1;
      $5_1 = $922($6_1 + 316 | 0 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 | 0) | 0;
      break block4;
     }
     HEAPF64[($6_1 + 16 | 0) >> 3] = $4_1;
     $5_1 = $922($6_1 + 316 | 0 | 0, $5_1 | 0, $6_1 + 360 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    }
    if (($5_1 | 0) == (-1 | 0)) {
     break block5
    }
    $923($9_1 | 0, HEAP32[($6_1 + 316 | 0) >> 2] | 0 | 0);
    $8_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
   }
   $10_1 = $8_1 + $5_1 | 0;
   $11_1 = $908($8_1 | 0, $10_1 | 0, $2_1 | 0) | 0;
   HEAP32[($6_1 + 80 | 0) >> 2] = 84;
   $8_1 = $953($6_1 + 72 | 0 | 0, 0 | 0, $6_1 + 80 | 0 | 0) | 0;
   block7 : {
    block6 : {
     $7_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
     if (($7_1 | 0) != ($6_1 + 320 | 0 | 0)) {
      break block6
     }
     $5_1 = $6_1 + 80 | 0;
     break block7;
    }
    $5_1 = $340($5_1 << 3 | 0 | 0) | 0;
    if (!$5_1) {
     break block5
    }
    $954($8_1 | 0, $5_1 | 0);
    $7_1 = HEAP32[($6_1 + 316 | 0) >> 2] | 0;
   }
   $608($6_1 + 60 | 0 | 0, $2_1 | 0);
   $955($7_1 | 0, $11_1 | 0, $10_1 | 0, $5_1 | 0, $6_1 + 68 | 0 | 0, $6_1 + 64 | 0 | 0, $6_1 + 60 | 0 | 0);
   $783($6_1 + 60 | 0 | 0) | 0;
   $2_1 = $944($1_1 | 0, $5_1 | 0, HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $956($8_1 | 0) | 0;
   $925($9_1 | 0) | 0;
   global$0 = $6_1 + 368 | 0;
   return $2_1 | 0;
  }
  $1863();
  wasm2js_trap();
 }
 
 function $953($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1150($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $954($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1227($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1227($0_1 | 0) | 0) >> 2] = $1_1;
  block : {
   if (!$2_1) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($1228($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $955($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $11_1 = 0, $12_1 = 0, $10_1 = 0, $7_1 = 0, $14_1 = 0, $8_1 = 0, $9_1 = 0, $16_1 = 0, $13_1 = 0, $15_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $8_1 = $477($6_1 | 0) | 0;
  $9_1 = $839($6_1 | 0) | 0;
  $887($7_1 + 4 | 0 | 0, $9_1 | 0);
  HEAP32[$5_1 >> 2] = $3_1;
  $10_1 = $0_1;
  block1 : {
   block : {
    $6_1 = HEAPU8[$10_1 >> 0] | 0;
    switch ($6_1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break block;
    default:
     break block1;
    };
   }
   $6_1 = $603($8_1 | 0, $6_1 << 24 >> 24 | 0) | 0;
   $11_1 = HEAP32[$5_1 >> 2] | 0;
   HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
   HEAP32[$11_1 >> 2] = $6_1;
   $10_1 = $0_1 + 1 | 0;
  }
  $6_1 = $10_1;
  block3 : {
   block2 : {
    if (($2_1 - $6_1 | 0 | 0) <= (1 | 0)) {
     break block2
    }
    if ((HEAPU8[$6_1 >> 0] | 0 | 0) != (48 | 0)) {
     break block2
    }
    if ((HEAPU8[($6_1 + 1 | 0) >> 0] | 0 | 32 | 0 | 0) != (120 | 0)) {
     break block2
    }
    $6_1 = $603($8_1 | 0, 48 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $6_1 = $603($8_1 | 0, HEAP8[($10_1 + 1 | 0) >> 0] | 0 | 0) | 0;
    $11_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $11_1 + 4 | 0;
    HEAP32[$11_1 >> 2] = $6_1;
    $10_1 = $10_1 + 2 | 0;
    $6_1 = $10_1;
    label : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break block3
     }
     if (!($722(HEAP8[$6_1 >> 0] | 0 | 0, $833() | 0 | 0) | 0)) {
      break block3
     }
     $6_1 = $6_1 + 1 | 0;
     continue label;
    };
   }
   label1 : while (1) {
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break block3
    }
    if (!($724(HEAP8[$6_1 >> 0] | 0 | 0, $833() | 0 | 0) | 0)) {
     break block3
    }
    $6_1 = $6_1 + 1 | 0;
    continue label1;
   };
  }
  block5 : {
   block4 : {
    if (!($794($7_1 + 4 | 0 | 0) | 0)) {
     break block4
    }
    $872($8_1 | 0, $10_1 | 0, $6_1 | 0, HEAP32[$5_1 >> 2] | 0 | 0) | 0;
    HEAP32[$5_1 >> 2] = (HEAP32[$5_1 >> 2] | 0) + (($6_1 - $10_1 | 0) << 2 | 0) | 0;
    break block5;
   }
   $962($10_1 | 0, $6_1 | 0);
   $12_1 = 0;
   $13_1 = $886($9_1 | 0) | 0;
   $14_1 = 0;
   $11_1 = $10_1;
   label2 : while (1) {
    block6 : {
     if ($11_1 >>> 0 < $6_1 >>> 0) {
      break block6
     }
     $964($3_1 + (($10_1 - $0_1 | 0) << 2 | 0) | 0 | 0, HEAP32[$5_1 >> 2] | 0 | 0);
     break block5;
    }
    block7 : {
     if ((HEAP8[($801($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0) < (1 | 0)) {
      break block7
     }
     if (($12_1 | 0) != (HEAP8[($801($7_1 + 4 | 0 | 0, $14_1 | 0) | 0) >> 0] | 0 | 0)) {
      break block7
     }
     $12_1 = HEAP32[$5_1 >> 2] | 0;
     HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
     HEAP32[$12_1 >> 2] = $13_1;
     $14_1 = $14_1 + ($14_1 >>> 0 < (($525($7_1 + 4 | 0 | 0) | 0) + -1 | 0) >>> 0) | 0;
     $12_1 = 0;
    }
    $15_1 = $603($8_1 | 0, HEAP8[$11_1 >> 0] | 0 | 0) | 0;
    $16_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $16_1 + 4 | 0;
    HEAP32[$16_1 >> 2] = $15_1;
    $11_1 = $11_1 + 1 | 0;
    $12_1 = $12_1 + 1 | 0;
    continue label2;
   };
  }
  block10 : {
   block8 : {
    label3 : while (1) {
     if ($6_1 >>> 0 >= $2_1 >>> 0) {
      break block8
     }
     $11_1 = $6_1 + 1 | 0;
     block9 : {
      $6_1 = HEAP8[$6_1 >> 0] | 0;
      if (($6_1 | 0) == (46 | 0)) {
       break block9
      }
      $6_1 = $603($8_1 | 0, $6_1 | 0) | 0;
      $12_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $12_1 + 4 | 0;
      HEAP32[$12_1 >> 2] = $6_1;
      $6_1 = $11_1;
      continue label3;
     }
     break label3;
    };
    $6_1 = $885($9_1 | 0) | 0;
    $14_1 = HEAP32[$5_1 >> 2] | 0;
    $12_1 = $14_1 + 4 | 0;
    HEAP32[$5_1 >> 2] = $12_1;
    HEAP32[$14_1 >> 2] = $6_1;
    break block10;
   }
   $12_1 = HEAP32[$5_1 >> 2] | 0;
   $11_1 = $6_1;
  }
  $872($8_1 | 0, $11_1 | 0, $2_1 | 0, $12_1 | 0) | 0;
  $6_1 = (HEAP32[$5_1 >> 2] | 0) + (($2_1 - $11_1 | 0) << 2 | 0) | 0;
  HEAP32[$5_1 >> 2] = $6_1;
  HEAP32[$4_1 >> 2] = ($1_1 | 0) == ($2_1 | 0) ? $6_1 : $3_1 + (($1_1 - $0_1 | 0) << 2 | 0) | 0;
  $1872($7_1 + 4 | 0 | 0) | 0;
  global$0 = $7_1 + 16 | 0;
 }
 
 function $956($0_1) {
  $0_1 = $0_1 | 0;
  $954($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $957($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $4$hi;
  return $958($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $5_1 | 0, $5$hi | 0, 67110070 | 0) | 0 | 0;
 }
 
 function $958($0_1, $1_1, $2_1, $3_1, $4_1, $4$hi, $5_1, $5$hi, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $169_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  i64toi32_i32$1 = $7_1;
  i64toi32_i32$0 = 0;
  HEAP32[($7_1 + 408 | 0) >> 2] = 37;
  HEAP32[($7_1 + 412 | 0) >> 2] = i64toi32_i32$0;
  $8_1 = $919($7_1 + 408 | 0 | 1 | 0 | 0, $6_1 | 0, $405($2_1 | 0) | 0 | 0) | 0;
  HEAP32[($7_1 + 364 | 0) >> 2] = $7_1 + 368 | 0;
  $6_1 = $833() | 0;
  block1 : {
   block : {
    if (!$8_1) {
     break block
    }
    $9_1 = $920($2_1 | 0) | 0;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $7_1 + 64 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $5_1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$1 = $7_1;
    HEAP32[($7_1 + 56 | 0) >> 2] = $4_1;
    HEAP32[($7_1 + 60 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($7_1 + 48 | 0) >> 2] = $9_1;
    $6_1 = $907($7_1 + 368 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 48 | 0 | 0) | 0;
    break block1;
   }
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 80 | 0) >> 2] = $4_1;
   HEAP32[($7_1 + 84 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $5$hi;
   i64toi32_i32$1 = $7_1;
   HEAP32[($7_1 + 88 | 0) >> 2] = $5_1;
   HEAP32[($7_1 + 92 | 0) >> 2] = i64toi32_i32$0;
   $6_1 = $907($7_1 + 368 | 0 | 0, 30 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 80 | 0 | 0) | 0;
  }
  HEAP32[($7_1 + 128 | 0) >> 2] = 84;
  $10_1 = $921($7_1 + 356 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
  $9_1 = $7_1 + 368 | 0;
  block5 : {
   block2 : {
    if (($6_1 | 0) < (30 | 0)) {
     break block2
    }
    $6_1 = $833() | 0;
    block4 : {
     block3 : {
      if (!$8_1) {
       break block3
      }
      $9_1 = $920($2_1 | 0) | 0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = $7_1 + 16 | 0;
      HEAP32[i64toi32_i32$1 >> 2] = $5_1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = $4$hi;
      i64toi32_i32$1 = $7_1;
      HEAP32[($7_1 + 8 | 0) >> 2] = $4_1;
      HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[$7_1 >> 2] = $9_1;
      $6_1 = $922($7_1 + 364 | 0 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 | 0) | 0;
      break block4;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 32 | 0) >> 2] = $4_1;
     HEAP32[($7_1 + 36 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = $5$hi;
     i64toi32_i32$1 = $7_1;
     HEAP32[($7_1 + 40 | 0) >> 2] = $5_1;
     HEAP32[($7_1 + 44 | 0) >> 2] = i64toi32_i32$0;
     $6_1 = $922($7_1 + 364 | 0 | 0, $6_1 | 0, $7_1 + 408 | 0 | 0, $7_1 + 32 | 0 | 0) | 0;
    }
    if (($6_1 | 0) == (-1 | 0)) {
     break block5
    }
    $923($10_1 | 0, HEAP32[($7_1 + 364 | 0) >> 2] | 0 | 0);
    $9_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
   }
   $11_1 = $9_1 + $6_1 | 0;
   $12_1 = $908($9_1 | 0, $11_1 | 0, $2_1 | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = 84;
   $9_1 = $953($7_1 + 120 | 0 | 0, 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   block7 : {
    block6 : {
     $8_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
     if (($8_1 | 0) != ($7_1 + 368 | 0 | 0)) {
      break block6
     }
     $6_1 = $7_1 + 128 | 0;
     break block7;
    }
    $6_1 = $340($6_1 << 3 | 0 | 0) | 0;
    if (!$6_1) {
     break block5
    }
    $954($9_1 | 0, $6_1 | 0);
    $8_1 = HEAP32[($7_1 + 364 | 0) >> 2] | 0;
   }
   $608($7_1 + 108 | 0 | 0, $2_1 | 0);
   $955($8_1 | 0, $12_1 | 0, $11_1 | 0, $6_1 | 0, $7_1 + 116 | 0 | 0, $7_1 + 112 | 0 | 0, $7_1 + 108 | 0 | 0);
   $783($7_1 + 108 | 0 | 0) | 0;
   $2_1 = $944($1_1 | 0, $6_1 | 0, HEAP32[($7_1 + 116 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 112 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0) | 0;
   $956($9_1 | 0) | 0;
   $925($10_1 | 0) | 0;
   global$0 = $7_1 + 416 | 0;
   return $2_1 | 0;
  }
  $1863();
  wasm2js_trap();
 }
 
 function $959($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  $6_1 = $833() | 0;
  HEAP32[$5_1 >> 2] = $4_1;
  $7_1 = $907($5_1 + 176 | 0 | 0, 20 | 0, $6_1 | 0, 67109491 | 0, $5_1 | 0) | 0;
  $4_1 = ($5_1 + 176 | 0) + $7_1 | 0;
  $6_1 = $908($5_1 + 176 | 0 | 0, $4_1 | 0, $2_1 | 0) | 0;
  $608($5_1 + 16 | 0 | 0, $2_1 | 0);
  $8_1 = $477($5_1 + 16 | 0 | 0) | 0;
  $783($5_1 + 16 | 0 | 0) | 0;
  $872($8_1 | 0, $5_1 + 176 | 0 | 0, $4_1 | 0, $5_1 + 16 | 0 | 0) | 0;
  $7_1 = ($5_1 + 16 | 0) + ($7_1 << 2 | 0) | 0;
  $2_1 = $944($1_1 | 0, $5_1 + 16 | 0 | 0, (($6_1 | 0) == ($4_1 | 0) ? $7_1 : ($5_1 + 16 | 0) + (($6_1 - ($5_1 + 176 | 0) | 0) << 2 | 0) | 0) | 0, $7_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  global$0 = $5_1 + 208 | 0;
  return $2_1 | 0;
 }
 
 function $960($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $779($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $1897($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $961($0_1) {
  $0_1 = $0_1 | 0;
  return $1178($938($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $962($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $963($0_1 | 0, $1_1 | 0);
 }
 
 function $963($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1621($0_1 | 0, $1_1 | 0);
 }
 
 function $964($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $965($0_1 | 0, $1_1 | 0);
 }
 
 function $965($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1624($0_1 | 0, $1_1 | 0);
 }
 
 function $966($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  $608($8_1 + 4 | 0 | 0, $3_1 | 0);
  $2_1 = $406($8_1 + 4 | 0 | 0) | 0;
  $783($8_1 + 4 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $1_1 = 0;
  block : {
   label2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break block
    }
    if ($1_1) {
     break block
    }
    block1 : {
     if ($407($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
      break block1
     }
     block5 : {
      block2 : {
       if (($967($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break block2
       }
       $1_1 = $6_1 + 1 | 0;
       if (($1_1 | 0) == ($7_1 | 0)) {
        break block1
       }
       $9_1 = 0;
       block4 : {
        block3 : {
         $1_1 = $967($2_1 | 0, HEAP8[$1_1 >> 0] | 0 | 0, 0 | 0) | 0;
         if (($1_1 | 0) == (69 | 0)) {
          break block3
         }
         $10_1 = 1;
         if (($1_1 & 255 | 0 | 0) == (48 | 0)) {
          break block3
         }
         $11_1 = $1_1;
         break block4;
        }
        $9_1 = $6_1 + 2 | 0;
        if (($9_1 | 0) == ($7_1 | 0)) {
         break block1
        }
        $10_1 = 2;
        $11_1 = $967($2_1 | 0, HEAP8[$9_1 >> 0] | 0 | 0, 0 | 0) | 0;
        $9_1 = $1_1;
       }
       HEAP32[($8_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = ($6_1 + $10_1 | 0) + 1 | 0;
       break block5;
      }
      block6 : {
       if (!($409($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0)) {
        break block6
       }
       block7 : {
        label : while (1) {
         $6_1 = $6_1 + 1 | 0;
         if (($6_1 | 0) == ($7_1 | 0)) {
          break block7
         }
         if ($409($2_1 | 0, 1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0) {
          continue label
         }
         break label;
        };
       }
       label1 : while (1) {
        if ($407($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
         break block5
        }
        if (!($409($2_1 | 0, 1 | 0, $408($8_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
         break block5
        }
        $410($8_1 + 12 | 0 | 0) | 0;
        continue label1;
       };
      }
      block8 : {
       if (($792($2_1 | 0, $408($8_1 + 12 | 0 | 0) | 0 | 0) | 0 | 0) != ($792($2_1 | 0, HEAP8[$6_1 >> 0] | 0 | 0) | 0 | 0)) {
        break block8
       }
       $6_1 = $6_1 + 1 | 0;
       $410($8_1 + 12 | 0 | 0) | 0;
       break block5;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     continue label2;
    }
    break label2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  block9 : {
   if (!($407($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0)) {
    break block9
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $967($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $968($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $969($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 624576549;
  HEAP32[($6_1 + 12 | 0) >> 2] = 1394948685;
  $5_1 = $966($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 + 8 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $5_1 | 0;
 }
 
 function $970($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $966($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $524($6_1 | 0) | 0 | 0, ($524($6_1 | 0) | 0) + ($525($6_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $971($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $608($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $406($6_1 + 8 | 0 | 0) | 0;
  $783($6_1 + 8 | 0 | 0) | 0;
  $972($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $972($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($787($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $973($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $608($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $406($6_1 + 8 | 0 | 0) | 0;
  $783($6_1 + 8 | 0 | 0) | 0;
  $974($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $974($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($787($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $975($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $608($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $406($6_1 + 8 | 0 | 0) | 0;
  $783($6_1 + 8 | 0 | 0) | 0;
  $976($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $976($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  block : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : $5_1 >>> 0 < 100 >>> 0 ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
  }
 }
 
 function $977($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = 0;
  block4 : {
   block1 : {
    block : {
     if (!($407($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break block
     }
     $0_1 = 6;
     break block1;
    }
    block2 : {
     $6_1 = $408($0_1 | 0) | 0;
     if ($409($3_1 | 0, 64 | 0, $6_1 | 0) | 0) {
      break block2
     }
     $0_1 = 4;
     break block1;
    }
    $1_1 = $967($3_1 | 0, $6_1 | 0, 0 | 0) | 0;
    block3 : {
     label : while (1) {
      $410($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if ($407($0_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
       break block3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break block3
      }
      $6_1 = $408($0_1 | 0) | 0;
      if (!($409($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
       break block4
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($967($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label;
     };
    }
    if (!($407($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break block4
    }
    $0_1 = 2;
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $0_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $978($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $13_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $14_1 = 0, $15_1 = 0, $16_1 = 0, $151_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $608($8_1 | 0, $3_1 | 0);
  $9_1 = $406($8_1 | 0) | 0;
  $783($8_1 | 0) | 0;
  block25 : {
   block24 : {
    block26 : {
     block2 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $972($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 1:
      case 33:
      case 39:
       $974($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $966($0_1 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $524($1_1 | 0) | 0 | 0, ($524($1_1 | 0) | 0) + ($525($1_1 | 0) | 0) | 0 | 0) | 0;
       break block24;
      case 35:
      case 36:
       $979($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 3:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 2032480100;
       HEAP32[$8_1 >> 2] = 623865125;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $966($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
       break block24;
      case 5:
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = 1680158061;
       HEAP32[$8_1 >> 2] = 623728933;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $966($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
       break block24;
      case 7:
       $980($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 8:
       $981($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 41:
       $982($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 44:
       $983($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 12:
       $984($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 45:
      case 51:
       $985($0_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 47:
       $986($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 49:
       $14_1 = 0;
       $15_1 = HEAPU8[($14_1 + 67126296 | 0) >> 0] | 0 | ((HEAPU8[($14_1 + 67126297 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($14_1 + 67126298 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($14_1 + 67126299 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP8[($8_1 + 7 | 0) >> 0] = $15_1;
       HEAP8[($8_1 + 8 | 0) >> 0] = $15_1 >>> 8 | 0;
       HEAP8[($8_1 + 9 | 0) >> 0] = $15_1 >>> 16 | 0;
       HEAP8[($8_1 + 10 | 0) >> 0] = $15_1 >>> 24 | 0;
       $13_1 = 0;
       i64toi32_i32$0 = HEAPU8[($13_1 + 67126289 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 67126290 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 67126291 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 67126292 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       i64toi32_i32$1 = HEAPU8[($13_1 + 67126293 | 0) >> 0] | 0 | ((HEAPU8[($13_1 + 67126294 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($13_1 + 67126295 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($13_1 + 67126296 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       $151_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[$8_1 >> 2] = $151_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 12 | 0) >> 2] = $966($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 11 | 0 | 0) | 0;
       break block24;
      case 17:
       HEAP8[($8_1 + 4 | 0) >> 0] = HEAPU8[(0 + 67126304 | 0) >> 0] | 0;
       $16_1 = 0;
       HEAP32[$8_1 >> 2] = HEAPU8[($16_1 + 67126300 | 0) >> 0] | 0 | ((HEAPU8[($16_1 + 67126301 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($16_1 + 67126302 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($16_1 + 67126303 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $966($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 5 | 0 | 0) | 0;
       break block24;
      case 18:
       $987($0_1 | 0, $5_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 19:
       i64toi32_i32$0 = $8_1;
       i64toi32_i32$1 = 1394948685;
       HEAP32[$8_1 >> 2] = 624576549;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$1;
       HEAP32[($8_1 + 12 | 0) >> 2] = $966($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 8 | 0 | 0) | 0;
       break block24;
      case 54:
       $988($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break block25;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = $966($0_1 | 0, HEAP32[($8_1 + 12 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $524($1_1 | 0) | 0 | 0, ($524($1_1 | 0) | 0) + ($525($1_1 | 0) | 0) | 0 | 0) | 0;
       break block24;
      case 56:
       $976($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 24:
       $989($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break block26
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break block2;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break block24;
    }
    $990($0_1 | 0, $8_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $979($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $980($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (23 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $981($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $982($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (365 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $983($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $3_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   $3_1 = $3_1 + -1 | 0;
   if ($3_1 >>> 0 > 11 >>> 0) {
    break block
   }
   if ($5_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $3_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
 }
 
 function $984($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (59 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $985($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  block : {
   label : while (1) {
    if ($407($1_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
     break block
    }
    if (!($409($4_1 | 0, 1 | 0, $408($1_1 | 0) | 0 | 0) | 0)) {
     break block
    }
    $410($1_1 | 0) | 0;
    continue label;
   };
  }
  block1 : {
   if (!($407($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
    break block1
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $986($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($525($0_1 | 0) | 0 | 0) != (0 - ($525($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break block
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $4_1 = $787($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  block1 : {
   if (($4_1 | 0) != ($0_1 | 0)) {
    break block1
   }
   if (($5_1 | 0) != (12 | 0)) {
    break block1
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  block2 : {
   if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
    break block2
   }
   if (($5_1 | 0) > (11 | 0)) {
    break block2
   }
   HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
  }
 }
 
 function $987($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (60 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $988($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (6 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $989($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $977($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  block : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
  }
 }
 
 function $990($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  block3 : {
   block1 : {
    block : {
     if (!($407($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break block
     }
     $1_1 = 6;
     break block1;
    }
    block2 : {
     if (($967($4_1 | 0, $408($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) == (37 | 0)) {
      break block2
     }
     $1_1 = 4;
     break block1;
    }
    if (!($407($410($1_1 | 0) | 0 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break block3
    }
    $1_1 = 2;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $1_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $991($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($8_1 + 12 | 0) >> 2] = $1_1;
  $608($8_1 + 4 | 0 | 0, $3_1 | 0);
  $2_1 = $477($8_1 + 4 | 0 | 0) | 0;
  $783($8_1 + 4 | 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = 0;
  $1_1 = 0;
  block : {
   label2 : while (1) {
    if (($6_1 | 0) == ($7_1 | 0)) {
     break block
    }
    if ($1_1) {
     break block
    }
    block1 : {
     if ($478($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
      break block1
     }
     block5 : {
      block2 : {
       if (($992($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0, 0 | 0) | 0 | 0) != (37 | 0)) {
        break block2
       }
       $1_1 = $6_1 + 4 | 0;
       if (($1_1 | 0) == ($7_1 | 0)) {
        break block1
       }
       $9_1 = 0;
       block4 : {
        block3 : {
         $1_1 = $992($2_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, 0 | 0) | 0;
         if (($1_1 | 0) == (69 | 0)) {
          break block3
         }
         $10_1 = 4;
         if (($1_1 & 255 | 0 | 0) == (48 | 0)) {
          break block3
         }
         $11_1 = $1_1;
         break block4;
        }
        $9_1 = $6_1 + 8 | 0;
        if (($9_1 | 0) == ($7_1 | 0)) {
         break block1
        }
        $10_1 = 8;
        $11_1 = $992($2_1 | 0, HEAP32[$9_1 >> 2] | 0 | 0, 0 | 0) | 0;
        $9_1 = $1_1;
       }
       HEAP32[($8_1 + 12 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1, HEAP32[($8_1 + 12 | 0) >> 2] | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0, $3_1, $4_1, $5_1, $11_1, $9_1) | 0;
       $6_1 = ($6_1 + $10_1 | 0) + 4 | 0;
       break block5;
      }
      block6 : {
       if (!($480($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0)) {
        break block6
       }
       block7 : {
        label : while (1) {
         $6_1 = $6_1 + 4 | 0;
         if (($6_1 | 0) == ($7_1 | 0)) {
          break block7
         }
         if ($480($2_1 | 0, 1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0) {
          continue label
         }
         break label;
        };
       }
       label1 : while (1) {
        if ($478($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0) {
         break block5
        }
        if (!($480($2_1 | 0, 1 | 0, $479($8_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
         break block5
        }
        $481($8_1 + 12 | 0 | 0) | 0;
        continue label1;
       };
      }
      block8 : {
       if (($844($2_1 | 0, $479($8_1 + 12 | 0 | 0) | 0 | 0) | 0 | 0) != ($844($2_1 | 0, HEAP32[$6_1 >> 2] | 0 | 0) | 0 | 0)) {
        break block8
       }
       $6_1 = $6_1 + 4 | 0;
       $481($8_1 + 12 | 0 | 0) | 0;
       break block5;
      }
      HEAP32[$4_1 >> 2] = 4;
     }
     $1_1 = HEAP32[$4_1 >> 2] | 0;
     continue label2;
    }
    break label2;
   };
   HEAP32[$4_1 >> 2] = 4;
  }
  block9 : {
   if (!($478($8_1 + 12 | 0 | 0, $8_1 + 8 | 0 | 0) | 0)) {
    break block9
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 2 | 0;
  }
  $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $992($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 52 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1) | 0 | 0;
 }
 
 function $993($0_1) {
  $0_1 = $0_1 | 0;
  return 2 | 0;
 }
 
 function $994($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $12_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126488 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126492 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $12_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126480 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126484 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1 + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $15_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126472 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126476 | 0) >> 2] | 0;
  $17_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $17_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126464 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126468 | 0) >> 2] | 0;
  $19_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $6_1;
  HEAP32[i64toi32_i32$1 >> 2] = $19_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $5_1 = $991($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$1 + 32 | 0 | 0) | 0;
  global$0 = i64toi32_i32$1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $995($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
  return $991($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $996($6_1 | 0) | 0 | 0, ($996($6_1 | 0) | 0) + (($845($6_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $996($0_1) {
  $0_1 = $0_1 | 0;
  return $998($997($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $997($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($999($0_1 | 0) | 0)) {
    break block
   }
   return $1083($0_1 | 0) | 0 | 0;
  }
  return $1628($0_1 | 0) | 0 | 0;
 }
 
 function $998($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $999($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1081($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) >>> 7 | 0 | 0;
 }
 
 function $1000($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(($1081($0_1 | 0) | 0) + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1001($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAPU8[(($1081($0_1 | 0) | 0) + 11 | 0) >> 0] | 0) & 127 | 0 | 0;
 }
 
 function $1002($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $608($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $477($6_1 + 8 | 0 | 0) | 0;
  $783($6_1 + 8 | 0 | 0) | 0;
  $1003($0_1 | 0, $5_1 + 24 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1003($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($842($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 168 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (167 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (7 | 0) | 0;
  }
 }
 
 function $1004($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $608($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $477($6_1 + 8 | 0 | 0) | 0;
  $783($6_1 + 8 | 0 | 0) | 0;
  $1005($0_1 | 0, $5_1 + 16 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1005($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   $0_1 = ($842($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 288 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0) - $0_1 | 0;
   if (($0_1 | 0) > (287 | 0)) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($0_1 | 0) / (12 | 0) | 0 | 0) % (12 | 0) | 0;
  }
 }
 
 function $1006($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $1_1;
  $608($6_1 + 8 | 0 | 0, $3_1 | 0);
  $1_1 = $477($6_1 + 8 | 0 | 0) | 0;
  $783($6_1 + 8 | 0 | 0) | 0;
  $1007($0_1 | 0, $5_1 + 20 | 0 | 0, $6_1 + 12 | 0 | 0, $2_1 | 0, $4_1 | 0, $1_1 | 0);
  $1_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  global$0 = $6_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1007($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  block : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = (($5_1 | 0) < (69 | 0) ? $5_1 + 2e3 | 0 : $5_1 >>> 0 < 100 >>> 0 ? $5_1 + 1900 | 0 : $5_1) + -1900 | 0;
  }
 }
 
 function $1008($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = 0;
  block4 : {
   block1 : {
    block : {
     if (!($478($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break block
     }
     $0_1 = 6;
     break block1;
    }
    block2 : {
     $6_1 = $479($0_1 | 0) | 0;
     if ($480($3_1 | 0, 64 | 0, $6_1 | 0) | 0) {
      break block2
     }
     $0_1 = 4;
     break block1;
    }
    $1_1 = $992($3_1 | 0, $6_1 | 0, 0 | 0) | 0;
    block3 : {
     label : while (1) {
      $481($0_1 | 0) | 0;
      $1_1 = $1_1 + -48 | 0;
      if ($478($0_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
       break block3
      }
      if (($4_1 | 0) < (2 | 0)) {
       break block3
      }
      $6_1 = $479($0_1 | 0) | 0;
      if (!($480($3_1 | 0, 64 | 0, $6_1 | 0) | 0)) {
       break block4
      }
      $4_1 = $4_1 + -1 | 0;
      $1_1 = Math_imul($1_1, 10) + ($992($3_1 | 0, $6_1 | 0, 0 | 0) | 0) | 0;
      continue label;
     };
    }
    if (!($478($0_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break block4
    }
    $0_1 = 2;
   }
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] | 0 | $0_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1009($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, $73_1 = 0, $76_1 = 0, $78_1 = 0, $80_1 = 0, $94_1 = 0, $97_1 = 0, $99_1 = 0, $101_1 = 0, $184_1 = 0, $186_1 = 0, $207_1 = 0, $210_1 = 0, $212_1 = 0, $214_1 = 0;
  $8_1 = global$0 - 48 | 0;
  global$0 = $8_1;
  HEAP32[($8_1 + 44 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = 0;
  $608($8_1 | 0, $3_1 | 0);
  $9_1 = $477($8_1 | 0) | 0;
  $783($8_1 | 0) | 0;
  block26 : {
   block24 : {
    block27 : {
     block2 : {
      switch ($6_1 + -65 | 0 | 0) {
      case 0:
      case 32:
       $1003($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 1:
      case 33:
      case 39:
       $1005($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 34:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $991($0_1 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $996($1_1 | 0) | 0 | 0, ($996($1_1 | 0) | 0) + (($845($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break block24;
      case 35:
      case 36:
       $1010($0_1 | 0, $5_1 + 12 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 3:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126344 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126348 | 0) >> 2] | 0;
       $73_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $73_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126336 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126340 | 0) >> 2] | 0;
       $76_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $76_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126328 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126332 | 0) >> 2] | 0;
       $78_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $78_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126320 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126324 | 0) >> 2] | 0;
       $80_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $80_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $991($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break block24;
      case 5:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126376 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126380 | 0) >> 2] | 0;
       $94_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $94_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126368 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126372 | 0) >> 2] | 0;
       $97_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $97_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126360 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126364 | 0) >> 2] | 0;
       $99_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $99_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126352 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126356 | 0) >> 2] | 0;
       $101_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $101_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $991($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break block24;
      case 7:
       $1011($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 8:
       $1012($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 41:
       $1013($0_1 | 0, $5_1 + 28 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 44:
       $1014($0_1 | 0, $5_1 + 16 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 12:
       $1015($0_1 | 0, $5_1 + 4 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 45:
      case 51:
       $1016($0_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 47:
       $1017($0_1 | 0, $5_1 + 8 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 49:
       block25 : {
        if (!44) {
         break block25
        }
        wasm2js_memory_copy($8_1, 67126384, 44);
       }
       HEAP32[($8_1 + 44 | 0) >> 2] = $991($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 44 | 0 | 0) | 0;
       break block24;
      case 17:
       HEAP32[($8_1 + 16 | 0) >> 2] = HEAP32[(0 + 67126448 | 0) >> 2] | 0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126440 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126444 | 0) >> 2] | 0;
       $184_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $184_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126432 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126436 | 0) >> 2] | 0;
       $186_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $186_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $991($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 20 | 0 | 0) | 0;
       break block24;
      case 18:
       $1018($0_1 | 0, $5_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 19:
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126488 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126492 | 0) >> 2] | 0;
       $207_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1 + 24 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $207_1;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126480 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126484 | 0) >> 2] | 0;
       $210_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1 + 16 | 0;
       HEAP32[i64toi32_i32$1 >> 2] = $210_1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126472 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126476 | 0) >> 2] | 0;
       $212_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $8_1;
       HEAP32[($8_1 + 8 | 0) >> 2] = $212_1;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 67126464 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 67126468 | 0) >> 2] | 0;
       $214_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $8_1;
       HEAP32[$8_1 >> 2] = $214_1;
       HEAP32[($8_1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $991($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $8_1 | 0, $8_1 + 32 | 0 | 0) | 0;
       break block24;
      case 54:
       $1019($0_1 | 0, $5_1 + 24 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 55:
       $4_1 = FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) | 0;
       break block26;
      case 23:
       $1_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
       HEAP32[($8_1 + 44 | 0) >> 2] = $991($0_1 | 0, HEAP32[($8_1 + 44 | 0) >> 2] | 0 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $996($1_1 | 0) | 0 | 0, ($996($1_1 | 0) | 0) + (($845($1_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0;
       break block24;
      case 56:
       $1007($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      case 24:
       $1020($0_1 | 0, $5_1 + 20 | 0 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
       break block24;
      default:
       if (($6_1 | 0) == (37 | 0)) {
        break block27
       }
       break;
      case 2:
      case 4:
      case 6:
      case 9:
      case 10:
      case 11:
      case 13:
      case 14:
      case 15:
      case 16:
      case 20:
      case 21:
      case 22:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 37:
      case 38:
      case 40:
      case 42:
      case 43:
      case 46:
      case 48:
      case 50:
      case 52:
      case 53:
       break block2;
      };
     }
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
     break block24;
    }
    $1021($0_1 | 0, $8_1 + 44 | 0 | 0, $2_1 | 0, $4_1 | 0, $9_1 | 0);
   }
   $4_1 = HEAP32[($8_1 + 44 | 0) >> 2] | 0;
  }
  global$0 = $8_1 + 48 | 0;
  return $4_1 | 0;
 }
 
 function $1010($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 + -1 | 0) >>> 0 > 30 >>> 0) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1011($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (23 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1012($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 + -1 | 0) >>> 0 > 11 >>> 0) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1013($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 3 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (365 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1014($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $3_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $5_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   $3_1 = $3_1 + -1 | 0;
   if ($3_1 >>> 0 > 11 >>> 0) {
    break block
   }
   if ($5_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $3_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $5_1 | 4 | 0;
 }
 
 function $1015($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (59 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1016($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  block : {
   label : while (1) {
    if ($478($1_1 | 0, $5_1 + 12 | 0 | 0) | 0) {
     break block
    }
    if (!($480($4_1 | 0, 1 | 0, $479($1_1 | 0) | 0 | 0) | 0)) {
     break block
    }
    $481($1_1 | 0) | 0;
    continue label;
   };
  }
  block1 : {
   if (!($478($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
    break block1
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | 2 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1017($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   $0_1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1 + 8 | 0) | 0;
   if (($845($0_1 | 0) | 0 | 0) != (0 - ($845($0_1 + 12 | 0 | 0) | 0) | 0 | 0)) {
    break block
   }
   HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | 4 | 0;
   return;
  }
  $4_1 = $842($2_1 | 0, $3_1 | 0, $0_1 | 0, $0_1 + 24 | 0 | 0, $5_1 | 0, $4_1 | 0, 0 | 0) | 0;
  $5_1 = HEAP32[$1_1 >> 2] | 0;
  block1 : {
   if (($4_1 | 0) != ($0_1 | 0)) {
    break block1
   }
   if (($5_1 | 0) != (12 | 0)) {
    break block1
   }
   HEAP32[$1_1 >> 2] = 0;
   return;
  }
  block2 : {
   if (($4_1 - $0_1 | 0 | 0) != (12 | 0)) {
    break block2
   }
   if (($5_1 | 0) > (11 | 0)) {
    break block2
   }
   HEAP32[$1_1 >> 2] = $5_1 + 12 | 0;
  }
 }
 
 function $1018($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 2 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (60 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1019($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 1 | 0) | 0;
  $3_1 = HEAP32[$4_1 >> 2] | 0;
  block : {
   if (($5_1 | 0) > (6 | 0)) {
    break block
   }
   if ($3_1 & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1;
   return;
  }
  HEAP32[$4_1 >> 2] = $3_1 | 4 | 0;
 }
 
 function $1020($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5_1 = $1008($2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, 4 | 0) | 0;
  block : {
   if ((HEAPU8[$4_1 >> 0] | 0) & 4 | 0) {
    break block
   }
   HEAP32[$1_1 >> 2] = $5_1 + -1900 | 0;
  }
 }
 
 function $1021($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
  block3 : {
   block1 : {
    block : {
     if (!($478($1_1 | 0, $5_1 + 12 | 0 | 0) | 0)) {
      break block
     }
     $1_1 = 6;
     break block1;
    }
    block2 : {
     if (($992($4_1 | 0, $479($1_1 | 0) | 0 | 0, 0 | 0) | 0 | 0) == (37 | 0)) {
      break block2
     }
     $1_1 = 4;
     break block1;
    }
    if (!($478($481($1_1 | 0) | 0 | 0, $5_1 + 12 | 0 | 0) | 0)) {
     break block3
    }
    $1_1 = 2;
   }
   HEAP32[$3_1 >> 2] = HEAP32[$3_1 >> 2] | 0 | $1_1 | 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1022($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 128 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 116 | 0;
  $1023($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $0_1 = $1024($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 128 | 0;
  return $0_1 | 0;
 }
 
 function $1023($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP8[($6_1 + 15 | 0) >> 0] = 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = $5_1;
  HEAP8[($6_1 + 13 | 0) >> 0] = $4_1;
  HEAP8[($6_1 + 12 | 0) >> 0] = 37;
  block : {
   if (!$5_1) {
    break block
   }
   $1025($6_1 + 13 | 0 | 0, $6_1 + 14 | 0 | 0);
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($739($1_1 | 0, $1026($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 12 | 0 | 0, $3_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0) | 0;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $1024($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1027($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1025($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAPU8[$0_1 >> 0] | 0;
  HEAP8[$0_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
  HEAP8[$1_1 >> 0] = $2_1;
 }
 
 function $1026($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1027($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1630($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1028($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 416 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $7_1 + 416 | 0;
  $1029($0_1 + 8 | 0 | 0, $7_1 + 16 | 0 | 0, $7_1 + 12 | 0 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $0_1 = $1030($7_1 + 16 | 0 | 0, HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0, $1_1 | 0) | 0;
  global$0 = $7_1 + 416 | 0;
  return $0_1 | 0;
 }
 
 function $1029($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 144 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $6_1 + 132 | 0;
  $1023($0_1 | 0, $6_1 + 32 | 0 | 0, $6_1 + 28 | 0 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 0;
  HEAP32[($6_1 + 20 | 0) >> 2] = 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $6_1 + 32 | 0;
  block : {
   $0_1 = $1032($1_1 | 0, $6_1 + 12 | 0 | 0, $1031($1_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0, $6_1 + 16 | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($0_1 | 0) != (-1 | 0)) {
    break block
   }
   $1869(67109950 | 0);
   wasm2js_trap();
  }
  HEAP32[$2_1 >> 2] = $1_1 + ($0_1 << 2 | 0) | 0;
  global$0 = $6_1 + 144 | 0;
 }
 
 function $1030($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1033($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1031($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1032($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $836($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $3_1 = $755($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $837($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1033($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1643($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1034($0_1) {
  $0_1 = $0_1 | 0;
  return $1035() | 0 | 0;
 }
 
 function $1035() {
  return $1036() | 0 | 0;
 }
 
 function $1036() {
  return 127 | 0;
 }
 
 function $1037($0_1) {
  $0_1 = $0_1 | 0;
  return $1035() | 0 | 0;
 }
 
 function $1038($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $502($0_1 | 0) | 0;
 }
 
 function $1039($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $502($0_1 | 0) | 0;
 }
 
 function $1040($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $502($0_1 | 0) | 0;
 }
 
 function $1041($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $930($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1042($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1043($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1044($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1045($0_1) {
  $0_1 = $0_1 | 0;
  return $1035() | 0 | 0;
 }
 
 function $1046($0_1) {
  $0_1 = $0_1 | 0;
  return $1035() | 0 | 0;
 }
 
 function $1047($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $502($0_1 | 0) | 0;
 }
 
 function $1048($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $502($0_1 | 0) | 0;
 }
 
 function $1049($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $502($0_1 | 0) | 0;
 }
 
 function $1050($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $930($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1051($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1052($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1053($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1054($0_1) {
  $0_1 = $0_1 | 0;
  return $1055() | 0 | 0;
 }
 
 function $1055() {
  return $1056() | 0 | 0;
 }
 
 function $1056() {
  return 2147483647 | 0;
 }
 
 function $1057($0_1) {
  $0_1 = $0_1 | 0;
  return $1055() | 0 | 0;
 }
 
 function $1058($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $502($0_1 | 0) | 0;
 }
 
 function $1059($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1060($0_1 | 0) | 0;
 }
 
 function $1060($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = $1061($0_1 | 0, $1_1 + 15 | 0 | 0, $1_1 + 14 | 0 | 0) | 0;
  $1062($0_1 | 0, 0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1061($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1573($1656($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1062($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1063($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1060($0_1 | 0) | 0;
 }
 
 function $1064($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $960($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1065($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1066($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1067($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1068($0_1) {
  $0_1 = $0_1 | 0;
  return $1055() | 0 | 0;
 }
 
 function $1069($0_1) {
  $0_1 = $0_1 | 0;
  return $1055() | 0 | 0;
 }
 
 function $1070($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $502($0_1 | 0) | 0;
 }
 
 function $1071($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1060($0_1 | 0) | 0;
 }
 
 function $1072($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1060($0_1 | 0) | 0;
 }
 
 function $1073($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $960($0_1 | 0, 1 | 0, 45 | 0) | 0;
 }
 
 function $1074($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1075($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1076($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $0_1;
  $3_1 = 67109634;
  HEAP8[$2_1 >> 0] = $3_1;
  HEAP8[($2_1 + 1 | 0) >> 0] = $3_1 >>> 8 | 0;
  HEAP8[($2_1 + 2 | 0) >> 0] = $3_1 >>> 16 | 0;
  HEAP8[($2_1 + 3 | 0) >> 0] = $3_1 >>> 24 | 0;
 }
 
 function $1077($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, i64toi32_i32$0 = 0, $3_1 = 0, i64toi32_i32$1 = 0, $28_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1079($1078($1_1 | 0) | 0 | 0);
  $0_1 = $1080($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  block1 : {
   block : {
    if ($999($1_1 | 0) | 0) {
     break block
    }
    $1_1 = $1081($1_1 | 0) | 0;
    $3_1 = $1082($0_1 | 0) | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
    $28_1 = i64toi32_i32$0;
    i64toi32_i32$0 = $3_1;
    HEAP32[i64toi32_i32$0 >> 2] = $28_1;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    $1062($0_1 | 0, $1001($0_1 | 0) | 0 | 0);
    break block1;
   }
   $1893($0_1 | 0, $998($1083($1_1 | 0) | 0 | 0) | 0 | 0, $1000($1_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1078($0_1) {
  $0_1 = $0_1 | 0;
  return $1593($0_1 | 0) | 0 | 0;
 }
 
 function $1079($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1080($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1657($1572($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1081($0_1) {
  $0_1 = $0_1 | 0;
  return $1606($0_1 | 0) | 0 | 0;
 }
 
 function $1082($0_1) {
  $0_1 = $0_1 | 0;
  return $1595($0_1 | 0) | 0 | 0;
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1081($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1084($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 272 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 264 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 268 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 85;
  $1_1 = $921($7_1 + 152 | 0 | 0, $7_1 + 160 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $608($7_1 + 144 | 0 | 0, $4_1 | 0);
  $8_1 = $406($7_1 + 144 | 0 | 0) | 0;
  HEAP8[($7_1 + 143 | 0) >> 0] = 0;
  block : {
   if (!($1086($7_1 + 268 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 144 | 0 | 0, $405($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 143 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 148 | 0 | 0, $7_1 + 260 | 0 | 0) | 0)) {
    break block
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 67110794 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 67110795 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 67110796 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 67110797 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 135 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 136 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 137 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 138 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 67110791 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67110792 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67110793 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67110794 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 128 | 0) >> 2] = HEAPU8[($10_1 + 67110787 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67110788 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67110789 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67110790 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 132 | 0) >> 2] = i64toi32_i32$1;
   $832($8_1 | 0, $7_1 + 128 | 0 | 0, $7_1 + 138 | 0 | 0, $7_1 + 118 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 84;
   $8_1 = $921($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $4_1 = $7_1 + 16 | 0;
   block2 : {
    block1 : {
     if (((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1087($1_1 | 0) | 0) | 0 | 0) < (99 | 0)) {
      break block1
     }
     $923($8_1 | 0, $340(((HEAP32[($7_1 + 148 | 0) >> 2] | 0) - ($1087($1_1 | 0) | 0) | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1087($8_1 | 0) | 0)) {
      break block2
     }
     $4_1 = $1087($8_1 | 0) | 0;
    }
    block3 : {
     if ((HEAPU8[($7_1 + 143 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break block3
     }
     HEAP8[$4_1 >> 0] = 45;
     $4_1 = $4_1 + 1 | 0;
    }
    $2_1 = $1087($1_1 | 0) | 0;
    block5 : {
     label : while (1) {
      block4 : {
       if ($2_1 >>> 0 < (HEAP32[($7_1 + 148 | 0) >> 2] | 0) >>> 0) {
        break block4
       }
       HEAP8[$4_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($741($7_1 + 16 | 0 | 0, 67109866 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break block5
       }
       $925($8_1 | 0) | 0;
       break block;
      }
      HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 128 | 0) + (($877($7_1 + 118 | 0 | 0, $1088($7_1 + 118 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 118 | 0) | 0) | 0) >> 0] | 0;
      $4_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      continue label;
     };
    }
    $1869(67109309 | 0);
    wasm2js_trap();
   }
   $1863();
   wasm2js_trap();
  }
  block6 : {
   if (!($407($7_1 + 268 | 0 | 0, $7_1 + 264 | 0 | 0) | 0)) {
    break block6
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 268 | 0) >> 2] | 0;
  $783($7_1 + 144 | 0 | 0) | 0;
  $925($1_1 | 0) | 0;
  global$0 = $7_1 + 272 | 0;
  return $2_1 | 0;
 }
 
 function $1085($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1086($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $370_1 = 0;
  $11_1 = global$0 - 528 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 520 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 524 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!($407($0_1 | 0, $11_1 + 524 | 0 | 0) | 0)) {
     break block
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    $0_1 = 0;
    break block1;
   }
   HEAP32[($11_1 + 76 | 0) >> 2] = 85;
   $12_1 = $1090($11_1 + 104 | 0 | 0, $11_1 + 112 | 0 | 0, $11_1 + 76 | 0 | 0) | 0;
   $10_1 = $1091($12_1 | 0) | 0;
   HEAP32[($11_1 + 100 | 0) >> 2] = $10_1;
   HEAP32[($11_1 + 96 | 0) >> 2] = $10_1 + 400 | 0;
   $13_1 = $502($11_1 + 76 | 0 | 0) | 0;
   $14_1 = $502($11_1 + 64 | 0 | 0) | 0;
   $15_1 = $502($11_1 + 52 | 0 | 0) | 0;
   $16_1 = $502($11_1 + 40 | 0 | 0) | 0;
   $17_1 = $502($11_1 + 28 | 0 | 0) | 0;
   $1092($2_1 | 0, $3_1 | 0, $11_1 + 92 | 0 | 0, $11_1 + 91 | 0 | 0, $11_1 + 90 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 24 | 0 | 0);
   HEAP32[$9_1 >> 2] = $1087($8_1 | 0) | 0;
   $18_1 = $4_1 & 512 | 0;
   $3_1 = 0;
   $1_1 = 0;
   label6 : while (1) {
    $2_1 = $1_1;
    block8 : {
     block9 : {
      block12 : {
       block2 : {
        if (($3_1 | 0) == (4 | 0)) {
         break block2
        }
        if ($407($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
         break block2
        }
        $10_1 = 0;
        block7 : {
         block5 : {
          block6 : {
           block11 : {
            block3 : {
             switch (HEAPU8[(($11_1 + 92 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
             case 1:
              if (($3_1 | 0) == (3 | 0)) {
               break block9
              }
              block10 : {
               if (!($409($7_1 | 0, 1 | 0, $408($0_1 | 0) | 0 | 0) | 0)) {
                break block10
               }
               $1093($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
               $1883($17_1 | 0, $1094($11_1 + 16 | 0 | 0) | 0 | 0);
               break block11;
              }
              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
              $0_1 = 0;
              break block12;
             case 0:
              break block3;
             case 2:
              break block5;
             case 3:
              break block6;
             case 4:
              break block7;
             default:
              break block8;
             };
            }
            if (($3_1 | 0) == (3 | 0)) {
             break block9
            }
           }
           label : while (1) {
            if ($407($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break block9
            }
            if (!($409($7_1 | 0, 1 | 0, $408($0_1 | 0) | 0 | 0) | 0)) {
             break block9
            }
            $1093($11_1 + 16 | 0 | 0, $0_1 | 0, 0 | 0);
            $1883($17_1 | 0, $1094($11_1 + 16 | 0 | 0) | 0 | 0);
            continue label;
           };
          }
          block13 : {
           if (!($525($15_1 | 0) | 0)) {
            break block13
           }
           if ((($408($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($801($15_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
            break block13
           }
           $410($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 0;
           $1_1 = ($525($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
           break block8;
          }
          block14 : {
           if (!($525($16_1 | 0) | 0)) {
            break block14
           }
           if ((($408($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($801($16_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0)) {
            break block14
           }
           $410($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 1;
           $1_1 = ($525($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
           break block8;
          }
          block15 : {
           if (!($525($15_1 | 0) | 0)) {
            break block15
           }
           if (!($525($16_1 | 0) | 0)) {
            break block15
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break block12;
          }
          block16 : {
           if ($525($15_1 | 0) | 0) {
            break block16
           }
           if (!($525($16_1 | 0) | 0)) {
            break block9
           }
          }
          HEAP8[$6_1 >> 0] = !($525($16_1 | 0) | 0);
          break block9;
         }
         block17 : {
          if ($2_1) {
           break block17
          }
          if ($3_1 >>> 0 < 2 >>> 0) {
           break block17
          }
          if ($18_1) {
           break block17
          }
          $1_1 = 0;
          if (!(($3_1 | 0) == (2 | 0) & ((HEAPU8[($11_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0) | 0)) {
           break block8
          }
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = $897($14_1 | 0) | 0;
         $10_1 = $1095($11_1 + 16 | 0 | 0, $11_1 + 12 | 0 | 0) | 0;
         block18 : {
          if (!$3_1) {
           break block18
          }
          if ((HEAPU8[(($3_1 + ($11_1 + 92 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
           break block18
          }
          block19 : {
           label1 : while (1) {
            HEAP32[($11_1 + 12 | 0) >> 2] = $898($14_1 | 0) | 0;
            if ($1096($10_1 | 0, $11_1 + 12 | 0 | 0) | 0) {
             break block19
            }
            if (!($409($7_1 | 0, 1 | 0, HEAP8[($1097($10_1 | 0) | 0) >> 0] | 0 | 0) | 0)) {
             break block19
            }
            $1098($10_1 | 0) | 0;
            continue label1;
           };
          }
          HEAP32[($11_1 + 12 | 0) >> 2] = $897($14_1 | 0) | 0;
          block20 : {
           $1_1 = $1099($10_1 | 0, $11_1 + 12 | 0 | 0) | 0;
           if ($1_1 >>> 0 > ($525($17_1 | 0) | 0) >>> 0) {
            break block20
           }
           HEAP32[($11_1 + 12 | 0) >> 2] = $898($17_1 | 0) | 0;
           if ($1101($1100($11_1 + 12 | 0 | 0, $1_1 | 0) | 0 | 0, $898($17_1 | 0) | 0 | 0, $897($14_1 | 0) | 0 | 0) | 0) {
            break block18
           }
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $897($14_1 | 0) | 0;
          HEAP32[$10_1 >> 2] = HEAP32[($1095($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
         block21 : {
          label2 : while (1) {
           HEAP32[($11_1 + 8 | 0) >> 2] = $898($14_1 | 0) | 0;
           if ($1096($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0) {
            break block21
           }
           if ($407($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block21
           }
           if ((($408($0_1 | 0) | 0) & 255 | 0 | 0) != (HEAPU8[($1097($11_1 + 12 | 0 | 0) | 0) >> 0] | 0 | 0)) {
            break block21
           }
           $410($0_1 | 0) | 0;
           $1098($11_1 + 12 | 0 | 0) | 0;
           continue label2;
          };
         }
         if (!$18_1) {
          break block9
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $898($14_1 | 0) | 0;
         if ($1096($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0) {
          break block9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break block12;
        }
        block22 : {
         label3 : while (1) {
          if ($407($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
           break block22
          }
          block25 : {
           block23 : {
            $1_1 = $408($0_1 | 0) | 0;
            if (!($409($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
             break block23
            }
            block24 : {
             $4_1 = HEAP32[$9_1 >> 2] | 0;
             if (($4_1 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
              break block24
             }
             $1102($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
             $4_1 = HEAP32[$9_1 >> 2] | 0;
            }
            HEAP32[$9_1 >> 2] = $4_1 + 1 | 0;
            HEAP8[$4_1 >> 0] = $1_1;
            $10_1 = $10_1 + 1 | 0;
            break block25;
           }
           if (!($525($13_1 | 0) | 0)) {
            break block22
           }
           if (!$10_1) {
            break block22
           }
           if (($1_1 & 255 | 0 | 0) != ((HEAPU8[($11_1 + 90 | 0) >> 0] | 0) & 255 | 0 | 0)) {
            break block22
           }
           block26 : {
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
            if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
             break block26
            }
            $1103($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
           HEAP32[$1_1 >> 2] = $10_1;
           $10_1 = 0;
          }
          $410($0_1 | 0) | 0;
          continue label3;
         };
        }
        block27 : {
         $370_1 = $1091($12_1 | 0) | 0;
         $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         if (($370_1 | 0) == ($1_1 | 0)) {
          break block27
         }
         if (!$10_1) {
          break block27
         }
         block28 : {
          if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
           break block28
          }
          $1103($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
          $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
         HEAP32[$1_1 >> 2] = $10_1;
        }
        block29 : {
         if ((HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break block29
         }
         block31 : {
          block30 : {
           if ($407($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block30
           }
           if ((($408($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($11_1 + 91 | 0) >> 0] | 0 | 0)) {
            break block31
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break block12;
         }
         label4 : while (1) {
          $410($0_1 | 0) | 0;
          if ((HEAP32[($11_1 + 24 | 0) >> 2] | 0 | 0) < (1 | 0)) {
           break block29
          }
          block33 : {
           block32 : {
            if ($407($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break block32
            }
            if ($409($7_1 | 0, 64 | 0, $408($0_1 | 0) | 0 | 0) | 0) {
             break block33
            }
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break block12;
          }
          block34 : {
           if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
            break block34
           }
           $1102($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
          }
          $10_1 = $408($0_1 | 0) | 0;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $1_1 + 1 | 0;
          HEAP8[$1_1 >> 0] = $10_1;
          HEAP32[($11_1 + 24 | 0) >> 2] = (HEAP32[($11_1 + 24 | 0) >> 2] | 0) + -1 | 0;
          continue label4;
         };
        }
        $1_1 = $2_1;
        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1087($8_1 | 0) | 0 | 0)) {
         break block8
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break block12;
       }
       block35 : {
        if (!$2_1) {
         break block35
        }
        $10_1 = 1;
        label5 : while (1) {
         if ($10_1 >>> 0 >= ($525($2_1 | 0) | 0) >>> 0) {
          break block35
         }
         block37 : {
          block36 : {
           if ($407($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block36
           }
           if ((($408($0_1 | 0) | 0) & 255 | 0 | 0) == (HEAPU8[($793($2_1 | 0, $10_1 | 0) | 0) >> 0] | 0 | 0)) {
            break block37
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break block12;
         }
         $410($0_1 | 0) | 0;
         $10_1 = $10_1 + 1 | 0;
         continue label5;
        };
       }
       $0_1 = 1;
       if (($1091($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0)) {
        break block12
       }
       $0_1 = 0;
       HEAP32[($11_1 + 16 | 0) >> 2] = 0;
       $804($13_1 | 0, $1091($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, $11_1 + 16 | 0 | 0);
       block38 : {
        if (!(HEAP32[($11_1 + 16 | 0) >> 2] | 0)) {
         break block38
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        break block12;
       }
       $0_1 = 1;
      }
      $1872($17_1 | 0) | 0;
      $1872($16_1 | 0) | 0;
      $1872($15_1 | 0) | 0;
      $1872($14_1 | 0) | 0;
      $1872($13_1 | 0) | 0;
      $1104($12_1 | 0) | 0;
      break block1;
     }
     $1_1 = $2_1;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label6;
   };
  }
  global$0 = $11_1 + 528 | 0;
  return $0_1 | 0;
 }
 
 function $1087($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1105($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1088($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 10 | 0 | 0;
 }
 
 function $1089($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1658($0_1 | 0, $1_1 | 0) | 0;
  $617($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1090($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1114($0_1 | 0, $3_1 + 12 | 0 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1091($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1115($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1092($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  block1 : {
   block : {
    if (!$0_1) {
     break block
    }
    $1_1 = $1116($1_1 | 0) | 0;
    $1117($10_1 + 4 | 0 | 0, $1_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1118($10_1 + 4 | 0 | 0, $1_1 | 0);
    $506($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1872($10_1 + 4 | 0 | 0) | 0;
    $1119($10_1 + 4 | 0 | 0, $1_1 | 0);
    $506($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1872($10_1 + 4 | 0 | 0) | 0;
    HEAP8[$3_1 >> 0] = $1120($1_1 | 0) | 0;
    HEAP8[$4_1 >> 0] = $1121($1_1 | 0) | 0;
    $1122($10_1 + 4 | 0 | 0, $1_1 | 0);
    $506($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1872($10_1 + 4 | 0 | 0) | 0;
    $1123($10_1 + 4 | 0 | 0, $1_1 | 0);
    $506($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1872($10_1 + 4 | 0 | 0) | 0;
    $1_1 = $1124($1_1 | 0) | 0;
    break block1;
   }
   $1_1 = $1125($1_1 | 0) | 0;
   $1126($10_1 + 4 | 0 | 0, $1_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1127($10_1 + 4 | 0 | 0, $1_1 | 0);
   $506($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1872($10_1 + 4 | 0 | 0) | 0;
   $1128($10_1 + 4 | 0 | 0, $1_1 | 0);
   $506($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1872($10_1 + 4 | 0 | 0) | 0;
   HEAP8[$3_1 >> 0] = $1129($1_1 | 0) | 0;
   HEAP8[$4_1 >> 0] = $1130($1_1 | 0) | 0;
   $1131($10_1 + 4 | 0 | 0, $1_1 | 0);
   $506($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1872($10_1 + 4 | 0 | 0) | 0;
   $1132($10_1 + 4 | 0 | 0, $1_1 | 0);
   $506($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1872($10_1 + 4 | 0 | 0) | 0;
   $1_1 = $1133($1_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $1_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1093($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1134($0_1 | 0, ($418(HEAP32[$1_1 >> 2] | 0 | 0) | 0) << 24 >> 24 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1094($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[$0_1 >> 0] | 0 | 0;
 }
 
 function $1095($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $903($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1096($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1135($0_1 | 0) | 0 | 0) == ($903($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1097($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1098($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  return $0_1 | 0;
 }
 
 function $1099($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1135($0_1 | 0) | 0) - ($903($1_1 | 0) | 0) | 0 | 0;
 }
 
 function $1100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1137($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1101($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1136($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1102($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1138($0_1 | 0) | 0) >> 2] | 0;
  block1 : {
   block : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1087($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($583() | 0) >>> 1 | 0) >>> 0) {
     break block
    }
    $5_1 = $5_1 << 1 | 0;
    break block1;
   }
   $5_1 = $583() | 0;
  }
  $5_1 = $5_1 >>> 0 > 1 >>> 0 ? $5_1 : 1;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1087($0_1 | 0) | 0;
  block3 : {
   block2 : {
    if (($4_1 | 0) != (85 | 0)) {
     break block2
    }
    $8_1 = 0;
    break block3;
   }
   $8_1 = $1087($0_1 | 0) | 0;
  }
  block4 : {
   $8_1 = $343($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break block4
   }
   block5 : {
    if (($4_1 | 0) == (85 | 0)) {
     break block5
    }
    $1139($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 84;
   $4_1 = $921($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1140($0_1 | 0, $4_1 | 0) | 0;
   $925($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1087($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1087($0_1 | 0) | 0) + $5_1 | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1863();
  wasm2js_trap();
 }
 
 function $1103($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1141($0_1 | 0) | 0) >> 2] | 0;
  block1 : {
   block : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1091($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($583() | 0) >>> 1 | 0) >>> 0) {
     break block
    }
    $5_1 = $5_1 << 1 | 0;
    break block1;
   }
   $5_1 = $583() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1091($0_1 | 0) | 0;
  block3 : {
   block2 : {
    if (($4_1 | 0) != (85 | 0)) {
     break block2
    }
    $8_1 = 0;
    break block3;
   }
   $8_1 = $1091($0_1 | 0) | 0;
  }
  block4 : {
   $8_1 = $343($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break block4
   }
   block5 : {
    if (($4_1 | 0) == (85 | 0)) {
     break block5
    }
    $1142($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 84;
   $4_1 = $1090($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1143($0_1 | 0, $4_1 | 0) | 0;
   $1104($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1091($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1091($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1863();
  wasm2js_trap();
 }
 
 function $1104($0_1) {
  $0_1 = $0_1 | 0;
  $1145($0_1 | 0, 0 | 0);
  return $0_1 | 0;
 }
 
 function $1105($0_1) {
  $0_1 = $0_1 | 0;
  return $1659($0_1 | 0) | 0 | 0;
 }
 
 function $1106($0_1) {
  $0_1 = $0_1 | 0;
  return $1660($0_1 | 0) | 0 | 0;
 }
 
 function $1107($0_1) {
  $0_1 = $0_1 | 0;
  return $618($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1108($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 144 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 136 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 140 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 85;
  $8_1 = $921($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $608($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $406($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  block : {
   if (!($1086($7_1 + 140 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $405($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 132 | 0 | 0) | 0)) {
    break block
   }
   $1109($6_1 | 0);
   block1 : {
    if ((HEAPU8[($7_1 + 15 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block1
    }
    $1883($6_1 | 0, $601($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $601($1_1 | 0, 48 | 0) | 0;
   $2_1 = $1087($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $4_1 = $3_1 + -1 | 0;
   $1_1 = $1_1 & 255 | 0;
   block2 : {
    label : while (1) {
     if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break block2
     }
     if ((HEAPU8[$2_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
      break block2
     }
     $2_1 = $2_1 + 1 | 0;
     continue label;
    };
   }
   $1110($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  block3 : {
   if (!($407($7_1 + 140 | 0 | 0, $7_1 + 136 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 140 | 0) >> 2] | 0;
  $783($7_1 + 16 | 0 | 0) | 0;
  $925($8_1 | 0) | 0;
  global$0 = $7_1 + 144 | 0;
  return $2_1 | 0;
 }
 
 function $1109($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $525($0_1 | 0) | 0;
  block1 : {
   block : {
    if (!($512($0_1 | 0) | 0)) {
     break block
    }
    $3_1 = $546($0_1 | 0) | 0;
    HEAP8[($1_1 + 15 | 0) >> 0] = 0;
    $554($3_1 | 0, $1_1 + 15 | 0 | 0);
    $579($0_1 | 0, 0 | 0);
    break block1;
   }
   $3_1 = $547($0_1 | 0) | 0;
   HEAP8[($1_1 + 14 | 0) >> 0] = 0;
   $554($3_1 | 0, $1_1 + 14 | 0 | 0);
   $553($0_1 | 0, 0 | 0);
  }
  $523($0_1 | 0, $2_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1110($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $525($0_1 | 0) | 0;
  $5_1 = $526($0_1 | 0) | 0;
  block : {
   $6_1 = $569($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break block
   }
   block1 : {
    if ($1111($0_1 | 0, $1_1 | 0) | 0) {
     break block1
    }
    block2 : {
     if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
      break block2
     }
     $1112($0_1 | 0, $5_1 | 0, ($4_1 - $5_1 | 0) + $6_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
    }
    $521($0_1 | 0, $6_1 | 0);
    $1_1 = $580($1_1 | 0, $2_1 | 0, $509(($508($0_1 | 0) | 0) + $4_1 | 0 | 0) | 0 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $554($1_1 | 0, $3_1 + 15 | 0 | 0);
    $1113($0_1 | 0, $6_1 + $4_1 | 0 | 0);
    break block;
   }
   $1_1 = $517($3_1 | 0, $1_1 | 0, $2_1 | 0, $515($0_1 | 0) | 0 | 0) | 0;
   $1879($0_1 | 0, $524($1_1 | 0) | 0 | 0, $525($1_1 | 0) | 0 | 0) | 0;
   $1872($1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1661($524($0_1 | 0) | 0 | 0, (($524($0_1 | 0) | 0) + ($525($0_1 | 0) | 0) | 0) + 1 | 0 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1112($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $1601($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $6_1 = ($3_1 - $5_1 | 0) + $6_1 | 0;
  $579($0_1 | 0, $6_1 | 0);
  $504($0_1 | 0, $6_1 | 0);
 }
 
 function $1113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (!($512($0_1 | 0) | 0)) {
    break block
   }
   $579($0_1 | 0, $1_1 | 0);
   return;
  }
  $553($0_1 | 0, $1_1 | 0);
 }
 
 function $1114($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1663($0_1 | 0, $1_1 | 0) | 0;
  $617($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1115($0_1) {
  $0_1 = $0_1 | 0;
  return $1664($0_1 | 0) | 0 | 0;
 }
 
 function $1116($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144248 | 0) | 0 | 0;
 }
 
 function $1117($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1120($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1121($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1124($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1125($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144240 | 0) | 0 | 0;
 }
 
 function $1126($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1127($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1128($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1129($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1130($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1132($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1133($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1134($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP8[$0_1 >> 0] = $1_1;
  return $0_1 | 0;
 }
 
 function $1135($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1136($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $1666($1665($0_1 | 0) | 0 | 0, $1665($1_1 | 0) | 0 | 0, $1665($2_1 | 0) | 0 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1137($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1672($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1138($0_1) {
  $0_1 = $0_1 | 0;
  return $1107($0_1 | 0) | 0 | 0;
 }
 
 function $1139($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1106($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1106($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1140($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $923($0_1 | 0, $1139($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1138($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1107($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1141($0_1) {
  $0_1 = $0_1 | 0;
  return $1674($0_1 | 0) | 0 | 0;
 }
 
 function $1142($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1673($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1673($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1143($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1145($0_1 | 0, $1142($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1141($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1674($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1506($0_1 | 0, $1_1 | 0);
 }
 
 function $1145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($1673($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1673($0_1 | 0) | 0) >> 2] = $1_1;
  block : {
   if (!$2_1) {
    break block
   }
   FUNCTION_TABLE[HEAP32[($1674($0_1 | 0) | 0) >> 2] | 0 | 0]($2_1);
  }
 }
 
 function $1146($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $10_1 = 0, $8_1 = 0, $11_1 = 0, $12_1 = 0, i64toi32_i32$1 = 0;
  $7_1 = global$0 - 624 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 616 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 620 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = 85;
  $1_1 = $953($7_1 + 200 | 0 | 0, $7_1 + 208 | 0 | 0, $7_1 + 16 | 0 | 0) | 0;
  $608($7_1 + 192 | 0 | 0, $4_1 | 0);
  $8_1 = $477($7_1 + 192 | 0 | 0) | 0;
  HEAP8[($7_1 + 191 | 0) >> 0] = 0;
  block : {
   if (!($1147($7_1 + 620 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 192 | 0 | 0, $405($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 191 | 0 | 0, $8_1 | 0, $1_1 | 0, $7_1 + 196 | 0 | 0, $7_1 + 608 | 0 | 0) | 0)) {
    break block
   }
   $11_1 = 0;
   $12_1 = HEAPU8[($11_1 + 67110794 | 0) >> 0] | 0 | ((HEAPU8[($11_1 + 67110795 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($11_1 + 67110796 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($11_1 + 67110797 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[($7_1 + 183 | 0) >> 0] = $12_1;
   HEAP8[($7_1 + 184 | 0) >> 0] = $12_1 >>> 8 | 0;
   HEAP8[($7_1 + 185 | 0) >> 0] = $12_1 >>> 16 | 0;
   HEAP8[($7_1 + 186 | 0) >> 0] = $12_1 >>> 24 | 0;
   $10_1 = 0;
   i64toi32_i32$1 = HEAPU8[($10_1 + 67110791 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67110792 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67110793 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67110794 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 176 | 0) >> 2] = HEAPU8[($10_1 + 67110787 | 0) >> 0] | 0 | ((HEAPU8[($10_1 + 67110788 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($10_1 + 67110789 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($10_1 + 67110790 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP32[($7_1 + 180 | 0) >> 2] = i64toi32_i32$1;
   $872($8_1 | 0, $7_1 + 176 | 0 | 0, $7_1 + 186 | 0 | 0, $7_1 + 128 | 0 | 0) | 0;
   HEAP32[($7_1 + 16 | 0) >> 2] = 84;
   $8_1 = $921($7_1 + 8 | 0 | 0, 0 | 0, $7_1 + 16 | 0 | 0) | 0;
   $4_1 = $7_1 + 16 | 0;
   block2 : {
    block1 : {
     if (((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1148($1_1 | 0) | 0) | 0 | 0) < (393 | 0)) {
      break block1
     }
     $923($8_1 | 0, $340((((HEAP32[($7_1 + 196 | 0) >> 2] | 0) - ($1148($1_1 | 0) | 0) | 0) >> 2 | 0) + 2 | 0 | 0) | 0 | 0);
     if (!($1087($8_1 | 0) | 0)) {
      break block2
     }
     $4_1 = $1087($8_1 | 0) | 0;
    }
    block3 : {
     if ((HEAPU8[($7_1 + 191 | 0) >> 0] | 0 | 0) != (1 | 0)) {
      break block3
     }
     HEAP8[$4_1 >> 0] = 45;
     $4_1 = $4_1 + 1 | 0;
    }
    $2_1 = $1148($1_1 | 0) | 0;
    block5 : {
     label : while (1) {
      block4 : {
       if ($2_1 >>> 0 < (HEAP32[($7_1 + 196 | 0) >> 2] | 0) >>> 0) {
        break block4
       }
       HEAP8[$4_1 >> 0] = 0;
       HEAP32[$7_1 >> 2] = $6_1;
       if (($741($7_1 + 16 | 0 | 0, 67109866 | 0, $7_1 | 0) | 0 | 0) != (1 | 0)) {
        break block5
       }
       $925($8_1 | 0) | 0;
       break block;
      }
      HEAP8[$4_1 >> 0] = HEAPU8[(($7_1 + 176 | 0) + ((($888($7_1 + 128 | 0 | 0, $1149($7_1 + 128 | 0 | 0) | 0 | 0, $2_1 | 0) | 0) - ($7_1 + 128 | 0) | 0) >> 2 | 0) | 0) >> 0] | 0;
      $4_1 = $4_1 + 1 | 0;
      $2_1 = $2_1 + 4 | 0;
      continue label;
     };
    }
    $1869(67109309 | 0);
    wasm2js_trap();
   }
   $1863();
   wasm2js_trap();
  }
  block6 : {
   if (!($478($7_1 + 620 | 0 | 0, $7_1 + 616 | 0 | 0) | 0)) {
    break block6
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 620 | 0) >> 2] | 0;
  $783($7_1 + 192 | 0 | 0) | 0;
  $956($1_1 | 0) | 0;
  global$0 = $7_1 + 624 | 0;
  return $2_1 | 0;
 }
 
 function $1147($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $14_1 = 0, $16_1 = 0, $15_1 = 0, $12_1 = 0, $17_1 = 0, $13_1 = 0, $18_1 = 0, $365_1 = 0;
  $11_1 = global$0 - 528 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 520 | 0) >> 2] = $10_1;
  HEAP32[($11_1 + 524 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    if (!($478($0_1 | 0, $11_1 + 524 | 0 | 0) | 0)) {
     break block
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
    $0_1 = 0;
    break block1;
   }
   HEAP32[($11_1 + 72 | 0) >> 2] = 85;
   $12_1 = $1090($11_1 + 104 | 0 | 0, $11_1 + 112 | 0 | 0, $11_1 + 72 | 0 | 0) | 0;
   $10_1 = $1091($12_1 | 0) | 0;
   HEAP32[($11_1 + 100 | 0) >> 2] = $10_1;
   HEAP32[($11_1 + 96 | 0) >> 2] = $10_1 + 400 | 0;
   $13_1 = $502($11_1 + 72 | 0 | 0) | 0;
   $14_1 = $1060($11_1 + 60 | 0 | 0) | 0;
   $15_1 = $1060($11_1 + 48 | 0 | 0) | 0;
   $16_1 = $1060($11_1 + 36 | 0 | 0) | 0;
   $17_1 = $1060($11_1 + 24 | 0 | 0) | 0;
   $1151($2_1 | 0, $3_1 | 0, $11_1 + 92 | 0 | 0, $11_1 + 88 | 0 | 0, $11_1 + 84 | 0 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $16_1 | 0, $11_1 + 20 | 0 | 0);
   HEAP32[$9_1 >> 2] = $1148($8_1 | 0) | 0;
   $18_1 = $4_1 & 512 | 0;
   $3_1 = 0;
   $1_1 = 0;
   label6 : while (1) {
    $2_1 = $1_1;
    block8 : {
     block9 : {
      block12 : {
       block2 : {
        if (($3_1 | 0) == (4 | 0)) {
         break block2
        }
        if ($478($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
         break block2
        }
        $10_1 = 0;
        block7 : {
         block5 : {
          block6 : {
           block11 : {
            block3 : {
             switch (HEAPU8[(($11_1 + 92 | 0) + $3_1 | 0) >> 0] | 0 | 0) {
             case 1:
              if (($3_1 | 0) == (3 | 0)) {
               break block9
              }
              block10 : {
               if (!($480($7_1 | 0, 1 | 0, $479($0_1 | 0) | 0 | 0) | 0)) {
                break block10
               }
               $1152($11_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0);
               $1898($17_1 | 0, $1153($11_1 + 12 | 0 | 0) | 0 | 0);
               break block11;
              }
              HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
              $0_1 = 0;
              break block12;
             case 0:
              break block3;
             case 2:
              break block5;
             case 3:
              break block6;
             case 4:
              break block7;
             default:
              break block8;
             };
            }
            if (($3_1 | 0) == (3 | 0)) {
             break block9
            }
           }
           label : while (1) {
            if ($478($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break block9
            }
            if (!($480($7_1 | 0, 1 | 0, $479($0_1 | 0) | 0 | 0) | 0)) {
             break block9
            }
            $1152($11_1 + 12 | 0 | 0, $0_1 | 0, 0 | 0);
            $1898($17_1 | 0, $1153($11_1 + 12 | 0 | 0) | 0 | 0);
            continue label;
           };
          }
          block13 : {
           if (!($845($15_1 | 0) | 0)) {
            break block13
           }
           if (($479($0_1 | 0) | 0 | 0) != (HEAP32[($1154($15_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
            break block13
           }
           $481($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 0;
           $1_1 = ($845($15_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $15_1 : $2_1;
           break block8;
          }
          block14 : {
           if (!($845($16_1 | 0) | 0)) {
            break block14
           }
           if (($479($0_1 | 0) | 0 | 0) != (HEAP32[($1154($16_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0)) {
            break block14
           }
           $481($0_1 | 0) | 0;
           HEAP8[$6_1 >> 0] = 1;
           $1_1 = ($845($16_1 | 0) | 0) >>> 0 > 1 >>> 0 ? $16_1 : $2_1;
           break block8;
          }
          block15 : {
           if (!($845($15_1 | 0) | 0)) {
            break block15
           }
           if (!($845($16_1 | 0) | 0)) {
            break block15
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break block12;
          }
          block16 : {
           if ($845($15_1 | 0) | 0) {
            break block16
           }
           if (!($845($16_1 | 0) | 0)) {
            break block9
           }
          }
          HEAP8[$6_1 >> 0] = !($845($16_1 | 0) | 0);
          break block9;
         }
         block17 : {
          if ($2_1) {
           break block17
          }
          if ($3_1 >>> 0 < 2 >>> 0) {
           break block17
          }
          if ($18_1) {
           break block17
          }
          $1_1 = 0;
          if (!(($3_1 | 0) == (2 | 0) & ((HEAPU8[($11_1 + 95 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 | 0) | 0)) {
           break block8
          }
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = $933($14_1 | 0) | 0;
         $10_1 = $1155($11_1 + 12 | 0 | 0, $11_1 + 8 | 0 | 0) | 0;
         block18 : {
          if (!$3_1) {
           break block18
          }
          if ((HEAPU8[(($3_1 + ($11_1 + 92 | 0) | 0) + -1 | 0) >> 0] | 0) >>> 0 > 1 >>> 0) {
           break block18
          }
          block19 : {
           label1 : while (1) {
            HEAP32[($11_1 + 8 | 0) >> 2] = $934($14_1 | 0) | 0;
            if ($1156($10_1 | 0, $11_1 + 8 | 0 | 0) | 0) {
             break block19
            }
            if (!($480($7_1 | 0, 1 | 0, HEAP32[($1157($10_1 | 0) | 0) >> 2] | 0 | 0) | 0)) {
             break block19
            }
            $1158($10_1 | 0) | 0;
            continue label1;
           };
          }
          HEAP32[($11_1 + 8 | 0) >> 2] = $933($14_1 | 0) | 0;
          block20 : {
           $1_1 = $1159($10_1 | 0, $11_1 + 8 | 0 | 0) | 0;
           if ($1_1 >>> 0 > ($845($17_1 | 0) | 0) >>> 0) {
            break block20
           }
           HEAP32[($11_1 + 8 | 0) >> 2] = $934($17_1 | 0) | 0;
           if ($1161($1160($11_1 + 8 | 0 | 0, $1_1 | 0) | 0 | 0, $934($17_1 | 0) | 0 | 0, $933($14_1 | 0) | 0 | 0) | 0) {
            break block18
           }
          }
          HEAP32[($11_1 + 4 | 0) >> 2] = $933($14_1 | 0) | 0;
          HEAP32[$10_1 >> 2] = HEAP32[($1155($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 8 | 0) >> 2] = HEAP32[$10_1 >> 2] | 0;
         block21 : {
          label2 : while (1) {
           HEAP32[($11_1 + 4 | 0) >> 2] = $934($14_1 | 0) | 0;
           if ($1156($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0) {
            break block21
           }
           if ($478($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block21
           }
           if (($479($0_1 | 0) | 0 | 0) != (HEAP32[($1157($11_1 + 8 | 0 | 0) | 0) >> 2] | 0 | 0)) {
            break block21
           }
           $481($0_1 | 0) | 0;
           $1158($11_1 + 8 | 0 | 0) | 0;
           continue label2;
          };
         }
         if (!$18_1) {
          break block9
         }
         HEAP32[($11_1 + 4 | 0) >> 2] = $934($14_1 | 0) | 0;
         if ($1156($11_1 + 8 | 0 | 0, $11_1 + 4 | 0 | 0) | 0) {
          break block9
         }
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
         $0_1 = 0;
         break block12;
        }
        block22 : {
         label3 : while (1) {
          if ($478($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
           break block22
          }
          block25 : {
           block23 : {
            $1_1 = $479($0_1 | 0) | 0;
            if (!($480($7_1 | 0, 64 | 0, $1_1 | 0) | 0)) {
             break block23
            }
            block24 : {
             $4_1 = HEAP32[$9_1 >> 2] | 0;
             if (($4_1 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
              break block24
             }
             $1162($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
             $4_1 = HEAP32[$9_1 >> 2] | 0;
            }
            HEAP32[$9_1 >> 2] = $4_1 + 4 | 0;
            HEAP32[$4_1 >> 2] = $1_1;
            $10_1 = $10_1 + 1 | 0;
            break block25;
           }
           if (!($525($13_1 | 0) | 0)) {
            break block22
           }
           if (!$10_1) {
            break block22
           }
           if (($1_1 | 0) != (HEAP32[($11_1 + 84 | 0) >> 2] | 0 | 0)) {
            break block22
           }
           block26 : {
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
            if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
             break block26
            }
            $1103($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
            $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
           }
           HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
           HEAP32[$1_1 >> 2] = $10_1;
           $10_1 = 0;
          }
          $481($0_1 | 0) | 0;
          continue label3;
         };
        }
        block27 : {
         $365_1 = $1091($12_1 | 0) | 0;
         $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         if (($365_1 | 0) == ($1_1 | 0)) {
          break block27
         }
         if (!$10_1) {
          break block27
         }
         block28 : {
          if (($1_1 | 0) != (HEAP32[($11_1 + 96 | 0) >> 2] | 0 | 0)) {
           break block28
          }
          $1103($12_1 | 0, $11_1 + 100 | 0 | 0, $11_1 + 96 | 0 | 0);
          $1_1 = HEAP32[($11_1 + 100 | 0) >> 2] | 0;
         }
         HEAP32[($11_1 + 100 | 0) >> 2] = $1_1 + 4 | 0;
         HEAP32[$1_1 >> 2] = $10_1;
        }
        block29 : {
         if ((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break block29
         }
         block31 : {
          block30 : {
           if ($478($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block30
           }
           if (($479($0_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 88 | 0) >> 2] | 0 | 0)) {
            break block31
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break block12;
         }
         label4 : while (1) {
          $481($0_1 | 0) | 0;
          if ((HEAP32[($11_1 + 20 | 0) >> 2] | 0 | 0) < (1 | 0)) {
           break block29
          }
          block33 : {
           block32 : {
            if ($478($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
             break block32
            }
            if ($480($7_1 | 0, 64 | 0, $479($0_1 | 0) | 0 | 0) | 0) {
             break block33
            }
           }
           HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
           $0_1 = 0;
           break block12;
          }
          block34 : {
           if ((HEAP32[$9_1 >> 2] | 0 | 0) != (HEAP32[($11_1 + 520 | 0) >> 2] | 0 | 0)) {
            break block34
           }
           $1162($8_1 | 0, $9_1 | 0, $11_1 + 520 | 0 | 0);
          }
          $10_1 = $479($0_1 | 0) | 0;
          $1_1 = HEAP32[$9_1 >> 2] | 0;
          HEAP32[$9_1 >> 2] = $1_1 + 4 | 0;
          HEAP32[$1_1 >> 2] = $10_1;
          HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[($11_1 + 20 | 0) >> 2] | 0) + -1 | 0;
          continue label4;
         };
        }
        $1_1 = $2_1;
        if ((HEAP32[$9_1 >> 2] | 0 | 0) != ($1148($8_1 | 0) | 0 | 0)) {
         break block8
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        $0_1 = 0;
        break block12;
       }
       block35 : {
        if (!$2_1) {
         break block35
        }
        $10_1 = 1;
        label5 : while (1) {
         if ($10_1 >>> 0 >= ($845($2_1 | 0) | 0) >>> 0) {
          break block35
         }
         block37 : {
          block36 : {
           if ($478($0_1 | 0, $11_1 + 524 | 0 | 0) | 0) {
            break block36
           }
           if (($479($0_1 | 0) | 0 | 0) == (HEAP32[($846($2_1 | 0, $10_1 | 0) | 0) >> 2] | 0 | 0)) {
            break block37
           }
          }
          HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
          $0_1 = 0;
          break block12;
         }
         $481($0_1 | 0) | 0;
         $10_1 = $10_1 + 1 | 0;
         continue label5;
        };
       }
       $0_1 = 1;
       if (($1091($12_1 | 0) | 0 | 0) == (HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0)) {
        break block12
       }
       $0_1 = 0;
       HEAP32[($11_1 + 12 | 0) >> 2] = 0;
       $804($13_1 | 0, $1091($12_1 | 0) | 0 | 0, HEAP32[($11_1 + 100 | 0) >> 2] | 0 | 0, $11_1 + 12 | 0 | 0);
       block38 : {
        if (!(HEAP32[($11_1 + 12 | 0) >> 2] | 0)) {
         break block38
        }
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 4 | 0;
        break block12;
       }
       $0_1 = 1;
      }
      $1889($17_1 | 0) | 0;
      $1889($16_1 | 0) | 0;
      $1889($15_1 | 0) | 0;
      $1889($14_1 | 0) | 0;
      $1872($13_1 | 0) | 0;
      $1104($12_1 | 0) | 0;
      break block1;
     }
     $1_1 = $2_1;
    }
    $3_1 = $3_1 + 1 | 0;
    continue label6;
   };
  }
  global$0 = $11_1 + 528 | 0;
  return $0_1 | 0;
 }
 
 function $1148($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1163($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1149($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 40 | 0 | 0;
 }
 
 function $1150($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1676($0_1 | 0, $1_1 | 0) | 0;
  $617($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1151($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  block1 : {
   block : {
    if (!$0_1) {
     break block
    }
    $1_1 = $1183($1_1 | 0) | 0;
    $1184($10_1 + 4 | 0 | 0, $1_1 | 0);
    $11_1 = $2_1;
    $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$11_1 >> 0] = $12_1;
    HEAP8[($11_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
    HEAP8[($11_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
    HEAP8[($11_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
    $1185($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1186($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1889($10_1 + 4 | 0 | 0) | 0;
    $1187($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1186($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1889($10_1 + 4 | 0 | 0) | 0;
    HEAP32[$3_1 >> 2] = $1188($1_1 | 0) | 0;
    HEAP32[$4_1 >> 2] = $1189($1_1 | 0) | 0;
    $1190($10_1 + 4 | 0 | 0, $1_1 | 0);
    $506($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1872($10_1 + 4 | 0 | 0) | 0;
    $1191($10_1 + 4 | 0 | 0, $1_1 | 0);
    $1186($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1889($10_1 + 4 | 0 | 0) | 0;
    $1_1 = $1192($1_1 | 0) | 0;
    break block1;
   }
   $1_1 = $1193($1_1 | 0) | 0;
   $1194($10_1 + 4 | 0 | 0, $1_1 | 0);
   $13_1 = $2_1;
   $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
   HEAP8[$13_1 >> 0] = $14_1;
   HEAP8[($13_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
   HEAP8[($13_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
   HEAP8[($13_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
   $1195($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1186($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1889($10_1 + 4 | 0 | 0) | 0;
   $1196($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1186($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1889($10_1 + 4 | 0 | 0) | 0;
   HEAP32[$3_1 >> 2] = $1197($1_1 | 0) | 0;
   HEAP32[$4_1 >> 2] = $1198($1_1 | 0) | 0;
   $1199($10_1 + 4 | 0 | 0, $1_1 | 0);
   $506($5_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1872($10_1 + 4 | 0 | 0) | 0;
   $1200($10_1 + 4 | 0 | 0, $1_1 | 0);
   $1186($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1889($10_1 + 4 | 0 | 0) | 0;
   $1_1 = $1201($1_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $1_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1152($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1202($0_1 | 0, $488(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0;
 }
 
 function $1153($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($938($0_1 | 0) | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1155($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $940($1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1156($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1203($0_1 | 0) | 0 | 0) == ($940($1_1 | 0) | 0 | 0) | 0;
 }
 
 function $1157($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1158($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + 4 | 0;
  return $0_1 | 0;
 }
 
 function $1159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (($1203($0_1 | 0) | 0) - ($940($1_1 | 0) | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1205($0_1 | 0, 0 - $1_1 | 0 | 0) | 0 | 0;
 }
 
 function $1161($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1204($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1162($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $3_1 = 0, $4_1 = 0, $8_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($1206($0_1 | 0) | 0) >> 2] | 0;
  block1 : {
   block : {
    $5_1 = (HEAP32[$2_1 >> 2] | 0) - ($1148($0_1 | 0) | 0) | 0;
    if ($5_1 >>> 0 >= (($583() | 0) >>> 1 | 0) >>> 0) {
     break block
    }
    $5_1 = $5_1 << 1 | 0;
    break block1;
   }
   $5_1 = $583() | 0;
  }
  $5_1 = $5_1 ? $5_1 : 4;
  $6_1 = HEAP32[$1_1 >> 2] | 0;
  $7_1 = $1148($0_1 | 0) | 0;
  block3 : {
   block2 : {
    if (($4_1 | 0) != (85 | 0)) {
     break block2
    }
    $8_1 = 0;
    break block3;
   }
   $8_1 = $1148($0_1 | 0) | 0;
  }
  block4 : {
   $8_1 = $343($8_1 | 0, $5_1 | 0) | 0;
   if (!$8_1) {
    break block4
   }
   block5 : {
    if (($4_1 | 0) == (85 | 0)) {
     break block5
    }
    $1207($0_1 | 0) | 0;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 84;
   $4_1 = $953($3_1 + 8 | 0 | 0, $8_1 | 0, $3_1 + 4 | 0 | 0) | 0;
   $1208($0_1 | 0, $4_1 | 0) | 0;
   $956($4_1 | 0) | 0;
   HEAP32[$1_1 >> 2] = ($1148($0_1 | 0) | 0) + ($6_1 - $7_1 | 0) | 0;
   HEAP32[$2_1 >> 2] = ($1148($0_1 | 0) | 0) + ($5_1 & -4 | 0) | 0;
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1863();
  wasm2js_trap();
 }
 
 function $1163($0_1) {
  $0_1 = $0_1 | 0;
  return $1677($0_1 | 0) | 0 | 0;
 }
 
 function $1164($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 440 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 444 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = 85;
  $8_1 = $953($7_1 + 24 | 0 | 0, $7_1 + 32 | 0 | 0, $7_1 + 20 | 0 | 0) | 0;
  $608($7_1 + 16 | 0 | 0, $4_1 | 0);
  $1_1 = $477($7_1 + 16 | 0 | 0) | 0;
  HEAP8[($7_1 + 15 | 0) >> 0] = 0;
  block : {
   if (!($1147($7_1 + 444 | 0 | 0, $2_1 | 0, $3_1 | 0, $7_1 + 16 | 0 | 0, $405($4_1 | 0) | 0 | 0, $5_1 | 0, $7_1 + 15 | 0 | 0, $1_1 | 0, $8_1 | 0, $7_1 + 20 | 0 | 0, $7_1 + 432 | 0 | 0) | 0)) {
    break block
   }
   $1165($6_1 | 0);
   block1 : {
    if ((HEAPU8[($7_1 + 15 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block1
    }
    $1898($6_1 | 0, $603($1_1 | 0, 45 | 0) | 0 | 0);
   }
   $1_1 = $603($1_1 | 0, 48 | 0) | 0;
   $2_1 = $1148($8_1 | 0) | 0;
   $3_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
   $4_1 = $3_1 + -4 | 0;
   block2 : {
    label : while (1) {
     if ($2_1 >>> 0 >= $4_1 >>> 0) {
      break block2
     }
     if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
      break block2
     }
     $2_1 = $2_1 + 4 | 0;
     continue label;
    };
   }
   $1166($6_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  }
  block3 : {
   if (!($478($7_1 + 444 | 0 | 0, $7_1 + 440 | 0 | 0) | 0)) {
    break block3
   }
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | 2 | 0;
  }
  $2_1 = HEAP32[($7_1 + 444 | 0) >> 2] | 0;
  $783($7_1 + 16 | 0 | 0) | 0;
  $956($8_1 | 0) | 0;
  global$0 = $7_1 + 448 | 0;
  return $2_1 | 0;
 }
 
 function $1165($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $3_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $845($0_1 | 0) | 0;
  block1 : {
   block : {
    if (!($999($0_1 | 0) | 0)) {
     break block
    }
    $3_1 = $1167($0_1 | 0) | 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = 0;
    $1168($3_1 | 0, $1_1 + 12 | 0 | 0);
    $1169($0_1 | 0, 0 | 0);
    break block1;
   }
   $3_1 = $1170($0_1 | 0) | 0;
   HEAP32[($1_1 + 8 | 0) >> 2] = 0;
   $1168($3_1 | 0, $1_1 + 8 | 0 | 0);
   $1171($0_1 | 0, 0 | 0);
  }
  $1172($0_1 | 0, $2_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1166($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $6_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $845($0_1 | 0) | 0;
  $5_1 = $1173($0_1 | 0) | 0;
  block : {
   $6_1 = $1174($1_1 | 0, $2_1 | 0) | 0;
   if (!$6_1) {
    break block
   }
   block1 : {
    if ($1175($0_1 | 0, $1_1 | 0) | 0) {
     break block1
    }
    block2 : {
     if (($5_1 - $4_1 | 0) >>> 0 >= $6_1 >>> 0) {
      break block2
     }
     $1176($0_1 | 0, $5_1 | 0, ($4_1 - $5_1 | 0) + $6_1 | 0 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
    }
    $1177($0_1 | 0, $6_1 | 0);
    $1_1 = $1179($1_1 | 0, $2_1 | 0, $1178(($938($0_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0) | 0 | 0) | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = 0;
    $1168($1_1 | 0, $3_1 + 4 | 0 | 0);
    $1180($0_1 | 0, $6_1 + $4_1 | 0 | 0);
    break block;
   }
   $1_1 = $1182($3_1 + 4 | 0 | 0, $1_1 | 0, $2_1 | 0, $1181($0_1 | 0) | 0 | 0) | 0;
   $1896($0_1 | 0, $996($1_1 | 0) | 0 | 0, $845($1_1 | 0) | 0 | 0) | 0;
   $1889($1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1167($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($1082($0_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1168($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
 }
 
 function $1169($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[(($1082($0_1 | 0) | 0) + 4 | 0) >> 2] = $1_1;
 }
 
 function $1170($0_1) {
  $0_1 = $0_1 | 0;
  return $1589($1082($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1171($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1082($0_1 | 0) | 0;
  HEAP8[($2_1 + 11 | 0) >> 0] = (HEAPU8[($2_1 + 11 | 0) >> 0] | 0) & 128 | 0 | ($1_1 & 127 | 0) | 0;
  $0_1 = $1082($0_1 | 0) | 0;
  HEAP8[($0_1 + 11 | 0) >> 0] = (HEAPU8[($0_1 + 11 | 0) >> 0] | 0) & 127 | 0;
 }
 
 function $1172($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1173($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 1;
  block : {
   if (!($999($0_1 | 0) | 0)) {
    break block
   }
   $1_1 = ($1605($0_1 | 0) | 0) + -1 | 0;
  }
  return $1_1 | 0;
 }
 
 function $1174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1679($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1680($996($0_1 | 0) | 0 | 0, (($996($0_1 | 0) | 0) + (($845($0_1 | 0) | 0) << 2 | 0) | 0) + 4 | 0 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1176($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $1678($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0, $6_1 | 0);
  $6_1 = ($3_1 - $5_1 | 0) + $6_1 | 0;
  $1169($0_1 | 0, $6_1 | 0);
  $1062($0_1 | 0, $6_1 | 0);
 }
 
 function $1177($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1178($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1179($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = $1178($0_1 | 0) | 0;
  $0_1 = $1_1 - $0_1 | 0;
  $458($2_1 | 0, $5_1 | 0, $0_1 >> 2 | 0 | 0) | 0;
  return $2_1 + $0_1 | 0 | 0;
 }
 
 function $1180($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (!($999($0_1 | 0) | 0)) {
    break block
   }
   $1169($0_1 | 0, $1_1 | 0);
   return;
  }
  $1171($0_1 | 0, $1_1 | 0);
 }
 
 function $1181($0_1) {
  $0_1 = $0_1 | 0;
  return $1591($0_1 | 0) | 0 | 0;
 }
 
 function $1182($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3_1 = $1681($0_1 | 0, $4_1 + 15 | 0 | 0, $3_1 | 0) | 0;
  $1682($3_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $4_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1183($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144264 | 0) | 0 | 0;
 }
 
 function $1184($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1185($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1209($0_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1187($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1188($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1189($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1191($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1192($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1193($0_1) {
  $0_1 = $0_1 | 0;
  return $788($0_1 | 0, 67144256 | 0) | 0 | 0;
 }
 
 function $1194($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 44 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1195($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1197($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1198($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1199($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1200($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1201($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 36 | 0) >> 2] | 0 | 0]($0_1) | 0 | 0;
 }
 
 function $1202($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1203($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1204($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $2_1 = $1687($1686($0_1 | 0) | 0 | 0, $1686($1_1 | 0) | 0 | 0, $1686($2_1 | 0) | 0 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1693($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1206($0_1) {
  $0_1 = $0_1 | 0;
  return $1228($0_1 | 0) | 0 | 0;
 }
 
 function $1207($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1227($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1227($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1208($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $954($0_1 | 0, $1207($1_1 | 0) | 0 | 0);
  $1_1 = HEAP32[($1206($1_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1228($0_1 | 0) | 0) >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1209($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $5_1 = 0, $2_1 = 0, i64toi32_i32$0 = 0, $6_1 = 0, $3_1 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $37_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1602($0_1 | 0);
  block : {
   if (!($999($0_1 | 0) | 0)) {
    break block
   }
   $1603($1181($0_1 | 0) | 0 | 0, $1167($0_1 | 0) | 0 | 0, $1605($0_1 | 0) | 0 | 0);
  }
  $3_1 = $845($1_1 | 0) | 0;
  $4_1 = $999($1_1 | 0) | 0;
  $1694($0_1 | 0, $1_1 | 0);
  $5_1 = $1082($1_1 | 0) | 0;
  $6_1 = $1082($0_1 | 0) | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[$5_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
  $37_1 = i64toi32_i32$0;
  i64toi32_i32$0 = $6_1;
  HEAP32[i64toi32_i32$0 >> 2] = $37_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $1171($1_1 | 0, 0 | 0);
  $5_1 = $1170($1_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1168($5_1 | 0, $2_1 + 12 | 0 | 0);
  block2 : {
   block1 : {
    $5_1 = ($0_1 | 0) == ($1_1 | 0);
    if ($5_1) {
     break block1
    }
    if ($4_1) {
     break block1
    }
    $1172($1_1 | 0, $3_1 | 0);
    break block2;
   }
   $1062($1_1 | 0, 0 | 0);
  }
  $1_1 = $999($0_1 | 0) | 0;
  block3 : {
   if ($5_1) {
    break block3
   }
   if ($1_1) {
    break block3
   }
   $1062($0_1 | 0, $1001($0_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1210($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0, $213_1 = 0;
  $7_1 = global$0 - 448 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 332 | 0) >> 2] = $7_1 + 336 | 0;
  $8_1 = $728($7_1 + 336 | 0 | 0, 100 | 0, 67109860 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 224 | 0) >> 2] = 84;
  $9_1 = 0;
  $10_1 = $921($7_1 + 216 | 0 | 0, 0 | 0, $7_1 + 224 | 0 | 0) | 0;
  HEAP32[($7_1 + 224 | 0) >> 2] = 84;
  $11_1 = $921($7_1 + 208 | 0 | 0, 0 | 0, $7_1 + 224 | 0 | 0) | 0;
  $12_1 = $7_1 + 224 | 0;
  block1 : {
   block : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break block
    }
    $8_1 = $833() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $922($7_1 + 332 | 0 | 0, $8_1 | 0, 67109860 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break block1
    }
    $923($10_1 | 0, HEAP32[($7_1 + 332 | 0) >> 2] | 0 | 0);
    $923($11_1 | 0, $340($8_1 | 0) | 0 | 0);
    if ($1211($11_1 | 0, 0 | 0) | 0) {
     break block1
    }
    $12_1 = $1087($11_1 | 0) | 0;
   }
   $608($7_1 + 204 | 0 | 0, $3_1 | 0);
   $13_1 = $406($7_1 + 204 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 332 | 0) >> 2] | 0;
   $832($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   block2 : {
    if (($8_1 | 0) < (1 | 0)) {
     break block2
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 332 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $502($7_1 + 184 | 0 | 0) | 0;
   $14_1 = $502($7_1 + 172 | 0 | 0) | 0;
   $16_1 = $502($7_1 + 160 | 0 | 0) | 0;
   $1212($2_1 | 0, $9_1 | 0, $7_1 + 204 | 0 | 0, $7_1 + 200 | 0 | 0, $7_1 + 199 | 0 | 0, $7_1 + 198 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 156 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 84;
   $17_1 = $921($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   block4 : {
    block3 : {
     $2_1 = HEAP32[($7_1 + 156 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break block3
     }
     $18_1 = (((($525($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($525($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 1 | 0;
     break block4;
    }
    $18_1 = ((($525($16_1 | 0) | 0) + ($525($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 156 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   block5 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break block5
    }
    $923($17_1 | 0, $340($18_1 | 0) | 0 | 0);
    $2_1 = $1087($17_1 | 0) | 0;
    if (!$2_1) {
     break block1
    }
   }
   $1213($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $405($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + $8_1 | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 200 | 0 | 0, HEAP8[($7_1 + 199 | 0) >> 0] | 0 | 0, HEAP8[($7_1 + 198 | 0) >> 0] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 156 | 0) >> 2] | 0 | 0);
   $8_1 = $910($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $925($17_1 | 0) | 0;
   $1872($16_1 | 0) | 0;
   $1872($14_1 | 0) | 0;
   $1872($15_1 | 0) | 0;
   $783($7_1 + 204 | 0 | 0) | 0;
   $925($11_1 | 0) | 0;
   $925($10_1 | 0) | 0;
   global$0 = $7_1 + 448 | 0;
   return $8_1 | 0;
  }
  $1863();
  wasm2js_trap();
 }
 
 function $1211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1214($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1212($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  block3 : {
   block : {
    if (!$0_1) {
     break block
    }
    $2_1 = $1116($2_1 | 0) | 0;
    block2 : {
     block1 : {
      if (!$1_1) {
       break block1
      }
      $1117($10_1 + 4 | 0 | 0, $2_1 | 0);
      $11_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1118($10_1 + 4 | 0 | 0, $2_1 | 0);
      $506($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1872($10_1 + 4 | 0 | 0) | 0;
      break block2;
     }
     $1215($10_1 + 4 | 0 | 0, $2_1 | 0);
     $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1119($10_1 + 4 | 0 | 0, $2_1 | 0);
     $506($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $1872($10_1 + 4 | 0 | 0) | 0;
    }
    HEAP8[$4_1 >> 0] = $1120($2_1 | 0) | 0;
    HEAP8[$5_1 >> 0] = $1121($2_1 | 0) | 0;
    $1122($10_1 + 4 | 0 | 0, $2_1 | 0);
    $506($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1872($10_1 + 4 | 0 | 0) | 0;
    $1123($10_1 + 4 | 0 | 0, $2_1 | 0);
    $506($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1872($10_1 + 4 | 0 | 0) | 0;
    $2_1 = $1124($2_1 | 0) | 0;
    break block3;
   }
   $2_1 = $1125($2_1 | 0) | 0;
   block5 : {
    block4 : {
     if (!$1_1) {
      break block4
     }
     $1126($10_1 + 4 | 0 | 0, $2_1 | 0);
     $13_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1127($10_1 + 4 | 0 | 0, $2_1 | 0);
     $506($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $1872($10_1 + 4 | 0 | 0) | 0;
     break block5;
    }
    $1216($10_1 + 4 | 0 | 0, $2_1 | 0);
    $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1128($10_1 + 4 | 0 | 0, $2_1 | 0);
    $506($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1872($10_1 + 4 | 0 | 0) | 0;
   }
   HEAP8[$4_1 >> 0] = $1129($2_1 | 0) | 0;
   HEAP8[$5_1 >> 0] = $1130($2_1 | 0) | 0;
   $1131($10_1 + 4 | 0 | 0, $2_1 | 0);
   $506($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1872($10_1 + 4 | 0 | 0) | 0;
   $1132($10_1 + 4 | 0 | 0, $2_1 | 0);
   $506($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1872($10_1 + 4 | 0 | 0) | 0;
   $2_1 = $1133($2_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $2_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1213($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $18_1 = 0, $19_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $15_1 = 0, $17_1 = 0, $16_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $3_1 & 512 | 0;
  $17_1 = 0;
  label4 : while (1) {
   block : {
    if (($17_1 | 0) != (4 | 0)) {
     break block
    }
    block1 : {
     if (($525($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break block1
     }
     HEAP32[($15_1 + 12 | 0) >> 2] = $1217($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1220($1218($15_1 + 12 | 0 | 0, 1 | 0) | 0 | 0, $1219($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    block2 : {
     $18_1 = $3_1 & 176 | 0;
     if (($18_1 | 0) == (16 | 0)) {
      break block2
     }
     block3 : {
      if (($18_1 | 0) != (32 | 0)) {
       break block3
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   block9 : {
    block8 : {
     switch (HEAPU8[($8_1 + $17_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break block9;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $18_1 = $601($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break block9;
     case 3:
      if ($794($13_1 | 0) | 0) {
       break block9
      }
      $18_1 = HEAPU8[($793($13_1 | 0, 0 | 0) | 0) >> 0] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break block9;
     case 2:
      $18_1 = $794($12_1 | 0) | 0;
      if (!$16_1) {
       break block9
      }
      if ($18_1) {
       break block9
      }
      HEAP32[$2_1 >> 2] = $1220($1217($12_1 | 0) | 0 | 0, $1219($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break block9;
     case 4:
      break block8;
     default:
      break block9;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $7_1 | 0;
    $18_1 = $4_1;
    block10 : {
     label : while (1) {
      if ($18_1 >>> 0 >= $5_1 >>> 0) {
       break block10
      }
      if (!($409($6_1 | 0, 64 | 0, HEAP8[$18_1 >> 0] | 0 | 0) | 0)) {
       break block10
      }
      $18_1 = $18_1 + 1 | 0;
      continue label;
     };
    }
    $19_1 = $14_1;
    block11 : {
     if (($19_1 | 0) < (1 | 0)) {
      break block11
     }
     block12 : {
      label1 : while (1) {
       if ($18_1 >>> 0 <= $4_1 >>> 0) {
        break block12
       }
       if (($19_1 | 0) == (0 | 0)) {
        break block12
       }
       $19_1 = $19_1 + -1 | 0;
       $18_1 = $18_1 + -1 | 0;
       $21_1 = HEAPU8[$18_1 >> 0] | 0;
       $22_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
       HEAP8[$22_1 >> 0] = $21_1;
       continue label1;
      };
     }
     block14 : {
      block13 : {
       if ($19_1) {
        break block13
       }
       $22_1 = 0;
       break block14;
      }
      $22_1 = $601($6_1 | 0, 48 | 0) | 0;
     }
     block15 : {
      label2 : while (1) {
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       if (($19_1 | 0) < (1 | 0)) {
        break block15
       }
       HEAP8[$21_1 >> 0] = $22_1;
       $19_1 = $19_1 + -1 | 0;
       continue label2;
      };
     }
     HEAP8[$21_1 >> 0] = $9_1;
    }
    block17 : {
     block16 : {
      if (($18_1 | 0) != ($4_1 | 0)) {
       break block16
      }
      $18_1 = $601($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 1 | 0;
      HEAP8[$19_1 >> 0] = $18_1;
      break block17;
     }
     block19 : {
      block18 : {
       if (!($794($11_1 | 0) | 0)) {
        break block18
       }
       $23_1 = $1221() | 0;
       break block19;
      }
      $23_1 = HEAP8[($793($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label3 : while (1) {
      if (($18_1 | 0) == ($4_1 | 0)) {
       break block17
      }
      block21 : {
       block20 : {
        if (($19_1 | 0) == ($23_1 | 0)) {
         break block20
        }
        $21_1 = $19_1;
        break block21;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 1 | 0;
       HEAP8[$21_1 >> 0] = $10_1;
       $21_1 = 0;
       block22 : {
        $24_1 = $24_1 + 1 | 0;
        if ($24_1 >>> 0 < ($525($11_1 | 0) | 0) >>> 0) {
         break block22
        }
        $23_1 = $19_1;
        break block21;
       }
       block23 : {
        if ((HEAPU8[($793($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1035() | 0) & 255 | 0 | 0)) {
         break block23
        }
        $23_1 = $1221() | 0;
        break block21;
       }
       $23_1 = HEAP8[($793($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
      }
      $18_1 = $18_1 + -1 | 0;
      $19_1 = HEAPU8[$18_1 >> 0] | 0;
      $22_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $22_1 + 1 | 0;
      HEAP8[$22_1 >> 0] = $19_1;
      $19_1 = $21_1 + 1 | 0;
      continue label3;
     };
    }
    $962($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $17_1 = $17_1 + 1 | 0;
   continue label4;
  };
 }
 
 function $1214($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1105($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1215($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1216($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1217($0_1) {
  $0_1 = $0_1 | 0;
  return $1238($0_1 | 0, $594($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1218($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1240($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1219($0_1) {
  $0_1 = $0_1 | 0;
  return $1238($0_1 | 0, ($594($0_1 | 0) | 0) + ($525($0_1 | 0) | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1220($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1237($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1221() {
  return $1239() | 0 | 0;
 }
 
 function $1222($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 176 | 0;
  global$0 = $6_1;
  $608($6_1 + 172 | 0 | 0, $3_1 | 0);
  $7_1 = $406($6_1 + 172 | 0 | 0) | 0;
  $8_1 = 0;
  block : {
   if (!($525($5_1 | 0) | 0)) {
    break block
   }
   $8_1 = (HEAPU8[($793($5_1 | 0, 0 | 0) | 0) >> 0] | 0 | 0) == (($601($7_1 | 0, 45 | 0) | 0) & 255 | 0 | 0);
  }
  $9_1 = $502($6_1 + 152 | 0 | 0) | 0;
  $10_1 = $502($6_1 + 140 | 0 | 0) | 0;
  $11_1 = $502($6_1 + 128 | 0 | 0) | 0;
  $1212($2_1 | 0, $8_1 | 0, $6_1 + 172 | 0 | 0, $6_1 + 168 | 0 | 0, $6_1 + 167 | 0 | 0, $6_1 + 166 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 124 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 84;
  $12_1 = $921($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  block2 : {
   block1 : {
    if (($525($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    $2_1 = $525($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 124 | 0) >> 2] | 0;
    $13_1 = (((($525($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($525($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 1 | 0;
    break block2;
   }
   $13_1 = ((($525($11_1 | 0) | 0) + ($525($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 124 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  block3 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break block3
   }
   $923($12_1 | 0, $340($13_1 | 0) | 0 | 0);
   $2_1 = $1087($12_1 | 0) | 0;
   if ($2_1) {
    break block3
   }
   $1863();
   wasm2js_trap();
  }
  $1213($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $405($3_1 | 0) | 0 | 0, $524($5_1 | 0) | 0 | 0, ($524($5_1 | 0) | 0) + ($525($5_1 | 0) | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 168 | 0 | 0, HEAP8[($6_1 + 167 | 0) >> 0] | 0 | 0, HEAP8[($6_1 + 166 | 0) >> 0] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 124 | 0) >> 2] | 0 | 0);
  $5_1 = $910($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $925($12_1 | 0) | 0;
  $1872($11_1 | 0) | 0;
  $1872($10_1 | 0) | 0;
  $1872($9_1 | 0) | 0;
  $783($6_1 + 172 | 0 | 0) | 0;
  global$0 = $6_1 + 176 | 0;
  return $5_1 | 0;
 }
 
 function $1223($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var $7_1 = 0, $8_1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, $16_1 = 0, $11_1 = 0, $12_1 = 0, $9_1 = 0, $15_1 = 0, $17_1 = 0, $18_1 = 0, $10_1 = 0, $13_1 = 0, $216_1 = 0;
  $7_1 = global$0 - 1056 | 0;
  global$0 = $7_1;
  i64toi32_i32$0 = $5$hi;
  HEAP32[($7_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $6$hi;
  HEAP32[($7_1 + 24 | 0) >> 2] = $6_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($7_1 + 940 | 0) >> 2] = $7_1 + 944 | 0;
  $8_1 = $728($7_1 + 944 | 0 | 0, 100 | 0, 67109860 | 0, $7_1 + 16 | 0 | 0) | 0;
  HEAP32[($7_1 + 528 | 0) >> 2] = 84;
  $9_1 = 0;
  $10_1 = $921($7_1 + 520 | 0 | 0, 0 | 0, $7_1 + 528 | 0 | 0) | 0;
  HEAP32[($7_1 + 528 | 0) >> 2] = 84;
  $11_1 = $953($7_1 + 512 | 0 | 0, 0 | 0, $7_1 + 528 | 0 | 0) | 0;
  $12_1 = $7_1 + 528 | 0;
  block1 : {
   block : {
    if ($8_1 >>> 0 < 100 >>> 0) {
     break block
    }
    $8_1 = $833() | 0;
    i64toi32_i32$0 = $5$hi;
    HEAP32[$7_1 >> 2] = $5_1;
    HEAP32[($7_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = $6$hi;
    HEAP32[($7_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($7_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    $8_1 = $922($7_1 + 940 | 0 | 0, $8_1 | 0, 67109860 | 0, $7_1 | 0) | 0;
    if (($8_1 | 0) == (-1 | 0)) {
     break block1
    }
    $923($10_1 | 0, HEAP32[($7_1 + 940 | 0) >> 2] | 0 | 0);
    $954($11_1 | 0, $340($8_1 << 2 | 0 | 0) | 0 | 0);
    if ($1224($11_1 | 0, 0 | 0) | 0) {
     break block1
    }
    $12_1 = $1148($11_1 | 0) | 0;
   }
   $608($7_1 + 508 | 0 | 0, $3_1 | 0);
   $13_1 = $477($7_1 + 508 | 0 | 0) | 0;
   $14_1 = HEAP32[($7_1 + 940 | 0) >> 2] | 0;
   $872($13_1 | 0, $14_1 | 0, $14_1 + $8_1 | 0 | 0, $12_1 | 0) | 0;
   block2 : {
    if (($8_1 | 0) < (1 | 0)) {
     break block2
    }
    $9_1 = (HEAPU8[(HEAP32[($7_1 + 940 | 0) >> 2] | 0) >> 0] | 0 | 0) == (45 | 0);
   }
   $15_1 = $502($7_1 + 484 | 0 | 0) | 0;
   $14_1 = $1060($7_1 + 472 | 0 | 0) | 0;
   $16_1 = $1060($7_1 + 460 | 0 | 0) | 0;
   $1225($2_1 | 0, $9_1 | 0, $7_1 + 508 | 0 | 0, $7_1 + 504 | 0 | 0, $7_1 + 500 | 0 | 0, $7_1 + 496 | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, $7_1 + 456 | 0 | 0);
   HEAP32[($7_1 + 48 | 0) >> 2] = 84;
   $17_1 = $953($7_1 + 40 | 0 | 0, 0 | 0, $7_1 + 48 | 0 | 0) | 0;
   block4 : {
    block3 : {
     $2_1 = HEAP32[($7_1 + 456 | 0) >> 2] | 0;
     if (($8_1 | 0) <= ($2_1 | 0)) {
      break block3
     }
     $18_1 = (((($845($16_1 | 0) | 0) + (($8_1 - $2_1 | 0) << 1 | 0) | 0) + ($845($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 456 | 0) >> 2] | 0) | 0) + 1 | 0;
     break block4;
    }
    $18_1 = ((($845($16_1 | 0) | 0) + ($845($14_1 | 0) | 0) | 0) + (HEAP32[($7_1 + 456 | 0) >> 2] | 0) | 0) + 2 | 0;
   }
   $2_1 = $7_1 + 48 | 0;
   block5 : {
    if ($18_1 >>> 0 < 101 >>> 0) {
     break block5
    }
    $954($17_1 | 0, $340($18_1 << 2 | 0 | 0) | 0 | 0);
    $2_1 = $1148($17_1 | 0) | 0;
    if (!$2_1) {
     break block1
    }
   }
   $1226($2_1 | 0, $7_1 + 36 | 0 | 0, $7_1 + 32 | 0 | 0, $405($3_1 | 0) | 0 | 0, $12_1 | 0, $12_1 + ($8_1 << 2 | 0) | 0 | 0, $13_1 | 0, $9_1 | 0, $7_1 + 504 | 0 | 0, HEAP32[($7_1 + 500 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 496 | 0) >> 2] | 0 | 0, $15_1 | 0, $14_1 | 0, $16_1 | 0, HEAP32[($7_1 + 456 | 0) >> 2] | 0 | 0);
   $8_1 = $944($1_1 | 0, $2_1 | 0, HEAP32[($7_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
   $956($17_1 | 0) | 0;
   $1889($16_1 | 0) | 0;
   $1889($14_1 | 0) | 0;
   $1872($15_1 | 0) | 0;
   $783($7_1 + 508 | 0 | 0) | 0;
   $956($11_1 | 0) | 0;
   $925($10_1 | 0) | 0;
   global$0 = $7_1 + 1056 | 0;
   return $8_1 | 0;
  }
  $1863();
  wasm2js_trap();
 }
 
 function $1224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1229($0_1 | 0) | 0) ^ 1 | 0 | 0;
 }
 
 function $1225($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  block3 : {
   block : {
    if (!$0_1) {
     break block
    }
    $2_1 = $1183($2_1 | 0) | 0;
    block2 : {
     block1 : {
      if (!$1_1) {
       break block1
      }
      $1184($10_1 + 4 | 0 | 0, $2_1 | 0);
      $11_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
      HEAP8[$3_1 >> 0] = $11_1;
      HEAP8[($3_1 + 1 | 0) >> 0] = $11_1 >>> 8 | 0;
      HEAP8[($3_1 + 2 | 0) >> 0] = $11_1 >>> 16 | 0;
      HEAP8[($3_1 + 3 | 0) >> 0] = $11_1 >>> 24 | 0;
      $1185($10_1 + 4 | 0 | 0, $2_1 | 0);
      $1186($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
      $1889($10_1 + 4 | 0 | 0) | 0;
      break block2;
     }
     $1230($10_1 + 4 | 0 | 0, $2_1 | 0);
     $12_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $12_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $12_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $12_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $12_1 >>> 24 | 0;
     $1187($10_1 + 4 | 0 | 0, $2_1 | 0);
     $1186($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $1889($10_1 + 4 | 0 | 0) | 0;
    }
    HEAP32[$4_1 >> 2] = $1188($2_1 | 0) | 0;
    HEAP32[$5_1 >> 2] = $1189($2_1 | 0) | 0;
    $1190($10_1 + 4 | 0 | 0, $2_1 | 0);
    $506($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1872($10_1 + 4 | 0 | 0) | 0;
    $1191($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1186($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1889($10_1 + 4 | 0 | 0) | 0;
    $2_1 = $1192($2_1 | 0) | 0;
    break block3;
   }
   $2_1 = $1193($2_1 | 0) | 0;
   block5 : {
    block4 : {
     if (!$1_1) {
      break block4
     }
     $1194($10_1 + 4 | 0 | 0, $2_1 | 0);
     $13_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
     HEAP8[$3_1 >> 0] = $13_1;
     HEAP8[($3_1 + 1 | 0) >> 0] = $13_1 >>> 8 | 0;
     HEAP8[($3_1 + 2 | 0) >> 0] = $13_1 >>> 16 | 0;
     HEAP8[($3_1 + 3 | 0) >> 0] = $13_1 >>> 24 | 0;
     $1195($10_1 + 4 | 0 | 0, $2_1 | 0);
     $1186($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
     $1889($10_1 + 4 | 0 | 0) | 0;
     break block5;
    }
    $1231($10_1 + 4 | 0 | 0, $2_1 | 0);
    $14_1 = HEAP32[($10_1 + 4 | 0) >> 2] | 0;
    HEAP8[$3_1 >> 0] = $14_1;
    HEAP8[($3_1 + 1 | 0) >> 0] = $14_1 >>> 8 | 0;
    HEAP8[($3_1 + 2 | 0) >> 0] = $14_1 >>> 16 | 0;
    HEAP8[($3_1 + 3 | 0) >> 0] = $14_1 >>> 24 | 0;
    $1196($10_1 + 4 | 0 | 0, $2_1 | 0);
    $1186($8_1 | 0, $10_1 + 4 | 0 | 0) | 0;
    $1889($10_1 + 4 | 0 | 0) | 0;
   }
   HEAP32[$4_1 >> 2] = $1197($2_1 | 0) | 0;
   HEAP32[$5_1 >> 2] = $1198($2_1 | 0) | 0;
   $1199($10_1 + 4 | 0 | 0, $2_1 | 0);
   $506($6_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1872($10_1 + 4 | 0 | 0) | 0;
   $1200($10_1 + 4 | 0 | 0, $2_1 | 0);
   $1186($7_1 | 0, $10_1 + 4 | 0 | 0) | 0;
   $1889($10_1 + 4 | 0 | 0) | 0;
   $2_1 = $1201($2_1 | 0) | 0;
  }
  HEAP32[$9_1 >> 2] = $2_1;
  global$0 = $10_1 + 16 | 0;
 }
 
 function $1226($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1, $10_1, $11_1, $12_1, $13_1, $14_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  $12_1 = $12_1 | 0;
  $13_1 = $13_1 | 0;
  $14_1 = $14_1 | 0;
  var $19_1 = 0, $21_1 = 0, $23_1 = 0, $22_1 = 0, $24_1 = 0, $15_1 = 0, $18_1 = 0, $16_1 = 0, $17_1 = 0, $20_1 = 0;
  $15_1 = global$0 - 16 | 0;
  global$0 = $15_1;
  HEAP32[$2_1 >> 2] = $0_1;
  $16_1 = $7_1 ? 4 : 0;
  $17_1 = $3_1 & 512 | 0;
  $18_1 = 0;
  label4 : while (1) {
   block : {
    if (($18_1 | 0) != (4 | 0)) {
     break block
    }
    block1 : {
     if (($845($13_1 | 0) | 0) >>> 0 <= 1 >>> 0) {
      break block1
     }
     HEAP32[($15_1 + 12 | 0) >> 2] = $1232($13_1 | 0) | 0;
     HEAP32[$2_1 >> 2] = $1235($1233($15_1 + 12 | 0 | 0, 1 | 0) | 0 | 0, $1234($13_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
    }
    block2 : {
     $7_1 = $3_1 & 176 | 0;
     if (($7_1 | 0) == (16 | 0)) {
      break block2
     }
     block3 : {
      if (($7_1 | 0) != (32 | 0)) {
       break block3
      }
      $0_1 = HEAP32[$2_1 >> 2] | 0;
     }
     HEAP32[$1_1 >> 2] = $0_1;
    }
    global$0 = $15_1 + 16 | 0;
    return;
   }
   block9 : {
    block8 : {
     switch (HEAPU8[($8_1 + $18_1 | 0) >> 0] | 0 | 0) {
     case 0:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      break block9;
     case 1:
      HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
      $7_1 = $603($6_1 | 0, 32 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break block9;
     case 3:
      if ($847($13_1 | 0) | 0) {
       break block9
      }
      $7_1 = HEAP32[($846($13_1 | 0, 0 | 0) | 0) >> 2] | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break block9;
     case 2:
      $7_1 = $847($12_1 | 0) | 0;
      if (!$17_1) {
       break block9
      }
      if ($7_1) {
       break block9
      }
      HEAP32[$2_1 >> 2] = $1235($1232($12_1 | 0) | 0 | 0, $1234($12_1 | 0) | 0 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0;
      break block9;
     case 4:
      break block8;
     default:
      break block9;
     };
    }
    $20_1 = HEAP32[$2_1 >> 2] | 0;
    $4_1 = $4_1 + $16_1 | 0;
    $7_1 = $4_1;
    block10 : {
     label : while (1) {
      if ($7_1 >>> 0 >= $5_1 >>> 0) {
       break block10
      }
      if (!($480($6_1 | 0, 64 | 0, HEAP32[$7_1 >> 2] | 0 | 0) | 0)) {
       break block10
      }
      $7_1 = $7_1 + 4 | 0;
      continue label;
     };
    }
    block11 : {
     if (($14_1 | 0) < (1 | 0)) {
      break block11
     }
     $21_1 = HEAP32[$2_1 >> 2] | 0;
     $19_1 = $14_1;
     block12 : {
      label1 : while (1) {
       if ($7_1 >>> 0 <= $4_1 >>> 0) {
        break block12
       }
       if (($19_1 | 0) == (0 | 0)) {
        break block12
       }
       $19_1 = $19_1 + -1 | 0;
       $7_1 = $7_1 + -4 | 0;
       $22_1 = HEAP32[$7_1 >> 2] | 0;
       $23_1 = $21_1 + 4 | 0;
       HEAP32[$2_1 >> 2] = $23_1;
       HEAP32[$21_1 >> 2] = $22_1;
       $21_1 = $23_1;
       continue label1;
      };
     }
     block14 : {
      block13 : {
       if ($19_1) {
        break block13
       }
       $23_1 = 0;
       break block14;
      }
      $23_1 = $603($6_1 | 0, 48 | 0) | 0;
     }
     $21_1 = HEAP32[$2_1 >> 2] | 0;
     block15 : {
      label2 : while (1) {
       if (($19_1 | 0) < (1 | 0)) {
        break block15
       }
       $22_1 = $21_1 + 4 | 0;
       HEAP32[$2_1 >> 2] = $22_1;
       HEAP32[$21_1 >> 2] = $23_1;
       $19_1 = $19_1 + -1 | 0;
       $21_1 = $22_1;
       continue label2;
      };
     }
     $19_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
     HEAP32[$19_1 >> 2] = $9_1;
    }
    block17 : {
     block16 : {
      if (($7_1 | 0) != ($4_1 | 0)) {
       break block16
      }
      $7_1 = $603($6_1 | 0, 48 | 0) | 0;
      $19_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $19_1 + 4 | 0;
      HEAP32[$19_1 >> 2] = $7_1;
      break block17;
     }
     block19 : {
      block18 : {
       if (!($794($11_1 | 0) | 0)) {
        break block18
       }
       $23_1 = $1221() | 0;
       break block19;
      }
      $23_1 = HEAP8[($793($11_1 | 0, 0 | 0) | 0) >> 0] | 0;
     }
     $19_1 = 0;
     $24_1 = 0;
     label3 : while (1) {
      if (($7_1 | 0) == ($4_1 | 0)) {
       break block17
      }
      block21 : {
       block20 : {
        if (($19_1 | 0) == ($23_1 | 0)) {
         break block20
        }
        $21_1 = $19_1;
        break block21;
       }
       $21_1 = HEAP32[$2_1 >> 2] | 0;
       HEAP32[$2_1 >> 2] = $21_1 + 4 | 0;
       HEAP32[$21_1 >> 2] = $10_1;
       $21_1 = 0;
       block22 : {
        $24_1 = $24_1 + 1 | 0;
        if ($24_1 >>> 0 < ($525($11_1 | 0) | 0) >>> 0) {
         break block22
        }
        $23_1 = $19_1;
        break block21;
       }
       block23 : {
        if ((HEAPU8[($793($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0 | 0) != (($1035() | 0) & 255 | 0 | 0)) {
         break block23
        }
        $23_1 = $1221() | 0;
        break block21;
       }
       $23_1 = HEAP8[($793($11_1 | 0, $24_1 | 0) | 0) >> 0] | 0;
      }
      $7_1 = $7_1 + -4 | 0;
      $19_1 = HEAP32[$7_1 >> 2] | 0;
      $22_1 = HEAP32[$2_1 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $22_1 + 4 | 0;
      HEAP32[$22_1 >> 2] = $19_1;
      $19_1 = $21_1 + 1 | 0;
      continue label3;
     };
    }
    $964($20_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0);
   }
   $18_1 = $18_1 + 1 | 0;
   continue label4;
  };
 }
 
 function $1227($0_1) {
  $0_1 = $0_1 | 0;
  return $1696($0_1 | 0) | 0 | 0;
 }
 
 function $1228($0_1) {
  $0_1 = $0_1 | 0;
  return $618($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1229($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[($1163($0_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) | 0;
 }
 
 function $1230($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1231($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1);
 }
 
 function $1232($0_1) {
  $0_1 = $0_1 | 0;
  return $1242($0_1 | 0, $997($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1233($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1243($2_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1234($0_1) {
  $0_1 = $0_1 | 0;
  return $1242($0_1 | 0, ($997($0_1 | 0) | 0) + (($845($0_1 | 0) | 0) << 2 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1235($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1241($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1236($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $8_1 = 0, $9_1 = 0, $12_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 480 | 0;
  global$0 = $6_1;
  $608($6_1 + 476 | 0 | 0, $3_1 | 0);
  $7_1 = $477($6_1 + 476 | 0 | 0) | 0;
  $8_1 = 0;
  block : {
   if (!($845($5_1 | 0) | 0)) {
    break block
   }
   $8_1 = (HEAP32[($846($5_1 | 0, 0 | 0) | 0) >> 2] | 0 | 0) == ($603($7_1 | 0, 45 | 0) | 0 | 0);
  }
  $9_1 = $502($6_1 + 452 | 0 | 0) | 0;
  $10_1 = $1060($6_1 + 440 | 0 | 0) | 0;
  $11_1 = $1060($6_1 + 428 | 0 | 0) | 0;
  $1225($2_1 | 0, $8_1 | 0, $6_1 + 476 | 0 | 0, $6_1 + 472 | 0 | 0, $6_1 + 468 | 0 | 0, $6_1 + 464 | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, $6_1 + 424 | 0 | 0);
  HEAP32[($6_1 + 16 | 0) >> 2] = 84;
  $12_1 = $953($6_1 + 8 | 0 | 0, 0 | 0, $6_1 + 16 | 0 | 0) | 0;
  block2 : {
   block1 : {
    if (($845($5_1 | 0) | 0 | 0) <= (HEAP32[($6_1 + 424 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    $2_1 = $845($5_1 | 0) | 0;
    $13_1 = HEAP32[($6_1 + 424 | 0) >> 2] | 0;
    $13_1 = (((($845($11_1 | 0) | 0) + (($2_1 - $13_1 | 0) << 1 | 0) | 0) + ($845($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 424 | 0) >> 2] | 0) | 0) + 1 | 0;
    break block2;
   }
   $13_1 = ((($845($11_1 | 0) | 0) + ($845($10_1 | 0) | 0) | 0) + (HEAP32[($6_1 + 424 | 0) >> 2] | 0) | 0) + 2 | 0;
  }
  $2_1 = $6_1 + 16 | 0;
  block3 : {
   if ($13_1 >>> 0 < 101 >>> 0) {
    break block3
   }
   $954($12_1 | 0, $340($13_1 << 2 | 0 | 0) | 0 | 0);
   $2_1 = $1148($12_1 | 0) | 0;
   if ($2_1) {
    break block3
   }
   $1863();
   wasm2js_trap();
  }
  $1226($2_1 | 0, $6_1 + 4 | 0 | 0, $6_1 | 0, $405($3_1 | 0) | 0 | 0, $996($5_1 | 0) | 0 | 0, ($996($5_1 | 0) | 0) + (($845($5_1 | 0) | 0) << 2 | 0) | 0 | 0, $7_1 | 0, $8_1 | 0, $6_1 + 472 | 0 | 0, HEAP32[($6_1 + 468 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 464 | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, HEAP32[($6_1 + 424 | 0) >> 2] | 0 | 0);
  $5_1 = $944($1_1 | 0, $2_1 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $956($12_1 | 0) | 0;
  $1889($11_1 | 0) | 0;
  $1889($10_1 | 0) | 0;
  $1872($9_1 | 0) | 0;
  $783($6_1 + 476 | 0 | 0) | 0;
  global$0 = $6_1 + 480 | 0;
  return $5_1 | 0;
 }
 
 function $1237($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1697($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1238($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($1716($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1239() {
  return -1 | 0;
 }
 
 function $1240($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1241($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1717($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1242($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[($1736($2_1 + 12 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1243($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1244($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $1245($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $97($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $1246($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1247($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return -1 | 0;
 }
 
 function $1248($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $1077($0_1 | 0, $5_1 | 0) | 0;
 }
 
 function $1249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1250($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67127608;
  block : {
   if ((HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) == ($833() | 0 | 0)) {
    break block
   }
   $750(HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0);
  }
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $1251($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67126504;
  $0_1 = $1253($1_1 + 8 | 0 | 0, 30 | 0) | 0;
  $604($1_1 + 144 | 0 | 0, 67110087 | 0) | 0;
  $1254($0_1 | 0);
  $1255();
  $1256($1_1 | 0, 67145756 | 0);
  $1257();
  $1258($1_1 | 0, 67145764 | 0);
  $1259();
  $1260($1_1 | 0, 67145772 | 0);
  $1261();
  $1262($1_1 | 0, 67145788 | 0);
  $1263();
  $1264($1_1 | 0, 67145796 | 0);
  $1265();
  $1266($1_1 | 0, 67145804 | 0);
  $1267();
  $1268($1_1 | 0, 67145816 | 0);
  $1269();
  $1270($1_1 | 0, 67145824 | 0);
  $1271();
  $1272($1_1 | 0, 67145832 | 0);
  $1273();
  $1274($1_1 | 0, 67145840 | 0);
  $1275();
  $1276($1_1 | 0, 67145848 | 0);
  $1277();
  $1278($1_1 | 0, 67145872 | 0);
  $1279();
  $1280($1_1 | 0, 67145900 | 0);
  $1281();
  $1282($1_1 | 0, 67145908 | 0);
  $1283();
  $1284($1_1 | 0, 67145916 | 0);
  $1285();
  $1286($1_1 | 0, 67145924 | 0);
  $1287();
  $1288($1_1 | 0, 67145932 | 0);
  $1289();
  $1290($1_1 | 0, 67145940 | 0);
  $1291();
  $1292($1_1 | 0, 67145948 | 0);
  $1293();
  $1294($1_1 | 0, 67145956 | 0);
  $1295();
  $1296($1_1 | 0, 67145964 | 0);
  $1297();
  $1298($1_1 | 0, 67145972 | 0);
  $1299();
  $1300($1_1 | 0, 67145980 | 0);
  $1301();
  $1302($1_1 | 0, 67145988 | 0);
  $1303();
  $1304($1_1 | 0, 67145996 | 0);
  $1305();
  $1306($1_1 | 0, 67146008 | 0);
  $1307();
  $1308($1_1 | 0, 67146020 | 0);
  $1309();
  $1310($1_1 | 0, 67146032 | 0);
  $1311();
  $1312($1_1 | 0, 67146044 | 0);
  $1313();
  $1314($1_1 | 0, 67146052 | 0);
  return $1_1 | 0;
 }
 
 function $1252($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1315($0_1 | 0, $1_1 + -1 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67127984;
  return $1_1 | 0;
 }
 
 function $1253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  $1316($0_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0, $2_1 + 11 | 0 | 0) | 0;
  $1318($2_1 + 10 | 0 | 0, HEAP32[($1317($2_1 + 4 | 0 | 0, $0_1 | 0) | 0) >> 2] | 0 | 0);
  block : {
   if (!$1_1) {
    break block
   }
   $1319($0_1 | 0, $1_1 | 0);
   $1320($0_1 | 0, $1_1 | 0);
  }
  $1321($2_1 + 10 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1254($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = $1322($0_1 | 0) | 0;
  $1323($0_1 | 0);
  $1324($0_1 | 0, $1_1 | 0);
 }
 
 function $1255() {
  $1327(67145756 | 0, 1 | 0) | 0;
 }
 
 function $1256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144160 | 0) | 0 | 0);
 }
 
 function $1257() {
  $1328(67145764 | 0, 1 | 0) | 0;
 }
 
 function $1258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144168 | 0) | 0 | 0);
 }
 
 function $1259() {
  $1329(67145772 | 0, 0 | 0, 0 | 0, 1 | 0) | 0;
 }
 
 function $1260($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144512 | 0) | 0 | 0);
 }
 
 function $1261() {
  $1330(67145788 | 0, 1 | 0) | 0;
 }
 
 function $1262($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144504 | 0) | 0 | 0);
 }
 
 function $1263() {
  $1331(67145796 | 0, 1 | 0) | 0;
 }
 
 function $1264($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144520 | 0) | 0 | 0);
 }
 
 function $1265() {
  $1332(67145804 | 0, 1 | 0) | 0;
 }
 
 function $1266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144528 | 0) | 0 | 0);
 }
 
 function $1267() {
  $1333(67145816 | 0, 1 | 0) | 0;
 }
 
 function $1268($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144536 | 0) | 0 | 0);
 }
 
 function $1269() {
  $1334(67145824 | 0, 1 | 0) | 0;
 }
 
 function $1270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144552 | 0) | 0 | 0);
 }
 
 function $1271() {
  $1335(67145832 | 0, 1 | 0) | 0;
 }
 
 function $1272($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144544 | 0) | 0 | 0);
 }
 
 function $1273() {
  $1336(67145840 | 0, 1 | 0) | 0;
 }
 
 function $1274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144560 | 0) | 0 | 0);
 }
 
 function $1275() {
  $1337(67145848 | 0, 1 | 0) | 0;
 }
 
 function $1276($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144568 | 0) | 0 | 0);
 }
 
 function $1277() {
  $1338(67145872 | 0, 1 | 0) | 0;
 }
 
 function $1278($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144576 | 0) | 0 | 0);
 }
 
 function $1279() {
  $1339(67145900 | 0, 1 | 0) | 0;
 }
 
 function $1280($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144176 | 0) | 0 | 0);
 }
 
 function $1281() {
  $1340(67145908 | 0, 1 | 0) | 0;
 }
 
 function $1282($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144184 | 0) | 0 | 0);
 }
 
 function $1283() {
  $1341(67145916 | 0, 1 | 0) | 0;
 }
 
 function $1284($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144192 | 0) | 0 | 0);
 }
 
 function $1285() {
  $1342(67145924 | 0, 1 | 0) | 0;
 }
 
 function $1286($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144200 | 0) | 0 | 0);
 }
 
 function $1287() {
  $1343(67145932 | 0, 1 | 0) | 0;
 }
 
 function $1288($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144240 | 0) | 0 | 0);
 }
 
 function $1289() {
  $1344(67145940 | 0, 1 | 0) | 0;
 }
 
 function $1290($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144248 | 0) | 0 | 0);
 }
 
 function $1291() {
  $1345(67145948 | 0, 1 | 0) | 0;
 }
 
 function $1292($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144256 | 0) | 0 | 0);
 }
 
 function $1293() {
  $1346(67145956 | 0, 1 | 0) | 0;
 }
 
 function $1294($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144264 | 0) | 0 | 0);
 }
 
 function $1295() {
  $1347(67145964 | 0, 1 | 0) | 0;
 }
 
 function $1296($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144272 | 0) | 0 | 0);
 }
 
 function $1297() {
  $1348(67145972 | 0, 1 | 0) | 0;
 }
 
 function $1298($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144280 | 0) | 0 | 0);
 }
 
 function $1299() {
  $1349(67145980 | 0, 1 | 0) | 0;
 }
 
 function $1300($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144288 | 0) | 0 | 0);
 }
 
 function $1301() {
  $1350(67145988 | 0, 1 | 0) | 0;
 }
 
 function $1302($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144296 | 0) | 0 | 0);
 }
 
 function $1303() {
  $1351(67145996 | 0, 1 | 0) | 0;
 }
 
 function $1304($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144208 | 0) | 0 | 0);
 }
 
 function $1305() {
  $1352(67146008 | 0, 1 | 0) | 0;
 }
 
 function $1306($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144216 | 0) | 0 | 0);
 }
 
 function $1307() {
  $1353(67146020 | 0, 1 | 0) | 0;
 }
 
 function $1308($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144224 | 0) | 0 | 0);
 }
 
 function $1309() {
  $1354(67146032 | 0, 1 | 0) | 0;
 }
 
 function $1310($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144232 | 0) | 0 | 0);
 }
 
 function $1311() {
  $1355(67146044 | 0, 1 | 0) | 0;
 }
 
 function $1312($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144304 | 0) | 0 | 0);
 }
 
 function $1313() {
  $1356(67146052 | 0, 1 | 0) | 0;
 }
 
 function $1314($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1326($0_1 | 0, $1_1 | 0, $1325(67144312 | 0) | 0 | 0);
 }
 
 function $1315($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 67133176 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1316($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1737($0_1 | 0, $1_1 | 0) | 0;
  $1738($1_1 + 4 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1317($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1318($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1739($0_1 | 0, $1_1 | 0) | 0;
 }
 
 function $1319($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block : {
   if ($1_1 >>> 0 <= ($1740($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $1741($0_1 | 0);
   wasm2js_trap();
  }
  $1743($2_1 + 8 | 0 | 0, $1742($0_1 | 0) | 0 | 0, $1_1 | 0);
  $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $1_1;
  $3_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
  HEAP32[($1744($0_1 | 0) | 0) >> 2] = $1_1 + ($3_1 << 2 | 0) | 0;
  $1745($0_1 | 0, 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1320($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1746($2_1 + 4 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $1_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  label : while (1) {
   block : {
    if (($1_1 | 0) != ($4_1 | 0)) {
     break block
    }
    $1747($3_1 | 0) | 0;
    global$0 = $2_1 + 16 | 0;
    return;
   }
   $1749($1742($0_1 | 0) | 0 | 0, $1748($1_1 | 0) | 0 | 0);
   $1_1 = $1_1 + 4 | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   continue label;
  };
 }
 
 function $1321($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[$0_1 >> 0] = 1;
 }
 
 function $1322($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1323($0_1) {
  $0_1 = $0_1 | 0;
  $1768($0_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0);
 }
 
 function $1324($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1325($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $1392($0_1 | 0, $1_1 + 12 | 0 | 0);
  $0_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 + -1 | 0 | 0;
 }
 
 function $1326($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1359($1_1 | 0);
  $4_1 = $1365($3_1 + 12 | 0 | 0, $1_1 | 0) | 0;
  block : {
   $1_1 = $0_1 + 8 | 0;
   if ($2_1 >>> 0 < ($1322($1_1 | 0) | 0) >>> 0) {
    break block
   }
   $1368($1_1 | 0, $2_1 + 1 | 0 | 0);
  }
  block1 : {
   if (!(HEAP32[($1358($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
    break block1
   }
   $1369(HEAP32[($1358($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
  }
  $0_1 = $1370($4_1 | 0) | 0;
  HEAP32[($1358($1_1 | 0, $2_1 | 0) | 0) >> 2] = $0_1;
  $1366($4_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1327($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67129096;
  return $1_1 | 0;
 }
 
 function $1328($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67129128;
  return $1_1 | 0;
 }
 
 function $1329($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3_1 = $1415($1252($0_1 | 0, $3_1 | 0) | 0 | 0) | 0;
  HEAP8[($3_1 + 12 | 0) >> 0] = $2_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$3_1 >> 2] = 67126524;
  block : {
   if ($1_1) {
    break block
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = 67126576;
  }
  return $3_1 | 0;
 }
 
 function $1330($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1415($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67128040;
  return $1_1 | 0;
 }
 
 function $1331($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1434($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67128192;
  return $1_1 | 0;
 }
 
 function $1332($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1434($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67127608;
  HEAP32[($1_1 + 8 | 0) >> 2] = $833() | 0;
  return $1_1 | 0;
 }
 
 function $1333($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1434($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67128340;
  return $1_1 | 0;
 }
 
 function $1334($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1434($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67128572;
  return $1_1 | 0;
 }
 
 function $1335($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1434($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67128456;
  return $1_1 | 0;
 }
 
 function $1336($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1434($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67128688;
  return $1_1 | 0;
 }
 
 function $1337($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  HEAP16[($1_1 + 8 | 0) >> 1] = 11310;
  HEAP32[$1_1 >> 2] = 67127656;
  $502($1_1 + 12 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1338($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = 46;
  HEAP32[($1_1 + 12 | 0) >> 2] = 44;
  HEAP32[$1_1 >> 2] = 67127696;
  $502($1_1 + 16 | 0 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1339($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67129160;
  return $1_1 | 0;
 }
 
 function $1340($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67129408;
  return $1_1 | 0;
 }
 
 function $1341($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67129620;
  return $1_1 | 0;
 }
 
 function $1342($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67129856;
  return $1_1 | 0;
 }
 
 function $1343($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1809($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67130852;
  return $1_1 | 0;
 }
 
 function $1344($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1809($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67131e3;
  return $1_1 | 0;
 }
 
 function $1345($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1809($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67131116;
  return $1_1 | 0;
 }
 
 function $1346($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1809($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67131232;
  return $1_1 | 0;
 }
 
 function $1347($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1810($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67131348;
  return $1_1 | 0;
 }
 
 function $1348($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1811($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67131516;
  return $1_1 | 0;
 }
 
 function $1349($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1812($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67131684;
  return $1_1 | 0;
 }
 
 function $1350($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1813($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67131852;
  return $1_1 | 0;
 }
 
 function $1351($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = $1814($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67130056;
  HEAP32[$0_1 >> 2] = 67130104;
  return $1_1 | 0;
 }
 
 function $1352($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  $0_1 = $1815($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67130324;
  HEAP32[$0_1 >> 2] = 67130372;
  return $1_1 | 0;
 }
 
 function $1353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  $1816($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67130564;
  return $1_1 | 0;
 }
 
 function $1354($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1252($0_1 | 0, $1_1 | 0) | 0;
  $1816($1_1 + 8 | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67130724;
  return $1_1 | 0;
 }
 
 function $1355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1817($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67132020;
  return $1_1 | 0;
 }
 
 function $1356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $1817($1252($0_1 | 0, $1_1 | 0) | 0 | 0) | 0;
  HEAP32[$1_1 >> 2] = 67132140;
  return $1_1 | 0;
 }
 
 function $1357() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  block : {
   if (HEAPU8[(0 + 67144488 | 0) >> 0] | 0) {
    break block
   }
   HEAP32[($0_1 + 8 | 0) >> 2] = $1360() | 0;
   $1361(67144484 | 0, $0_1 + 15 | 0 | 0, $0_1 + 8 | 0 | 0) | 0;
   HEAP8[(0 + 67144488 | 0) >> 0] = 1;
  }
  $1_1 = $1362(67144484 | 0) | 0;
  global$0 = $0_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1358($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1359($0_1) {
  $0_1 = $0_1 | 0;
  $1363($0_1 + 4 | 0 | 0) | 0;
 }
 
 function $1360() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[($0_1 + 12 | 0) >> 2] = 1;
  $1382(67144328 | 0, $0_1 + 12 | 0 | 0) | 0;
  $1_1 = $1383(67144328 | 0) | 0;
  global$0 = $0_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1361($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1384($0_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1362($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1363($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + 1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1364($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1380($0_1 | 0, $1_1 | 0) | 0) {
    break block
   }
   $536();
   wasm2js_trap();
  }
  return HEAP32[($1381($0_1 + 8 | 0 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function $1365($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $1367($0_1 | 0, $2_1 + 12 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1366($0_1) {
  $0_1 = $0_1 | 0;
  $1371($0_1 | 0);
  return $0_1 | 0;
 }
 
 function $1367($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1780($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  block : {
   $2_1 = $1322($0_1 | 0) | 0;
   if ($1_1 >>> 0 <= $2_1 >>> 0) {
    break block
   }
   $1377($0_1 | 0, $1_1 - $2_1 | 0 | 0);
   return;
  }
  block1 : {
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break block1
   }
   $1378($0_1 | 0, (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0);
  }
 }
 
 function $1369($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   $1_1 = $1374($0_1 + 4 | 0 | 0) | 0;
   if (($1_1 | 0) != (-1 | 0)) {
    break block
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0_1);
  }
  return ($1_1 | 0) == (-1 | 0) | 0;
 }
 
 function $1370($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1379($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1379($0_1 | 0) | 0) >> 2] = 0;
  return $1_1 | 0;
 }
 
 function $1371($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1379($0_1 | 0) | 0) >> 2] | 0;
  HEAP32[($1379($0_1 | 0) | 0) >> 2] = 0;
  block : {
   if (!$1_1) {
    break block
   }
   $1781($1_1 | 0);
  }
 }
 
 function $1372($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  HEAP32[$0_1 >> 2] = 67126504;
  $1_1 = $0_1 + 8 | 0;
  $2_1 = 0;
  block : {
   label : while (1) {
    if ($2_1 >>> 0 >= ($1322($1_1 | 0) | 0) >>> 0) {
     break block
    }
    block1 : {
     if (!(HEAP32[($1358($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0)) {
      break block1
     }
     $1369(HEAP32[($1358($1_1 | 0, $2_1 | 0) | 0) >> 2] | 0 | 0) | 0;
    }
    $2_1 = $2_1 + 1 | 0;
    continue label;
   };
  }
  $1872($0_1 + 144 | 0 | 0) | 0;
  $1373($1_1 | 0) | 0;
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $1373($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $1375($1317($1_1 + 12 | 0 | 0, $0_1 | 0) | 0 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1374($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1375($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $12_1 = 0;
  block : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!(HEAP32[$1_1 >> 2] | 0)) {
    break block
   }
   $1323($1_1 | 0);
   $1774(HEAP32[$0_1 >> 2] | 0 | 0);
   $12_1 = $1742(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   $0_1 = HEAP32[$0_1 >> 2] | 0;
   $1775($12_1 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1771($0_1 | 0) | 0 | 0);
  }
 }
 
 function $1376($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1372($0_1 | 0) | 0 | 0, 156 | 0);
 }
 
 function $1377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  block1 : {
   block : {
    if ((((HEAP32[($1744($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >> 2 | 0) >>> 0 < $1_1 >>> 0) {
     break block
    }
    $1320($0_1 | 0, $1_1 | 0);
    break block1;
   }
   $3_1 = $1742($0_1 | 0) | 0;
   $3_1 = $1783($2_1 + 12 | 0 | 0, $1772($0_1 | 0, ($1322($0_1 | 0) | 0) + $1_1 | 0 | 0) | 0 | 0, $1322($0_1 | 0) | 0 | 0, $3_1 | 0) | 0;
   $1784($3_1 | 0, $1_1 | 0);
   $1785($0_1 | 0, $3_1 | 0);
   $1786($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1322($0_1 | 0) | 0;
  $1768($0_1 | 0, $1_1 | 0);
  $1324($0_1 | 0, $2_1 | 0);
 }
 
 function $1379($0_1) {
  $0_1 = $0_1 | 0;
  return $1782($0_1 | 0) | 0 | 0;
 }
 
 function $1380($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = 0;
  block : {
   $0_1 = $0_1 + 8 | 0;
   if ($1_1 >>> 0 >= ($1322($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $2_1 = (HEAP32[($1381($0_1 | 0, $1_1 | 0) | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  return $2_1 | 0;
 }
 
 function $1381($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0 | 0;
 }
 
 function $1382($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1251($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1383($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1384($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1385() {
  block : {
   if (HEAPU8[(0 + 67144496 | 0) >> 0] | 0) {
    break block
   }
   $1386(67144492 | 0, $1357() | 0 | 0) | 0;
   HEAP8[(0 + 67144496 | 0) >> 0] = 1;
  }
  return $1387(67144492 | 0) | 0 | 0;
 }
 
 function $1386($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1388($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1387($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1388($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1389($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1389($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (($0_1 | 0) == ($1383(67144328 | 0) | 0 | 0)) {
    break block
   }
   $1359($0_1 | 0);
  }
 }
 
 function $1390($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (($0_1 | 0) == ($1383(67144328 | 0) | 0 | 0)) {
    break block
   }
   $1369($0_1 | 0) | 0;
  }
 }
 
 function $1391($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[($1385() | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1389($1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1392($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  block : {
   if (($1395($0_1 | 0) | 0 | 0) == (-1 | 0)) {
    break block
   }
   $743($0_1 | 0, $1397($2_1 + 8 | 0 | 0, $1396($2_1 + 12 | 0 | 0, $1_1 | 0) | 0 | 0) | 0 | 0, 86 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1393($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1394($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0_1);
 }
 
 function $1395($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1818($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1398($0_1) {
  $0_1 = $0_1 | 0;
  $1819($0_1 | 0);
 }
 
 function $1399($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0, i64toi32_i32$1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = $1804($2_1 + 15 | 0 | 0, $1_1 | 0) | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  $3_1 = $514($1_1 | 0) | 0;
  i64toi32_i32$1 = 0;
  HEAP32[$3_1 >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  $504($1_1 | 0, 0 | 0);
  block : {
   if ($512($0_1 | 0) | 0) {
    break block
   }
   $504($0_1 | 0, $525($0_1 | 0) | 0 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1400($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1401($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 0;
  block : {
   if ($2_1 >>> 0 > 127 >>> 0) {
    break block
   }
   $3_1 = ((HEAP32[(($2_1 << 2 | 0) + 67126576 | 0) >> 2] | 0) & $1_1 | 0 | 0) != (0 | 0);
  }
  return $3_1 | 0;
 }
 
 function $1402($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    $4_1 = 0;
    block1 : {
     $5_1 = HEAP32[$1_1 >> 2] | 0;
     if ($5_1 >>> 0 > 127 >>> 0) {
      break block1
     }
     $4_1 = HEAP32[(($5_1 << 2 | 0) + 67126576 | 0) >> 2] | 0;
    }
    HEAP32[$3_1 >> 2] = $4_1;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1403($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    block1 : {
     $4_1 = HEAP32[$2_1 >> 2] | 0;
     if ($4_1 >>> 0 > 127 >>> 0) {
      break block1
     }
     if ((HEAP32[(($4_1 << 2 | 0) + 67126576 | 0) >> 2] | 0) & $1_1 | 0) {
      break block
     }
    }
    $2_1 = $2_1 + 4 | 0;
    continue label;
   };
  }
  return $2_1 | 0;
 }
 
 function $1404($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  block : {
   label : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if ($4_1 >>> 0 > 127 >>> 0) {
     break block
    }
    if (!((HEAP32[(($4_1 << 2 | 0) + 67126576 | 0) >> 2] | 0) & $1_1 | 0)) {
     break block
    }
    $2_1 = $2_1 + 4 | 0;
    continue label;
   };
  }
  return $2_1 | 0;
 }
 
 function $1405($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break block
   }
   $1_1 = HEAP32[(($1406() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1406() {
  return HEAP32[($752() | 0) >> 2] | 0 | 0;
 }
 
 function $1407($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    block1 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break block1
     }
     $3_1 = HEAP32[(($1406() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1408($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 > 127 >>> 0) {
    break block
   }
   $1_1 = HEAP32[(($1409() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 | 0;
 }
 
 function $1409() {
  return HEAP32[($753() | 0) >> 2] | 0 | 0;
 }
 
 function $1410($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    block1 : {
     $3_1 = HEAP32[$1_1 >> 2] | 0;
     if ($3_1 >>> 0 > 127 >>> 0) {
      break block1
     }
     $3_1 = HEAP32[(($1409() | 0) + ((HEAP32[$1_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    $1_1 = $1_1 + 4 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1411($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1412($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    HEAP32[$3_1 >> 2] = HEAP8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 4 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1413($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return ($1_1 >>> 0 < 128 >>> 0 ? $1_1 : $2_1) << 24 >> 24 | 0;
 }
 
 function $1414($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    $5_1 = HEAP32[$1_1 >> 2] | 0;
    HEAP8[$4_1 >> 0] = $5_1 >>> 0 < 128 >>> 0 ? $5_1 : $3_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 4 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1415($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1416($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 67126524;
  block : {
   $1_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if (!$1_1) {
    break block
   }
   if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0 | 0) != (1 | 0)) {
    break block
   }
   $1856($1_1 | 0);
  }
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $1417($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1416($0_1 | 0) | 0 | 0, 16 | 0);
 }
 
 function $1418($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (($1_1 | 0) < (0 | 0)) {
    break block
   }
   $1_1 = HEAP32[(($1406() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 << 24 >> 24 | 0;
 }
 
 function $1419($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    block1 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break block1
     }
     $3_1 = HEAP32[(($1406() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1420($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if (($1_1 | 0) < (0 | 0)) {
    break block
   }
   $1_1 = HEAP32[(($1409() | 0) + ($1_1 << 2 | 0) | 0) >> 2] | 0;
  }
  return $1_1 << 24 >> 24 | 0;
 }
 
 function $1421($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    block1 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (($3_1 | 0) < (0 | 0)) {
      break block1
     }
     $3_1 = HEAP32[(($1409() | 0) + ((HEAP8[$1_1 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    HEAP8[$1_1 >> 0] = $3_1;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1422($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1423($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    HEAP8[$3_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $3_1 = $3_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1424($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (($1_1 | 0) < (0 | 0) ? $2_1 : $1_1) | 0;
 }
 
 function $1425($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    $5_1 = HEAP8[$1_1 >> 0] | 0;
    HEAP8[$4_1 >> 0] = ($5_1 | 0) < (0 | 0) ? $3_1 : $5_1;
    $4_1 = $4_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    continue label;
   };
  }
  return $1_1 | 0;
 }
 
 function $1426($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1427($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1428($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP32[$7_1 >> 2] = $5_1;
  return 3 | 0;
 }
 
 function $1429($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1430($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1431($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1432($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $3_1 - $2_1 | 0;
  $4_1 = HEAP32[($534($5_1 + 12 | 0 | 0, $5_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $5_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1433($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1434($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1435($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1250($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $1436($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, i64toi32_i32$1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  block1 : {
   label : while (1) {
    block : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break block
     }
     $9_1 = $3_1;
     break block1;
    }
    if (!(HEAP32[$9_1 >> 2] | 0)) {
     break block1
    }
    $9_1 = $9_1 + 4 | 0;
    continue label;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  block4 : {
   block9 : {
    label2 : while (1) {
     block13 : {
      block2 : {
       if (($2_1 | 0) == ($3_1 | 0)) {
        break block2
       }
       if (($5_1 | 0) == ($6_1 | 0)) {
        break block2
       }
       i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
       HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
       $10_1 = 1;
       block7 : {
        block6 : {
         block5 : {
          block3 : {
           $11_1 = $1437($5_1 | 0, $4_1 | 0, ($9_1 - $2_1 | 0) >> 2 | 0 | 0, $6_1 - $5_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           switch ($11_1 + 1 | 0 | 0) {
           case 0:
            break block3;
           case 1:
            break block4;
           default:
            break block5;
           };
          }
          HEAP32[$7_1 >> 2] = $5_1;
          label1 : while (1) {
           if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
            break block6
           }
           $9_1 = $1438($5_1 | 0, HEAP32[$2_1 >> 2] | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($9_1 | 0) == (-1 | 0)) {
            break block6
           }
           $5_1 = (HEAP32[$7_1 >> 2] | 0) + $9_1 | 0;
           HEAP32[$7_1 >> 2] = $5_1;
           $2_1 = $2_1 + 4 | 0;
           continue label1;
          };
         }
         $5_1 = (HEAP32[$7_1 >> 2] | 0) + $11_1 | 0;
         HEAP32[$7_1 >> 2] = $5_1;
         if (($5_1 | 0) == ($6_1 | 0)) {
          break block7
         }
         block8 : {
          if (($9_1 | 0) != ($3_1 | 0)) {
           break block8
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          $9_1 = $3_1;
          continue label2;
         }
         $9_1 = $1438($8_1 + 4 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
         if (($9_1 | 0) == (-1 | 0)) {
          break block9
         }
         $2_1 = $8_1 + 4 | 0;
         block10 : {
          if ($9_1 >>> 0 <= ($6_1 - (HEAP32[$7_1 >> 2] | 0) | 0) >>> 0) {
           break block10
          }
          $10_1 = 1;
          break block4;
         }
         block11 : {
          label3 : while (1) {
           if (!$9_1) {
            break block11
           }
           $5_1 = HEAPU8[$2_1 >> 0] | 0;
           $10_1 = HEAP32[$7_1 >> 2] | 0;
           HEAP32[$7_1 >> 2] = $10_1 + 1 | 0;
           HEAP8[$10_1 >> 0] = $5_1;
           $9_1 = $9_1 + -1 | 0;
           $2_1 = $2_1 + 1 | 0;
           continue label3;
          };
         }
         $2_1 = (HEAP32[$4_1 >> 2] | 0) + 4 | 0;
         HEAP32[$4_1 >> 2] = $2_1;
         $9_1 = $2_1;
         label4 : while (1) {
          block12 : {
           if (($9_1 | 0) != ($3_1 | 0)) {
            break block12
           }
           $9_1 = $3_1;
           break block13;
          }
          if (!(HEAP32[$9_1 >> 2] | 0)) {
           break block13
          }
          $9_1 = $9_1 + 4 | 0;
          continue label4;
         };
        }
        HEAP32[$4_1 >> 2] = $2_1;
        break block9;
       }
       $2_1 = HEAP32[$4_1 >> 2] | 0;
      }
      $10_1 = ($2_1 | 0) != ($3_1 | 0);
      break block4;
     }
     $5_1 = HEAP32[$7_1 >> 2] | 0;
     continue label2;
    };
   }
   $10_1 = 2;
  }
  global$0 = $8_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $1437($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $836($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $4_1 = $754($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $837($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1438($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $836($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $337($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $837($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1439($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $133_1 = 0, $135_1 = 0, $131_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $9_1 = $2_1;
  block1 : {
   label : while (1) {
    block : {
     if (($9_1 | 0) != ($3_1 | 0)) {
      break block
     }
     $9_1 = $3_1;
     break block1;
    }
    if (!(HEAPU8[$9_1 >> 0] | 0)) {
     break block1
    }
    $9_1 = $9_1 + 1 | 0;
    continue label;
   };
  }
  HEAP32[$7_1 >> 2] = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  label2 : while (1) {
   block10 : {
    block12 : {
     block2 : {
      if (($2_1 | 0) == ($3_1 | 0)) {
       break block2
      }
      if (($5_1 | 0) == ($6_1 | 0)) {
       break block2
      }
      i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($8_1 + 8 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$1;
      block9 : {
       block4 : {
        block11 : {
         block8 : {
          block3 : {
           $10_1 = $1440($5_1 | 0, $4_1 | 0, $9_1 - $2_1 | 0 | 0, ($6_1 - $5_1 | 0) >> 2 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
           if (($10_1 | 0) != (-1 | 0)) {
            break block3
           }
           label1 : while (1) {
            HEAP32[$7_1 >> 2] = $5_1;
            if (($2_1 | 0) == (HEAP32[$4_1 >> 2] | 0 | 0)) {
             break block2
            }
            $6_1 = 1;
            block6 : {
             block7 : {
              block5 : {
               $5_1 = $1441($5_1 | 0, $2_1 | 0, $9_1 - $2_1 | 0 | 0, $8_1 + 8 | 0 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
               switch ($5_1 + 2 | 0 | 0) {
               case 0:
                break block4;
               case 1:
                break block5;
               case 2:
                break block6;
               default:
                break block7;
               };
              }
              HEAP32[$4_1 >> 2] = $2_1;
              break block8;
             }
             $6_1 = $5_1;
            }
            $2_1 = $2_1 + $6_1 | 0;
            $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
            continue label1;
           };
          }
          $5_1 = (HEAP32[$7_1 >> 2] | 0) + ($10_1 << 2 | 0) | 0;
          HEAP32[$7_1 >> 2] = $5_1;
          if (($5_1 | 0) == ($6_1 | 0)) {
           break block9
          }
          $2_1 = HEAP32[$4_1 >> 2] | 0;
          if (($9_1 | 0) == ($3_1 | 0)) {
           break block10
          }
          if (!($1441($5_1 | 0, $2_1 | 0, 1 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
           break block11
          }
         }
         $9_1 = 2;
         break block12;
        }
        $5_1 = (HEAP32[$7_1 >> 2] | 0) + 4 | 0;
        HEAP32[$7_1 >> 2] = $5_1;
        $2_1 = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
        HEAP32[$4_1 >> 2] = $2_1;
        $9_1 = $2_1;
        label3 : while (1) {
         if (($9_1 | 0) == ($3_1 | 0)) {
          break block10
         }
         if (!(HEAPU8[$9_1 >> 0] | 0)) {
          continue label2
         }
         $9_1 = $9_1 + 1 | 0;
         continue label3;
        };
       }
       HEAP32[$4_1 >> 2] = $2_1;
       $9_1 = 1;
       break block12;
      }
      $2_1 = HEAP32[$4_1 >> 2] | 0;
     }
     $9_1 = ($2_1 | 0) != ($3_1 | 0);
    }
    global$0 = $8_1 + 16 | 0;
    return $9_1 | 0;
   }
   $9_1 = $3_1;
   continue label2;
  };
 }
 
 function $1440($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
  $5_1 = $836($6_1 + 8 | 0 | 0, $6_1 + 12 | 0 | 0) | 0;
  $4_1 = $756($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0) | 0;
  $837($5_1 | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $1441($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  $4_1 = $836($5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0) | 0;
  $3_1 = $629($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0) | 0;
  $837($4_1 | 0) | 0;
  global$0 = $5_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1442($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $6_1 = 0, $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$4_1 >> 2] = $2_1;
  $6_1 = 2;
  block : {
   $2_1 = $1438($5_1 + 12 | 0 | 0, 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
   if (($2_1 + 1 | 0) >>> 0 < 2 >>> 0) {
    break block
   }
   $6_1 = 1;
   $2_1 = $2_1 + -1 | 0;
   if ($2_1 >>> 0 > ($3_1 - (HEAP32[$4_1 >> 2] | 0) | 0) >>> 0) {
    break block
   }
   $6_1 = $5_1 + 12 | 0;
   label : while (1) {
    block1 : {
     if ($2_1) {
      break block1
     }
     $6_1 = 0;
     break block;
    }
    $0_1 = HEAPU8[$6_1 >> 0] | 0;
    $1_1 = HEAP32[$4_1 >> 2] | 0;
    HEAP32[$4_1 >> 2] = $1_1 + 1 | 0;
    HEAP8[$1_1 >> 0] = $0_1;
    $2_1 = $2_1 + -1 | 0;
    $6_1 = $6_1 + 1 | 0;
    continue label;
   };
  }
  global$0 = $5_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1443($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!($1444(0 | 0, 0 | 0, 4 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0)) {
    break block
   }
   return -1 | 0;
  }
  block1 : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break block1
   }
   return 1 | 0;
  }
  return ($1445($0_1 | 0) | 0 | 0) == (1 | 0) | 0;
 }
 
 function $1444($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $836($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $628($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $837($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1445($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $836($1_1 + 8 | 0 | 0, $1_1 + 12 | 0 | 0) | 0;
  $2_1 = $757() | 0;
  $837($0_1 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1446($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1447($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8_1 = 0;
  $5_1 = 0;
  $6_1 = 0;
  block : {
   label : while (1) {
    if ($6_1 >>> 0 >= $4_1 >>> 0) {
     break block
    }
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    $7_1 = 1;
    block1 : {
     block2 : {
      $8_1 = $1448($2_1 | 0, $3_1 - $2_1 | 0 | 0, $1_1 | 0, HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0) | 0;
      switch ($8_1 + 2 | 0 | 0) {
      case 0:
      case 1:
       break block;
      case 2:
       break block1;
      default:
       break block2;
      };
     }
     $7_1 = $8_1;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $7_1 + $5_1 | 0;
    $2_1 = $2_1 + $7_1 | 0;
    continue label;
   };
  }
  return $5_1 | 0;
 }
 
 function $1448($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
  $3_1 = $836($4_1 + 8 | 0 | 0, $4_1 + 12 | 0 | 0) | 0;
  $2_1 = $758($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  $837($3_1 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1449($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($0_1) {
    break block
   }
   return 1 | 0;
  }
  return $1445($0_1 | 0) | 0 | 0;
 }
 
 function $1450($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1451($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $6_1 = $1452($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1452($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  block1 : {
   block : {
    if (!($7_1 & 2 | 0)) {
     break block
    }
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break block1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 187;
    $3_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 191;
    $0_1 = HEAP32[$2_1 >> 2] | 0;
   }
   block3 : {
    label : while (1) {
     block2 : {
      if ($0_1 >>> 0 < $1_1 >>> 0) {
       break block2
      }
      $7_1 = 0;
      break block3;
     }
     $7_1 = 2;
     $3_1 = HEAPU16[$0_1 >> 1] | 0;
     if ($6_1 >>> 0 < $3_1 >>> 0) {
      break block3
     }
     block9 : {
      block5 : {
       block4 : {
        if ($3_1 >>> 0 > 127 >>> 0) {
         break block4
        }
        $7_1 = 1;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (1 | 0)) {
         break block3
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1;
        break block5;
       }
       block6 : {
        if ($3_1 >>> 0 > 2047 >>> 0) {
         break block6
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (2 | 0)) {
         break block1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 6 | 0 | 192 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break block5;
       }
       block7 : {
        if ($3_1 >>> 0 > 55295 >>> 0) {
         break block7
        }
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break block1
        }
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
        break block5;
       }
       block8 : {
        if ($3_1 >>> 0 > 56319 >>> 0) {
         break block8
        }
        $7_1 = 1;
        if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
         break block3
        }
        $8_1 = HEAPU16[($0_1 + 2 | 0) >> 1] | 0;
        if (($8_1 & 64512 | 0 | 0) != (56320 | 0)) {
         break block9
        }
        $9_1 = HEAP32[$5_1 >> 2] | 0;
        if (($4_1 - $9_1 | 0 | 0) < (4 | 0)) {
         break block3
        }
        $7_1 = $3_1 & 960 | 0;
        if ((($7_1 << 10 | 0 | (($3_1 << 10 | 0) & 64512 | 0) | 0 | ($8_1 & 1023 | 0) | 0) + 65536 | 0) >>> 0 > $6_1 >>> 0) {
         break block9
        }
        HEAP32[$2_1 >> 2] = $0_1 + 2 | 0;
        HEAP32[$5_1 >> 2] = $9_1 + 1 | 0;
        $0_1 = ($7_1 >>> 6 | 0) + 1 | 0;
        HEAP8[$9_1 >> 0] = $0_1 >>> 2 | 0 | 240 | 0;
        $7_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
        HEAP8[$7_1 >> 0] = ($0_1 << 4 | 0) & 48 | 0 | (($3_1 >>> 2 | 0) & 15 | 0) | 0 | 128 | 0;
        $0_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
        HEAP8[$0_1 >> 0] = ($8_1 >>> 6 | 0) & 15 | 0 | (($3_1 << 4 | 0) & 48 | 0) | 0 | 128 | 0;
        $3_1 = HEAP32[$5_1 >> 2] | 0;
        HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
        HEAP8[$3_1 >> 0] = $8_1 & 63 | 0 | 128 | 0;
        break block5;
       }
       if ($3_1 >>> 0 < 57344 >>> 0) {
        break block3
       }
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $0_1 | 0 | 0) < (3 | 0)) {
        break block1
       }
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 >>> 12 | 0 | 224 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = ($3_1 >>> 6 | 0) & 191 | 0;
       $0_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
       HEAP8[$0_1 >> 0] = $3_1 & 63 | 0 | 128 | 0;
      }
      $0_1 = (HEAP32[$2_1 >> 2] | 0) + 2 | 0;
      HEAP32[$2_1 >> 2] = $0_1;
      continue label;
     }
     break label;
    };
    return 2 | 0;
   }
   return $7_1 | 0;
  }
  return 1 | 0;
 }
 
 function $1453($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $6_1 = $1454($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1454($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $9_1 = 0, $8_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  block : {
   if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
    break block
   }
   if (!($7_1 & 4 | 0)) {
    break block
   }
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
    break block
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break block
   }
   if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break block
   }
   $0_1 = $0_1 + 3 | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $3_1 = HEAP32[$5_1 >> 2] | 0;
  }
  block2 : {
   block7 : {
    block1 : {
     label : while (1) {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break block1
      }
      if ($3_1 >>> 0 >= $4_1 >>> 0) {
       break block1
      }
      $8_1 = 2;
      $7_1 = HEAPU8[$0_1 >> 0] | 0;
      if ($6_1 >>> 0 < $7_1 >>> 0) {
       break block2
      }
      block4 : {
       block3 : {
        if (($7_1 << 24 >> 24 | 0) < (0 | 0)) {
         break block3
        }
        HEAP16[$3_1 >> 1] = $7_1;
        $7_1 = 1;
        break block4;
       }
       if ($7_1 >>> 0 < 194 >>> 0) {
        break block2
       }
       block5 : {
        if ($7_1 >>> 0 > 223 >>> 0) {
         break block5
        }
        block6 : {
         if (($1_1 - $0_1 | 0 | 0) >= (2 | 0)) {
          break block6
         }
         return 1 | 0;
        }
        $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break block7
        }
        $8_1 = 2;
        $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
        if ($7_1 >>> 0 > $6_1 >>> 0) {
         break block7
        }
        HEAP16[$3_1 >> 1] = $7_1;
        $7_1 = 2;
        break block4;
       }
       block8 : {
        if ($7_1 >>> 0 > 239 >>> 0) {
         break block8
        }
        $8_1 = 1;
        $10_1 = $1_1 - $0_1 | 0;
        if (($10_1 | 0) < (2 | 0)) {
         break block7
        }
        $9_1 = HEAP8[($0_1 + 1 | 0) >> 0] | 0;
        block11 : {
         block10 : {
          block9 : {
           if (($7_1 | 0) == (237 | 0)) {
            break block9
           }
           if (($7_1 | 0) != (224 | 0)) {
            break block10
           }
           if (($9_1 & -32 | 0 | 0) != (-96 | 0)) {
            break block2
           }
           break block11;
          }
          if (($9_1 | 0) >= (-96 | 0)) {
           break block2
          }
          break block11;
         }
         if (($9_1 | 0) > (-65 | 0)) {
          break block2
         }
        }
        if (($10_1 | 0) == (2 | 0)) {
         break block7
        }
        $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break block2
        }
        $8_1 = 2;
        $7_1 = $10_1 & 63 | 0 | (($9_1 & 63 | 0) << 6 | 0 | ($7_1 << 12 | 0) | 0) | 0;
        if (($7_1 & 65535 | 0) >>> 0 > $6_1 >>> 0) {
         break block7
        }
        HEAP16[$3_1 >> 1] = $7_1;
        $7_1 = 3;
        break block4;
       }
       if ($7_1 >>> 0 > 244 >>> 0) {
        break block2
       }
       $8_1 = 1;
       $9_1 = $1_1 - $0_1 | 0;
       if (($9_1 | 0) < (2 | 0)) {
        break block7
       }
       $10_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
       $11_1 = $10_1 << 24 >> 24;
       block15 : {
        block13 : {
         switch ($7_1 + -240 | 0 | 0) {
         case 0:
          if ((($11_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
           break block2
          }
          break block15;
         case 4:
          if (($11_1 | 0) >= (-112 | 0)) {
           break block2
          }
          break block15;
         default:
          break block13;
         };
        }
        if (($11_1 | 0) > (-65 | 0)) {
         break block2
        }
       }
       if (($9_1 | 0) == (2 | 0)) {
        break block7
       }
       $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break block2
       }
       if (($9_1 | 0) == (3 | 0)) {
        break block7
       }
       $9_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break block2
       }
       if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
        break block7
       }
       $8_1 = 2;
       $9_1 = $9_1 & 63 | 0;
       $12_1 = $11_1 << 6 | 0;
       $13_1 = $7_1 & 7 | 0;
       if (($9_1 | ($12_1 & 4032 | 0 | (($10_1 << 12 | 0) & 258048 | 0 | ($13_1 << 18 | 0) | 0) | 0) | 0) >>> 0 > $6_1 >>> 0) {
        break block7
       }
       HEAP16[($3_1 + 2 | 0) >> 1] = $9_1 | ($12_1 & 960 | 0) | 0 | 56320 | 0;
       $7_1 = 4;
       $8_1 = $10_1 << 2 | 0;
       HEAP16[$3_1 >> 1] = ($13_1 << 8 | 0 | ($8_1 & 192 | 0) | 0 | ($8_1 & 60 | 0) | 0 | (($11_1 >>> 4 | 0) & 3 | 0) | 0) + 16320 | 0 | 55296 | 0;
       $3_1 = $3_1 + 2 | 0;
      }
      $0_1 = $0_1 + $7_1 | 0;
      HEAP32[$2_1 >> 2] = $0_1;
      $3_1 = $3_1 + 2 | 0;
      HEAP32[$5_1 >> 2] = $3_1;
      continue label;
     };
    }
    $8_1 = $0_1 >>> 0 < $1_1 >>> 0;
   }
   return $8_1 | 0;
  }
  return 2 | 0;
 }
 
 function $1455($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1456($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1457($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1458($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1459($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1459($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  block : {
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break block
   }
   if (!($4_1 & 4 | 0)) {
    break block
   }
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break block
   }
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break block
   }
   $5_1 = $5_1 + ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  block1 : {
   label : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break block1
    }
    if ($2_1 >>> 0 <= $6_1 >>> 0) {
     break block1
    }
    $4_1 = HEAPU8[$5_1 >> 0] | 0;
    if ($3_1 >>> 0 < $4_1 >>> 0) {
     break block1
    }
    block3 : {
     block2 : {
      if (($4_1 << 24 >> 24 | 0) < (0 | 0)) {
       break block2
      }
      $5_1 = $5_1 + 1 | 0;
      break block3;
     }
     if ($4_1 >>> 0 < 194 >>> 0) {
      break block1
     }
     block4 : {
      if ($4_1 >>> 0 > 223 >>> 0) {
       break block4
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break block1
      }
      $7_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($7_1 & 192 | 0 | 0) != (128 | 0)) {
       break block1
      }
      if (($7_1 & 63 | 0 | (($4_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break block1
      }
      $5_1 = $5_1 + 2 | 0;
      break block3;
     }
     block5 : {
      if ($4_1 >>> 0 > 239 >>> 0) {
       break block5
      }
      if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
       break block1
      }
      $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
      $7_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
      block8 : {
       block7 : {
        block6 : {
         if (($4_1 | 0) == (237 | 0)) {
          break block6
         }
         if (($4_1 | 0) != (224 | 0)) {
          break block7
         }
         if (($7_1 & -32 | 0 | 0) == (-96 | 0)) {
          break block8
         }
         break block1;
        }
        if (($7_1 | 0) >= (-96 | 0)) {
         break block1
        }
        break block8;
       }
       if (($7_1 | 0) > (-65 | 0)) {
        break block1
       }
      }
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break block1
      }
      if ((($7_1 & 63 | 0) << 6 | 0 | (($4_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break block1
      }
      $5_1 = $5_1 + 3 | 0;
      break block3;
     }
     if ($4_1 >>> 0 > 244 >>> 0) {
      break block1
     }
     if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
      break block1
     }
     if (($2_1 - $6_1 | 0) >>> 0 < 2 >>> 0) {
      break block1
     }
     $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
     $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
     $7_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
     block12 : {
      block10 : {
       switch ($4_1 + -240 | 0 | 0) {
       case 0:
        if ((($7_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
         break block1
        }
        break block12;
       case 4:
        if (($7_1 | 0) >= (-112 | 0)) {
         break block1
        }
        break block12;
       default:
        break block10;
       };
      }
      if (($7_1 | 0) > (-65 | 0)) {
       break block1
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break block1
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break block1
     }
     if ((($7_1 & 63 | 0) << 12 | 0 | (($4_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break block1
     }
     $5_1 = $5_1 + 4 | 0;
     $6_1 = $6_1 + 1 | 0;
    }
    $6_1 = $6_1 + 1 | 0;
    continue label;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1460($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1461($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1462($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $6_1 = $1452($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1463($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $6_1 = $1454($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1464($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1465($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1466($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1467($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1459($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1468($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1469($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1470($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $6_1 = $1471($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1471($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  block1 : {
   block : {
    if (!($7_1 & 2 | 0)) {
     break block
    }
    if (($4_1 - $3_1 | 0 | 0) < (3 | 0)) {
     break block1
    }
    HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
    HEAP8[$3_1 >> 0] = 239;
    $0_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = 187;
    $0_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = 191;
    $0_1 = HEAP32[$2_1 >> 2] | 0;
   }
   block3 : {
    label : while (1) {
     block2 : {
      if ($0_1 >>> 0 < $1_1 >>> 0) {
       break block2
      }
      $3_1 = 0;
      break block3;
     }
     $3_1 = 2;
     $0_1 = HEAP32[$0_1 >> 2] | 0;
     if ($0_1 >>> 0 > $6_1 >>> 0) {
      break block3
     }
     if (($0_1 & -2048 | 0 | 0) == (55296 | 0)) {
      break block3
     }
     block5 : {
      block4 : {
       if ($0_1 >>> 0 > 127 >>> 0) {
        break block4
       }
       $3_1 = 1;
       $7_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $7_1 | 0 | 0) < (1 | 0)) {
        break block3
       }
       HEAP32[$5_1 >> 2] = $7_1 + 1 | 0;
       HEAP8[$7_1 >> 0] = $0_1;
       break block5;
      }
      block6 : {
       if ($0_1 >>> 0 > 2047 >>> 0) {
        break block6
       }
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       if (($4_1 - $3_1 | 0 | 0) < (2 | 0)) {
        break block1
       }
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = $0_1 >>> 6 | 0 | 192 | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = $0_1 & 63 | 0 | 128 | 0;
       break block5;
      }
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      $7_1 = $4_1 - $3_1 | 0;
      block7 : {
       if ($0_1 >>> 0 > 65535 >>> 0) {
        break block7
       }
       if (($7_1 | 0) < (3 | 0)) {
        break block1
       }
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = $0_1 >>> 12 | 0 | 224 | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = ($0_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
       HEAP8[$3_1 >> 0] = $0_1 & 63 | 0 | 128 | 0;
       break block5;
      }
      if (($7_1 | 0) < (4 | 0)) {
       break block1
      }
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = $0_1 >>> 18 | 0 | 240 | 0;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = ($0_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = ($0_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      $3_1 = HEAP32[$5_1 >> 2] | 0;
      HEAP32[$5_1 >> 2] = $3_1 + 1 | 0;
      HEAP8[$3_1 >> 0] = $0_1 & 63 | 0 | 128 | 0;
     }
     $0_1 = (HEAP32[$2_1 >> 2] | 0) + 4 | 0;
     HEAP32[$2_1 >> 2] = $0_1;
     continue label;
    };
   }
   return $3_1 | 0;
  }
  return 1 | 0;
 }
 
 function $1472($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $6_1 = $1473($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1473($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  HEAP32[$2_1 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $3_1;
  block : {
   if (($1_1 - $0_1 | 0 | 0) < (3 | 0)) {
    break block
   }
   if (!($7_1 & 4 | 0)) {
    break block
   }
   if ((HEAPU8[$0_1 >> 0] | 0 | 0) != (239 | 0)) {
    break block
   }
   if ((HEAPU8[($0_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break block
   }
   if ((HEAPU8[($0_1 + 2 | 0) >> 0] | 0 | 0) != (191 | 0)) {
    break block
   }
   $0_1 = $0_1 + 3 | 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $3_1 = HEAP32[$5_1 >> 2] | 0;
  }
  block3 : {
   block7 : {
    block1 : {
     label : while (1) {
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       break block1
      }
      if ($3_1 >>> 0 >= $4_1 >>> 0) {
       break block1
      }
      $8_1 = HEAP8[$0_1 >> 0] | 0;
      $7_1 = $8_1 & 255 | 0;
      block4 : {
       block2 : {
        if (($8_1 | 0) < (0 | 0)) {
         break block2
        }
        if ($6_1 >>> 0 < $7_1 >>> 0) {
         break block3
        }
        $8_1 = 1;
        break block4;
       }
       if ($8_1 >>> 0 < -62 >>> 0) {
        break block3
       }
       block5 : {
        if ($8_1 >>> 0 > -33 >>> 0) {
         break block5
        }
        block6 : {
         if (($1_1 - $0_1 | 0 | 0) >= (2 | 0)) {
          break block6
         }
         return 1 | 0;
        }
        $8_1 = 2;
        $9_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
        if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
         break block7
        }
        $8_1 = 2;
        $7_1 = $9_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0;
        if ($7_1 >>> 0 <= $6_1 >>> 0) {
         break block4
        }
        break block7;
       }
       block8 : {
        if ($8_1 >>> 0 > -17 >>> 0) {
         break block8
        }
        $8_1 = 1;
        $10_1 = $1_1 - $0_1 | 0;
        if (($10_1 | 0) < (2 | 0)) {
         break block7
        }
        $9_1 = HEAP8[($0_1 + 1 | 0) >> 0] | 0;
        block11 : {
         block10 : {
          block9 : {
           if (($7_1 | 0) == (237 | 0)) {
            break block9
           }
           if (($7_1 | 0) != (224 | 0)) {
            break block10
           }
           if (($9_1 & -32 | 0 | 0) == (-96 | 0)) {
            break block11
           }
           break block3;
          }
          if (($9_1 | 0) < (-96 | 0)) {
           break block11
          }
          break block3;
         }
         if (($9_1 | 0) > (-65 | 0)) {
          break block3
         }
        }
        if (($10_1 | 0) == (2 | 0)) {
         break block7
        }
        $10_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
        if (($10_1 & 192 | 0 | 0) != (128 | 0)) {
         break block3
        }
        $8_1 = 2;
        $7_1 = $10_1 & 63 | 0 | (($9_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0) | 0;
        if ($7_1 >>> 0 > $6_1 >>> 0) {
         break block7
        }
        $8_1 = 3;
        break block4;
       }
       if ($8_1 >>> 0 > -12 >>> 0) {
        break block3
       }
       $8_1 = 1;
       $9_1 = $1_1 - $0_1 | 0;
       if (($9_1 | 0) < (2 | 0)) {
        break block7
       }
       $10_1 = HEAP8[($0_1 + 1 | 0) >> 0] | 0;
       block15 : {
        block13 : {
         switch ($7_1 + -240 | 0 | 0) {
         case 0:
          if ((($10_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
           break block3
          }
          break block15;
         case 4:
          if (($10_1 | 0) >= (-112 | 0)) {
           break block3
          }
          break block15;
         default:
          break block13;
         };
        }
        if (($10_1 | 0) > (-65 | 0)) {
         break block3
        }
       }
       if (($9_1 | 0) == (2 | 0)) {
        break block7
       }
       $11_1 = HEAPU8[($0_1 + 2 | 0) >> 0] | 0;
       if (($11_1 & 192 | 0 | 0) != (128 | 0)) {
        break block3
       }
       if (($9_1 | 0) == (3 | 0)) {
        break block7
       }
       $9_1 = HEAPU8[($0_1 + 3 | 0) >> 0] | 0;
       if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
        break block3
       }
       $8_1 = 2;
       $7_1 = $9_1 & 63 | 0 | (($11_1 << 6 | 0) & 4032 | 0 | (($10_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0) | 0) | 0;
       if ($7_1 >>> 0 > $6_1 >>> 0) {
        break block7
       }
       $8_1 = 4;
      }
      HEAP32[$3_1 >> 2] = $7_1;
      $0_1 = $0_1 + $8_1 | 0;
      HEAP32[$2_1 >> 2] = $0_1;
      $3_1 = $3_1 + 4 | 0;
      HEAP32[$5_1 >> 2] = $3_1;
      continue label;
     };
    }
    $8_1 = $0_1 >>> 0 < $1_1 >>> 0;
   }
   return $8_1 | 0;
  }
  return 2 | 0;
 }
 
 function $1474($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1475($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1476($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1477($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1478($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1478($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $7_1 = 0, $8_1 = 0, $6_1 = 0, $9_1 = 0;
  $5_1 = $0_1;
  block : {
   if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
    break block
   }
   if (!($4_1 & 4 | 0)) {
    break block
   }
   if ((HEAPU8[$5_1 >> 0] | 0 | 0) != (239 | 0)) {
    break block
   }
   if ((HEAPU8[($5_1 + 1 | 0) >> 0] | 0 | 0) != (187 | 0)) {
    break block
   }
   $5_1 = $5_1 + ((HEAPU8[($5_1 + 2 | 0) >> 0] | 0 | 0) == (191 | 0) ? 3 : 0) | 0;
  }
  $6_1 = 0;
  block1 : {
   label : while (1) {
    if ($5_1 >>> 0 >= $1_1 >>> 0) {
     break block1
    }
    if ($6_1 >>> 0 >= $2_1 >>> 0) {
     break block1
    }
    $4_1 = HEAP8[$5_1 >> 0] | 0;
    $7_1 = $4_1 & 255 | 0;
    block3 : {
     block2 : {
      if (($4_1 | 0) < (0 | 0)) {
       break block2
      }
      if ($3_1 >>> 0 < $7_1 >>> 0) {
       break block1
      }
      $4_1 = 1;
      break block3;
     }
     if ($4_1 >>> 0 < -62 >>> 0) {
      break block1
     }
     block4 : {
      if ($4_1 >>> 0 > -33 >>> 0) {
       break block4
      }
      if (($1_1 - $5_1 | 0 | 0) < (2 | 0)) {
       break block1
      }
      $4_1 = HEAPU8[($5_1 + 1 | 0) >> 0] | 0;
      if (($4_1 & 192 | 0 | 0) != (128 | 0)) {
       break block1
      }
      if (($4_1 & 63 | 0 | (($7_1 << 6 | 0) & 1984 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break block1
      }
      $4_1 = 2;
      break block3;
     }
     block5 : {
      if ($4_1 >>> 0 > -17 >>> 0) {
       break block5
      }
      if (($1_1 - $5_1 | 0 | 0) < (3 | 0)) {
       break block1
      }
      $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
      $4_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
      block8 : {
       block7 : {
        block6 : {
         if (($7_1 | 0) == (237 | 0)) {
          break block6
         }
         if (($7_1 | 0) != (224 | 0)) {
          break block7
         }
         if (($4_1 & -32 | 0 | 0) == (-96 | 0)) {
          break block8
         }
         break block1;
        }
        if (($4_1 | 0) >= (-96 | 0)) {
         break block1
        }
        break block8;
       }
       if (($4_1 | 0) > (-65 | 0)) {
        break block1
       }
      }
      if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
       break block1
      }
      if ((($4_1 & 63 | 0) << 6 | 0 | (($7_1 << 12 | 0) & 61440 | 0) | 0 | ($8_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
       break block1
      }
      $4_1 = 3;
      break block3;
     }
     if ($4_1 >>> 0 > -12 >>> 0) {
      break block1
     }
     if (($1_1 - $5_1 | 0 | 0) < (4 | 0)) {
      break block1
     }
     $9_1 = HEAPU8[($5_1 + 3 | 0) >> 0] | 0;
     $8_1 = HEAPU8[($5_1 + 2 | 0) >> 0] | 0;
     $4_1 = HEAP8[($5_1 + 1 | 0) >> 0] | 0;
     block12 : {
      block10 : {
       switch ($7_1 + -240 | 0 | 0) {
       case 0:
        if ((($4_1 + 112 | 0) & 255 | 0) >>> 0 >= 48 >>> 0) {
         break block1
        }
        break block12;
       case 4:
        if (($4_1 | 0) >= (-112 | 0)) {
         break block1
        }
        break block12;
       default:
        break block10;
       };
      }
      if (($4_1 | 0) > (-65 | 0)) {
       break block1
      }
     }
     if (($8_1 & 192 | 0 | 0) != (128 | 0)) {
      break block1
     }
     if (($9_1 & 192 | 0 | 0) != (128 | 0)) {
      break block1
     }
     if ((($4_1 & 63 | 0) << 12 | 0 | (($7_1 << 18 | 0) & 1835008 | 0) | 0 | (($8_1 << 6 | 0) & 4032 | 0) | 0 | ($9_1 & 63 | 0) | 0) >>> 0 > $3_1 >>> 0) {
      break block1
     }
     $4_1 = 4;
    }
    $6_1 = $6_1 + 1 | 0;
    $5_1 = $5_1 + $4_1 | 0;
    continue label;
   };
  }
  return $5_1 - $0_1 | 0 | 0;
 }
 
 function $1479($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1480($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1481($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $6_1 = $1471($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1482($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  $6_1 = $1473($2_1 | 0, $3_1 | 0, $8_1 + 12 | 0 | 0, $5_1 | 0, $6_1 | 0, $8_1 + 8 | 0 | 0, 1114111 | 0, 0 | 0) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
  HEAP32[$7_1 >> 2] = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
  global$0 = $8_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1483($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP32[$4_1 >> 2] = $2_1;
  return 3 | 0;
 }
 
 function $1484($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1485($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $1486($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  return $1478($2_1 | 0, $3_1 | 0, $4_1 | 0, 1114111 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1487($0_1) {
  $0_1 = $0_1 | 0;
  return 4 | 0;
 }
 
 function $1488($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67127656;
  $1872($0_1 + 12 | 0 | 0) | 0;
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $1489($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1488($0_1 | 0) | 0 | 0, 24 | 0);
 }
 
 function $1490($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67127696;
  $1872($0_1 + 16 | 0 | 0) | 0;
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $1491($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1490($0_1 | 0) | 0 | 0, 28 | 0);
 }
 
 function $1492($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 8 | 0) >> 0] | 0 | 0;
 }
 
 function $1493($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0;
 }
 
 function $1494($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP8[($0_1 + 9 | 0) >> 0] | 0 | 0;
 }
 
 function $1495($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $1496($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $97($0_1 | 0, $1_1 + 12 | 0 | 0) | 0;
 }
 
 function $1497($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $97($0_1 | 0, $1_1 + 16 | 0 | 0) | 0;
 }
 
 function $1498($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $604($0_1 | 0, 67109873 | 0) | 0;
 }
 
 function $1499($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1500($0_1 | 0, 67127728 | 0) | 0;
 }
 
 function $1500($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = $779($0_1 | 0, $2_1 + 15 | 0 | 0, $2_1 + 14 | 0 | 0) | 0;
  $1892($0_1 | 0, $1_1 | 0, $1501($1_1 | 0) | 0 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1501($0_1) {
  $0_1 = $0_1 | 0;
  return $1805($0_1 | 0) | 0 | 0;
 }
 
 function $1502($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $604($0_1 | 0, 67109901 | 0) | 0;
 }
 
 function $1503($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1500($0_1 | 0, 67127748 | 0) | 0;
 }
 
 function $1504($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1505($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1505($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1878($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1506($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1806($0_1 | 0, $1_1 | 0);
 }
 
 function $1507($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 67144588 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 67144584 | 0) >> 2] | 0 | 0;
  }
  $1508();
  HEAP8[(0 + 67144588 | 0) >> 0] = 1;
  HEAP32[(0 + 67144584 | 0) >> 2] = 67144736;
  return 67144736 | 0;
 }
 
 function $1508() {
  block : {
   if (HEAPU8[(0 + 67144904 | 0) >> 0] | 0) {
    break block
   }
   $619(87 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67144904 | 0) >> 0] = 1;
  }
  $1504(67144736 | 0, 67108975 | 0) | 0;
  $1504(67144748 | 0, 67108982 | 0) | 0;
  $1504(67144760 | 0, 67108948 | 0) | 0;
  $1504(67144772 | 0, 67108956 | 0) | 0;
  $1504(67144784 | 0, 67108939 | 0) | 0;
  $1504(67144796 | 0, 67108989 | 0) | 0;
  $1504(67144808 | 0, 67108966 | 0) | 0;
  $1504(67144820 | 0, 67109686 | 0) | 0;
  $1504(67144832 | 0, 67109709 | 0) | 0;
  $1504(67144844 | 0, 67109878 | 0) | 0;
  $1504(67144856 | 0, 67109971 | 0) | 0;
  $1504(67144868 | 0, 67109046 | 0) | 0;
  $1504(67144880 | 0, 67109739 | 0) | 0;
  $1504(67144892 | 0, 67109133 | 0) | 0;
 }
 
 function $1509($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 67144904;
  label : while (1) {
   $1_1 = $1872($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (67144736 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $1510($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 67144596 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 67144592 | 0) >> 2] | 0 | 0;
  }
  $1511();
  HEAP8[(0 + 67144596 | 0) >> 0] = 1;
  HEAP32[(0 + 67144592 | 0) >> 2] = 67144912;
  return 67144912 | 0;
 }
 
 function $1511() {
  block : {
   if (HEAPU8[(0 + 67145080 | 0) >> 0] | 0) {
    break block
   }
   $619(88 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67145080 | 0) >> 0] = 1;
  }
  $1513(67144912 | 0, 67132220 | 0) | 0;
  $1513(67144924 | 0, 67132248 | 0) | 0;
  $1513(67144936 | 0, 67132276 | 0) | 0;
  $1513(67144948 | 0, 67132308 | 0) | 0;
  $1513(67144960 | 0, 67132348 | 0) | 0;
  $1513(67144972 | 0, 67132384 | 0) | 0;
  $1513(67144984 | 0, 67132412 | 0) | 0;
  $1513(67144996 | 0, 67132448 | 0) | 0;
  $1513(67145008 | 0, 67132464 | 0) | 0;
  $1513(67145020 | 0, 67132480 | 0) | 0;
  $1513(67145032 | 0, 67132496 | 0) | 0;
  $1513(67145044 | 0, 67132512 | 0) | 0;
  $1513(67145056 | 0, 67132528 | 0) | 0;
  $1513(67145068 | 0, 67132544 | 0) | 0;
 }
 
 function $1512($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 67145080;
  label : while (1) {
   $1_1 = $1889($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (67144912 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $1513($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1543($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1514($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 67144604 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 67144600 | 0) >> 2] | 0 | 0;
  }
  $1515();
  HEAP8[(0 + 67144604 | 0) >> 0] = 1;
  HEAP32[(0 + 67144600 | 0) >> 2] = 67145088;
  return 67145088 | 0;
 }
 
 function $1515() {
  block : {
   if (HEAPU8[(0 + 67145376 | 0) >> 0] | 0) {
    break block
   }
   $619(89 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67145376 | 0) >> 0] = 1;
  }
  $1504(67145088 | 0, 67108926 | 0) | 0;
  $1504(67145100 | 0, 67108917 | 0) | 0;
  $1504(67145112 | 0, 67109764 | 0) | 0;
  $1504(67145124 | 0, 67109733 | 0) | 0;
  $1504(67145136 | 0, 67108996 | 0) | 0;
  $1504(67145148 | 0, 67109907 | 0) | 0;
  $1504(67145160 | 0, 67108934 | 0) | 0;
  $1504(67145172 | 0, 67109088 | 0) | 0;
  $1504(67145184 | 0, 67109361 | 0) | 0;
  $1504(67145196 | 0, 67109344 | 0) | 0;
  $1504(67145208 | 0, 67109352 | 0) | 0;
  $1504(67145220 | 0, 67109371 | 0) | 0;
  $1504(67145232 | 0, 67109717 | 0) | 0;
  $1504(67145244 | 0, 67110003 | 0) | 0;
  $1504(67145256 | 0, 67109410 | 0) | 0;
  $1504(67145268 | 0, 67109298 | 0) | 0;
  $1504(67145280 | 0, 67108996 | 0) | 0;
  $1504(67145292 | 0, 67109690 | 0) | 0;
  $1504(67145304 | 0, 67109721 | 0) | 0;
  $1504(67145316 | 0, 67109770 | 0) | 0;
  $1504(67145328 | 0, 67109478 | 0) | 0;
  $1504(67145340 | 0, 67109123 | 0) | 0;
  $1504(67145352 | 0, 67109042 | 0) | 0;
  $1504(67145364 | 0, 67109999 | 0) | 0;
 }
 
 function $1516($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 67145376;
  label : while (1) {
   $1_1 = $1872($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (67145088 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $1517($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 67144612 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 67144608 | 0) >> 2] | 0 | 0;
  }
  $1518();
  HEAP8[(0 + 67144612 | 0) >> 0] = 1;
  HEAP32[(0 + 67144608 | 0) >> 2] = 67145392;
  return 67145392 | 0;
 }
 
 function $1518() {
  block : {
   if (HEAPU8[(0 + 67145680 | 0) >> 0] | 0) {
    break block
   }
   $619(90 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67145680 | 0) >> 0] = 1;
  }
  $1513(67145392 | 0, 67132560 | 0) | 0;
  $1513(67145404 | 0, 67132592 | 0) | 0;
  $1513(67145416 | 0, 67132628 | 0) | 0;
  $1513(67145428 | 0, 67132652 | 0) | 0;
  $1513(67145440 | 0, 67132676 | 0) | 0;
  $1513(67145452 | 0, 67132692 | 0) | 0;
  $1513(67145464 | 0, 67132712 | 0) | 0;
  $1513(67145476 | 0, 67132732 | 0) | 0;
  $1513(67145488 | 0, 67132760 | 0) | 0;
  $1513(67145500 | 0, 67132800 | 0) | 0;
  $1513(67145512 | 0, 67132832 | 0) | 0;
  $1513(67145524 | 0, 67132868 | 0) | 0;
  $1513(67145536 | 0, 67132904 | 0) | 0;
  $1513(67145548 | 0, 67132920 | 0) | 0;
  $1513(67145560 | 0, 67132936 | 0) | 0;
  $1513(67145572 | 0, 67132952 | 0) | 0;
  $1513(67145584 | 0, 67132676 | 0) | 0;
  $1513(67145596 | 0, 67132968 | 0) | 0;
  $1513(67145608 | 0, 67132984 | 0) | 0;
  $1513(67145620 | 0, 67133e3 | 0) | 0;
  $1513(67145632 | 0, 67133016 | 0) | 0;
  $1513(67145644 | 0, 67133032 | 0) | 0;
  $1513(67145656 | 0, 67133048 | 0) | 0;
  $1513(67145668 | 0, 67133064 | 0) | 0;
 }
 
 function $1519($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 67145680;
  label : while (1) {
   $1_1 = $1889($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (67145392 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $1520($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 67144620 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 67144616 | 0) >> 2] | 0 | 0;
  }
  $1521();
  HEAP8[(0 + 67144620 | 0) >> 0] = 1;
  HEAP32[(0 + 67144616 | 0) >> 2] = 67145696;
  return 67145696 | 0;
 }
 
 function $1521() {
  block : {
   if (HEAPU8[(0 + 67145720 | 0) >> 0] | 0) {
    break block
   }
   $619(91 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67145720 | 0) >> 0] = 1;
  }
  $1504(67145696 | 0, 67110056 | 0) | 0;
  $1504(67145708 | 0, 67110053 | 0) | 0;
 }
 
 function $1522($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 67145720;
  label : while (1) {
   $1_1 = $1872($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (67145696 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $1523($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (!(HEAPU8[(0 + 67144628 | 0) >> 0] | 0)) {
    break block
   }
   return HEAP32[(0 + 67144624 | 0) >> 2] | 0 | 0;
  }
  $1524();
  HEAP8[(0 + 67144628 | 0) >> 0] = 1;
  HEAP32[(0 + 67144624 | 0) >> 2] = 67145728;
  return 67145728 | 0;
 }
 
 function $1524() {
  block : {
   if (HEAPU8[(0 + 67145752 | 0) >> 0] | 0) {
    break block
   }
   $619(92 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67145752 | 0) >> 0] = 1;
  }
  $1513(67145728 | 0, 67133080 | 0) | 0;
  $1513(67145740 | 0, 67133092 | 0) | 0;
 }
 
 function $1525($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 67145752;
  label : while (1) {
   $1_1 = $1889($1_1 + -12 | 0 | 0) | 0;
   if (($1_1 | 0) != (67145728 | 0)) {
    continue label
   }
   break label;
  };
 }
 
 function $1526($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 67144629 | 0) >> 0] | 0) {
    break block
   }
   $619(93 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67144629 | 0) >> 0] = 1;
  }
  return 67135640 | 0;
 }
 
 function $1527($0_1) {
  $0_1 = $0_1 | 0;
  $1872(67135640 | 0) | 0;
 }
 
 function $1528($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 67144644 | 0) >> 0] | 0) {
    break block
   }
   $1500(67144632 | 0, 67127772 | 0) | 0;
   $619(94 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67144644 | 0) >> 0] = 1;
  }
  return 67144632 | 0;
 }
 
 function $1529($0_1) {
  $0_1 = $0_1 | 0;
  $1889(67144632 | 0) | 0;
 }
 
 function $1530($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 67144645 | 0) >> 0] | 0) {
    break block
   }
   $619(95 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67144645 | 0) >> 0] = 1;
  }
  return 67135652 | 0;
 }
 
 function $1531($0_1) {
  $0_1 = $0_1 | 0;
  $1872(67135652 | 0) | 0;
 }
 
 function $1532($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 67144660 | 0) >> 0] | 0) {
    break block
   }
   $1500(67144648 | 0, 67127808 | 0) | 0;
   $619(96 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67144660 | 0) >> 0] = 1;
  }
  return 67144648 | 0;
 }
 
 function $1533($0_1) {
  $0_1 = $0_1 | 0;
  $1889(67144648 | 0) | 0;
 }
 
 function $1534($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 67144676 | 0) >> 0] | 0) {
    break block
   }
   $604(67144664 | 0, 67110013 | 0) | 0;
   $619(97 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67144676 | 0) >> 0] = 1;
  }
  return 67144664 | 0;
 }
 
 function $1535($0_1) {
  $0_1 = $0_1 | 0;
  $1872(67144664 | 0) | 0;
 }
 
 function $1536($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 67144692 | 0) >> 0] | 0) {
    break block
   }
   $1500(67144680 | 0, 67127844 | 0) | 0;
   $619(98 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67144692 | 0) >> 0] = 1;
  }
  return 67144680 | 0;
 }
 
 function $1537($0_1) {
  $0_1 = $0_1 | 0;
  $1889(67144680 | 0) | 0;
 }
 
 function $1538($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 67144708 | 0) >> 0] | 0) {
    break block
   }
   $604(67144696 | 0, 67109482 | 0) | 0;
   $619(99 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67144708 | 0) >> 0] = 1;
  }
  return 67144696 | 0;
 }
 
 function $1539($0_1) {
  $0_1 = $0_1 | 0;
  $1872(67144696 | 0) | 0;
 }
 
 function $1540($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if (HEAPU8[(0 + 67144724 | 0) >> 0] | 0) {
    break block
   }
   $1500(67144712 | 0, 67127928 | 0) | 0;
   $619(100 | 0, 0 | 0, 67108864 | 0) | 0;
   HEAP8[(0 + 67144724 | 0) >> 0] = 1;
  }
  return 67144712 | 0;
 }
 
 function $1541($0_1) {
  $0_1 = $0_1 | 0;
  $1889(67144712 | 0) | 0;
 }
 
 function $1542($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($833() | 0 | 0)) {
    break block
   }
   $750(HEAP32[$0_1 >> 2] | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1543($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1895($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1544($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1545($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1546($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1547($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1548($0_1) {
  $0_1 = $0_1 | 0;
  $1549($0_1 + 8 | 0 | 0) | 0;
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $1549($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1550($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1548($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $1551($0_1) {
  $0_1 = $0_1 | 0;
  $1552($0_1 + 8 | 0 | 0) | 0;
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $1552($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1553($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1551($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $1554($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1555($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $1555($0_1) {
  $0_1 = $0_1 | 0;
  $1542($0_1 + 8 | 0 | 0) | 0;
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $1556($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1557($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $1557($0_1) {
  $0_1 = $0_1 | 0;
  $1542($0_1 + 8 | 0 | 0) | 0;
  return $767($0_1 | 0) | 0 | 0;
 }
 
 function $1558($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1559($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1560($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1561($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1562($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1563($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1564($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1565($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1566($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1567($0_1) {
  $0_1 = $0_1 | 0;
  $1855($767($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1568($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1570($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1569($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block : {
   if ($3_1 >>> 0 > ($572($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($573($3_1 | 0) | 0)) {
      break block1
     }
     $553($0_1 | 0, $3_1 | 0);
     $5_1 = $547($0_1 | 0) | 0;
     break block2;
    }
    $575($4_1 + 8 | 0 | 0, $515($0_1 | 0) | 0 | 0, ($574($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $576($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $577($0_1 | 0, $5_1 | 0);
    $578($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $579($0_1 | 0, $3_1 | 0);
   }
   $5_1 = $1571($1_1 | 0, $2_1 | 0, $509($5_1 | 0) | 0 | 0) | 0;
   HEAP8[($4_1 + 7 | 0) >> 0] = 0;
   $554($5_1 | 0, $4_1 + 7 | 0 | 0);
   $504($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $581($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1570($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $1571($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = $595($0_1 | 0) | 0;
  $0_1 = $1_1 - $0_1 | 0;
  $385($2_1 | 0, $5_1 | 0, $0_1 | 0) | 0;
  return $2_1 + $0_1 | 0 | 0;
 }
 
 function $1572($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1573($0_1) {
  $0_1 = $0_1 | 0;
  return $1576($0_1 | 0) | 0 | 0;
 }
 
 function $1574($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1578($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1575($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block : {
   if ($3_1 >>> 0 > ($1579($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($1580($3_1 | 0) | 0)) {
      break block1
     }
     $1171($0_1 | 0, $3_1 | 0);
     $5_1 = $1170($0_1 | 0) | 0;
     break block2;
    }
    $1582($4_1 + 8 | 0 | 0, $1181($0_1 | 0) | 0 | 0, ($1581($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $1583($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1584($0_1 | 0, $5_1 | 0);
    $1585($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1169($0_1 | 0, $3_1 | 0);
   }
   $5_1 = $1586($1_1 | 0, $2_1 | 0, $1178($5_1 | 0) | 0 | 0) | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   $1168($5_1 | 0, $4_1 + 4 | 0 | 0);
   $1062($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1587($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1576($0_1) {
  $0_1 = $0_1 | 0;
  return $1577($0_1 | 0) | 0 | 0;
 }
 
 function $1577($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1578($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1579($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1588($1078($0_1 | 0) | 0 | 0) | 0;
  return ($0_1 >>> ($0_1 >>> 0 > (($583() | 0) >>> 1 | 0) >>> 0) | 0) + -8 | 0 | 0;
 }
 
 function $1580($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 >>> 0 < 2 >>> 0 | 0;
 }
 
 function $1581($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $7_1 = 0;
  $1_1 = 1;
  block : {
   if ($0_1 >>> 0 < 2 >>> 0) {
    break block
   }
   $0_1 = $1592($0_1 + 1 | 0 | 0) | 0;
   $7_1 = $0_1;
   $0_1 = $0_1 + -1 | 0;
   $1_1 = ($0_1 | 0) == (2 | 0) ? $7_1 : $0_1;
  }
  return $1_1 | 0;
 }
 
 function $1582($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1590($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1584($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[($1082($0_1 | 0) | 0) >> 2] = $1_1;
 }
 
 function $1585($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1082($0_1 | 0) | 0;
  HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) & -2147483648 | 0 | ($1_1 & 2147483647 | 0) | 0;
  $0_1 = $1082($0_1 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = HEAP32[($0_1 + 8 | 0) >> 2] | 0 | -2147483648 | 0;
 }
 
 function $1586($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = $998($0_1 | 0) | 0;
  $0_1 = $1_1 - $0_1 | 0;
  $458($2_1 | 0, $5_1 | 0, $0_1 >> 2 | 0 | 0) | 0;
  return $2_1 + $0_1 | 0 | 0;
 }
 
 function $1587($0_1) {
  $0_1 = $0_1 | 0;
  $584(67109801 | 0);
  wasm2js_trap();
 }
 
 function $1588($0_1) {
  $0_1 = $0_1 | 0;
  return ($583() | 0) >>> 2 | 0 | 0;
 }
 
 function $1589($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1590($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1596($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1591($0_1) {
  $0_1 = $0_1 | 0;
  return $1598($0_1 | 0) | 0 | 0;
 }
 
 function $1592($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + 1 | 0) & -2 | 0 | 0;
 }
 
 function $1593($0_1) {
  $0_1 = $0_1 | 0;
  return $1594($0_1 | 0) | 0 | 0;
 }
 
 function $1594($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1595($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1596($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1597($1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1597($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 <= ($1588($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $590();
   wasm2js_trap();
  }
  return $591($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1598($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1599($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1600($0_1 | 0, $509($508($0_1 | 0) | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
 }
 
 function $1600($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   $4_1 = $525($0_1 | 0) | 0;
   if ($2_1 >>> 0 <= $4_1 >>> 0) {
    break block
   }
   $521($0_1 | 0, $2_1 - $4_1 | 0 | 0);
  }
  $1113($0_1 | 0, $2_1 | 0);
  HEAP8[($3_1 + 15 | 0) >> 0] = 0;
  $554($1_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  block1 : {
   if ($2_1 >>> 0 >= $4_1 >>> 0) {
    break block1
   }
   $523($0_1 | 0, $4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1601($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  block : {
   $8_1 = $572($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($8_1 - $1_1 | 0) >>> 0) {
    break block
   }
   $9_1 = $508($0_1 | 0) | 0;
   block1 : {
    if ($1_1 >>> 0 >= (($8_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break block1
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($7_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $8_1 = ($574(HEAP32[($609($7_1 + 4 | 0 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $513($0_1 | 0);
   $575($7_1 + 4 | 0 | 0, $515($0_1 | 0) | 0 | 0, $8_1 | 0);
   $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   $576($8_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   block2 : {
    if (!$4_1) {
     break block2
    }
    $385($509($8_1 | 0) | 0 | 0, $509($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   block3 : {
    $2_1 = $5_1 + $4_1 | 0;
    if (($3_1 | 0) == ($2_1 | 0)) {
     break block3
    }
    $385((($509($8_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($509($9_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
   }
   block4 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break block4
    }
    $551($515($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $577($0_1 | 0, $8_1 | 0);
   $578($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $581($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1602($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1603($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1604($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1604($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $558($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1605($0_1) {
  $0_1 = $0_1 | 0;
  return (HEAP32[(($1081($0_1 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function $1606($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1607($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($509($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1608($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $295($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1609($0_1) {
  $0_1 = $0_1 | 0;
  return $509($0_1 | 0) | 0 | 0;
 }
 
 function $1610($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($595($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1611($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $295($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1612($0_1) {
  $0_1 = $0_1 | 0;
  return $595($0_1 | 0) | 0 | 0;
 }
 
 function $1613($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($1178($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1614($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $760($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1615($0_1) {
  $0_1 = $0_1 | 0;
  return $1178($0_1 | 0) | 0 | 0;
 }
 
 function $1616($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 + ($1_1 - ($998($0_1 | 0) | 0) | 0) | 0 | 0;
 }
 
 function $1617($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $760($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1618($0_1) {
  $0_1 = $0_1 | 0;
  return $998($0_1 | 0) | 0 | 0;
 }
 
 function $1619($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1620($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1621($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  block : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -1 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break block
    }
    $1622($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1622($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1623(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $1623($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1025($0_1 | 0, $1_1 | 0);
 }
 
 function $1624($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  block : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -4 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break block
    }
    $1625($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1625($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1626(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $1626($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1627($0_1 | 0, $1_1 | 0);
 }
 
 function $1627($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $1628($0_1) {
  $0_1 = $0_1 | 0;
  return $1629($1081($0_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1629($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1630($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1631($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1633($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1632($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1634($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1635($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1636($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1631($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1637($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1632($0_1) {
  $0_1 = $0_1 | 0;
  return $1638($0_1 | 0) | 0 | 0;
 }
 
 function $1633($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  block : {
   label : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    $4_1 = HEAP8[$2_1 >> 0] | 0;
    $443($442($5_1 + 12 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
    $2_1 = $2_1 + 1 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
    $444($5_1 + 12 | 0 | 0) | 0;
    continue label;
   };
  }
  $1636($0_1 | 0, $5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1634($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1640($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1635($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1641($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1636($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1639($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1637($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $878($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $878($2_1 | 0) | 0;
  $1642($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1638($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1639($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1640($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $880($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1641($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1642($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1643($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1644($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1646($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $1645($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1647($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1648($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1649($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1644($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1650($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1645($0_1) {
  $0_1 = $0_1 | 0;
  return $1651($0_1 | 0) | 0 | 0;
 }
 
 function $1646($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
  block : {
   label : while (1) {
    if (($2_1 | 0) == ($3_1 | 0)) {
     break block
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    $499($498($5_1 + 12 | 0 | 0) | 0 | 0, $4_1 | 0) | 0;
    $2_1 = $2_1 + 4 | 0;
    HEAP32[($5_1 + 8 | 0) >> 2] = $2_1;
    $500($5_1 + 12 | 0 | 0) | 0;
    continue label;
   };
  }
  $1649($0_1 | 0, $5_1 + 8 | 0 | 0, $5_1 + 12 | 0 | 0);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1647($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1653($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1648($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1654($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1649($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1652($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1650($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $889($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $889($2_1 | 0) | 0;
  $1655($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1651($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1652($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1653($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $891($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1654($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1_1 | 0;
 }
 
 function $1655($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1656($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1657($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1658($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1659($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1660($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1661($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  $1_1 = 0;
  block : {
   if ($1662($3_1 + 3 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
    break block
   }
   $1_1 = $1662($3_1 + 2 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1662($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $1663($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1664($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1665($0_1) {
  $0_1 = $0_1 | 0;
  return $1668($0_1 | 0) | 0 | 0;
 }
 
 function $1666($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $1667($0_1 | 0, $2_1 | 0, $1_1 - $0_1 | 0 | 0) | 0 | 0;
 }
 
 function $1667($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return !($294($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0) | 0;
 }
 
 function $1668($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1669($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1669($0_1) {
  $0_1 = $0_1 | 0;
  return $1670($0_1 | 0) | 0 | 0;
 }
 
 function $1670($0_1) {
  $0_1 = $0_1 | 0;
  return $1671(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1671($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $509($903($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1672($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1673($0_1) {
  $0_1 = $0_1 | 0;
  return $1675($0_1 | 0) | 0 | 0;
 }
 
 function $1674($0_1) {
  $0_1 = $0_1 | 0;
  return $618($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1675($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1676($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1677($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1678($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8_1 = 0, $9_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  block : {
   $8_1 = $1579($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($8_1 - $1_1 | 0) >>> 0) {
    break block
   }
   $9_1 = $938($0_1 | 0) | 0;
   block1 : {
    if ($1_1 >>> 0 >= (($8_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break block1
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($7_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $8_1 = ($1581(HEAP32[($609($7_1 + 4 | 0 | 0, $7_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $1602($0_1 | 0);
   $1582($7_1 + 4 | 0 | 0, $1181($0_1 | 0) | 0 | 0, $8_1 | 0);
   $8_1 = HEAP32[($7_1 + 4 | 0) >> 2] | 0;
   $1583($8_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   block2 : {
    if (!$4_1) {
     break block2
    }
    $458($1178($8_1 | 0) | 0 | 0, $1178($9_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   block3 : {
    $2_1 = $5_1 + $4_1 | 0;
    if (($3_1 | 0) == ($2_1 | 0)) {
     break block3
    }
    $4_1 = $4_1 << 2 | 0;
    $458((($1178($8_1 | 0) | 0) + $4_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1178($9_1 | 0) | 0) + $4_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $3_1 - $2_1 | 0 | 0) | 0;
   }
   block4 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break block4
    }
    $1603($1181($0_1 | 0) | 0 | 0, $9_1 | 0, $1_1 | 0);
   }
   $1584($0_1 | 0, $8_1 | 0);
   $1585($0_1 | 0, HEAP32[($7_1 + 8 | 0) >> 2] | 0 | 0);
   global$0 = $7_1 + 16 | 0;
   return;
  }
  $1587($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1679($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0) >> 2 | 0 | 0;
 }
 
 function $1680($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  $1_1 = 0;
  block : {
   if ($1683($3_1 + 3 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 12 | 0 | 0) | 0) {
    break block
   }
   $1_1 = $1683($3_1 + 2 | 0 | 0, $3_1 + 4 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1681($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1684($1572($0_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1682($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1685($0_1 | 0, $1_1 | 0, $2_1 | 0, $1174($1_1 | 0, $2_1 | 0) | 0 | 0);
 }
 
 function $1683($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return (HEAP32[$1_1 >> 2] | 0) >>> 0 < (HEAP32[$2_1 >> 2] | 0) >>> 0 | 0;
 }
 
 function $1684($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $0_1 | 0;
 }
 
 function $1685($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  block : {
   if ($3_1 >>> 0 > ($1579($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($1580($3_1 | 0) | 0)) {
      break block1
     }
     $1171($0_1 | 0, $3_1 | 0);
     $5_1 = $1170($0_1 | 0) | 0;
     break block2;
    }
    $1582($4_1 + 8 | 0 | 0, $1181($0_1 | 0) | 0 | 0, ($1581($3_1 | 0) | 0) + 1 | 0 | 0);
    $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    $1583($5_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1584($0_1 | 0, $5_1 | 0);
    $1585($0_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
    $1169($0_1 | 0, $3_1 | 0);
   }
   $5_1 = $1179($1_1 | 0, $2_1 | 0, $1178($5_1 | 0) | 0 | 0) | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = 0;
   $1168($5_1 | 0, $4_1 + 4 | 0 | 0);
   $1062($0_1 | 0, $3_1 | 0);
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $1587($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1686($0_1) {
  $0_1 = $0_1 | 0;
  return $1689($0_1 | 0) | 0 | 0;
 }
 
 function $1687($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  return $1688($0_1 | 0, $2_1 | 0, ($1_1 - $0_1 | 0) >> 2 | 0 | 0) | 0 | 0;
 }
 
 function $1688($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return !($294($0_1 | 0, $1_1 | 0, $2_1 << 2 | 0 | 0) | 0) | 0;
 }
 
 function $1689($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1690($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1690($0_1) {
  $0_1 = $0_1 | 0;
  return $1691($0_1 | 0) | 0 | 0;
 }
 
 function $1691($0_1) {
  $0_1 = $0_1 | 0;
  return $1692(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1692($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1178($940($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1693($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) + ($1_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1694($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1695($0_1 | 0, $1_1 | 0);
 }
 
 function $1695($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1181($1_1 | 0) | 0;
  $1181($0_1 | 0) | 0;
 }
 
 function $1696($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1697($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1698($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1699($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $878($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1700($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $880($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1701($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1698($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1702($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1699($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1703($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
 }
 
 function $1700($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1705($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1701($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1704($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1702($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1706($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1706($2_1 | 0) | 0;
  $1707($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1703($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $2_1 - $1_1 | 0;
  $389($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $2_1 | 0;
  $1712($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1704($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1705($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1714($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1706($0_1) {
  $0_1 = $0_1 | 0;
  return $1708($0_1 | 0) | 0 | 0;
 }
 
 function $1707($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1708($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1709($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1709($0_1) {
  $0_1 = $0_1 | 0;
  return $1710($0_1 | 0) | 0 | 0;
 }
 
 function $1710($0_1) {
  $0_1 = $0_1 | 0;
  return $1711(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1711($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $595($1135($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1712($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1713($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1713($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1714($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1715($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1715($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1218($2_1 + 12 | 0 | 0, $1_1 - ($1709($2_1 + 12 | 0 | 0) | 0) | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1716($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1717($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1718($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1719($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $889($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1720($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $891($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1721($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1718($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1722($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1719($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $1723($0_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
 }
 
 function $1720($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1725($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1721($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1724($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1722($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $1726($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $1726($2_1 | 0) | 0;
  $1727($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1723($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $2_1 - $1_1 | 0;
  $461($3_1 | 0, $1_1 | 0, $2_1 >> 2 | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $3_1 + $2_1 | 0;
  $1732($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1724($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1725($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1734($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1726($0_1) {
  $0_1 = $0_1 | 0;
  return $1728($0_1 | 0) | 0 | 0;
 }
 
 function $1727($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1728($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1729($1_1 + 12 | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1729($0_1) {
  $0_1 = $0_1 | 0;
  return $1730($0_1 | 0) | 0 | 0;
 }
 
 function $1730($0_1) {
  $0_1 = $0_1 | 0;
  return $1731(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $1731($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $998($1203($1_1 + 12 | 0 | 0) | 0 | 0) | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1732($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1733($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1733($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1734($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1735($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1735($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  $0_1 = $1233($2_1 + 12 | 0 | 0, ($1_1 - ($1729($2_1 + 12 | 0 | 0) | 0) | 0) >> 2 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1736($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1737($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1738($0_1) {
  $0_1 = $0_1 | 0;
  return $1750($0_1 | 0) | 0 | 0;
 }
 
 function $1739($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $1740($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[($1_1 + 12 | 0) >> 2] = $1752($1751($0_1 | 0) | 0 | 0) | 0;
  HEAP32[($1_1 + 8 | 0) >> 2] = $423() | 0;
  $0_1 = HEAP32[($534($1_1 + 12 | 0 | 0, $1_1 + 8 | 0 | 0) | 0) >> 2] | 0;
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1741($0_1) {
  $0_1 = $0_1 | 0;
  $584(67109302 | 0);
  wasm2js_trap();
 }
 
 function $1742($0_1) {
  $0_1 = $0_1 | 0;
  return $1754($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1743($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1753($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1744($0_1) {
  $0_1 = $0_1 | 0;
  return $1755($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1745($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $1746($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1747($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1748($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1749($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1766($1_1 | 0) | 0;
 }
 
 function $1750($0_1) {
  $0_1 = $0_1 | 0;
  HEAP8[($0_1 + 120 | 0) >> 0] = 0;
  return $0_1 | 0;
 }
 
 function $1751($0_1) {
  $0_1 = $0_1 | 0;
  return $1757($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1752($0_1) {
  $0_1 = $0_1 | 0;
  return $1756($0_1 | 0) | 0 | 0;
 }
 
 function $1753($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1759($1_1 | 0, $2_1 | 0, 0 | 0) | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1754($0_1) {
  $0_1 = $0_1 | 0;
  return $1764($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1755($0_1) {
  $0_1 = $0_1 | 0;
  return $1765($0_1 | 0) | 0 | 0;
 }
 
 function $1756($0_1) {
  $0_1 = $0_1 | 0;
  return 1073741823 | 0;
 }
 
 function $1757($0_1) {
  $0_1 = $0_1 | 0;
  return $1758($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1758($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1759($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    if ($1_1 >>> 0 > 30 >>> 0) {
     break block
    }
    if ((HEAPU8[($0_1 + 120 | 0) >> 0] | 0) & 1 | 0) {
     break block
    }
    HEAP8[($0_1 + 120 | 0) >> 0] = 1;
    break block1;
   }
   $0_1 = $1761($1760($3_1 + 15 | 0 | 0) | 0 | 0, $1_1 | 0) | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1760($0_1) {
  $0_1 = $0_1 | 0;
  return $1762($0_1 | 0) | 0 | 0;
 }
 
 function $1761($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 <= ($1763($0_1 | 0) | 0) >>> 0) {
    break block
   }
   $590();
   wasm2js_trap();
  }
  return $591($1_1 << 2 | 0 | 0, 4 | 0) | 0 | 0;
 }
 
 function $1762($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1763($0_1) {
  $0_1 = $0_1 | 0;
  return ($583() | 0) >>> 2 | 0 | 0;
 }
 
 function $1764($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1765($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1766($0_1) {
  $0_1 = $0_1 | 0;
  return $1767($0_1 | 0) | 0 | 0;
 }
 
 function $1767($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 0;
  return $0_1 | 0;
 }
 
 function $1768($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == ($2_1 | 0)) {
     break block
    }
    $2_1 = $2_1 + -4 | 0;
    $1769($1742($0_1 | 0) | 0 | 0, $1748($2_1 | 0) | 0 | 0);
    continue label;
   };
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $1_1;
 }
 
 function $1769($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1770($1_1 | 0);
 }
 
 function $1770($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1771($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1773($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1772($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, $33_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  block : {
   $3_1 = $1740($0_1 | 0) | 0;
   if ($1_1 >>> 0 > $3_1 >>> 0) {
    break block
   }
   block1 : {
    $1_1 = $1771($0_1 | 0) | 0;
    if ($1_1 >>> 0 >= ($3_1 >>> 1 | 0) >>> 0) {
     break block1
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1 << 1 | 0;
    $3_1 = HEAP32[($609($2_1 + 8 | 0 | 0, $2_1 + 12 | 0 | 0) | 0) >> 2] | 0;
   }
   global$0 = $2_1 + 16 | 0;
   return $3_1 | 0;
  }
  $1741($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1773($0_1) {
  $0_1 = $0_1 | 0;
  return $1776($0_1 + 8 | 0 | 0) | 0 | 0;
 }
 
 function $1774($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1775($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1778($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1776($0_1) {
  $0_1 = $0_1 | 0;
  return $1777($0_1 | 0) | 0 | 0;
 }
 
 function $1777($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1778($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    if (($1_1 | 0) != ($0_1 | 0)) {
     break block
    }
    HEAP8[($0_1 + 120 | 0) >> 0] = 0;
    break block1;
   }
   $1779($1760($3_1 + 15 | 0 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1779($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $558($1_1 | 0, $2_1 << 2 | 0 | 0, 4 | 0);
 }
 
 function $1780($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1781($0_1) {
  $0_1 = $0_1 | 0;
  $1369($0_1 | 0) | 0;
 }
 
 function $1782($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1783($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  $1787($0_1 + 12 | 0 | 0, $4_1 + 12 | 0 | 0, $3_1 | 0) | 0;
  block1 : {
   block : {
    if ($1_1) {
     break block
    }
    $1_1 = 0;
    break block1;
   }
   $1743($4_1 + 4 | 0 | 0, $1788($0_1 | 0) | 0 | 0, $1_1 | 0);
   $1_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
   $5_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  }
  HEAP32[$0_1 >> 2] = $5_1;
  $3_1 = $5_1 + ($2_1 << 2 | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1;
  HEAP32[($1789($0_1 | 0) | 0) >> 2] = $5_1 + ($1_1 << 2 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1784($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = $1790($2_1 + 4 | 0 | 0, $0_1 + 8 | 0 | 0, $1_1 | 0) | 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  block : {
   label : while (1) {
    if (($3_1 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
     break block
    }
    $1749($1788($0_1 | 0) | 0 | 0, $1748(HEAP32[$1_1 >> 2] | 0 | 0) | 0 | 0);
    $3_1 = (HEAP32[$1_1 >> 2] | 0) + 4 | 0;
    HEAP32[$1_1 >> 2] = $3_1;
    continue label;
   };
  }
  $1791($1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1785($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1774($0_1 | 0);
  $2_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $2_1 = (HEAP32[($1_1 + 4 | 0) >> 2] | 0) + ((HEAP32[$0_1 >> 2] | 0) - $2_1 | 0) | 0;
  $1792($1742($0_1 | 0) | 0 | 0, $1748(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0, $1748(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0, $1748($2_1 | 0) | 0 | 0);
  HEAP32[($1_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  $1793($0_1 | 0, $1_1 + 4 | 0 | 0);
  $1793($0_1 + 4 | 0 | 0, $1_1 + 8 | 0 | 0);
  $1793($1744($0_1 | 0) | 0 | 0, $1789($1_1 | 0) | 0 | 0);
  HEAP32[$1_1 >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
  $1745($0_1 | 0, $1322($0_1 | 0) | 0 | 0);
 }
 
 function $1786($0_1) {
  $0_1 = $0_1 | 0;
  $1794($0_1 | 0);
  block : {
   if (!(HEAP32[$0_1 >> 2] | 0)) {
    break block
   }
   $1775($1788($0_1 | 0) | 0 | 0, HEAP32[$0_1 >> 2] | 0 | 0, $1795($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1787($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1737($0_1 | 0, $1_1 | 0) | 0;
  $1796($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1788($0_1) {
  $0_1 = $0_1 | 0;
  return $1797($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1789($0_1) {
  $0_1 = $0_1 | 0;
  return $1798($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1790($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $3_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 + ($2_1 << 2 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1791($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[(HEAP32[($0_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[$0_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1792($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   $2_1 = $2_1 - $1_1 | 0;
   if (!$2_1) {
    break block
   }
   wasm2js_memory_copy($3_1, $1_1, $2_1);
  }
 }
 
 function $1793($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2] | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[$1_1 >> 2] = $2_1;
 }
 
 function $1794($0_1) {
  $0_1 = $0_1 | 0;
  $1800($0_1 | 0, HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0);
 }
 
 function $1795($0_1) {
  $0_1 = $0_1 | 0;
  return ((HEAP32[($1801($0_1 | 0) | 0) >> 2] | 0) - (HEAP32[$0_1 >> 2] | 0) | 0) >> 2 | 0 | 0;
 }
 
 function $1796($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1797($0_1) {
  $0_1 = $0_1 | 0;
  return $1799($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1798($0_1) {
  $0_1 = $0_1 | 0;
  return $1765($0_1 | 0) | 0 | 0;
 }
 
 function $1799($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1802($0_1 | 0, $1_1 | 0);
 }
 
 function $1801($0_1) {
  $0_1 = $0_1 | 0;
  return $1803($0_1 + 12 | 0 | 0) | 0 | 0;
 }
 
 function $1802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  block : {
   label : while (1) {
    if (($1_1 | 0) == (HEAP32[($0_1 + 8 | 0) >> 2] | 0 | 0)) {
     break block
    }
    $2_1 = $1788($0_1 | 0) | 0;
    $3_1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) + -4 | 0;
    HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
    $1769($2_1 | 0, $1748($3_1 | 0) | 0 | 0);
    continue label;
   };
  }
 }
 
 function $1803($0_1) {
  $0_1 = $0_1 | 0;
  return $1777($0_1 | 0) | 0 | 0;
 }
 
 function $1804($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($512($1_1 | 0) | 0) {
    break block
   }
   $513($1_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $1805($0_1) {
  $0_1 = $0_1 | 0;
  return $751($0_1 | 0) | 0 | 0;
 }
 
 function $1806($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
  block : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break block
   }
   label : while (1) {
    $1_1 = $1_1 + -4 | 0;
    HEAP32[($2_1 + 8 | 0) >> 2] = $1_1;
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break block
    }
    $1807($2_1 + 12 | 0 | 0, $2_1 + 8 | 0 | 0);
    $0_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = $0_1;
    $1_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1807($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1808(HEAP32[$0_1 >> 2] | 0 | 0, HEAP32[$1_1 >> 2] | 0 | 0);
 }
 
 function $1808($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $511($0_1 | 0, $1_1 | 0);
 }
 
 function $1809($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1810($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1811($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1812($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1813($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1814($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67133112;
  return $0_1 | 0;
 }
 
 function $1815($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67133148;
  return $0_1 | 0;
 }
 
 function $1816($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = $833() | 0;
  return $0_1 | 0;
 }
 
 function $1817($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1818($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1820($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1819($0_1) {
  $0_1 = $0_1 | 0;
  $1821($0_1 | 0);
 }
 
 function $1820($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $0_1 | 0;
 }
 
 function $1821($0_1) {
  $0_1 = $0_1 | 0;
  $1823($1822(HEAP32[$0_1 >> 2] | 0 | 0) | 0 | 0);
 }
 
 function $1822($0_1) {
  $0_1 = $0_1 | 0;
  return $1825($0_1 | 0) | 0 | 0;
 }
 
 function $1823($0_1) {
  $0_1 = $0_1 | 0;
  $1824($0_1 | 0);
 }
 
 function $1824($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[((HEAP32[$0_1 >> 2] | 0) + 4 | 0) >> 2] = $1826() | 0;
 }
 
 function $1825($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1826() {
  var $0_1 = 0;
  $0_1 = (HEAP32[(0 + 67144500 | 0) >> 2] | 0) + 1 | 0;
  HEAP32[(0 + 67144500 | 0) >> 2] = $0_1;
  return $0_1 | 0;
 }
 
 function $1827($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1_1 = $1830($0_1 | 0, $1_1 | 0) | 0;
  $617($1_1 + 4 | 0 | 0, $2_1 | 0) | 0;
  return $1_1 | 0;
 }
 
 function $1828($0_1) {
  $0_1 = $0_1 | 0;
  return $1831($0_1 | 0) | 0 | 0;
 }
 
 function $1829($0_1) {
  $0_1 = $0_1 | 0;
  return $618($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1830($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1831($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1832($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   $4_1 = $845($0_1 | 0) | 0;
   if ($2_1 >>> 0 <= $4_1 >>> 0) {
    break block
   }
   $1177($0_1 | 0, $2_1 - $4_1 | 0 | 0);
  }
  $1180($0_1 | 0, $2_1 | 0);
  HEAP32[($3_1 + 12 | 0) >> 2] = 0;
  $1168($1_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
  block1 : {
   if ($2_1 >>> 0 >= $4_1 >>> 0) {
    break block1
   }
   $1172($0_1 | 0, $4_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1833($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1834() {
  return $1835() | 0 | 0;
 }
 
 function $1835() {
  return -2147483648 | 0;
 }
 
 function $1836() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1838() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1837() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1839() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1838() {
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0 | 0;
 }
 
 function $1839() {
  i64toi32_i32$HIGH_BITS = 2147483647;
  return -1 | 0;
 }
 
 function $1840() {
  return $1841() | 0 | 0;
 }
 
 function $1841() {
  return 65535 | 0;
 }
 
 function $1842() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1843() | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $1843() {
  i64toi32_i32$HIGH_BITS = -1;
  return -1 | 0;
 }
 
 function $1844($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround($763($0_1 | 0, $1_1 | 0, $833() | 0 | 0)));
 }
 
 function $1845($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return +(+$764($0_1 | 0, $1_1 | 0, $833() | 0 | 0));
 }
 
 function $1846($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, $4$hi = 0, $16_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $765($3_1 | 0, $1_1 | 0, $2_1 | 0, $833() | 0 | 0);
  i64toi32_i32$0 = HEAP32[$3_1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  $4_1 = i64toi32_i32$0;
  $4$hi = i64toi32_i32$1;
  i64toi32_i32$1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  $16_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $0_1;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $16_1;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  HEAP32[i64toi32_i32$1 >> 2] = $4_1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1847($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 - $0_1 | 0 | 0) / (12 | 0) | 0 | 0;
 }
 
 function $1848($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1849($0_1) {
  $0_1 = $0_1 | 0;
  wasm2js_trap();
 }
 
 function $1850($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  block : {
   if ($0_1 & 3 | 0) {
    break block
   }
   if (($1_1 >>> 0) % ($0_1 >>> 0) | 0) {
    break block
   }
   $0_1 = $346($2_1 + 12 | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
   $3_1 = (wasm2js_i32$0 = 0, wasm2js_i32$1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0, wasm2js_i32$2 = $0_1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $1851($0_1) {
  $0_1 = $0_1 | 0;
  block : {
   $0_1 = $1852($0_1 | 0) | 0;
   if ($0_1) {
    break block
   }
   $1853();
  }
  return $0_1 | 0;
 }
 
 function $1852($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  $1_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
  block : {
   label : while (1) {
    $2_1 = $340($1_1 | 0) | 0;
    if ($2_1) {
     break block
    }
    $0_1 = $1939() | 0;
    if (!$0_1) {
     break block
    }
    FUNCTION_TABLE[$0_1 | 0]();
    continue label;
   };
  }
  return $2_1 | 0;
 }
 
 function $1853() {
  $1863();
  wasm2js_trap();
 }
 
 function $1854($0_1) {
  $0_1 = $0_1 | 0;
  $342($0_1 | 0);
 }
 
 function $1855($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1854($0_1 | 0);
 }
 
 function $1856($0_1) {
  $0_1 = $0_1 | 0;
  $1854($0_1 | 0);
 }
 
 function $1857($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   $1_1 = $1858($0_1 | 0, $1_1 | 0) | 0;
   if ($1_1) {
    break block
   }
   $1853();
  }
  return $1_1 | 0;
 }
 
 function $1858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = $1_1 >>> 0 > 4 >>> 0 ? $1_1 : 4;
  $0_1 = $0_1 >>> 0 > 1 >>> 0 ? $0_1 : 1;
  block : {
   label : while (1) {
    $3_1 = $1859($2_1 | 0, $0_1 | 0) | 0;
    if ($3_1) {
     break block
    }
    $1_1 = $1939() | 0;
    if (!$1_1) {
     break block
    }
    FUNCTION_TABLE[$1_1 | 0]();
    continue label;
   };
  }
  return $3_1 | 0;
 }
 
 function $1859($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = (($0_1 + $1_1 | 0) + -1 | 0) & (0 - $0_1 | 0) | 0;
  return $1850($0_1 | 0, ($1_1 >>> 0 > $2_1 >>> 0 ? $1_1 : $2_1) | 0) | 0 | 0;
 }
 
 function $1860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1861($0_1 | 0);
 }
 
 function $1861($0_1) {
  $0_1 = $0_1 | 0;
  $342($0_1 | 0);
 }
 
 function $1862($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1860($0_1 | 0, $2_1 | 0);
 }
 
 function $1863() {
  $339();
  wasm2js_trap();
 }
 
 function $1864($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67134100 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1865($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = $291($1_1 | 0) | 0;
  $3_1 = $1851($2_1 + 13 | 0 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$3_1 >> 2] = $2_1;
  $3_1 = $1866($3_1 | 0) | 0;
  block : {
   $2_1 = $2_1 + 1 | 0;
   if (!$2_1) {
    break block
   }
   wasm2js_memory_copy($3_1, $1_1, $2_1);
  }
  HEAP32[$0_1 >> 2] = $3_1;
  return $0_1 | 0;
 }
 
 function $1866($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + 12 | 0 | 0;
 }
 
 function $1867($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $1864($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 67134212 + 8 | 0;
  $1865($0_1 + 4 | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $1868($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $1869($0_1) {
  $0_1 = $0_1 | 0;
  $339();
  wasm2js_trap();
 }
 
 function $1870($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $389($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1871($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  block : {
   $9_1 = $572($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0) {
    break block
   }
   $10_1 = $508($0_1 | 0) | 0;
   block1 : {
    if ($1_1 >>> 0 >= (($9_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break block1
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($8_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $9_1 = ($574(HEAP32[($609($8_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $513($0_1 | 0);
   $575($8_1 + 4 | 0 | 0, $515($0_1 | 0) | 0 | 0, $9_1 | 0);
   $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
   $576($9_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   block2 : {
    if (!$4_1) {
     break block2
    }
    $385($509($9_1 | 0) | 0 | 0, $509($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   block3 : {
    if (!$6_1) {
     break block3
    }
    $385(($509($9_1 | 0) | 0) + $4_1 | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   $7_1 = $5_1 + $4_1 | 0;
   $2_1 = $3_1 - $7_1 | 0;
   block4 : {
    if (($3_1 | 0) == ($7_1 | 0)) {
     break block4
    }
    $385((($509($9_1 | 0) | 0) + $4_1 | 0) + $6_1 | 0 | 0, (($509($10_1 | 0) | 0) + $4_1 | 0) + $5_1 | 0 | 0, $2_1 | 0) | 0;
   }
   block5 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (11 | 0)) {
     break block5
    }
    $551($515($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $577($0_1 | 0, $9_1 | 0);
   $578($0_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $2_1 | 0;
   $579($0_1 | 0, $4_1 | 0);
   HEAP8[($8_1 + 12 | 0) >> 0] = 0;
   $554($9_1 + $4_1 | 0 | 0, $8_1 + 12 | 0 | 0);
   $504($0_1 | 0, $4_1 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $581($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1872($0_1) {
  $0_1 = $0_1 | 0;
  $513($0_1 | 0);
  block : {
   if (!($512($0_1 | 0) | 0)) {
    break block
   }
   $551($515($0_1 | 0) | 0 | 0, $546($0_1 | 0) | 0 | 0, $529($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1873($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP8[($3_1 + 15 | 0) >> 0] = $2_1;
  $1874($0_1 | 0, $1_1 | 0, $3_1 + 15 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1874($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1907($0_1 | 0, $1906($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1875($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if ($2_1 >>> 0 > ($572($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($573($2_1 | 0) | 0)) {
      break block1
     }
     $553($0_1 | 0, $2_1 | 0);
     $4_1 = $547($0_1 | 0) | 0;
     break block2;
    }
    $575($3_1 + 8 | 0 | 0, $515($0_1 | 0) | 0 | 0, ($574($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $576($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $577($0_1 | 0, $4_1 | 0);
    $578($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $579($0_1 | 0, $2_1 | 0);
   }
   $385($509($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $554($4_1 + $2_1 | 0 | 0, $3_1 + 7 | 0 | 0);
   $504($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $581($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1876($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block2 : {
   block1 : {
    block : {
     if (!($573($2_1 | 0) | 0)) {
      break block
     }
     $4_1 = $547($0_1 | 0) | 0;
     $553($0_1 | 0, $2_1 | 0);
     break block1;
    }
    if ($2_1 >>> 0 > ($572($0_1 | 0) | 0) >>> 0) {
     break block2
    }
    $575($3_1 + 8 | 0 | 0, $515($0_1 | 0) | 0 | 0, ($574($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $576($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $577($0_1 | 0, $4_1 | 0);
    $578($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $579($0_1 | 0, $2_1 | 0);
   }
   $385($509($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   $504($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $581($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1877($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $526($0_1 | 0) | 0;
  $4_1 = $525($0_1 | 0) | 0;
  block : {
   if ($2_1 >>> 0 > $3_1 >>> 0) {
    break block
   }
   block1 : {
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     break block1
    }
    $521($0_1 | 0, $2_1 - $4_1 | 0 | 0);
   }
   $3_1 = $509($508($0_1 | 0) | 0 | 0) | 0;
   $1870($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $1600($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $1871($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1878($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1877($0_1 | 0, $1_1 | 0, $606($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1879($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    $4_1 = $526($0_1 | 0) | 0;
    $5_1 = $525($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break block
    }
    if (!$2_1) {
     break block1
    }
    $521($0_1 | 0, $2_1 | 0);
    $4_1 = $509($508($0_1 | 0) | 0 | 0) | 0;
    $385($4_1 + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1113($0_1 | 0, $2_1 | 0);
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $554($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    break block1;
   }
   $1871($0_1 | 0, $4_1 | 0, ($2_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1880($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if ($1_1 >>> 0 > ($572($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($573($1_1 | 0) | 0)) {
      break block1
     }
     $553($0_1 | 0, $1_1 | 0);
     $4_1 = $547($0_1 | 0) | 0;
     break block2;
    }
    $575($3_1 + 8 | 0 | 0, $515($0_1 | 0) | 0 | 0, ($574($1_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $576($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $577($0_1 | 0, $4_1 | 0);
    $578($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $579($0_1 | 0, $1_1 | 0);
   }
   $1873($509($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP8[($3_1 + 7 | 0) >> 0] = 0;
   $554($4_1 + $1_1 | 0 | 0, $3_1 + 7 | 0 | 0);
   $504($0_1 | 0, $1_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $581($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1881($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $529($0_1 | 0) | 0;
  $5_1 = $530($0_1 | 0) | 0;
  block2 : {
   block : {
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break block
    }
    block1 : {
     if ($2_1 >>> 0 <= $5_1 >>> 0) {
      break block1
     }
     $521($0_1 | 0, $2_1 - $5_1 | 0 | 0);
    }
    $4_1 = $546($0_1 | 0) | 0;
    $579($0_1 | 0, $2_1 | 0);
    $385($509($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $554($4_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    if ($2_1 >>> 0 >= $5_1 >>> 0) {
     break block2
    }
    $523($0_1 | 0, $5_1 | 0);
    break block2;
   }
   $1871($0_1 | 0, $4_1 + -1 | 0 | 0, ($2_1 - $4_1 | 0) + 1 | 0 | 0, $5_1 | 0, 0 | 0, $5_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1882($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $516($0_1 | 0) | 0;
  block2 : {
   block : {
    if ($2_1 >>> 0 > 10 >>> 0) {
     break block
    }
    block1 : {
     if ($2_1 >>> 0 <= $4_1 >>> 0) {
      break block1
     }
     $521($0_1 | 0, $2_1 - $4_1 | 0 | 0);
    }
    $5_1 = $547($0_1 | 0) | 0;
    $553($0_1 | 0, $2_1 | 0);
    $385($509($5_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    HEAP8[($3_1 + 15 | 0) >> 0] = 0;
    $554($5_1 + $2_1 | 0 | 0, $3_1 + 15 | 0 | 0);
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break block2
    }
    $523($0_1 | 0, $4_1 | 0);
    break block2;
   }
   $1871($0_1 | 0, 10 | 0, $2_1 + -10 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1883($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP8[($2_1 + 15 | 0) >> 0] = $1_1;
  block1 : {
   block : {
    $3_1 = $512($0_1 | 0) | 0;
    if ($3_1) {
     break block
    }
    $4_1 = 10;
    $1_1 = $516($0_1 | 0) | 0;
    break block1;
   }
   $4_1 = ($529($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $530($0_1 | 0) | 0;
  }
  block4 : {
   block3 : {
    block2 : {
     if (($1_1 | 0) != ($4_1 | 0)) {
      break block2
     }
     $1112($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $521($0_1 | 0, 1 | 0);
     $508($0_1 | 0) | 0;
     break block3;
    }
    $521($0_1 | 0, 1 | 0);
    $508($0_1 | 0) | 0;
    if ($3_1) {
     break block3
    }
    $4_1 = $547($0_1 | 0) | 0;
    $553($0_1 | 0, $1_1 + 1 | 0 | 0);
    break block4;
   }
   $4_1 = $546($0_1 | 0) | 0;
   $579($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + $1_1 | 0;
  $554($0_1 | 0, $2_1 + 15 | 0 | 0);
  HEAP8[($2_1 + 14 | 0) >> 0] = 0;
  $554($0_1 + 1 | 0 | 0, $2_1 + 14 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1884($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if (!$1_1) {
    break block
   }
   block1 : {
    $4_1 = $526($0_1 | 0) | 0;
    $5_1 = $525($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break block1
    }
    $1112($0_1 | 0, $4_1 | 0, ($1_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, 0 | 0);
   }
   $521($0_1 | 0, $1_1 | 0);
   $4_1 = $508($0_1 | 0) | 0;
   $1873(($509($4_1 | 0) | 0) + $5_1 | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   $1_1 = $5_1 + $1_1 | 0;
   $1113($0_1 | 0, $1_1 | 0);
   HEAP8[($3_1 + 15 | 0) >> 0] = 0;
   $554($4_1 + $1_1 | 0 | 0, $3_1 + 15 | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1885($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1879($0_1 | 0, $1_1 | 0, $606($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1886($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  block : {
   $3_1 = $525($0_1 | 0) | 0;
   if ($1_1 >>> 0 <= $3_1 >>> 0) {
    break block
   }
   $1884($0_1 | 0, $1_1 - $3_1 | 0 | 0, $2_1 | 0) | 0;
   return;
  }
  $1599($0_1 | 0, $1_1 | 0);
 }
 
 function $1887($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $461($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1888($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8_1 = 0, $9_1 = 0, $10_1 = 0;
  $8_1 = global$0 - 16 | 0;
  global$0 = $8_1;
  block : {
   $9_1 = $1579($0_1 | 0) | 0;
   if ($2_1 >>> 0 > ($9_1 + ($1_1 ^ -1 | 0) | 0) >>> 0) {
    break block
   }
   $10_1 = $938($0_1 | 0) | 0;
   block1 : {
    if ($1_1 >>> 0 >= (($9_1 >>> 1 | 0) + -8 | 0) >>> 0) {
     break block1
    }
    HEAP32[($8_1 + 12 | 0) >> 2] = $1_1 << 1 | 0;
    HEAP32[($8_1 + 4 | 0) >> 2] = $2_1 + $1_1 | 0;
    $9_1 = ($1581(HEAP32[($609($8_1 + 4 | 0 | 0, $8_1 + 12 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $1602($0_1 | 0);
   $1582($8_1 + 4 | 0 | 0, $1181($0_1 | 0) | 0 | 0, $9_1 | 0);
   $9_1 = HEAP32[($8_1 + 4 | 0) >> 2] | 0;
   $1583($9_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   block2 : {
    if (!$4_1) {
     break block2
    }
    $458($1178($9_1 | 0) | 0 | 0, $1178($10_1 | 0) | 0 | 0, $4_1 | 0) | 0;
   }
   block3 : {
    if (!$6_1) {
     break block3
    }
    $458(($1178($9_1 | 0) | 0) + ($4_1 << 2 | 0) | 0 | 0, $7_1 | 0, $6_1 | 0) | 0;
   }
   $7_1 = $5_1 + $4_1 | 0;
   $2_1 = $3_1 - $7_1 | 0;
   block4 : {
    if (($3_1 | 0) == ($7_1 | 0)) {
     break block4
    }
    $3_1 = $4_1 << 2 | 0;
    $458((($1178($9_1 | 0) | 0) + $3_1 | 0) + ($6_1 << 2 | 0) | 0 | 0, (($1178($10_1 | 0) | 0) + $3_1 | 0) + ($5_1 << 2 | 0) | 0 | 0, $2_1 | 0) | 0;
   }
   block5 : {
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) == (2 | 0)) {
     break block5
    }
    $1603($1181($0_1 | 0) | 0 | 0, $10_1 | 0, $1_1 | 0);
   }
   $1584($0_1 | 0, $9_1 | 0);
   $1585($0_1 | 0, HEAP32[($8_1 + 8 | 0) >> 2] | 0 | 0);
   $4_1 = ($6_1 + $4_1 | 0) + $2_1 | 0;
   $1169($0_1 | 0, $4_1 | 0);
   HEAP32[($8_1 + 12 | 0) >> 2] = 0;
   $1168($9_1 + ($4_1 << 2 | 0) | 0 | 0, $8_1 + 12 | 0 | 0);
   $1062($0_1 | 0, $4_1 | 0);
   global$0 = $8_1 + 16 | 0;
   return;
  }
  $1587($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1889($0_1) {
  $0_1 = $0_1 | 0;
  $1602($0_1 | 0);
  block : {
   if (!($999($0_1 | 0) | 0)) {
    break block
   }
   $1603($1181($0_1 | 0) | 0 | 0, $1167($0_1 | 0) | 0 | 0, $1605($0_1 | 0) | 0 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1890($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $1891($0_1 | 0, $1_1 | 0, $3_1 + 12 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1891($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1908($0_1 | 0, $1906($1_1 | 0) | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1892($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if ($2_1 >>> 0 > ($1579($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($1580($2_1 | 0) | 0)) {
      break block1
     }
     $1171($0_1 | 0, $2_1 | 0);
     $4_1 = $1170($0_1 | 0) | 0;
     break block2;
    }
    $1582($3_1 + 8 | 0 | 0, $1181($0_1 | 0) | 0 | 0, ($1581($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1583($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1584($0_1 | 0, $4_1 | 0);
    $1585($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1169($0_1 | 0, $2_1 | 0);
   }
   $458($1178($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $1168($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
   $1062($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1587($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1893($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block2 : {
   block1 : {
    block : {
     if (!($1580($2_1 | 0) | 0)) {
      break block
     }
     $4_1 = $1170($0_1 | 0) | 0;
     $1171($0_1 | 0, $2_1 | 0);
     break block1;
    }
    if ($2_1 >>> 0 > ($1579($0_1 | 0) | 0) >>> 0) {
     break block2
    }
    $1582($3_1 + 8 | 0 | 0, $1181($0_1 | 0) | 0 | 0, ($1581($2_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1583($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1584($0_1 | 0, $4_1 | 0);
    $1585($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1169($0_1 | 0, $2_1 | 0);
   }
   $458($1178($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 + 1 | 0 | 0) | 0;
   $1062($0_1 | 0, $2_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1587($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1894($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = $1173($0_1 | 0) | 0;
  $4_1 = $845($0_1 | 0) | 0;
  block : {
   if ($2_1 >>> 0 > $3_1 >>> 0) {
    break block
   }
   block1 : {
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     break block1
    }
    $1177($0_1 | 0, $2_1 - $4_1 | 0 | 0);
   }
   $3_1 = $1178($938($0_1 | 0) | 0 | 0) | 0;
   $1887($3_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $1832($0_1 | 0, $3_1 | 0, $2_1 | 0) | 0 | 0;
  }
  $1888($0_1 | 0, $3_1 | 0, $2_1 - $3_1 | 0 | 0, $4_1 | 0, 0 | 0, $4_1 | 0, $2_1 | 0, $1_1 | 0);
  return $0_1 | 0;
 }
 
 function $1895($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1894($0_1 | 0, $1_1 | 0, $1501($1_1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $1896($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block1 : {
   block : {
    $4_1 = $1173($0_1 | 0) | 0;
    $5_1 = $845($0_1 | 0) | 0;
    if (($4_1 - $5_1 | 0) >>> 0 < $2_1 >>> 0) {
     break block
    }
    if (!$2_1) {
     break block1
    }
    $1177($0_1 | 0, $2_1 | 0);
    $4_1 = $1178($938($0_1 | 0) | 0 | 0) | 0;
    $458($4_1 + ($5_1 << 2 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
    $2_1 = $5_1 + $2_1 | 0;
    $1180($0_1 | 0, $2_1 | 0);
    HEAP32[($3_1 + 12 | 0) >> 2] = 0;
    $1168($4_1 + ($2_1 << 2 | 0) | 0 | 0, $3_1 + 12 | 0 | 0);
    break block1;
   }
   $1888($0_1 | 0, $4_1 | 0, ($2_1 - $4_1 | 0) + $5_1 | 0 | 0, $5_1 | 0, $5_1 | 0, 0 | 0, $2_1 | 0, $1_1 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1897($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  block : {
   if ($1_1 >>> 0 > ($1579($0_1 | 0) | 0) >>> 0) {
    break block
   }
   block2 : {
    block1 : {
     if (!($1580($1_1 | 0) | 0)) {
      break block1
     }
     $1171($0_1 | 0, $1_1 | 0);
     $4_1 = $1170($0_1 | 0) | 0;
     break block2;
    }
    $1582($3_1 + 8 | 0 | 0, $1181($0_1 | 0) | 0 | 0, ($1581($1_1 | 0) | 0) + 1 | 0 | 0);
    $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    $1583($4_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1584($0_1 | 0, $4_1 | 0);
    $1585($0_1 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
    $1169($0_1 | 0, $1_1 | 0);
   }
   $1890($1178($4_1 | 0) | 0 | 0, $1_1 | 0, $2_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   $1168($4_1 + ($1_1 << 2 | 0) | 0 | 0, $3_1 + 4 | 0 | 0);
   $1062($0_1 | 0, $1_1 | 0);
   global$0 = $3_1 + 16 | 0;
   return;
  }
  $1587($0_1 | 0);
  wasm2js_trap();
 }
 
 function $1898($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $2_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  block1 : {
   block : {
    $3_1 = $999($0_1 | 0) | 0;
    if ($3_1) {
     break block
    }
    $4_1 = 1;
    $1_1 = $1001($0_1 | 0) | 0;
    break block1;
   }
   $4_1 = ($1605($0_1 | 0) | 0) + -1 | 0;
   $1_1 = $1000($0_1 | 0) | 0;
  }
  block4 : {
   block3 : {
    block2 : {
     if (($1_1 | 0) != ($4_1 | 0)) {
      break block2
     }
     $1176($0_1 | 0, $4_1 | 0, 1 | 0, $4_1 | 0, $4_1 | 0, 0 | 0, 0 | 0);
     $1177($0_1 | 0, 1 | 0);
     $938($0_1 | 0) | 0;
     break block3;
    }
    $1177($0_1 | 0, 1 | 0);
    $938($0_1 | 0) | 0;
    if ($3_1) {
     break block3
    }
    $4_1 = $1170($0_1 | 0) | 0;
    $1171($0_1 | 0, $1_1 + 1 | 0 | 0);
    break block4;
   }
   $4_1 = $1167($0_1 | 0) | 0;
   $1169($0_1 | 0, $1_1 + 1 | 0 | 0);
  }
  $0_1 = $4_1 + ($1_1 << 2 | 0) | 0;
  $1168($0_1 | 0, $2_1 + 12 | 0 | 0);
  HEAP32[($2_1 + 8 | 0) >> 2] = 0;
  $1168($0_1 + 4 | 0 | 0, $2_1 + 8 | 0 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1899($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1900($0_1 | 0, $1_1 | 0);
 }
 
 function $1900($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $1901($2_1 + 12 | 0 | 0, $2_1 + 21 | 0 | 0, $2_1 + 32 | 0 | 0, $1_1 | 0);
  $1902($0_1 | 0, $2_1 + 21 | 0 | 0, HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1901($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1909($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1902($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $0_1 = $605($0_1 | 0, $3_1 + 15 | 0 | 0, $3_1 + 14 | 0 | 0) | 0;
  $520($0_1 | 0, $1_1 | 0, $2_1 | 0);
  global$0 = $3_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1903($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $502($0_1 | 0) | 0;
  $527($0_1 | 0, $526($0_1 | 0) | 0 | 0);
 }
 
 function $1904($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1903($2_1 + 4 | 0 | 0);
  $1905($0_1 | 0, $2_1 + 4 | 0 | 0, +$1_1);
  $1872($2_1 + 4 | 0 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1905($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  var $4_1 = 0, $5_1 = 0, $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $4_1 = $525($1_1 | 0) | 0;
  block1 : {
   label : while (1) {
    $5_1 = $801($1_1 | 0, 0 | 0) | 0;
    HEAPF64[$3_1 >> 3] = $2_1;
    block2 : {
     block : {
      $5_1 = $728($5_1 | 0, $4_1 + 1 | 0 | 0, 67109870 | 0, $3_1 | 0) | 0;
      if (($5_1 | 0) < (0 | 0)) {
       break block
      }
      if ($5_1 >>> 0 <= $4_1 >>> 0) {
       break block1
      }
      $4_1 = $5_1;
      break block2;
     }
     $4_1 = $4_1 << 1 | 0 | 1 | 0;
    }
    $527($1_1 | 0, $4_1 | 0);
    continue label;
   };
  }
  $527($1_1 | 0, $5_1 | 0);
  $1399($0_1 | 0, $1_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1906($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1907($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   label : while (1) {
    if (!$1_1) {
     break block
    }
    HEAP8[$0_1 >> 0] = HEAPU8[$2_1 >> 0] | 0;
    $1_1 = $1_1 + -1 | 0;
    $0_1 = $0_1 + 1 | 0;
    continue label;
   };
  }
  return $0_1 | 0;
 }
 
 function $1908($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   label : while (1) {
    if (!$1_1) {
     break block
    }
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2] | 0;
    $1_1 = $1_1 + -1 | 0;
    $0_1 = $0_1 + 4 | 0;
    continue label;
   };
  }
  return $0_1 | 0;
 }
 
 function $1909($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = $1910($3_1 | 0) | 0;
  block : {
   if (($1_1 | 0) == ($2_1 | 0)) {
    break block
   }
   if (($3_1 | 0) > (-1 | 0)) {
    break block
   }
   HEAP8[$1_1 >> 0] = 45;
   $1_1 = $1_1 + 1 | 0;
   $4_1 = $1911($4_1 | 0) | 0;
  }
  $1912($0_1 | 0, $1_1 | 0, $2_1 | 0, $4_1 | 0);
 }
 
 function $1910($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1911($0_1) {
  $0_1 = $0_1 | 0;
  return 0 - $0_1 | 0 | 0;
 }
 
 function $1912($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  block1 : {
   block : {
    $4_1 = $2_1 - $1_1 | 0;
    if (($4_1 | 0) > (9 | 0)) {
     break block
    }
    $5_1 = 61;
    if (($1913($3_1 | 0) | 0 | 0) > ($4_1 | 0)) {
     break block1
    }
   }
   $5_1 = 0;
   $2_1 = $1914($1_1 | 0, $3_1 | 0) | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
  HEAP32[$0_1 >> 2] = $2_1;
 }
 
 function $1913($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = Math_imul(32 - ($1915($0_1 | 1 | 0 | 0) | 0) | 0, 1233) >> 12 | 0;
  return $1_1 + ($0_1 >>> 0 >= (HEAP32[(($1_1 << 2 | 0) + 67133232 | 0) >> 2] | 0) >>> 0) | 0 | 0;
 }
 
 function $1914($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1916($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1915($0_1) {
  $0_1 = $0_1 | 0;
  return Math_clz32($0_1) | 0;
 }
 
 function $1916($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  block : {
   if ($1_1 >>> 0 > 999999 >>> 0) {
    break block
   }
   block1 : {
    if ($1_1 >>> 0 > 9999 >>> 0) {
     break block1
    }
    block2 : {
     if ($1_1 >>> 0 > 99 >>> 0) {
      break block2
     }
     block3 : {
      if ($1_1 >>> 0 > 9 >>> 0) {
       break block3
      }
      return $1917($0_1 | 0, $1_1 | 0) | 0 | 0;
     }
     return $1918($0_1 | 0, $1_1 | 0) | 0 | 0;
    }
    block4 : {
     if ($1_1 >>> 0 > 999 >>> 0) {
      break block4
     }
     return $1919($0_1 | 0, $1_1 | 0) | 0 | 0;
    }
    return $1920($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   block5 : {
    if ($1_1 >>> 0 > 99999 >>> 0) {
     break block5
    }
    return $1921($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   return $1922($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  block6 : {
   if ($1_1 >>> 0 > 99999999 >>> 0) {
    break block6
   }
   block7 : {
    if ($1_1 >>> 0 > 9999999 >>> 0) {
     break block7
    }
    return $1923($0_1 | 0, $1_1 | 0) | 0 | 0;
   }
   return $1924($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  block8 : {
   if ($1_1 >>> 0 > 999999999 >>> 0) {
    break block8
   }
   return $1925($0_1 | 0, $1_1 | 0) | 0 | 0;
  }
  return $1926($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1917($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  HEAP8[$0_1 >> 0] = $1_1 + 48 | 0;
  return $0_1 + 1 | 0 | 0;
 }
 
 function $1918($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1927(($1_1 << 1 | 0) + 67133280 | 0 | 0, 2 | 0, $0_1 | 0) | 0 | 0;
 }
 
 function $1919($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (100 >>> 0) | 0;
  return $1918($1917($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 100) | 0 | 0) | 0 | 0;
 }
 
 function $1920($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (100 >>> 0) | 0;
  return $1918($1918($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 100) | 0 | 0) | 0 | 0;
 }
 
 function $1921($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (1e4 >>> 0) | 0;
  return $1920($1917($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 1e4) | 0 | 0) | 0 | 0;
 }
 
 function $1922($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (1e4 >>> 0) | 0;
  return $1920($1918($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 1e4) | 0 | 0) | 0 | 0;
 }
 
 function $1923($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (1e6 >>> 0) | 0;
  return $1922($1917($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 1e6) | 0 | 0) | 0 | 0;
 }
 
 function $1924($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (1e6 >>> 0) | 0;
  return $1922($1918($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 1e6) | 0 | 0) | 0 | 0;
 }
 
 function $1925($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (1e8 >>> 0) | 0;
  return $1924($1917($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 1e8) | 0 | 0) | 0 | 0;
 }
 
 function $1926($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = ($1_1 >>> 0) / (1e8 >>> 0) | 0;
  return $1924($1918($0_1 | 0, $2_1 | 0) | 0 | 0, $1_1 - Math_imul($2_1, 1e8) | 0 | 0) | 0 | 0;
 }
 
 function $1927($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1928($0_1 | 0, $0_1 + $1_1 | 0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $1928($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  $1929($3_1 + 8 | 0 | 0, $0_1 | 0, $1_1 | 0, $2_1 | 0);
  $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1929($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $1930($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
 }
 
 function $1930($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $1931($4_1 + 24 | 0 | 0, $1_1 | 0, $2_1 | 0);
  $1699($4_1 + 16 | 0 | 0, $4_1 + 12 | 0 | 0, HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, $878($3_1 | 0) | 0 | 0);
  HEAP32[($4_1 + 12 | 0) >> 2] = $1932($1_1 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $880($3_1 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
  $1933($0_1 | 0, $4_1 + 12 | 0 | 0, $4_1 + 8 | 0 | 0);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $1931($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1934($0_1 | 0, $1_1 | 0, $2_1 | 0);
 }
 
 function $1932($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1936($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1933($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $1935($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
 }
 
 function $1934($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $882($1_1 | 0) | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $882($2_1 | 0) | 0;
  $1707($0_1 | 0, $3_1 + 12 | 0 | 0, $3_1 + 8 | 0 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
 }
 
 function $1935($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[$2_1 >> 2] | 0;
  return $0_1 | 0;
 }
 
 function $1936($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $884($0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $1937($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = HEAP32[(0 + 67117920 | 0) >> 2] | 0;
  $247(67111043 | 0, 11 | 0, 1 | 0, $3_1 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $332($3_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
  $249(10 | 0, $3_1 | 0) | 0;
  $339();
  wasm2js_trap();
 }
 
 function $1938($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1939() {
  return $1938(67146060 | 0) | 0 | 0;
 }
 
 function $1940() {
  return 0 | 0;
 }
 
 function $1941($0_1) {
  $0_1 = $0_1 | 0;
  return ($340($0_1 + 80 | 0 | 0) | 0) + 80 | 0 | 0;
 }
 
 function $1942() {
  $1937(67110919 | 0, 0 | 0);
  wasm2js_trap();
 }
 
 function $1943($0_1) {
  $0_1 = $0_1 | 0;
  return $1992($0_1 | 0) | 0 | 0;
 }
 
 function $1944($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1945($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $1946($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1943($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1947($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1943($0_1 | 0) | 0 | 0, 8 | 0);
 }
 
 function $1948($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1943($0_1 | 0) | 0 | 0, 12 | 0);
 }
 
 function $1949($0_1) {
  $0_1 = $0_1 | 0;
  $1855($1943($0_1 | 0) | 0 | 0, 24 | 0);
 }
 
 function $1950($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1951($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $1951($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  block : {
   if ($2_1) {
    break block
   }
   return (HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  block1 : {
   if (($0_1 | 0) != ($1_1 | 0)) {
    break block1
   }
   return 1 | 0;
  }
  return !($286($1952($0_1 | 0) | 0 | 0, $1952($1_1 | 0) | 0 | 0) | 0) | 0;
 }
 
 function $1952($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $1953($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $54_1 = 0;
  $3_1 = global$0 - 80 | 0;
  global$0 = $3_1;
  $4_1 = 1;
  block1 : {
   block : {
    if ($1951($0_1 | 0, $1_1 | 0, 0 | 0) | 0) {
     break block
    }
    $4_1 = 0;
    if (!$1_1) {
     break block
    }
    $4_1 = 0;
    $1_1 = $1954($1_1 | 0, 67133480 | 0, 67133528 | 0, 0 | 0) | 0;
    if (!$1_1) {
     break block
    }
    $4_1 = HEAP32[$2_1 >> 2] | 0;
    if (!$4_1) {
     break block1
    }
    block2 : {
     if (!56) {
      break block2
     }
     wasm2js_memory_fill($3_1 + 24 | 0, 0, 56);
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 1;
    HEAP32[($3_1 + 32 | 0) >> 2] = -1;
    HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($3_1 + 68 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$1_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1_1, $3_1 + 20 | 0, $4_1, 1);
    block3 : {
     $4_1 = HEAP32[($3_1 + 44 | 0) >> 2] | 0;
     if (($4_1 | 0) != (1 | 0)) {
      break block3
     }
     HEAP32[$2_1 >> 2] = HEAP32[($3_1 + 36 | 0) >> 2] | 0;
    }
    $4_1 = ($4_1 | 0) == (1 | 0);
   }
   global$0 = $3_1 + 80 | 0;
   return $4_1 | 0;
  }
  HEAP32[($3_1 + 8 | 0) >> 2] = 67110089;
  HEAP32[($3_1 + 4 | 0) >> 2] = 485;
  HEAP32[$3_1 >> 2] = 67109414;
  $1937(67109288 | 0, $3_1 | 0);
  wasm2js_trap();
 }
 
 function $1954($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $1955($4_1 + 4 | 0 | 0, $0_1 | 0);
  $5_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  $6_1 = $1951($5_1 | 0, $2_1 | 0, 0 | 0) | 0;
  $7_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  block1 : {
   block : {
    if (!$6_1) {
     break block
    }
    $6_1 = $1956($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, $3_1 | 0) | 0;
    break block1;
   }
   $6_1 = $1957($0_1 | 0, $7_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
   if ($6_1) {
    break block1
   }
   $6_1 = $1958($0_1 | 0, $7_1 | 0, $1_1 | 0, $2_1 | 0, $5_1 | 0, $3_1 | 0) | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $6_1 | 0;
 }
 
 function $1955($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2] | 0;
  $3_1 = HEAP32[($2_1 + -8 | 0) >> 2] | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
  HEAP32[$0_1 >> 2] = $1_1 + $3_1 | 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($2_1 + -4 | 0) >> 2] | 0;
 }
 
 function $1956($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7_1 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  block1 : {
   block : {
    if (($5_1 | 0) < (0 | 0)) {
     break block
    }
    $7_1 = ($4_1 | 0) == (0 - $5_1 | 0 | 0) ? $1_1 : 0;
    break block1;
   }
   if (($5_1 | 0) == (-2 | 0)) {
    break block1
   }
   $7_1 = $6_1 + 28 | 0;
   i64toi32_i32$1 = $7_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 36 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[($6_1 + 20 | 0) >> 2] = 0;
   HEAP32[($6_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[($6_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 16777216;
   HEAP32[($6_1 + 52 | 0) >> 2] = 1;
   HEAP32[($6_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $6_1 + 4 | 0, $1_1, $1_1, 1, 0);
   $7_1 = (HEAP32[$7_1 >> 2] | 0 | 0) == (1 | 0) ? $1_1 : 0;
  }
  global$0 = $6_1 + 64 | 0;
  return $7_1 | 0;
 }
 
 function $1957($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $6_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  $6_1 = 0;
  block : {
   if (($4_1 | 0) < (0 | 0)) {
    break block
   }
   $0_1 = $0_1 - $4_1 | 0;
   if (($0_1 | 0) < ($1_1 | 0)) {
    break block
   }
   $6_1 = $5_1 + 28 | 0;
   i64toi32_i32$1 = $6_1;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1 + 36 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1 + 44 | 0;
   i64toi32_i32$0 = 0;
   HEAP32[i64toi32_i32$1 >> 2] = 0;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 0;
   HEAP32[($5_1 + 20 | 0) >> 2] = 0;
   HEAP32[($5_1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 16 | 0) >> 2] = $4_1;
   HEAP32[($5_1 + 12 | 0) >> 2] = $2_1;
   HEAP32[($5_1 + 4 | 0) >> 2] = $3_1;
   HEAP32[($5_1 + 60 | 0) >> 2] = 0;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$0 = 16777216;
   HEAP32[($5_1 + 52 | 0) >> 2] = 1;
   HEAP32[($5_1 + 56 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$3_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3_1, $5_1 + 4 | 0, $1_1, $1_1, 1, 0);
   $6_1 = HEAP32[$6_1 >> 2] | 0 ? $0_1 : 0;
  }
  global$0 = $5_1 + 64 | 0;
  return $6_1 | 0;
 }
 
 function $1958($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $6_1 = global$0 - 64 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $5_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $3_1;
  $5_1 = 0;
  block : {
   if (!39) {
    break block
   }
   wasm2js_memory_fill($6_1 + 20 | 0, 0, 39);
  }
  HEAP32[($6_1 + 60 | 0) >> 2] = 0;
  HEAP8[($6_1 + 59 | 0) >> 0] = 1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$4_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($4_1, $6_1 + 4 | 0, $1_1, 1, 0);
  block3 : {
   block2 : {
    switch (HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0) {
    case 0:
     $5_1 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($6_1 + 24 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break block3;
    case 1:
     break block2;
    default:
     break block3;
    };
   }
   block4 : {
    if ((HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break block4
    }
    if (HEAP32[($6_1 + 44 | 0) >> 2] | 0) {
     break block3
    }
    if ((HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break block3
    }
    if ((HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break block3
    }
   }
   $5_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  }
  global$0 = $6_1 + 64 | 0;
  return $5_1 | 0;
 }
 
 function $1959($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0;
  block : {
   $4_1 = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
   if ($4_1) {
    break block
   }
   HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 36 | 0) >> 2] = 1;
   HEAP32[($1_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
   return;
  }
  block2 : {
   block1 : {
    if ((HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0) != (HEAP32[($1_1 + 56 | 0) >> 2] | 0 | 0)) {
     break block1
    }
    if ((HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
     break block1
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break block2
    }
    HEAP32[($1_1 + 24 | 0) >> 2] = $3_1;
    return;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   HEAP32[($1_1 + 24 | 0) >> 2] = 2;
   HEAP32[($1_1 + 36 | 0) >> 2] = $4_1 + 1 | 0;
  }
 }
 
 function $1960($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   if (!($1951($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break block
   }
   $1959($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  }
 }
 
 function $1961($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   if (!($1951($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break block
   }
   $1959($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1);
 }
 
 function $1962($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $6_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $5_1 = $4_1 & 1 | 0;
  block1 : {
   block : {
    if ((HEAPU8[($1_1 + 55 | 0) >> 0] | 0 | 0) != (1 | 0)) {
     break block
    }
    $6_1 = $4_1 >> 8 | 0;
    if (!$5_1) {
     break block1
    }
    $6_1 = $1963(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
    break block1;
   }
   block2 : {
    if ($5_1) {
     break block2
    }
    $6_1 = $4_1 >> 8 | 0;
    break block1;
   }
   HEAP32[($1_1 + 56 | 0) >> 2] = $1952(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   $4_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $6_1 = 0;
   $2_1 = 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $4_1 & 2 | 0 ? $3_1 : 2);
 }
 
 function $1963($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[($0_1 + $1_1 | 0) >> 2] | 0 | 0;
 }
 
 function $1964($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $4_1 = 0, $5_1 = 0;
  block : {
   if (!($1951($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break block
   }
   $1959($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  $4_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  $5_1 = $0_1 + 16 | 0;
  $1962($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
  block1 : {
   if ($4_1 >>> 0 < 2 >>> 0) {
    break block1
   }
   $4_1 = $5_1 + ($4_1 << 3 | 0) | 0;
   $0_1 = $0_1 + 24 | 0;
   label : while (1) {
    $1962($0_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break block1
    }
    $0_1 = $0_1 + 8 | 0;
    if ($0_1 >>> 0 < $4_1 >>> 0) {
     continue label
    }
    break label;
   };
  }
 }
 
 function $1965($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 1;
  block : {
   if (($3_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
    break block
   }
   HEAP8[($1_1 + 52 | 0) >> 0] = 1;
   block2 : {
    block1 : {
     $3_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
     if ($3_1) {
      break block1
     }
     HEAP32[($1_1 + 36 | 0) >> 2] = 1;
     HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     HEAP32[($1_1 + 16 | 0) >> 2] = $2_1;
     if (($4_1 | 0) != (1 | 0)) {
      break block
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break block2
     }
     break block;
    }
    block3 : {
     if (($3_1 | 0) != ($2_1 | 0)) {
      break block3
     }
     block4 : {
      $3_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      if (($3_1 | 0) != (2 | 0)) {
       break block4
      }
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
      $3_1 = $4_1;
     }
     if ((HEAP32[($1_1 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break block
     }
     if (($3_1 | 0) == (1 | 0)) {
      break block2
     }
     break block;
    }
    HEAP32[($1_1 + 36 | 0) >> 2] = (HEAP32[($1_1 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
  }
 }
 
 function $1966($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  block : {
   if (($2_1 | 0) != (HEAP32[($1_1 + 4 | 0) >> 2] | 0 | 0)) {
    break block
   }
   if ((HEAP32[($1_1 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break block
   }
   HEAP32[($1_1 + 28 | 0) >> 2] = $3_1;
  }
 }
 
 function $1967($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  block : {
   if (!($1951($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break block
   }
   $1966($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  block4 : {
   block5 : {
    block1 : {
     if (!($1951($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
      break block1
     }
     block3 : {
      block2 : {
       if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
        break block2
       }
       if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
        break block3
       }
      }
      if (($3_1 | 0) != (1 | 0)) {
       break block4
      }
      HEAP32[($1_1 + 32 | 0) >> 2] = 1;
      return;
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break block5
     }
     $5_1 = $0_1 + 16 | 0;
     $3_1 = $5_1 + ((HEAP32[($0_1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6_1 = 0;
     $7_1 = 0;
     label : while (1) {
      block7 : {
       block9 : {
        block10 : {
         block6 : {
          if ($5_1 >>> 0 >= $3_1 >>> 0) {
           break block6
          }
          HEAP16[($1_1 + 52 | 0) >> 1] = 0;
          $1968($5_1 | 0, $1_1 | 0, $2_1 | 0, $2_1 | 0, 1 | 0, $4_1 | 0);
          if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
           break block6
          }
          if ((HEAPU8[($1_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
           break block7
          }
          block8 : {
           if ((HEAPU8[($1_1 + 52 | 0) >> 0] | 0 | 0) != (1 | 0)) {
            break block8
           }
           if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break block9
           }
           $6_1 = 1;
           $7_1 = 1;
           if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0)) {
            break block9
           }
           break block7;
          }
          $6_1 = 1;
          if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0) {
           break block7
          }
          $5_1 = 3;
          break block10;
         }
         $5_1 = $6_1 & 1 | 0 ? 3 : 4;
        }
        HEAP32[($1_1 + 44 | 0) >> 2] = $5_1;
        if ($7_1 & 1 | 0) {
         break block4
        }
        break block5;
       }
       HEAP32[($1_1 + 44 | 0) >> 2] = 3;
       break block4;
      }
      $5_1 = $5_1 + 8 | 0;
      continue label;
     };
    }
    $5_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
    $6_1 = $0_1 + 16 | 0;
    $1969($6_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
    if ($5_1 >>> 0 < 2 >>> 0) {
     break block4
    }
    $6_1 = $6_1 + ($5_1 << 3 | 0) | 0;
    $5_1 = $0_1 + 24 | 0;
    block12 : {
     block11 : {
      $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      if ($0_1 & 2 | 0) {
       break block11
      }
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
       break block12
      }
     }
     label1 : while (1) {
      if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
       break block4
      }
      $1969($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
      $5_1 = $5_1 + 8 | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       continue label1
      }
      break block4;
     };
    }
    block13 : {
     if ($0_1 & 1 | 0) {
      break block13
     }
     label2 : while (1) {
      if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
       break block4
      }
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break block4
      }
      $1969($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
      $5_1 = $5_1 + 8 | 0;
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       continue label2
      }
      break block4;
     };
    }
    label3 : while (1) {
     if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
      break block4
     }
     block14 : {
      if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
       break block14
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break block4
      }
     }
     $1969($5_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
     $5_1 = $5_1 + 8 | 0;
     if ($5_1 >>> 0 < $6_1 >>> 0) {
      continue label3
     }
     break block4;
    };
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
    break block4
   }
   if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
    break block4
   }
   HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   return;
  }
 }
 
 function $1968($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $7_1 = $6_1 >> 8 | 0;
  block : {
   if (!($6_1 & 1 | 0)) {
    break block
   }
   $7_1 = $1963(HEAP32[$3_1 >> 2] | 0 | 0, $7_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1 + $7_1 | 0, $6_1 & 2 | 0 ? $4_1 : 2, $5_1);
 }
 
 function $1969($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
  $6_1 = $5_1 >> 8 | 0;
  block : {
   if (!($5_1 & 1 | 0)) {
    break block
   }
   $6_1 = $1963(HEAP32[$2_1 >> 2] | 0 | 0, $6_1 | 0) | 0;
  }
  $0_1 = HEAP32[$0_1 >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1 + $6_1 | 0, $5_1 & 2 | 0 ? $3_1 : 2, $4_1);
 }
 
 function $1970($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  block : {
   if (!($1951($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break block
   }
   $1966($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  block4 : {
   block1 : {
    if (!($1951($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
     break block1
    }
    block3 : {
     block2 : {
      if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
       break block2
      }
      if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
       break block3
      }
     }
     if (($3_1 | 0) != (1 | 0)) {
      break block4
     }
     HEAP32[($1_1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
    block5 : {
     if ((HEAP32[($1_1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break block5
     }
     HEAP16[($1_1 + 52 | 0) >> 1] = 0;
     $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     block6 : {
      if ((HEAPU8[($1_1 + 53 | 0) >> 0] | 0 | 0) != (1 | 0)) {
       break block6
      }
      HEAP32[($1_1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1_1 + 52 | 0) >> 0] | 0)) {
       break block5
      }
      break block4;
     }
     HEAP32[($1_1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
    HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break block4
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break block4
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1);
  }
 }
 
 function $1971($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  block : {
   if (!($1951($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break block
   }
   $1966($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0);
   return;
  }
  block1 : {
   if (!($1951($0_1 | 0, HEAP32[$1_1 >> 2] | 0 | 0, $4_1 | 0) | 0)) {
    break block1
   }
   block3 : {
    block2 : {
     if (($2_1 | 0) == (HEAP32[($1_1 + 16 | 0) >> 2] | 0 | 0)) {
      break block2
     }
     if (($2_1 | 0) != (HEAP32[($1_1 + 20 | 0) >> 2] | 0 | 0)) {
      break block3
     }
    }
    if (($3_1 | 0) != (1 | 0)) {
     break block1
    }
    HEAP32[($1_1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1_1 + 20 | 0) >> 2] = $2_1;
   HEAP32[($1_1 + 32 | 0) >> 2] = $3_1;
   HEAP32[($1_1 + 40 | 0) >> 2] = (HEAP32[($1_1 + 40 | 0) >> 2] | 0) + 1 | 0;
   block4 : {
    if ((HEAP32[($1_1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break block4
    }
    if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break block4
    }
    HEAP8[($1_1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1_1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function $1972($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $7_1 = 0, $6_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0;
  block : {
   if (!($1951($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break block
   }
   $1965($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $6_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $7_1 = HEAP32[($0_1 + 12 | 0) >> 2] | 0;
  HEAP8[($1_1 + 53 | 0) >> 0] = 0;
  $8_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = 0;
  $9_1 = $0_1 + 16 | 0;
  $1968($9_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
  $10_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
  $8_1 = $8_1 | $10_1 | 0;
  $11_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
  $6_1 = $6_1 | $11_1 | 0;
  block1 : {
   if ($7_1 >>> 0 < 2 >>> 0) {
    break block1
   }
   $9_1 = $9_1 + ($7_1 << 3 | 0) | 0;
   $7_1 = $0_1 + 24 | 0;
   label : while (1) {
    if (HEAPU8[($1_1 + 54 | 0) >> 0] | 0) {
     break block1
    }
    block3 : {
     block2 : {
      if (!($10_1 & 1 | 0)) {
       break block2
      }
      if ((HEAP32[($1_1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break block1
      }
      if ((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break block3
      }
      break block1;
     }
     if (!($11_1 & 1 | 0)) {
      break block3
     }
     if (!((HEAPU8[($0_1 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break block1
     }
    }
    HEAP16[($1_1 + 52 | 0) >> 1] = 0;
    $1968($7_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0, $5_1 | 0);
    $11_1 = HEAPU8[($1_1 + 53 | 0) >> 0] | 0;
    $6_1 = ($11_1 | $6_1 | 0) & 1 | 0;
    $10_1 = HEAPU8[($1_1 + 52 | 0) >> 0] | 0;
    $8_1 = ($10_1 | $8_1 | 0) & 1 | 0;
    $7_1 = $7_1 + 8 | 0;
    if ($7_1 >>> 0 < $9_1 >>> 0) {
     continue label
    }
    break label;
   };
  }
  HEAP8[($1_1 + 53 | 0) >> 0] = $6_1 & 1 | 0;
  HEAP8[($1_1 + 52 | 0) >> 0] = $8_1 & 1 | 0;
 }
 
 function $1973($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   if (!($1951($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break block
   }
   $1965($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
   return;
  }
  $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0_1 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0_1, $1_1, $2_1, $3_1, $4_1, $5_1);
 }
 
 function $1974($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  block : {
   if (!($1951($0_1 | 0, HEAP32[($1_1 + 8 | 0) >> 2] | 0 | 0, $5_1 | 0) | 0)) {
    break block
   }
   $1965($1_1 | 0, $1_1 | 0, $2_1 | 0, $3_1 | 0, $4_1 | 0);
  }
 }
 
 function $1975($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1976($0_1) {
  $0_1 = $0_1 | 0;
  $1975($0_1 | 0) | 0;
  $1855($0_1 | 0, 4 | 0);
 }
 
 function $1977($0_1) {
  $0_1 = $0_1 | 0;
  return 67109694 | 0;
 }
 
 function $1978($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1864($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 67134060 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1979($0_1) {
  $0_1 = $0_1 | 0;
  $1975($0_1 | 0) | 0;
  $1855($0_1 | 0, 4 | 0);
 }
 
 function $1980($0_1) {
  $0_1 = $0_1 | 0;
  return 67109984 | 0;
 }
 
 function $1981($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $1978($0_1 | 0) | 0;
  HEAP32[$0_1 >> 2] = 67134080 + 8 | 0;
  return $0_1 | 0;
 }
 
 function $1982($0_1) {
  $0_1 = $0_1 | 0;
  $1975($0_1 | 0) | 0;
  $1855($0_1 | 0, 4 | 0);
 }
 
 function $1983($0_1) {
  $0_1 = $0_1 | 0;
  return 67109743 | 0;
 }
 
 function $1984($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 67134212 + 8 | 0;
  $1985($0_1 + 4 | 0 | 0) | 0;
  return $1975($0_1 | 0) | 0 | 0;
 }
 
 function $1985($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  block : {
   if (!($1868($0_1 | 0) | 0)) {
    break block
   }
   $1_1 = $1986(HEAP32[$0_1 >> 2] | 0 | 0) | 0;
   if (($1987($1_1 + 8 | 0 | 0) | 0 | 0) > (-1 | 0)) {
    break block
   }
   $1854($1_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $1986($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 + -12 | 0 | 0;
 }
 
 function $1987($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (HEAP32[$0_1 >> 2] | 0) + -1 | 0;
  HEAP32[$0_1 >> 2] = $1_1;
  return $1_1 | 0;
 }
 
 function $1988($0_1) {
  $0_1 = $0_1 | 0;
  $1984($0_1 | 0) | 0;
  $1855($0_1 | 0, 8 | 0);
 }
 
 function $1989($0_1) {
  $0_1 = $0_1 | 0;
  return $1990($0_1 + 4 | 0 | 0) | 0 | 0;
 }
 
 function $1990($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 >> 2] | 0 | 0;
 }
 
 function $1991($0_1) {
  $0_1 = $0_1 | 0;
  $1984($0_1 | 0) | 0;
  $1855($0_1 | 0, 8 | 0);
 }
 
 function $1992($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $1993($0_1) {
  $0_1 = $0_1 | 0;
  global$1 = $0_1;
 }
 
 function $1995() {
  global$3 = 67108864;
  global$2 = (0 + 15 | 0) & -16 | 0;
 }
 
 function $1996() {
  return global$0 - global$2 | 0 | 0;
 }
 
 function $1997() {
  return global$3 | 0;
 }
 
 function $1998() {
  return global$2 | 0;
 }
 
 function $1999($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $2000($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $2001() {
  return global$0 | 0;
 }
 
 function $2002($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  block : {
   $1_1 = ($291($0_1 | 0) | 0) + 1 | 0;
   $2_1 = $340($1_1 | 0) | 0;
   if ($2_1) {
    break block
   }
   return 0 | 0;
  }
  return $245($2_1 | 0, $0_1 | 0, $1_1 | 0) | 0 | 0;
 }
 
 function $2003($0_1) {
  $0_1 = $0_1 | 0;
  return $2002(HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function $2004() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  fimport$11(67133656 | 0, 67109945 | 0);
  fimport$12(67133668 | 0, 67109725 | 0, 1 | 0, 0 | 0);
  fimport$13(67133680 | 0, 67109389 | 0, 1 | 0, -128 | 0, 127 | 0);
  fimport$13(67133704 | 0, 67109382 | 0, 1 | 0, -128 | 0, 127 | 0);
  fimport$13(67133692 | 0, 67109380 | 0, 1 | 0, 0 | 0, 255 | 0);
  fimport$13(67133716 | 0, 67109104 | 0, 2 | 0, -32768 | 0, 32767 | 0);
  fimport$13(67133728 | 0, 67109095 | 0, 2 | 0, 0 | 0, 65535 | 0);
  fimport$13(67133740 | 0, 67109119 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  fimport$13(67133752 | 0, 67109110 | 0, 4 | 0, 0 | 0, -1 | 0);
  fimport$13(67133764 | 0, 67109783 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  fimport$13(67133776 | 0, 67109774 | 0, 4 | 0, 0 | 0, -1 | 0);
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$1 = 2147483647;
  $2017(67133788 | 0, 67109138 | 0, 8 | 0, 0 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  $2017(67133800 | 0, 67109137 | 0, 8 | 0, 0 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0);
  fimport$14(67133812 | 0, 67109127 | 0, 4 | 0);
  fimport$14(67133824 | 0, 67109912 | 0, 8 | 0);
  fimport$15(67134336 | 0, 67109814 | 0);
  fimport$16(67134408 | 0, 4 | 0, 67109788 | 0);
  fimport$16(67134480 | 0, 2 | 0, 67109826 | 0);
  fimport$16(67134556 | 0, 4 | 0, 67109841 | 0);
  fimport$17(67134632 | 0);
  fimport$18(67134660 | 0, 0 | 0, 67110560 | 0);
  fimport$18(67134700 | 0, 0 | 0, 67110629 | 0);
  fimport$18(67134740 | 0, 1 | 0, 67110590 | 0);
  fimport$18(67134780 | 0, 2 | 0, 67110125 | 0);
  fimport$18(67134820 | 0, 3 | 0, 67110156 | 0);
  fimport$18(67134860 | 0, 4 | 0, 67110196 | 0);
  fimport$18(67134900 | 0, 5 | 0, 67110225 | 0);
  fimport$18(67134940 | 0, 4 | 0, 67110666 | 0);
  fimport$18(67134980 | 0, 5 | 0, 67110696 | 0);
  fimport$18(67134700 | 0, 0 | 0, 67110327 | 0);
  fimport$18(67134740 | 0, 1 | 0, 67110294 | 0);
  fimport$18(67134780 | 0, 2 | 0, 67110393 | 0);
  fimport$18(67134820 | 0, 3 | 0, 67110359 | 0);
  fimport$18(67134860 | 0, 4 | 0, 67110527 | 0);
  fimport$18(67134900 | 0, 5 | 0, 67110493 | 0);
  fimport$18(67135020 | 0, 8 | 0, 67110460 | 0);
  fimport$18(67135060 | 0, 9 | 0, 67110426 | 0);
  fimport$18(67135100 | 0, 6 | 0, 67110263 | 0);
  fimport$18(67135140 | 0, 7 | 0, 67110735 | 0);
 }
 
 function $2005() {
  HEAP32[(0 + 67146068 | 0) >> 2] = 372;
  HEAP32[(0 + 67146072 | 0) >> 2] = 0;
  $2004();
  HEAP32[(0 + 67146072 | 0) >> 2] = HEAP32[(0 + 67146064 | 0) >> 2] | 0;
  HEAP32[(0 + 67146064 | 0) >> 2] = 67146068;
 }
 
 function $2006($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $2007($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $3$hi;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, i64toi32_i32$0, $4_1, $5_1);
 }
 
 function $2008($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0) | 0 | 0;
 }
 
 function $2009($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $5$hi, $6_1, $6$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $5$hi = $5$hi | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $5$hi;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $5$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, i64toi32_i32$0, $6_1, $6$hi) | 0 | 0;
 }
 
 function $2010($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $6$hi, $7_1, $7$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $6$hi = $6$hi | 0;
  $7_1 = $7_1 | 0;
  $7$hi = $7$hi | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = $6$hi;
  i64toi32_i32$0 = $7$hi;
  i64toi32_i32$0 = $6$hi;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3_1, $4_1, $5_1, $6_1, i64toi32_i32$0, $7_1, $7$hi) | 0 | 0;
 }
 
 function $2011($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $2006($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $1993($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $2012($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $18_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $11_1 = 0, $11$hi = 0, $14$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  i64toi32_i32$0 = 0;
  $11_1 = $3_1;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $18_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $11$hi;
  i64toi32_i32$0 = $11_1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$3 = $18_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $2007($7_1 | 0, $8_1 | 0, $9_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $5_1 | 0, $6_1 | 0);
 }
 
 function $2013($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $20_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $13_1 = 0, $13$hi = 0, $16$hi = 0;
  $7_1 = $0_1;
  $8_1 = $1_1;
  $9_1 = $2_1;
  $10_1 = $3_1;
  $11_1 = $4_1;
  i64toi32_i32$0 = 0;
  $13_1 = $5_1;
  $13$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $16$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $13$hi;
  i64toi32_i32$0 = $13_1;
  i64toi32_i32$2 = $16$hi;
  i64toi32_i32$3 = $20_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  return $2008($7_1 | 0, $8_1 | 0, $9_1 | 0, $10_1 | 0, $11_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2014($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $29_1 = 0, $30_1 = 0, $9_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $15_1 = 0, $15$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $21_1 = 0, $21$hi = 0, $24$hi = 0, $25_1 = 0, $25$hi = 0;
  $9_1 = $0_1;
  $10_1 = $1_1;
  $11_1 = $2_1;
  $12_1 = $3_1;
  $13_1 = $4_1;
  i64toi32_i32$0 = 0;
  $15_1 = $5_1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $6_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $29_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $29_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = $18$hi;
  i64toi32_i32$3 = $29_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $19_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $19$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $21_1 = $7_1;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $8_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $30_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $30_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $24$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$2 = $21_1;
  i64toi32_i32$1 = $24$hi;
  i64toi32_i32$3 = $30_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $25$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$2 = $25$hi;
  return $2009($9_1 | 0, $10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $19_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2015($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1, $9_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  $9_1 = $9_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $31_1 = 0, $32_1 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $15_1 = 0, $17_1 = 0, $17$hi = 0, $20$hi = 0, $21_1 = 0, $21$hi = 0, $23_1 = 0, $23$hi = 0, $26$hi = 0, $27_1 = 0, $27$hi = 0;
  $10_1 = $0_1;
  $11_1 = $1_1;
  $12_1 = $2_1;
  $13_1 = $3_1;
  $14_1 = $4_1;
  $15_1 = $5_1;
  i64toi32_i32$0 = 0;
  $17_1 = $6_1;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $7_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $31_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $31_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $17$hi;
  i64toi32_i32$0 = $17_1;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $31_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21_1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  $21$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  $23_1 = $8_1;
  $23$hi = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $9_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $32_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $32_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $26$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $23$hi;
  i64toi32_i32$2 = $23_1;
  i64toi32_i32$1 = $26$hi;
  i64toi32_i32$3 = $32_1;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $27_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $27$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $21$hi;
  i64toi32_i32$2 = $27$hi;
  return $2010($10_1 | 0, $11_1 | 0, $12_1 | 0, $13_1 | 0, $14_1 | 0, $15_1 | 0, $21_1 | 0, i64toi32_i32$1 | 0, $27_1 | 0, i64toi32_i32$2 | 0) | 0 | 0;
 }
 
 function $2016($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$19($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function $2017($0_1, $1_1, $2_1, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18_1 = 0, $19_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $12_1 = 0, $14_1 = 0;
  $5_1 = $0_1;
  $6_1 = $1_1;
  $7_1 = $2_1;
  i64toi32_i32$0 = $3$hi;
  $9_1 = $3_1;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12_1 = $18_1;
  i64toi32_i32$1 = $4$hi;
  $14_1 = $4_1;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$20($5_1 | 0, $6_1 | 0, $7_1 | 0, $9_1 | 0, $12_1 | 0, $14_1 | 0, $19_1 | 0);
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17_1 = 0, $17$hi = 0, $23$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $21_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $21_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $22_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $22_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$2 = $22_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$5 = var$2;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_udiv($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17_1 = i64toi32_i32$1;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
   $23_1 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$5 | 0;
   $23_1 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$5 | 0) | 0;
  }
  var$0 = $23_1;
  var$0$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $17$hi;
  i64toi32_i32$1 = $17_1;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
  $23$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$0$hi;
  i64toi32_i32$4 = $23$hi;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, var$2$hi = 0, i64toi32_i32$6 = 0, var$2 = 0, $20_1 = 0, $21_1 = 0, $7$hi = 0, $9_1 = 0, $9$hi = 0, $14$hi = 0, $16$hi = 0, $17$hi = 0, $19$hi = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$2 = var$0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
   $20_1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >> i64toi32_i32$4 | 0;
   $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  var$2 = $20_1;
  var$2$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$0 = var$2;
  i64toi32_i32$2 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $7$hi;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
  i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
  $9_1 = i64toi32_i32$4;
  $9$hi = i64toi32_i32$5;
  i64toi32_i32$5 = var$1$hi;
  i64toi32_i32$2 = var$1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 63;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
   $21_1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$5 >> i64toi32_i32$0 | 0;
   $21_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$0 | 0) | 0;
  }
  var$0 = $21_1;
  var$0$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$2 = var$1$hi;
  i64toi32_i32$3 = var$1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  $14$hi = i64toi32_i32$2;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $14$hi;
  i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$5 = var$0$hi;
  i64toi32_i32$3 = var$0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
  $16$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $9$hi;
  i64toi32_i32$1 = $16$hi;
  i64toi32_i32$1 = __wasm_i64_urem($9_1 | 0, i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $17$hi = i64toi32_i32$4;
  i64toi32_i32$4 = var$2$hi;
  i64toi32_i32$4 = $17$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$3 = var$2;
  i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$1 | 0;
  $19$hi = i64toi32_i32$1;
  i64toi32_i32$1 = var$2$hi;
  i64toi32_i32$1 = $19$hi;
  i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$2 = var$2$hi;
  i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
  i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
  i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$4 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              i64toi32_i32$1 = var$1$hi;
              var$3 = var$1;
              if (!var$3) {
               break label$11
              }
              i64toi32_i32$0 = var$3;
              i64toi32_i32$2 = 0;
              i64toi32_i32$3 = 32;
              i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
              if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
               i64toi32_i32$2 = 0;
               $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
              } else {
               i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
              }
              var$4 = $38_1;
              if (!var$4) {
               break label$9
              }
              var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
              if (var$2 >>> 0 <= 31 >>> 0) {
               break label$8
              }
              break label$2;
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = i64toi32_i32$2;
             i64toi32_i32$1 = i64toi32_i32$2;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      i64toi32_i32$2 = var$1$hi;
      i64toi32_i32$1 = var$1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = -1;
      i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      var$8 = i64toi32_i32$4;
      var$8$hi = i64toi32_i32$5;
      label$15 : while (1) {
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$2 = var$5;
       i64toi32_i32$1 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        $45_1 = 0;
       } else {
        i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
        $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
       }
       $140_1 = $45_1;
       $140$hi = i64toi32_i32$1;
       i64toi32_i32$1 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = 0;
        $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
       }
       $142$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $140$hi;
       i64toi32_i32$1 = $140_1;
       i64toi32_i32$5 = $142$hi;
       i64toi32_i32$0 = $46_1;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       var$5$hi = i64toi32_i32$5;
       $144_1 = var$5;
       $144$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$5 = var$5$hi;
       i64toi32_i32$5 = var$8$hi;
       i64toi32_i32$2 = var$8;
       i64toi32_i32$1 = var$5$hi;
       i64toi32_i32$0 = var$5;
       i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
       i64toi32_i32$5 = i64toi32_i32$3;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 63;
       i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
        $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
       } else {
        i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
       }
       var$6 = $47_1;
       var$6$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$2 = var$6$hi;
       i64toi32_i32$4 = var$6;
       i64toi32_i32$5 = var$1$hi;
       i64toi32_i32$0 = var$1;
       i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
       $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
       $151$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $144$hi;
       i64toi32_i32$2 = $144_1;
       i64toi32_i32$4 = $151$hi;
       i64toi32_i32$0 = $151_1;
       i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
       i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
       i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
       var$5 = i64toi32_i32$1;
       var$5$hi = i64toi32_i32$3;
       i64toi32_i32$3 = var$0$hi;
       i64toi32_i32$5 = var$0;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        $48_1 = 0;
       } else {
        i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
        $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
       }
       $154$hi = i64toi32_i32$2;
       i64toi32_i32$2 = var$7$hi;
       i64toi32_i32$2 = $154$hi;
       i64toi32_i32$3 = $48_1;
       i64toi32_i32$5 = var$7$hi;
       i64toi32_i32$0 = var$7;
       i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
       var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
       var$0$hi = i64toi32_i32$5;
       i64toi32_i32$5 = var$6$hi;
       i64toi32_i32$2 = var$6;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
       var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
       var$6$hi = i64toi32_i32$3;
       var$7 = var$6;
       var$7$hi = i64toi32_i32$3;
       var$2 = var$2 + -1 | 0;
       if (var$2) {
        continue label$15
       }
       break label$15;
      };
      break label$13;
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_sdiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Div3div17he78fc483e41d7ec7E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_srem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4sdiv3Mod4mod_17h2cbb7bbf36e41d68E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_i64_urem(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$0 = __wasm_intrinsics_temp_i64$hi;
  i64toi32_i32$1 = __wasm_intrinsics_temp_i64;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, $1984, $1975, $279, $280, $282, $283, $284, $333, $334, $373, $374, $376, $377, $378, $380, $381, $382, $383, $390, $392, $394, $395, $396, $398, $400, $399, $401, $426, $428, $427, $429, $448, $449, $451, $452, $453, $454, $455, $456, $457, $462, $464, $466, $467, $468, $470, $472, $471, $473, $492, $494, $493, $495, $371, $372, $446, $447, $612, $613, $369, $660, $661, $662, $663, $665, $666, $674, $675, $676, $677, $678, $680, $681, $683, $685, $686, $692, $693, $694, $696, $697, $709, $720, $342, $1085, $1398, $1509, $1512, $1516, $1519, $1522, $1525, $1527, $1529, $1531, $1533, $1535, $1537, $1539, $1541, $1372, $1376, $1394, $1416, $1417, $1418, $1419, $1420, $1421, $1422, $1423, $1424, $1425, $1250, $1435, $1436, $1439, $1442, $1443, $1446, $1447, $1449, $1488, $1489, $1492, $1494, $1496, $1498, $1502, $1490, $1491, $1493, $1495, $1497, $1499, $1503, $767, $1393, $1400, $1401, $1402, $1403, $1404, $1405, $1407, $1408, $1410, $1411, $1412, $1413, $1414, $1426, $1427, $1428, $1429, $1430, $1431, $1432, $1433, $1450, $1451, $1453, $1455, $1456, $1457, $1458, $1460, $1461, $1462, $1463, $1464, $1465, $1466, $1467, $1468, $1469, $1470, $1472, $1474, $1475, $1476, $1477, $1479, $1480, $1481, $1482, $1483, $1484, $1485, $1486, $1487, $766, $768, $769, $770, $773, $774, $775, $776, $777, $781, $1544, $782, $796, $805, $808, $811, $814, $817, $820, $825, $828, $831, $1545, $838, $848, $853, $855, $857, $859, $861, $863, $867, $869, $871, $1546, $896, $904, $911, $913, $915, $917, $926, $928, $1547, $932, $941, $945, $947, $949, $951, $957, $959, $1548, $1550, $968, $969, $970, $971, $973, $975, $978, $1507, $1514, $1520, $1534, $1538, $1526, $1530, $1551, $1553, $993, $994, $995, $1002, $1004, $1006, $1009, $1510, $1517, $1523, $1536, $1540, $1528, $1532, $1555, $1554, $1022, $1557, $1556, $1028, $1558, $1034, $1037, $1038, $1039, $1040, $1041, $1042, $1043, $1044, $1559, $1045, $1046, $1047, $1048, $1049, $1050, $1051, $1052, $1053, $1560, $1054, $1057, $1058, $1059, $1063, $1064, $1065, $1066, $1067, $1561, $1068, $1069, $1070, $1071, $1072, $1073, $1074, $1075, $1076, $1562, $1084, $1108, $1563, $1146, $1164, $1564, $1210, $1222, $1565, $1223, $1236, $1566, $1244, $1245, $1246, $1567, $1247, $1248, $1249, $1848, $1849, $1942, $1943, $1946, $1944, $1945, $1950, $1947, $1953, $1974, $1971, $1960, $1948, $1973, $1970, $1961, $1949, $1972, $1967, $1964, $1979, $1980, $1982, $1983, $1976, $1977, $1988, $1989, $1991, $2004]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "memory": Object.create(Object.prototype, {
   "grow": {
    
   }, 
   "buffer": {
    "get": function () {
     return buffer;
    }
    
   }
  }), 
  "__wasm_call_ctors": $0, 
  "malloc": $340, 
  "free": $342, 
  "generatePEMDAS_geradorZ": $48, 
  "generatePEMDAS_testePEMDAS": $94, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "__getTypeName": $2003, 
  "fflush": $370, 
  "strerror": $290, 
  "emscripten_stack_init": $1995, 
  "emscripten_stack_get_free": $1996, 
  "emscripten_stack_get_base": $1997, 
  "emscripten_stack_get_end": $1998, 
  "_emscripten_stack_restore": $1999, 
  "_emscripten_stack_alloc": $2000, 
  "emscripten_stack_get_current": $2001, 
  "dynCall_jiji": $2011, 
  "dynCall_viijii": $2012, 
  "dynCall_iiiiij": $2013, 
  "dynCall_iiiiijj": $2014, 
  "dynCall_iiiiiijj": $2015
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error,

  isWasm2js: true,
};
// end include: wasm2js.js
if (WebAssembly.isWasm2js) {
  // We don't need to actually download a wasm binary, mark it as present but
  // empty.
  wasmBinary = [];
}

if (typeof WebAssembly != 'object') {
  err('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

// In STRICT mode, we only define assert() when ASSERTIONS is set.  i.e. we
// don't define it at all in release modes.  This matches the behaviour of
// MINIMAL_RUNTIME.
// TODO(sbc): Make this the default even without STRICT enabled.
/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed' + (text ? ': ' + text : ''));
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

var runtimeInitialized = false;

/**
 * Indicates whether filename is delivered via file protocol (as opposed to http/https)
 * @noinline
 */
var isFileURI = (filename) => filename.startsWith('file://');

// include: runtime_shared.js
// include: runtime_stack_check.js
// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // If the stack ends at address zero we write our cookies 4 bytes into the
  // stack.  This prevents interference with SAFE_HEAP and ASAN which also
  // monitor writes to address zero.
  if (max == 0) {
    max += 4;
  }
  // The stack grow downwards towards _emscripten_stack_get_end.
  // We write cookies to the final two words in the stack and detect if they are
  // ever overwritten.
  HEAPU32[((max)>>2)] = 0x02135467;
  HEAPU32[(((max)+(4))>>2)] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAPU32[((0)>>2)] = 1668509029;
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  // See writeStackCookie().
  if (max == 0) {
    max += 4;
  }
  var cookie1 = HEAPU32[((max)>>2)];
  var cookie2 = HEAPU32[(((max)+(4))>>2)];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort(`Stack overflow! Stack cookie has been overwritten at ${ptrToString(max)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${ptrToString(cookie2)} ${ptrToString(cookie1)}`);
  }
  // Also test the global address 0 for integrity.
  if (HEAPU32[((0)>>2)] != 0x63736d65 /* 'emsc' */) {
    abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
  }
}
// end include: runtime_stack_check.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
// include: runtime_debug.js
// Endianness check
(() => {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)';
})();

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)');
}

function legacyModuleProp(prop, newName, incoming=true) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      get() {
        let extra = incoming ? ' (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)' : '';
        abort(`\`Module.${prop}\` has been replaced by \`${newName}\`` + extra);

      }
    });
  }
}

function consumedModuleProp(prop) {
  if (!Object.getOwnPropertyDescriptor(Module, prop)) {
    Object.defineProperty(Module, prop, {
      configurable: true,
      set() {
        abort(`Attempt to set \`Module.${prop}\` after it has already been processed.  This can happen, for example, when code is injected via '--post-js' rather than '--pre-js'`);

      }
    });
  }
}

function ignoredModuleProp(prop) {
  if (Object.getOwnPropertyDescriptor(Module, prop)) {
    abort(`\`Module.${prop}\` was supplied but \`${prop}\` not included in INCOMING_MODULE_JS_API`);
  }
}

// forcing the filesystem exports a few things by default
function isExportedByForceFilesystem(name) {
  return name === 'FS_createPath' ||
         name === 'FS_createDataFile' ||
         name === 'FS_createPreloadedFile' ||
         name === 'FS_unlink' ||
         name === 'addRunDependency' ||
         // The old FS has some functionality that WasmFS lacks.
         name === 'FS_createLazyFile' ||
         name === 'FS_createDevice' ||
         name === 'removeRunDependency';
}

/**
 * Intercept access to a global symbol.  This enables us to give informative
 * warnings/errors when folks attempt to use symbols they did not include in
 * their build, or no symbols that no longer exist.
 */
function hookGlobalSymbolAccess(sym, func) {
  // In MODULARIZE mode the generated code runs inside a function scope and not
  // the global scope, and JavaScript does not provide access to function scopes
  // so we cannot dynamically modify the scrope using `defineProperty` in this
  // case.
  //
  // In this mode we simply ignore requests for `hookGlobalSymbolAccess`. Since
  // this is a debug-only feature, skipping it is not major issue.
}

function missingGlobal(sym, msg) {
  hookGlobalSymbolAccess(sym, () => {
    warnOnce(`\`${sym}\` is not longer defined by emscripten. ${msg}`);
  });
}

missingGlobal('buffer', 'Please use HEAP8.buffer or wasmMemory.buffer');
missingGlobal('asm', 'Please use wasmExports instead');

function missingLibrarySymbol(sym) {
  hookGlobalSymbolAccess(sym, () => {
    // Can't `abort()` here because it would break code that does runtime
    // checks.  e.g. `if (typeof SDL === 'undefined')`.
    var msg = `\`${sym}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`;
    // DEFAULT_LIBRARY_FUNCS_TO_INCLUDE requires the name as it appears in
    // library.js, which means $name for a JS name with no prefix, or name
    // for a JS name like _name.
    var librarySymbol = sym;
    if (!librarySymbol.startsWith('_')) {
      librarySymbol = '$' + sym;
    }
    msg += ` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${librarySymbol}')`;
    if (isExportedByForceFilesystem(sym)) {
      msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
    }
    warnOnce(msg);
  });

  // Any symbol that is not included from the JS library is also (by definition)
  // not exported on the Module object.
  unexportedRuntimeSymbol(sym);
}

function unexportedRuntimeSymbol(sym) {
  if (!Object.getOwnPropertyDescriptor(Module, sym)) {
    Object.defineProperty(Module, sym, {
      configurable: true,
      get() {
        var msg = `'${sym}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;
        if (isExportedByForceFilesystem(sym)) {
          msg += '. Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you';
        }
        abort(msg);
      }
    });
  }
}

var runtimeDebug = true; // Switch to false at runtime to disable logging at the right times

// Used by XXXXX_DEBUG settings to output debug messages.
function dbg(...args) {
  if (!runtimeDebug && typeof runtimeDebug != 'undefined') return;
  // TODO(sbc): Make this configurable somehow.  Its not always convenient for
  // logging to show up as warnings.
  console.warn(...args);
}
// end include: runtime_debug.js
// include: memoryprofiler.js
// end include: memoryprofiler.js


function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

// end include: runtime_shared.js
assert(!Module['STACK_SIZE'], 'STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time')

assert(typeof Int32Array != 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray != undefined && Int32Array.prototype.set != undefined,
       'JS engine does not provide full typed array support');

// If memory is defined in wasm, the user can't provide it, or set INITIAL_MEMORY
assert(!Module['wasmMemory'], 'Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally');
assert(!Module['INITIAL_MEMORY'], 'Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically');

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  consumedModuleProp('preRun');
  callRuntimeCallbacks(onPreRuns);
}

function initRuntime() {
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  checkStackCookie();

  if (!Module['noFSInit'] && !FS.initialized) FS.init();
TTY.init();

  wasmExports['__wasm_call_ctors']();

  FS.ignorePermissions = false;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  consumedModuleProp('postRun');

  callRuntimeCallbacks(onPostRuns);
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};
var runDependencyWatcher = null;

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval != 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(() => {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err(`dependency: ${dep}`);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  Module['monitorRunDependencies']?.(runDependencies);

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  Module['onAbort']?.(what);

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // definition for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

function createExportWrapper(name, nargs) {
  return (...args) => {
    assert(runtimeInitialized, `native function \`${name}\` called before runtime initialization`);
    var f = wasmExports[name];
    assert(f, `exported native function \`${name}\` not found`);
    // Only assert for too many arguments. Too few can be valid since the missing arguments will be zero filled.
    assert(args.length <= nargs, `native function \`${name}\` called with ${args.length} args but expects ${nargs}`);
    return f(...args);
  };
}

var wasmBinaryFile;

function findWasmBinary() {
    return locateFile('geradorZ_lib.wasm');
}

function getBinarySync(file) {
  if (file == wasmBinaryFile && wasmBinary) {
    return new Uint8Array(wasmBinary);
  }
  if (readBinary) {
    return readBinary(file);
  }
  throw 'both async and sync fetching of the wasm failed';
}

async function getWasmBinary(binaryFile) {

  // Otherwise, getBinarySync should be able to get it synchronously
  return getBinarySync(binaryFile);
}

async function instantiateArrayBuffer(binaryFile, imports) {
  try {
    var binary = await getWasmBinary(binaryFile);
    var instance = await WebAssembly.instantiate(binary, imports);
    return instance;
  } catch (reason) {
    err(`failed to asynchronously prepare wasm: ${reason}`);

    // Warn on some common problems.
    if (isFileURI(wasmBinaryFile)) {
      err(`warning: Loading from a file URI (${wasmBinaryFile}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`);
    }
    abort(reason);
  }
}

async function instantiateAsync(binary, binaryFile, imports) {
  return instantiateArrayBuffer(binaryFile, imports);
}

function getWasmImports() {
  // prepare imports
  return {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
async function createWasm() {
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    wasmExports = instance.exports;

    

    wasmMemory = wasmExports['memory'];
    
    assert(wasmMemory, 'memory not found in wasm exports');
    updateMemoryViews();

    removeRunDependency('wasm-instantiate');
    return wasmExports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  // Async compilation can be confusing when an error on the page overwrites Module
  // (for example, if the order of elements is wrong, and the one defining Module is
  // later), so we save Module and check it later.
  var trueModule = Module;
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
    trueModule = null;
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    return receiveInstance(result['instance']);
  }

  var info = getWasmImports();

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to
  // run the instantiation parallel to any other async startup actions they are
  // performing.
  // Also pthreads and wasm workers initialize the wasm instance through this
  // path.
  if (Module['instantiateWasm']) {
    return new Promise((resolve, reject) => {
      try {
        Module['instantiateWasm'](info, (mod, inst) => {
          receiveInstance(mod, inst);
          resolve(mod.exports);
        });
      } catch(e) {
        err(`Module.instantiateWasm callback failed with error: ${e}`);
        reject(e);
      }
    });
  }

  wasmBinaryFile ??= findWasmBinary();
  try {
    var result = await instantiateAsync(wasmBinary, wasmBinaryFile, info);
    var exports = receiveInstantiationResult(result);
    return exports;
  } catch (e) {
    // If instantiation fails, reject the module ready promise.
    readyPromiseReject(e);
    return Promise.reject(e);
  }
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// end include: preamble.js

// Begin JS library code


  class ExitStatus {
      name = 'ExitStatus';
      constructor(status) {
        this.message = `Program terminated with exit(${status})`;
        this.status = status;
      }
    }

  var callRuntimeCallbacks = (callbacks) => {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    };
  var onPostRuns = [];
  var addOnPostRun = (cb) => onPostRuns.unshift(cb);

  var onPreRuns = [];
  var addOnPreRun = (cb) => onPreRuns.unshift(cb);


  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[ptr];
      case 'i8': return HEAP8[ptr];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': abort('to do getValue(i64) use WASM_BIGINT');
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort(`invalid type for getValue: ${type}`);
    }
  }

  var noExitRuntime = Module['noExitRuntime'] || true;

  var ptrToString = (ptr) => {
      assert(typeof ptr === 'number');
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      ptr >>>= 0;
      return '0x' + ptr.toString(16).padStart(8, '0');
    };

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[ptr] = value; break;
      case 'i8': HEAP8[ptr] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': abort('to do setValue(i64) use WASM_BIGINT');
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort(`invalid type for setValue: ${type}`);
    }
  }

  var stackRestore = (val) => __emscripten_stack_restore(val);

  var stackSave = () => _emscripten_stack_get_current();

  var warnOnce = (text) => {
      warnOnce.shown ||= {};
      if (!warnOnce.shown[text]) {
        warnOnce.shown[text] = 1;
        if (ENVIRONMENT_IS_NODE) text = 'warning: ' + text;
        err(text);
      }
    };

  class ExceptionInfo {
      // excPtr - Thrown object pointer to wrap. Metadata pointer is calculated from it.
      constructor(excPtr) {
        this.excPtr = excPtr;
        this.ptr = excPtr - 24;
      }
  
      set_type(type) {
        HEAPU32[(((this.ptr)+(4))>>2)] = type;
      }
  
      get_type() {
        return HEAPU32[(((this.ptr)+(4))>>2)];
      }
  
      set_destructor(destructor) {
        HEAPU32[(((this.ptr)+(8))>>2)] = destructor;
      }
  
      get_destructor() {
        return HEAPU32[(((this.ptr)+(8))>>2)];
      }
  
      set_caught(caught) {
        caught = caught ? 1 : 0;
        HEAP8[(this.ptr)+(12)] = caught;
      }
  
      get_caught() {
        return HEAP8[(this.ptr)+(12)] != 0;
      }
  
      set_rethrown(rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(this.ptr)+(13)] = rethrown;
      }
  
      get_rethrown() {
        return HEAP8[(this.ptr)+(13)] != 0;
      }
  
      // Initialize native structure fields. Should be called once after allocated.
      init(type, destructor) {
        this.set_adjusted_ptr(0);
        this.set_type(type);
        this.set_destructor(destructor);
      }
  
      set_adjusted_ptr(adjustedPtr) {
        HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;
      }
  
      get_adjusted_ptr() {
        return HEAPU32[(((this.ptr)+(16))>>2)];
      }
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  var ___cxa_throw = (ptr, type, destructor) => {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      assert(false, 'Exception thrown, but exception catching is not enabled. Compile with -sNO_DISABLE_EXCEPTION_CATCHING or -sEXCEPTION_CATCHING_ALLOWED=[..] to catch.');
    };

  var __abort_js = () =>
      abort('native code called abort()');

  var __embind_register_bigint = (primitiveType, name, size, minRange, maxRange) => {};

  var embind_init_charCodes = () => {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    };
  var embind_charCodes;
  var readLatin1String = (ptr) => {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    };
  
  var awaitingDependencies = {
  };
  
  var registeredTypes = {
  };
  
  var typeDependencies = {
  };
  
  var BindingError = Module['BindingError'] = class BindingError extends Error { constructor(message) { super(message); this.name = 'BindingError'; }};
  var throwBindingError = (message) => { throw new BindingError(message); };
  /** @param {Object=} options */
  function sharedRegisterType(rawType, registeredInstance, options = {}) {
      var name = registeredInstance.name;
      if (!rawType) {
        throwBindingError(`type "${name}" must have a positive integer typeid pointer`);
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
        if (options.ignoreDuplicateRegistrations) {
          return;
        } else {
          throwBindingError(`Cannot register type '${name}' twice`);
        }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach((cb) => cb());
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options = {}) {
      if (registeredInstance.argPackAdvance === undefined) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
      return sharedRegisterType(rawType, registeredInstance, options);
    }
  
  var GenericWireTypeSize = 8;
  /** @suppress {globalThis} */
  var __embind_register_bool = (rawType, name, trueValue, falseValue) => {
      name = readLatin1String(name);
      registerType(rawType, {
          name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          argPackAdvance: GenericWireTypeSize,
          'readValueFromPointer': function(pointer) {
              return this['fromWireType'](HEAPU8[pointer]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    };

  
  var emval_freelist = [];
  
  var emval_handles = [];
  var __emval_decref = (handle) => {
      if (handle > 9 && 0 === --emval_handles[handle + 1]) {
        assert(emval_handles[handle] !== undefined, `Decref for unallocated handle.`);
        emval_handles[handle] = undefined;
        emval_freelist.push(handle);
      }
    };
  
  
  
  
  
  var count_emval_handles = () => {
      return emval_handles.length / 2 - 5 - emval_freelist.length;
    };
  
  var init_emval = () => {
      // reserve 0 and some special values. These never get de-allocated.
      emval_handles.push(
        0, 1,
        undefined, 1,
        null, 1,
        true, 1,
        false, 1,
      );
      assert(emval_handles.length === 5 * 2);
      Module['count_emval_handles'] = count_emval_handles;
    };
  var Emval = {
  toValue:(handle) => {
        if (!handle) {
            throwBindingError(`Cannot use deleted val. handle = ${handle}`);
        }
        // handle 2 is supposed to be `undefined`.
        assert(handle === 2 || emval_handles[handle] !== undefined && handle % 2 === 0, `invalid handle: ${handle}`);
        return emval_handles[handle];
      },
  toHandle:(value) => {
        switch (value) {
          case undefined: return 2;
          case null: return 4;
          case true: return 6;
          case false: return 8;
          default:{
            const handle = emval_freelist.pop() || emval_handles.length;
            emval_handles[handle] = value;
            emval_handles[handle + 1] = 1;
            return handle;
          }
        }
      },
  };
  
  /** @suppress {globalThis} */
  function readPointer(pointer) {
      return this['fromWireType'](HEAPU32[((pointer)>>2)]);
    }
  
  var EmValType = {
      name: 'emscripten::val',
      'fromWireType': (handle) => {
        var rv = Emval.toValue(handle);
        __emval_decref(handle);
        return rv;
      },
      'toWireType': (destructors, value) => Emval.toHandle(value),
      argPackAdvance: GenericWireTypeSize,
      'readValueFromPointer': readPointer,
      destructorFunction: null, // This type does not need a destructor
  
      // TODO: do we need a deleteObject here?  write a test where
      // emval is passed into JS via an interface
    };
  var __embind_register_emval = (rawType) => registerType(rawType, EmValType);

  var floatReadValueFromPointer = (name, width) => {
      switch (width) {
          case 4: return function(pointer) {
              return this['fromWireType'](HEAPF32[((pointer)>>2)]);
          };
          case 8: return function(pointer) {
              return this['fromWireType'](HEAPF64[((pointer)>>3)]);
          };
          default:
              throw new TypeError(`invalid float width (${width}): ${name}`);
      }
    };
  
  
  
  var embindRepr = (v) => {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    };
  var __embind_register_float = (rawType, name, size) => {
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        'fromWireType': (value) => value,
        'toWireType': (destructors, value) => {
          if (typeof value != "number" && typeof value != "boolean") {
            throw new TypeError(`Cannot convert ${embindRepr(value)} to ${this.name}`);
          }
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': floatReadValueFromPointer(name, size),
        destructorFunction: null, // This type does not need a destructor
      });
    };

  var integerReadValueFromPointer = (name, width, signed) => {
      // integers are quite common, so generate very specialized functions
      switch (width) {
          case 1: return signed ?
              (pointer) => HEAP8[pointer] :
              (pointer) => HEAPU8[pointer];
          case 2: return signed ?
              (pointer) => HEAP16[((pointer)>>1)] :
              (pointer) => HEAPU16[((pointer)>>1)]
          case 4: return signed ?
              (pointer) => HEAP32[((pointer)>>2)] :
              (pointer) => HEAPU32[((pointer)>>2)]
          default:
              throw new TypeError(`invalid integer width (${width}): ${name}`);
      }
    };
  
  
  
  /** @suppress {globalThis} */
  var __embind_register_integer = (primitiveType, name, size, minRange, maxRange) => {
      name = readLatin1String(name);
      // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come
      // out as 'i32 -1'. Always treat those as max u32.
      if (maxRange === -1) {
        maxRange = 4294967295;
      }
  
      var fromWireType = (value) => value;
  
      if (minRange === 0) {
        var bitshift = 32 - 8*size;
        fromWireType = (value) => (value << bitshift) >>> bitshift;
      }
  
      var isUnsignedType = (name.includes('unsigned'));
      var checkAssertions = (value, toTypeName) => {
        if (typeof value != "number" && typeof value != "boolean") {
          throw new TypeError(`Cannot convert "${embindRepr(value)}" to ${toTypeName}`);
        }
        if (value < minRange || value > maxRange) {
          throw new TypeError(`Passing a number "${embindRepr(value)}" from JS side to C/C++ side to an argument of type "${name}", which is outside the valid range [${minRange}, ${maxRange}]!`);
        }
      }
      var toWireType;
      if (isUnsignedType) {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          return value >>> 0;
        }
      } else {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        }
      }
      registerType(primitiveType, {
        name,
        'fromWireType': fromWireType,
        'toWireType': toWireType,
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': integerReadValueFromPointer(name, size, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
      });
    };

  
  var __embind_register_memory_view = (rawType, dataTypeIndex, name) => {
      var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
        var size = HEAPU32[((handle)>>2)];
        var data = HEAPU32[(((handle)+(4))>>2)];
        return new TA(HEAP8.buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
        name,
        'fromWireType': decodeMemoryView,
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': decodeMemoryView,
      }, {
        ignoreDuplicateRegistrations: true,
      });
    };

  
  
  
  
  var stringToUTF8Array = (str, heap, outIdx, maxBytesToWrite) => {
      assert(typeof str === 'string', `stringToUTF8Array expects a string (got ${typeof str})`);
      // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
      // undefined and false each don't write out any bytes.
      if (!(maxBytesToWrite > 0))
        return 0;
  
      var startIdx = outIdx;
      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
        // and https://www.ietf.org/rfc/rfc2279.txt
        // and https://tools.ietf.org/html/rfc3629
        var u = str.charCodeAt(i); // possibly a lead surrogate
        if (u >= 0xD800 && u <= 0xDFFF) {
          var u1 = str.charCodeAt(++i);
          u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
        }
        if (u <= 0x7F) {
          if (outIdx >= endIdx) break;
          heap[outIdx++] = u;
        } else if (u <= 0x7FF) {
          if (outIdx + 1 >= endIdx) break;
          heap[outIdx++] = 0xC0 | (u >> 6);
          heap[outIdx++] = 0x80 | (u & 63);
        } else if (u <= 0xFFFF) {
          if (outIdx + 2 >= endIdx) break;
          heap[outIdx++] = 0xE0 | (u >> 12);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        } else {
          if (outIdx + 3 >= endIdx) break;
          if (u > 0x10FFFF) warnOnce('Invalid Unicode code point ' + ptrToString(u) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
          heap[outIdx++] = 0xF0 | (u >> 18);
          heap[outIdx++] = 0x80 | ((u >> 12) & 63);
          heap[outIdx++] = 0x80 | ((u >> 6) & 63);
          heap[outIdx++] = 0x80 | (u & 63);
        }
      }
      // Null-terminate the pointer to the buffer.
      heap[outIdx] = 0;
      return outIdx - startIdx;
    };
  var stringToUTF8 = (str, outPtr, maxBytesToWrite) => {
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
    };
  
  var lengthBytesUTF8 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
        // unit, not a Unicode code point of the character! So decode
        // UTF16->UTF32->UTF8.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var c = str.charCodeAt(i); // possibly a lead surrogate
        if (c <= 0x7F) {
          len++;
        } else if (c <= 0x7FF) {
          len += 2;
        } else if (c >= 0xD800 && c <= 0xDFFF) {
          len += 4; ++i;
        } else {
          len += 3;
        }
      }
      return len;
    };
  
  
  
  var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder() : undefined;
  
    /**
     * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
     * array that contains uint8 values, returns a copy of that string as a
     * Javascript String object.
     * heapOrArray is either a regular array, or a JavaScript typed array view.
     * @param {number=} idx
     * @param {number=} maxBytesToRead
     * @return {string}
     */
  var UTF8ArrayToString = (heapOrArray, idx = 0, maxBytesToRead = NaN) => {
      var endIdx = idx + maxBytesToRead;
      var endPtr = idx;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.  Also, use the length info to avoid running tiny
      // strings through TextDecoder, since .subarray() allocates garbage.
      // (As a tiny code save trick, compare endPtr against endIdx using a negation,
      // so that undefined/NaN means Infinity)
      while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
  
      if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
        return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
      }
      var str = '';
      // If building with TextDecoder, we have already computed the string length
      // above, so test loop end condition against that
      while (idx < endPtr) {
        // For UTF8 byte structure, see:
        // http://en.wikipedia.org/wiki/UTF-8#Description
        // https://www.ietf.org/rfc/rfc2279.txt
        // https://tools.ietf.org/html/rfc3629
        var u0 = heapOrArray[idx++];
        if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
        var u1 = heapOrArray[idx++] & 63;
        if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
        var u2 = heapOrArray[idx++] & 63;
        if ((u0 & 0xF0) == 0xE0) {
          u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
        } else {
          if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte ' + ptrToString(u0) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
        }
  
        if (u0 < 0x10000) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        }
      }
      return str;
    };
  
    /**
     * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
     * emscripten HEAP, returns a copy of that string as a Javascript String object.
     *
     * @param {number} ptr
     * @param {number=} maxBytesToRead - An optional length that specifies the
     *   maximum number of bytes to read. You can omit this parameter to scan the
     *   string until the first 0 byte. If maxBytesToRead is passed, and the string
     *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
     *   string will cut short at that byte index (i.e. maxBytesToRead will not
     *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
     *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
     *   JS JIT optimizations off, so it is worth to consider consistently using one
     * @return {string}
     */
  var UTF8ToString = (ptr, maxBytesToRead) => {
      assert(typeof ptr == 'number', `UTF8ToString expects a number (got ${typeof ptr})`);
      return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
    };
  var __embind_register_std_string = (rawType, name) => {
      name = readLatin1String(name);
      var stdStringIsUTF8
      = true;
  
      registerType(rawType, {
        name,
        // For some method names we use string keys here since they are part of
        // the public/external API and/or used by the runtime-generated code.
        'fromWireType'(value) {
          var length = HEAPU32[((value)>>2)];
          var payload = value + 4;
  
          var str;
          if (stdStringIsUTF8) {
            var decodeStartPtr = payload;
            // Looping here to support possible embedded '0' bytes
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = payload + i;
              if (i == length || HEAPU8[currentBytePtr] == 0) {
                var maxRead = currentBytePtr - decodeStartPtr;
                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + 1;
              }
            }
          } else {
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[payload + i]);
            }
            str = a.join('');
          }
  
          _free(value);
  
          return str;
        },
        'toWireType'(destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }
  
          var length;
          var valueIsOfTypeString = (typeof value == 'string');
  
          // We accept `string` or array views with single byte elements
          if (!(valueIsOfTypeString || (ArrayBuffer.isView(value) && value.BYTES_PER_ELEMENT == 1))) {
            throwBindingError('Cannot pass non-string to std::string');
          }
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            length = lengthBytesUTF8(value);
          } else {
            length = value.length;
          }
  
          // assumes POINTER_SIZE alignment
          var base = _malloc(4 + length + 1);
          var ptr = base + 4;
          HEAPU32[((base)>>2)] = length;
          if (valueIsOfTypeString) {
            if (stdStringIsUTF8) {
              stringToUTF8(value, ptr, length + 1);
            } else {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);
                if (charCode > 255) {
                  _free(base);
                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + i] = charCode;
              }
            }
          } else {
            HEAPU8.set(value, ptr);
          }
  
          if (destructors !== null) {
            destructors.push(_free, base);
          }
          return base;
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': readPointer,
        destructorFunction(ptr) {
          _free(ptr);
        },
      });
    };

  
  
  
  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;
  var UTF16ToString = (ptr, maxBytesToRead) => {
      assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
      var endPtr = ptr;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.
      // Also, use the length info to avoid running tiny strings through
      // TextDecoder, since .subarray() allocates garbage.
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;
  
      if (endPtr - ptr > 32 && UTF16Decoder)
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  
      // Fallback: decode without UTF16Decoder
      var str = '';
  
      // If maxBytesToRead is not passed explicitly, it will be undefined, and the
      // for-loop's condition will always evaluate to true. The loop is then
      // terminated on the first null char.
      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
        if (codeUnit == 0) break;
        // fromCharCode constructs a character from a UTF-16 code unit, so we can
        // pass the UTF16 string right through.
        str += String.fromCharCode(codeUnit);
      }
  
      return str;
    };
  
  var stringToUTF16 = (str, outPtr, maxBytesToWrite) => {
      assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      maxBytesToWrite ??= 0x7FFFFFFF;
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr)>>1)] = codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[((outPtr)>>1)] = 0;
      return outPtr - startPtr;
    };
  
  var lengthBytesUTF16 = (str) => str.length*2;
  
  var UTF32ToString = (ptr, maxBytesToRead) => {
      assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
      var i = 0;
  
      var str = '';
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
        if (utf32 == 0) break;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    };
  
  var stringToUTF32 = (str, outPtr, maxBytesToWrite) => {
      assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
      assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      maxBytesToWrite ??= 0x7FFFFFFF;
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr)>>2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[((outPtr)>>2)] = 0;
      return outPtr - startPtr;
    };
  
  var lengthBytesUTF32 = (str) => {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }
  
      return len;
    };
  var __embind_register_std_wstring = (rawType, charSize, name) => {
      name = readLatin1String(name);
      var decodeString, encodeString, readCharAt, lengthBytesUTF;
      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;
        readCharAt = (pointer) => HEAPU16[((pointer)>>1)];
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;
        readCharAt = (pointer) => HEAPU32[((pointer)>>2)];
      }
      registerType(rawType, {
        name,
        'fromWireType': (value) => {
          // Code mostly taken from _embind_register_std_string fromWireType
          var length = HEAPU32[((value)>>2)];
          var str;
  
          var decodeStartPtr = value + 4;
          // Looping here to support possible embedded '0' bytes
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i * charSize;
            if (i == length || readCharAt(currentBytePtr) == 0) {
              var maxReadBytes = currentBytePtr - decodeStartPtr;
              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
              if (str === undefined) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + charSize;
            }
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': (destructors, value) => {
          if (!(typeof value == 'string')) {
            throwBindingError(`Cannot pass non-string to C++ string type ${name}`);
          }
  
          // assumes POINTER_SIZE alignment
          var length = lengthBytesUTF(value);
          var ptr = _malloc(4 + length + charSize);
          HEAPU32[((ptr)>>2)] = length / charSize;
  
          encodeString(value, ptr + 4, length + charSize);
  
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        argPackAdvance: GenericWireTypeSize,
        'readValueFromPointer': readPointer,
        destructorFunction(ptr) {
          _free(ptr);
        }
      });
    };

  
  var __embind_register_void = (rawType, name) => {
      name = readLatin1String(name);
      registerType(rawType, {
        isVoid: true, // void return values can be optimized out sometimes
        name,
        argPackAdvance: 0,
        'fromWireType': () => undefined,
        // TODO: assert if anything else is given?
        'toWireType': (destructors, o) => undefined,
      });
    };

  
  var __tzset_js = (timezone, daylight, std_name, dst_name) => {
      // TODO: Use (malleable) environment variables instead of system settings.
      var currentYear = new Date().getFullYear();
      var winter = new Date(currentYear, 0, 1);
      var summer = new Date(currentYear, 6, 1);
      var winterOffset = winter.getTimezoneOffset();
      var summerOffset = summer.getTimezoneOffset();
  
      // Local standard timezone offset. Local standard time is not adjusted for
      // daylight savings.  This code uses the fact that getTimezoneOffset returns
      // a greater value during Standard Time versus Daylight Saving Time (DST).
      // Thus it determines the expected output during Standard Time, and it
      // compares whether the output of the given date the same (Standard) or less
      // (DST).
      var stdTimezoneOffset = Math.max(winterOffset, summerOffset);
  
      // timezone is specified as seconds west of UTC ("The external variable
      // `timezone` shall be set to the difference, in seconds, between
      // Coordinated Universal Time (UTC) and local standard time."), the same
      // as returned by stdTimezoneOffset.
      // See http://pubs.opengroup.org/onlinepubs/009695399/functions/tzset.html
      HEAPU32[((timezone)>>2)] = stdTimezoneOffset * 60;
  
      HEAP32[((daylight)>>2)] = Number(winterOffset != summerOffset);
  
      var extractZone = (timezoneOffset) => {
        // Why inverse sign?
        // Read here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset
        var sign = timezoneOffset >= 0 ? "-" : "+";
  
        var absOffset = Math.abs(timezoneOffset)
        var hours = String(Math.floor(absOffset / 60)).padStart(2, "0");
        var minutes = String(absOffset % 60).padStart(2, "0");
  
        return `UTC${sign}${hours}${minutes}`;
      }
  
      var winterName = extractZone(winterOffset);
      var summerName = extractZone(summerOffset);
      assert(winterName);
      assert(summerName);
      assert(lengthBytesUTF8(winterName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${winterName})`);
      assert(lengthBytesUTF8(summerName) <= 16, `timezone name truncated to fit in TZNAME_MAX (${summerName})`);
      if (summerOffset < winterOffset) {
        // Northern hemisphere
        stringToUTF8(winterName, std_name, 17);
        stringToUTF8(summerName, dst_name, 17);
      } else {
        stringToUTF8(winterName, dst_name, 17);
        stringToUTF8(summerName, std_name, 17);
      }
    };

  var _emscripten_date_now = () => Date.now();

  var abortOnCannotGrowMemory = (requestedSize) => {
      abort(`Cannot enlarge memory arrays to size ${requestedSize} bytes (OOM). Either (1) compile with -sINITIAL_MEMORY=X with X higher than the current value ${HEAP8.length}, (2) compile with -sALLOW_MEMORY_GROWTH which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with -sABORTING_MALLOC=0`);
    };
  var _emscripten_resize_heap = (requestedSize) => {
      var oldSize = HEAPU8.length;
      // With CAN_ADDRESS_2GB or MEMORY64, pointers are already unsigned.
      requestedSize >>>= 0;
      abortOnCannotGrowMemory(requestedSize);
    };

  var ENV = {
  };
  
  var getExecutableName = () => thisProgram || './this.program';
  var getEnvStrings = () => {
      if (!getEnvStrings.strings) {
        // Default values.
        // Browser language detection #8751
        var lang = ((typeof navigator == 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        var env = {
          'USER': 'web_user',
          'LOGNAME': 'web_user',
          'PATH': '/',
          'PWD': '/',
          'HOME': '/home/web_user',
          'LANG': lang,
          '_': getExecutableName()
        };
        // Apply the user-provided values, if any.
        for (var x in ENV) {
          // x is a key in ENV; if ENV[x] is undefined, that means it was
          // explicitly set to be so. We allow user code to do that to
          // force variables with default values to remain unset.
          if (ENV[x] === undefined) delete env[x];
          else env[x] = ENV[x];
        }
        var strings = [];
        for (var x in env) {
          strings.push(`${x}=${env[x]}`);
        }
        getEnvStrings.strings = strings;
      }
      return getEnvStrings.strings;
    };
  
  var stringToAscii = (str, buffer) => {
      for (var i = 0; i < str.length; ++i) {
        assert(str.charCodeAt(i) === (str.charCodeAt(i) & 0xff));
        HEAP8[buffer++] = str.charCodeAt(i);
      }
      // Null-terminate the string
      HEAP8[buffer] = 0;
    };
  var _environ_get = (__environ, environ_buf) => {
      var bufSize = 0;
      getEnvStrings().forEach((string, i) => {
        var ptr = environ_buf + bufSize;
        HEAPU32[(((__environ)+(i*4))>>2)] = ptr;
        stringToAscii(string, ptr);
        bufSize += string.length + 1;
      });
      return 0;
    };

  var _environ_sizes_get = (penviron_count, penviron_buf_size) => {
      var strings = getEnvStrings();
      HEAPU32[((penviron_count)>>2)] = strings.length;
      var bufSize = 0;
      strings.forEach((string) => bufSize += string.length + 1);
      HEAPU32[((penviron_buf_size)>>2)] = bufSize;
      return 0;
    };

  
  var runtimeKeepaliveCounter = 0;
  var keepRuntimeAlive = () => noExitRuntime || runtimeKeepaliveCounter > 0;
  var _proc_exit = (code) => {
      EXITSTATUS = code;
      if (!keepRuntimeAlive()) {
        Module['onExit']?.(code);
        ABORT = true;
      }
      quit_(code, new ExitStatus(code));
    };
  
  
  /** @suppress {duplicate } */
  /** @param {boolean|number=} implicit */
  var exitJS = (status, implicit) => {
      EXITSTATUS = status;
  
      checkUnflushedContent();
  
      // if exit() was called explicitly, warn the user if the runtime isn't actually being shut down
      if (keepRuntimeAlive() && !implicit) {
        var msg = `program exited (with status: ${status}), but keepRuntimeAlive() is set (counter=${runtimeKeepaliveCounter}) due to an async operation, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)`;
        readyPromiseReject(msg);
        err(msg);
      }
  
      _proc_exit(status);
    };
  var _exit = exitJS;

  var PATH = {
  isAbs:(path) => path.charAt(0) === '/',
  splitPath:(filename) => {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },
  normalizeArray:(parts, allowAboveRoot) => {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },
  normalize:(path) => {
        var isAbsolute = PATH.isAbs(path),
            trailingSlash = path.slice(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter((p) => !!p), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },
  dirname:(path) => {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.slice(0, -1);
        }
        return root + dir;
      },
  basename:(path) => path && path.match(/([^\/]+|\/)\/*$/)[1],
  join:(...paths) => PATH.normalize(paths.join('/')),
  join2:(l, r) => PATH.normalize(l + '/' + r),
  };
  
  var initRandomFill = () => {
      // This block is not needed on v19+ since crypto.getRandomValues is builtin
      if (ENVIRONMENT_IS_NODE) {
        var nodeCrypto = require('crypto');
        return (view) => nodeCrypto.randomFillSync(view);
      }
  
      return (view) => crypto.getRandomValues(view);
    };
  var randomFill = (view) => {
      // Lazily init on the first invocation.
      (randomFill = initRandomFill())(view);
    };
  
  
  
  var PATH_FS = {
  resolve:(...args) => {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? args[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path != 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = PATH.isAbs(path);
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter((p) => !!p), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },
  relative:(from, to) => {
        from = PATH_FS.resolve(from).slice(1);
        to = PATH_FS.resolve(to).slice(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      },
  };
  
  
  
  var FS_stdin_getChar_buffer = [];
  
  
  /** @type {function(string, boolean=, number=)} */
  var intArrayFromString = (stringy, dontAddNull, length) => {
      var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
      var u8array = new Array(len);
      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
      if (dontAddNull) u8array.length = numBytesWritten;
      return u8array;
    };
  var FS_stdin_getChar = () => {
      if (!FS_stdin_getChar_buffer.length) {
        var result = null;
        if (ENVIRONMENT_IS_NODE) {
          // we will read data by chunks of BUFSIZE
          var BUFSIZE = 256;
          var buf = Buffer.alloc(BUFSIZE);
          var bytesRead = 0;
  
          // For some reason we must suppress a closure warning here, even though
          // fd definitely exists on process.stdin, and is even the proper way to
          // get the fd of stdin,
          // https://github.com/nodejs/help/issues/2136#issuecomment-523649904
          // This started to happen after moving this logic out of library_tty.js,
          // so it is related to the surrounding code in some unclear manner.
          /** @suppress {missingProperties} */
          var fd = process.stdin.fd;
  
          try {
            bytesRead = fs.readSync(fd, buf, 0, BUFSIZE);
          } catch(e) {
            // Cross-platform differences: on Windows, reading EOF throws an
            // exception, but on other OSes, reading EOF returns 0. Uniformize
            // behavior by treating the EOF exception to return 0.
            if (e.toString().includes('EOF')) bytesRead = 0;
            else throw e;
          }
  
          if (bytesRead > 0) {
            result = buf.slice(0, bytesRead).toString('utf-8');
          }
        } else
        if (typeof window != 'undefined' &&
          typeof window.prompt == 'function') {
          // Browser.
          result = window.prompt('Input: ');  // returns null on cancel
          if (result !== null) {
            result += '\n';
          }
        } else
        {}
        if (!result) {
          return null;
        }
        FS_stdin_getChar_buffer = intArrayFromString(result, true);
      }
      return FS_stdin_getChar_buffer.shift();
    };
  var TTY = {
  ttys:[],
  init() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process.stdin.setEncoding('utf8');
        // }
      },
  shutdown() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process.stdin.pause();
        // }
      },
  register(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },
  stream_ops:{
  open(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },
  close(stream) {
          // flush any pending line data
          stream.tty.ops.fsync(stream.tty);
        },
  fsync(stream) {
          stream.tty.ops.fsync(stream.tty);
        },
  read(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.atime = Date.now();
          }
          return bytesRead;
        },
  write(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.mtime = stream.node.ctime = Date.now();
          }
          return i;
        },
  },
  default_tty_ops:{
  get_char(tty) {
          return FS_stdin_getChar();
        },
  put_char(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },
  fsync(tty) {
          if (tty.output?.length > 0) {
            out(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  ioctl_tcgets(tty) {
          // typical setting
          return {
            c_iflag: 25856,
            c_oflag: 5,
            c_cflag: 191,
            c_lflag: 35387,
            c_cc: [
              0x03, 0x1c, 0x7f, 0x15, 0x04, 0x00, 0x01, 0x00, 0x11, 0x13, 0x1a, 0x00,
              0x12, 0x0f, 0x17, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
              0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            ]
          };
        },
  ioctl_tcsets(tty, optional_actions, data) {
          // currently just ignore
          return 0;
        },
  ioctl_tiocgwinsz(tty) {
          return [24, 80];
        },
  },
  default_tty1_ops:{
  put_char(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },
  fsync(tty) {
          if (tty.output?.length > 0) {
            err(UTF8ArrayToString(tty.output));
            tty.output = [];
          }
        },
  },
  };
  
  
  var mmapAlloc = (size) => {
      abort('internal error: mmapAlloc called but `emscripten_builtin_memalign` native symbol not exported');
    };
  var MEMFS = {
  ops_table:null,
  mount(mount) {
        return MEMFS.createNode(null, '/', 16895, 0);
      },
  createNode(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        MEMFS.ops_table ||= {
          dir: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              lookup: MEMFS.node_ops.lookup,
              mknod: MEMFS.node_ops.mknod,
              rename: MEMFS.node_ops.rename,
              unlink: MEMFS.node_ops.unlink,
              rmdir: MEMFS.node_ops.rmdir,
              readdir: MEMFS.node_ops.readdir,
              symlink: MEMFS.node_ops.symlink
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek
            }
          },
          file: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: {
              llseek: MEMFS.stream_ops.llseek,
              read: MEMFS.stream_ops.read,
              write: MEMFS.stream_ops.write,
              mmap: MEMFS.stream_ops.mmap,
              msync: MEMFS.stream_ops.msync
            }
          },
          link: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr,
              readlink: MEMFS.node_ops.readlink
            },
            stream: {}
          },
          chrdev: {
            node: {
              getattr: MEMFS.node_ops.getattr,
              setattr: MEMFS.node_ops.setattr
            },
            stream: FS.chrdev_stream_ops
          }
        };
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.atime = node.mtime = node.ctime = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.atime = parent.mtime = parent.ctime = node.atime;
        }
        return node;
      },
  getFileDataAsTypedArray(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },
  expandFileStorage(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },
  resizeFileStorage(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },
  node_ops:{
  getattr(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.atime);
          attr.mtime = new Date(node.mtime);
          attr.ctime = new Date(node.ctime);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },
  setattr(node, attr) {
          for (const key of ["mode", "atime", "mtime", "ctime"]) {
            if (attr[key] != null) {
              node[key] = attr[key];
            }
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },
  lookup(parent, name) {
          throw new FS.ErrnoError(44);
        },
  mknod(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },
  rename(old_node, new_dir, new_name) {
          var new_node;
          try {
            new_node = FS.lookupNode(new_dir, new_name);
          } catch (e) {}
          if (new_node) {
            if (FS.isDir(old_node.mode)) {
              // if we're overwriting a directory at new_name, make sure it's empty.
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
            FS.hashRemoveNode(new_node);
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          new_dir.contents[new_name] = old_node;
          old_node.name = new_name;
          new_dir.ctime = new_dir.mtime = old_node.parent.ctime = old_node.parent.mtime = Date.now();
        },
  unlink(parent, name) {
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  rmdir(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.ctime = parent.mtime = Date.now();
        },
  readdir(node) {
          return ['.', '..', ...Object.keys(node.contents)];
        },
  symlink(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 0o777 | 40960, 0);
          node.link = oldpath;
          return node;
        },
  readlink(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        },
  },
  stream_ops:{
  read(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },
  write(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.mtime = node.ctime = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },
  llseek(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },
  mmap(stream, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents && contents.buffer === HEAP8.buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the
            // buffer we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            if (contents) {
              // Try to avoid unnecessary slices.
              if (position > 0 || position + length < contents.length) {
                if (contents.subarray) {
                  contents = contents.subarray(position, position + length);
                } else {
                  contents = Array.prototype.slice.call(contents, position, position + length);
                }
              }
              HEAP8.set(contents, ptr);
            }
          }
          return { ptr, allocated };
        },
  msync(stream, buffer, offset, length, mmapFlags) {
          MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        },
  },
  };
  
  var asyncLoad = async (url) => {
      var arrayBuffer = await readAsync(url);
      assert(arrayBuffer, `Loading data file "${url}" failed (no arrayBuffer).`);
      return new Uint8Array(arrayBuffer);
    };
  
  
  var FS_createDataFile = (parent, name, fileData, canRead, canWrite, canOwn) => {
      FS.createDataFile(parent, name, fileData, canRead, canWrite, canOwn);
    };
  
  var preloadPlugins = Module['preloadPlugins'] || [];
  var FS_handledByPreloadPlugin = (byteArray, fullname, finish, onerror) => {
      // Ensure plugins are ready.
      if (typeof Browser != 'undefined') Browser.init();
  
      var handled = false;
      preloadPlugins.forEach((plugin) => {
        if (handled) return;
        if (plugin['canHandle'](fullname)) {
          plugin['handle'](byteArray, fullname, finish, onerror);
          handled = true;
        }
      });
      return handled;
    };
  var FS_createPreloadedFile = (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) => {
      // TODO we should allow people to just pass in a complete filename instead
      // of parent and name being that we just join them anyways
      var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
      var dep = getUniqueRunDependency(`cp ${fullname}`); // might have several active requests for the same fullname
      function processData(byteArray) {
        function finish(byteArray) {
          preFinish?.();
          if (!dontCreateFile) {
            FS_createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
          }
          onload?.();
          removeRunDependency(dep);
        }
        if (FS_handledByPreloadPlugin(byteArray, fullname, finish, () => {
          onerror?.();
          removeRunDependency(dep);
        })) {
          return;
        }
        finish(byteArray);
      }
      addRunDependency(dep);
      if (typeof url == 'string') {
        asyncLoad(url).then(processData, onerror);
      } else {
        processData(url);
      }
    };
  
  var FS_modeStringToFlags = (str) => {
      var flagModes = {
        'r': 0,
        'r+': 2,
        'w': 512 | 64 | 1,
        'w+': 512 | 64 | 2,
        'a': 1024 | 64 | 1,
        'a+': 1024 | 64 | 2,
      };
      var flags = flagModes[str];
      if (typeof flags == 'undefined') {
        throw new Error(`Unknown file open mode: ${str}`);
      }
      return flags;
    };
  
  var FS_getMode = (canRead, canWrite) => {
      var mode = 0;
      if (canRead) mode |= 292 | 73;
      if (canWrite) mode |= 146;
      return mode;
    };
  
  
  
  
  
  
  var strError = (errno) => UTF8ToString(_strerror(errno));
  
  var ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };
  var FS = {
  root:null,
  mounts:[],
  devices:{
  },
  streams:[],
  nextInode:1,
  nameTable:null,
  currentPath:"/",
  initialized:false,
  ignorePermissions:true,
  filesystems:null,
  syncFSRequests:0,
  readFiles:{
  },
  ErrnoError:class extends Error {
        name = 'ErrnoError';
        // We set the `name` property to be able to identify `FS.ErrnoError`
        // - the `name` is a standard ECMA-262 property of error objects. Kind of good to have it anyway.
        // - when using PROXYFS, an error can come from an underlying FS
        // as different FS objects have their own FS.ErrnoError each,
        // the test `err instanceof FS.ErrnoError` won't detect an error coming from another filesystem, causing bugs.
        // we'll use the reliable test `err.name == "ErrnoError"` instead
        constructor(errno) {
          super(runtimeInitialized ? strError(errno) : '');
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
        }
      },
  FSStream:class {
        shared = {};
        get object() {
          return this.node;
        }
        set object(val) {
          this.node = val;
        }
        get isRead() {
          return (this.flags & 2097155) !== 1;
        }
        get isWrite() {
          return (this.flags & 2097155) !== 0;
        }
        get isAppend() {
          return (this.flags & 1024);
        }
        get flags() {
          return this.shared.flags;
        }
        set flags(val) {
          this.shared.flags = val;
        }
        get position() {
          return this.shared.position;
        }
        set position(val) {
          this.shared.position = val;
        }
      },
  FSNode:class {
        node_ops = {};
        stream_ops = {};
        readMode = 292 | 73;
        writeMode = 146;
        mounted = null;
        constructor(parent, name, mode, rdev) {
          if (!parent) {
            parent = this;  // root node sets parent to itself
          }
          this.parent = parent;
          this.mount = parent.mount;
          this.id = FS.nextInode++;
          this.name = name;
          this.mode = mode;
          this.rdev = rdev;
          this.atime = this.mtime = this.ctime = Date.now();
        }
        get read() {
          return (this.mode & this.readMode) === this.readMode;
        }
        set read(val) {
          val ? this.mode |= this.readMode : this.mode &= ~this.readMode;
        }
        get write() {
          return (this.mode & this.writeMode) === this.writeMode;
        }
        set write(val) {
          val ? this.mode |= this.writeMode : this.mode &= ~this.writeMode;
        }
        get isFolder() {
          return FS.isDir(this.mode);
        }
        get isDevice() {
          return FS.isChrdev(this.mode);
        }
      },
  lookupPath(path, opts = {}) {
        if (!path) {
          throw new FS.ErrnoError(44);
        }
        opts.follow_mount ??= true
  
        if (!PATH.isAbs(path)) {
          path = FS.cwd() + '/' + path;
        }
  
        // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
        linkloop: for (var nlinks = 0; nlinks < 40; nlinks++) {
          // split the absolute path
          var parts = path.split('/').filter((p) => !!p);
  
          // start at the root
          var current = FS.root;
          var current_path = '/';
  
          for (var i = 0; i < parts.length; i++) {
            var islast = (i === parts.length-1);
            if (islast && opts.parent) {
              // stop resolving
              break;
            }
  
            if (parts[i] === '.') {
              continue;
            }
  
            if (parts[i] === '..') {
              current_path = PATH.dirname(current_path);
              current = current.parent;
              continue;
            }
  
            current_path = PATH.join2(current_path, parts[i]);
            try {
              current = FS.lookupNode(current, parts[i]);
            } catch (e) {
              // if noent_okay is true, suppress a ENOENT in the last component
              // and return an object with an undefined node. This is needed for
              // resolving symlinks in the path when creating a file.
              if ((e?.errno === 44) && islast && opts.noent_okay) {
                return { path: current_path };
              }
              throw e;
            }
  
            // jump to the mount's root node if this is a mountpoint
            if (FS.isMountpoint(current) && (!islast || opts.follow_mount)) {
              current = current.mounted.root;
            }
  
            // by default, lookupPath will not follow a symlink if it is the final path component.
            // setting opts.follow = true will override this behavior.
            if (FS.isLink(current.mode) && (!islast || opts.follow)) {
              if (!current.node_ops.readlink) {
                throw new FS.ErrnoError(52);
              }
              var link = current.node_ops.readlink(current);
              if (!PATH.isAbs(link)) {
                link = PATH.dirname(current_path) + '/' + link;
              }
              path = link + '/' + parts.slice(i + 1).join('/');
              continue linkloop;
            }
          }
          return { path: current_path, node: current };
        }
        throw new FS.ErrnoError(32);
      },
  getPath(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? `${mount}/${path}` : mount + path;
          }
          path = path ? `${node.name}/${path}` : node.name;
          node = node.parent;
        }
      },
  hashName(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },
  hashAddNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },
  hashRemoveNode(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },
  lookupNode(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },
  createNode(parent, name, mode, rdev) {
        assert(typeof parent == 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },
  destroyNode(node) {
        FS.hashRemoveNode(node);
      },
  isRoot(node) {
        return node === node.parent;
      },
  isMountpoint(node) {
        return !!node.mounted;
      },
  isFile(mode) {
        return (mode & 61440) === 32768;
      },
  isDir(mode) {
        return (mode & 61440) === 16384;
      },
  isLink(mode) {
        return (mode & 61440) === 40960;
      },
  isChrdev(mode) {
        return (mode & 61440) === 8192;
      },
  isBlkdev(mode) {
        return (mode & 61440) === 24576;
      },
  isFIFO(mode) {
        return (mode & 61440) === 4096;
      },
  isSocket(mode) {
        return (mode & 49152) === 49152;
      },
  flagsToPermissionString(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },
  nodePermissions(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },
  mayLookup(dir) {
        if (!FS.isDir(dir.mode)) return 54;
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },
  mayCreate(dir, name) {
        if (!FS.isDir(dir.mode)) {
          return 54;
        }
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },
  mayDelete(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },
  mayOpen(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' // opening for write
              || (flags & (512 | 64))) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },
  checkOpExists(op, err) {
        if (!op) {
          throw new FS.ErrnoError(err);
        }
        return op;
      },
  MAX_OPEN_FDS:4096,
  nextfd() {
        for (var fd = 0; fd <= FS.MAX_OPEN_FDS; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },
  getStreamChecked(fd) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        return stream;
      },
  getStream:(fd) => FS.streams[fd],
  createStream(stream, fd = -1) {
        assert(fd >= -1);
  
        // clone it, so we can return an instance of FSStream
        stream = Object.assign(new FS.FSStream(), stream);
        if (fd == -1) {
          fd = FS.nextfd();
        }
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },
  closeStream(fd) {
        FS.streams[fd] = null;
      },
  dupStream(origStream, fd = -1) {
        var stream = FS.createStream(origStream, fd);
        stream.stream_ops?.dup?.(stream);
        return stream;
      },
  doSetAttr(stream, node, attr) {
        var setattr = stream?.stream_ops.setattr;
        var arg = setattr ? stream : node;
        setattr ??= node.node_ops.setattr;
        FS.checkOpExists(setattr, 63)
        setattr(arg, attr);
      },
  chrdev_stream_ops:{
  open(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          stream.stream_ops.open?.(stream);
        },
  llseek() {
          throw new FS.ErrnoError(70);
        },
  },
  major:(dev) => ((dev) >> 8),
  minor:(dev) => ((dev) & 0xff),
  makedev:(ma, mi) => ((ma) << 8 | (mi)),
  registerDevice(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },
  getDevice:(dev) => FS.devices[dev],
  getMounts(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push(...m.mounts);
        }
  
        return mounts;
      },
  syncfs(populate, callback) {
        if (typeof populate == 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err(`warning: ${FS.syncFSRequests} FS.syncfs operations in flight at once, probably just doing extra work`);
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach((mount) => {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },
  mount(type, opts, mountpoint) {
        if (typeof type == 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type,
          opts,
          mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },
  unmount(mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach((hash) => {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },
  lookup(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },
  mknod(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name) {
          throw new FS.ErrnoError(28);
        }
        if (name === '.' || name === '..') {
          throw new FS.ErrnoError(20);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },
  statfs(path) {
        return FS.statfsNode(FS.lookupPath(path, {follow: true}).node);
      },
  statfsStream(stream) {
        // We keep a separate statfsStream function because noderawfs overrides
        // it. In noderawfs, stream.node is sometimes null. Instead, we need to
        // look at stream.path.
        return FS.statfsNode(stream.node);
      },
  statfsNode(node) {
        // NOTE: None of the defaults here are true. We're just returning safe and
        //       sane values. Currently nodefs and rawfs replace these defaults,
        //       other file systems leave them alone.
        var rtn = {
          bsize: 4096,
          frsize: 4096,
          blocks: 1e6,
          bfree: 5e5,
          bavail: 5e5,
          files: FS.nextInode,
          ffree: FS.nextInode - 1,
          fsid: 42,
          flags: 2,
          namelen: 255,
        };
  
        if (node.node_ops.statfs) {
          Object.assign(rtn, node.node_ops.statfs(node.mount.opts.root));
        }
        return rtn;
      },
  create(path, mode = 0o666) {
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },
  mkdir(path, mode = 0o777) {
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },
  mkdirTree(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var dir of dirs) {
          if (!dir) continue;
          if (d || PATH.isAbs(path)) d += '/';
          d += dir;
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },
  mkdev(path, mode, dev) {
        if (typeof dev == 'undefined') {
          dev = mode;
          mode = 0o666;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },
  symlink(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },
  rename(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existent directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
          // update old node (we do this here to avoid each backend
          // needing to)
          old_node.parent = new_dir;
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },
  rmdir(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },
  readdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var readdir = FS.checkOpExists(node.node_ops.readdir, 54);
        return readdir(node);
      },
  unlink(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },
  readlink(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return link.node_ops.readlink(link);
      },
  stat(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        var getattr = FS.checkOpExists(node.node_ops.getattr, 63);
        return getattr(node);
      },
  fstat(fd) {
        var stream = FS.getStreamChecked(fd);
        var node = stream.node;
        var getattr = stream.stream_ops.getattr;
        var arg = getattr ? stream : node;
        getattr ??= node.node_ops.getattr;
        FS.checkOpExists(getattr, 63)
        return getattr(arg);
      },
  lstat(path) {
        return FS.stat(path, true);
      },
  doChmod(stream, node, mode, dontFollow) {
        FS.doSetAttr(stream, node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          ctime: Date.now(),
          dontFollow
        });
      },
  chmod(path, mode, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doChmod(null, node, mode, dontFollow);
      },
  lchmod(path, mode) {
        FS.chmod(path, mode, true);
      },
  fchmod(fd, mode) {
        var stream = FS.getStreamChecked(fd);
        FS.doChmod(stream, stream.node, mode, false);
      },
  doChown(stream, node, dontFollow) {
        FS.doSetAttr(stream, node, {
          timestamp: Date.now(),
          dontFollow
          // we ignore the uid / gid for now
        });
      },
  chown(path, uid, gid, dontFollow) {
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doChown(null, node, dontFollow);
      },
  lchown(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },
  fchown(fd, uid, gid) {
        var stream = FS.getStreamChecked(fd);
        FS.doChown(stream, stream.node, false);
      },
  doTruncate(stream, node, len) {
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.doSetAttr(stream, node, {
          size: len,
          timestamp: Date.now()
        });
      },
  truncate(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path == 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        FS.doTruncate(null, node, len);
      },
  ftruncate(fd, len) {
        var stream = FS.getStreamChecked(fd);
        if (len < 0 || (stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.doTruncate(stream, stream.node, len);
      },
  utime(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        var setattr = FS.checkOpExists(node.node_ops.setattr, 63);
        setattr(node, {
          atime: atime,
          mtime: mtime
        });
      },
  open(path, flags, mode = 0o666) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags == 'string' ? FS_modeStringToFlags(flags) : flags;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        var isDirPath;
        if (typeof path == 'object') {
          node = path;
        } else {
          isDirPath = path.endsWith("/");
          // noent_okay makes it so that if the final component of the path
          // doesn't exist, lookupPath returns `node: undefined`. `path` will be
          // updated to point to the target of all symlinks.
          var lookup = FS.lookupPath(path, {
            follow: !(flags & 131072),
            noent_okay: true
          });
          node = lookup.node;
          path = lookup.path;
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else if (isDirPath) {
            throw new FS.ErrnoError(31);
          } else {
            // node doesn't exist, try to create it
            // Ignore the permission bits here to ensure we can `open` this new
            // file below. We use chmod below the apply the permissions once the
            // file is open.
            node = FS.mknod(path, mode | 0o777, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512) && !created) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        });
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (created) {
          FS.chmod(node, mode & 0o777);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },
  close(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },
  isClosed(stream) {
        return stream.fd === null;
      },
  llseek(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },
  read(stream, buffer, offset, length, position) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },
  write(stream, buffer, offset, length, position, canOwn) {
        assert(offset >= 0);
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position != 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },
  mmap(stream, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        if (!length) {
          throw new FS.ErrnoError(28);
        }
        return stream.stream_ops.mmap(stream, length, position, prot, flags);
      },
  msync(stream, buffer, offset, length, mmapFlags) {
        assert(offset >= 0);
        if (!stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },
  ioctl(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },
  readFile(path, opts = {}) {
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error(`Invalid encoding type "${opts.encoding}"`);
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },
  writeFile(path, data, opts = {}) {
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data == 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },
  cwd:() => FS.currentPath,
  chdir(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },
  createDefaultDirectories() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },
  createDefaultDevices() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: () => 0,
          write: (stream, buffer, offset, length, pos) => length,
          llseek: () => 0,
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        // use a buffer to avoid overhead of individual crypto calls per byte
        var randomBuffer = new Uint8Array(1024), randomLeft = 0;
        var randomByte = () => {
          if (randomLeft === 0) {
            randomFill(randomBuffer);
            randomLeft = randomBuffer.byteLength;
          }
          return randomBuffer[--randomLeft];
        };
        FS.createDevice('/dev', 'random', randomByte);
        FS.createDevice('/dev', 'urandom', randomByte);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },
  createSpecialDirectories() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount() {
            var node = FS.createNode(proc_self, 'fd', 16895, 73);
            node.stream_ops = {
              llseek: MEMFS.stream_ops.llseek,
            };
            node.node_ops = {
              lookup(parent, name) {
                var fd = +name;
                var stream = FS.getStreamChecked(fd);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: () => stream.path },
                  id: fd + 1,
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              },
              readdir() {
                return Array.from(FS.streams.entries())
                  .filter(([k, v]) => v)
                  .map(([k, v]) => k.toString());
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },
  createStandardStreams(input, output, error) {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (input) {
          FS.createDevice('/dev', 'stdin', input);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (output) {
          FS.createDevice('/dev', 'stdout', null, output);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (error) {
          FS.createDevice('/dev', 'stderr', null, error);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, `invalid handle for stdin (${stdin.fd})`);
        assert(stdout.fd === 1, `invalid handle for stdout (${stdout.fd})`);
        assert(stderr.fd === 2, `invalid handle for stderr (${stderr.fd})`);
      },
  staticInit() {
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },
  init(input, output, error) {
        assert(!FS.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.initialized = true;
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input ??= Module['stdin'];
        output ??= Module['stdout'];
        error ??= Module['stderr'];
  
        FS.createStandardStreams(input, output, error);
      },
  quit() {
        FS.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        _fflush(0);
        // close all of our streams
        for (var stream of FS.streams) {
          if (stream) {
            FS.close(stream);
          }
        }
      },
  findObject(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (!ret.exists) {
          return null;
        }
        return ret.object;
      },
  analyzePath(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },
  createPath(parent, path, canRead, canWrite) {
        parent = typeof parent == 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            if (e.errno != 20) throw e;
          }
          parent = current;
        }
        return current;
      },
  createFile(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(canRead, canWrite);
        return FS.create(path, mode);
      },
  createDataFile(parent, name, data, canRead, canWrite, canOwn) {
        var path = name;
        if (parent) {
          parent = typeof parent == 'string' ? parent : FS.getPath(parent);
          path = name ? PATH.join2(parent, name) : parent;
        }
        var mode = FS_getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data == 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
      },
  createDevice(parent, name, input, output) {
        var path = PATH.join2(typeof parent == 'string' ? parent : FS.getPath(parent), name);
        var mode = FS_getMode(!!input, !!output);
        FS.createDevice.major ??= 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open(stream) {
            stream.seekable = false;
          },
          close(stream) {
            // flush any pending line data
            if (output?.buffer?.length) {
              output(10);
            }
          },
          read(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.atime = Date.now();
            }
            return bytesRead;
          },
          write(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.mtime = stream.node.ctime = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },
  forceLoadFile(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest != 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else { // Command-line.
          try {
            obj.contents = readBinary(obj.url);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        }
      },
  createLazyFile(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array).
        // Actual getting is abstracted away for eventual reuse.
        class LazyUint8Array {
          lengthKnown = false;
          chunks = []; // Loaded chunks. Index is the chunk number
          get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = (idx / this.chunkSize)|0;
            return this.getter(chunkNum)[chunkOffset];
          }
          setDataGetter(getter) {
            this.getter = getter;
          }
          cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (from, to) => {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
              }
              return intArrayFromString(xhr.responseText || '', true);
            };
            var lazyArray = this;
            lazyArray.setDataGetter((chunkNum) => {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof lazyArray.chunks[chunkNum] == 'undefined') throw new Error('doXHR failed!');
              return lazyArray.chunks[chunkNum];
            });
  
            if (usesGzip || !datalength) {
              // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
              chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
              datalength = this.getter(0).length;
              chunkSize = datalength;
              out("LazyFiles on gzip forces download of the whole file when length is accessed");
            }
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
          }
          get length() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._length;
          }
          get chunkSize() {
            if (!this.lengthKnown) {
              this.cacheLength();
            }
            return this._chunkSize;
          }
        }
  
        if (typeof XMLHttpRequest != 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach((key) => {
          var fn = node.stream_ops[key];
          stream_ops[key] = (...args) => {
            FS.forceLoadFile(node);
            return fn(...args);
          };
        });
        function writeChunks(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        }
        // use a custom read function
        stream_ops.read = (stream, buffer, offset, length, position) => {
          FS.forceLoadFile(node);
          return writeChunks(stream, buffer, offset, length, position)
        };
        // use a custom mmap function
        stream_ops.mmap = (stream, length, position, prot, flags) => {
          FS.forceLoadFile(node);
          var ptr = mmapAlloc(length);
          if (!ptr) {
            throw new FS.ErrnoError(48);
          }
          writeChunks(stream, HEAP8, ptr, length, position);
          return { ptr, allocated: true };
        };
        node.stream_ops = stream_ops;
        return node;
      },
  absolutePath() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },
  createFolder() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },
  createLink() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },
  joinPath() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },
  mmapAlloc() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },
  standardizePath() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      },
  };
  
  var SYSCALLS = {
  DEFAULT_POLLMASK:5,
  calculateAt(dirfd, path, allowEmpty) {
        if (PATH.isAbs(path)) {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = SYSCALLS.getStreamFromFD(dirfd);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return dir + '/' + path;
      },
  writeStat(buf, stat) {
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = stat.mode;
        HEAPU32[(((buf)+(8))>>2)] = stat.nlink;
        HEAP32[(((buf)+(12))>>2)] = stat.uid;
        HEAP32[(((buf)+(16))>>2)] = stat.gid;
        HEAP32[(((buf)+(20))>>2)] = stat.rdev;
        (tempI64 = [stat.size>>>0,(tempDouble = stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(24))>>2)] = tempI64[0],HEAP32[(((buf)+(28))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(32))>>2)] = 4096;
        HEAP32[(((buf)+(36))>>2)] = stat.blocks;
        var atime = stat.atime.getTime();
        var mtime = stat.mtime.getTime();
        var ctime = stat.ctime.getTime();
        (tempI64 = [Math.floor(atime / 1000)>>>0,(tempDouble = Math.floor(atime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(48))>>2)] = (atime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(mtime / 1000)>>>0,(tempDouble = Math.floor(mtime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(56))>>2)] = tempI64[0],HEAP32[(((buf)+(60))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(64))>>2)] = (mtime % 1000) * 1000 * 1000;
        (tempI64 = [Math.floor(ctime / 1000)>>>0,(tempDouble = Math.floor(ctime / 1000),(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(72))>>2)] = tempI64[0],HEAP32[(((buf)+(76))>>2)] = tempI64[1]);
        HEAPU32[(((buf)+(80))>>2)] = (ctime % 1000) * 1000 * 1000;
        (tempI64 = [stat.ino>>>0,(tempDouble = stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[(((buf)+(88))>>2)] = tempI64[0],HEAP32[(((buf)+(92))>>2)] = tempI64[1]);
        return 0;
      },
  writeStatFs(buf, stats) {
        HEAP32[(((buf)+(4))>>2)] = stats.bsize;
        HEAP32[(((buf)+(40))>>2)] = stats.bsize;
        HEAP32[(((buf)+(8))>>2)] = stats.blocks;
        HEAP32[(((buf)+(12))>>2)] = stats.bfree;
        HEAP32[(((buf)+(16))>>2)] = stats.bavail;
        HEAP32[(((buf)+(20))>>2)] = stats.files;
        HEAP32[(((buf)+(24))>>2)] = stats.ffree;
        HEAP32[(((buf)+(28))>>2)] = stats.fsid;
        HEAP32[(((buf)+(44))>>2)] = stats.flags;  // ST_NOSUID
        HEAP32[(((buf)+(36))>>2)] = stats.namelen;
      },
  doMsync(addr, stream, len, flags, offset) {
        if (!FS.isFile(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (flags & 2) {
          // MAP_PRIVATE calls need not to be synced back to underlying fs
          return 0;
        }
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },
  getStreamFromFD(fd) {
        var stream = FS.getStreamChecked(fd);
        return stream;
      },
  varargs:undefined,
  getStr(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },
  };
  function _fd_close(fd) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  /** @param {number=} offset */
  var doReadv = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.read(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) break; // nothing more to read
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_read(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doReadv(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  
  var convertI32PairToI53Checked = (lo, hi) => {
      assert(lo == (lo >>> 0) || lo == (lo|0)); // lo should either be a i32 or a u32
      assert(hi === (hi|0));                    // hi should be a i32
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    };
  function _fd_seek(fd,offset_low, offset_high,whence,newOffset) {
    var offset = convertI32PairToI53Checked(offset_low, offset_high);
  
  
  try {
  
      if (isNaN(offset)) return 61;
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble = stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? (+(Math.floor((tempDouble)/4294967296.0)))>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)], HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  ;
  }

  /** @param {number=} offset */
  var doWritev = (stream, iov, iovcnt, offset) => {
      var ret = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        var curr = FS.write(stream, HEAP8, ptr, len, offset);
        if (curr < 0) return -1;
        ret += curr;
        if (curr < len) {
          // No more space to write.
          break;
        }
        if (typeof offset != 'undefined') {
          offset += curr;
        }
      }
      return ret;
    };
  
  function _fd_write(fd, iov, iovcnt, pnum) {
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = doWritev(stream, iov, iovcnt);
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    } catch (e) {
    if (typeof FS == 'undefined' || !(e.name === 'ErrnoError')) throw e;
    return e.errno;
  }
  }

  var getCFunc = (ident) => {
      var func = Module['_' + ident]; // closure exported function
      assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
      return func;
    };
  
  var writeArrayToMemory = (array, buffer) => {
      assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
      HEAP8.set(array, buffer);
    };
  
  
  
  var stackAlloc = (sz) => __emscripten_stack_alloc(sz);
  var stringToUTF8OnStack = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = stackAlloc(size);
      stringToUTF8(str, ret, size);
      return ret;
    };
  
  
  
  
  
    /**
     * @param {string|null=} returnType
     * @param {Array=} argTypes
     * @param {Arguments|Array=} args
     * @param {Object=} opts
     */
  var ccall = (ident, returnType, argTypes, args, opts) => {
      // For fast lookup of conversion functions
      var toC = {
        'string': (str) => {
          var ret = 0;
          if (str !== null && str !== undefined && str !== 0) { // null string
            ret = stringToUTF8OnStack(str);
          }
          return ret;
        },
        'array': (arr) => {
          var ret = stackAlloc(arr.length);
          writeArrayToMemory(arr, ret);
          return ret;
        }
      };
  
      function convertReturnValue(ret) {
        if (returnType === 'string') {
          return UTF8ToString(ret);
        }
        if (returnType === 'boolean') return Boolean(ret);
        return ret;
      }
  
      var func = getCFunc(ident);
      var cArgs = [];
      var stack = 0;
      assert(returnType !== 'array', 'Return type should not be "array".');
      if (args) {
        for (var i = 0; i < args.length; i++) {
          var converter = toC[argTypes[i]];
          if (converter) {
            if (stack === 0) stack = stackSave();
            cArgs[i] = converter(args[i]);
          } else {
            cArgs[i] = args[i];
          }
        }
      }
      var ret = func(...cArgs);
      function onDone(ret) {
        if (stack !== 0) stackRestore(stack);
        return convertReturnValue(ret);
      }
  
      ret = onDone(ret);
      return ret;
    };
  
    /**
     * @param {string=} returnType
     * @param {Array=} argTypes
     * @param {Object=} opts
     */
  var cwrap = (ident, returnType, argTypes, opts) => {
      return (...args) => ccall(ident, returnType, argTypes, args, opts);
    };

  
  
  var stringToNewUTF8 = (str) => {
      var size = lengthBytesUTF8(str) + 1;
      var ret = _malloc(size);
      if (ret) stringToUTF8(str, ret, size);
      return ret;
    };
  Module['stringToNewUTF8'] = stringToNewUTF8;
embind_init_charCodes();
init_emval();;

  FS.createPreloadedFile = FS_createPreloadedFile;
  FS.staticInit();
  // Set module methods based on EXPORTED_RUNTIME_METHODS
  ;
// End JS library code

function checkIncomingModuleAPI() {
  ignoredModuleProp('fetchSettings');
}
var wasmImports = {
  /** @export */
  __cxa_throw: ___cxa_throw,
  /** @export */
  _abort_js: __abort_js,
  /** @export */
  _embind_register_bigint: __embind_register_bigint,
  /** @export */
  _embind_register_bool: __embind_register_bool,
  /** @export */
  _embind_register_emval: __embind_register_emval,
  /** @export */
  _embind_register_float: __embind_register_float,
  /** @export */
  _embind_register_integer: __embind_register_integer,
  /** @export */
  _embind_register_memory_view: __embind_register_memory_view,
  /** @export */
  _embind_register_std_string: __embind_register_std_string,
  /** @export */
  _embind_register_std_wstring: __embind_register_std_wstring,
  /** @export */
  _embind_register_void: __embind_register_void,
  /** @export */
  _tzset_js: __tzset_js,
  /** @export */
  emscripten_date_now: _emscripten_date_now,
  /** @export */
  emscripten_resize_heap: _emscripten_resize_heap,
  /** @export */
  environ_get: _environ_get,
  /** @export */
  environ_sizes_get: _environ_sizes_get,
  /** @export */
  exit: _exit,
  /** @export */
  fd_close: _fd_close,
  /** @export */
  fd_read: _fd_read,
  /** @export */
  fd_seek: _fd_seek,
  /** @export */
  fd_write: _fd_write
};
var wasmExports = await createWasm();
var ___wasm_call_ctors = createExportWrapper('__wasm_call_ctors', 0);
var _malloc = createExportWrapper('malloc', 1);
var _free = createExportWrapper('free', 1);
var _generatePEMDAS_geradorZ = Module['_generatePEMDAS_geradorZ'] = createExportWrapper('generatePEMDAS_geradorZ', 2);
var _generatePEMDAS_testePEMDAS = Module['_generatePEMDAS_testePEMDAS'] = createExportWrapper('generatePEMDAS_testePEMDAS', 2);
var ___getTypeName = createExportWrapper('__getTypeName', 1);
var _fflush = createExportWrapper('fflush', 1);
var _strerror = createExportWrapper('strerror', 1);
var _emscripten_stack_init = wasmExports['emscripten_stack_init']
var _emscripten_stack_get_free = wasmExports['emscripten_stack_get_free']
var _emscripten_stack_get_base = wasmExports['emscripten_stack_get_base']
var _emscripten_stack_get_end = wasmExports['emscripten_stack_get_end']
var __emscripten_stack_restore = wasmExports['_emscripten_stack_restore']
var __emscripten_stack_alloc = wasmExports['_emscripten_stack_alloc']
var _emscripten_stack_get_current = wasmExports['emscripten_stack_get_current']
var dynCall_jiji = Module['dynCall_jiji'] = createExportWrapper('dynCall_jiji', 5);
var dynCall_viijii = Module['dynCall_viijii'] = createExportWrapper('dynCall_viijii', 7);
var dynCall_iiiiij = Module['dynCall_iiiiij'] = createExportWrapper('dynCall_iiiiij', 7);
var dynCall_iiiiijj = Module['dynCall_iiiiijj'] = createExportWrapper('dynCall_iiiiijj', 9);
var dynCall_iiiiiijj = Module['dynCall_iiiiiijj'] = createExportWrapper('dynCall_iiiiiijj', 10);


// include: postamble.js
// === Auto-generated postamble setup entry stuff ===

Module['cwrap'] = cwrap;
var missingLibrarySymbols = [
  'writeI53ToI64',
  'writeI53ToI64Clamped',
  'writeI53ToI64Signaling',
  'writeI53ToU64Clamped',
  'writeI53ToU64Signaling',
  'readI53FromI64',
  'readI53FromU64',
  'convertI32PairToI53',
  'convertU32PairToI53',
  'getTempRet0',
  'setTempRet0',
  'zeroMemory',
  'getHeapMax',
  'growMemory',
  'inetPton4',
  'inetNtop4',
  'inetPton6',
  'inetNtop6',
  'readSockaddr',
  'writeSockaddr',
  'emscriptenLog',
  'readEmAsmArgs',
  'jstoi_q',
  'listenOnce',
  'autoResumeAudioContext',
  'dynCallLegacy',
  'getDynCaller',
  'dynCall',
  'handleException',
  'runtimeKeepalivePush',
  'runtimeKeepalivePop',
  'callUserCallback',
  'maybeExit',
  'asmjsMangle',
  'alignMemory',
  'HandleAllocator',
  'getNativeTypeSize',
  'addOnInit',
  'addOnPostCtor',
  'addOnPreMain',
  'addOnExit',
  'STACK_SIZE',
  'STACK_ALIGN',
  'POINTER_SIZE',
  'ASSERTIONS',
  'uleb128Encode',
  'sigToWasmTypes',
  'generateFuncType',
  'convertJsFunctionToWasm',
  'getEmptyTableSlot',
  'updateTableMap',
  'getFunctionAddress',
  'addFunction',
  'removeFunction',
  'reallyNegative',
  'unSign',
  'strLen',
  'reSign',
  'formatString',
  'intArrayToString',
  'AsciiToString',
  'registerKeyEventCallback',
  'maybeCStringToJsString',
  'findEventTarget',
  'getBoundingClientRect',
  'fillMouseEventData',
  'registerMouseEventCallback',
  'registerWheelEventCallback',
  'registerUiEventCallback',
  'registerFocusEventCallback',
  'fillDeviceOrientationEventData',
  'registerDeviceOrientationEventCallback',
  'fillDeviceMotionEventData',
  'registerDeviceMotionEventCallback',
  'screenOrientation',
  'fillOrientationChangeEventData',
  'registerOrientationChangeEventCallback',
  'fillFullscreenChangeEventData',
  'registerFullscreenChangeEventCallback',
  'JSEvents_requestFullscreen',
  'JSEvents_resizeCanvasForFullscreen',
  'registerRestoreOldStyle',
  'hideEverythingExceptGivenElement',
  'restoreHiddenElements',
  'setLetterbox',
  'softFullscreenResizeWebGLRenderTarget',
  'doRequestFullscreen',
  'fillPointerlockChangeEventData',
  'registerPointerlockChangeEventCallback',
  'registerPointerlockErrorEventCallback',
  'requestPointerLock',
  'fillVisibilityChangeEventData',
  'registerVisibilityChangeEventCallback',
  'registerTouchEventCallback',
  'fillGamepadEventData',
  'registerGamepadEventCallback',
  'registerBeforeUnloadEventCallback',
  'fillBatteryEventData',
  'battery',
  'registerBatteryEventCallback',
  'setCanvasElementSize',
  'getCanvasElementSize',
  'jsStackTrace',
  'getCallstack',
  'convertPCtoSourceLocation',
  'checkWasiClock',
  'wasiRightsToMuslOFlags',
  'wasiOFlagsToMuslOFlags',
  'safeSetTimeout',
  'setImmediateWrapped',
  'safeRequestAnimationFrame',
  'clearImmediateWrapped',
  'registerPostMainLoop',
  'registerPreMainLoop',
  'getPromise',
  'makePromise',
  'idsToPromises',
  'makePromiseCallback',
  'findMatchingCatch',
  'Browser_asyncPrepareDataCounter',
  'isLeapYear',
  'ydayFromDate',
  'arraySum',
  'addDays',
  'getSocketFromFD',
  'getSocketAddress',
  'FS_unlink',
  'FS_mkdirTree',
  '_setNetworkCallback',
  'heapObjectForWebGLType',
  'toTypedArrayIndex',
  'webgl_enable_ANGLE_instanced_arrays',
  'webgl_enable_OES_vertex_array_object',
  'webgl_enable_WEBGL_draw_buffers',
  'webgl_enable_WEBGL_multi_draw',
  'webgl_enable_EXT_polygon_offset_clamp',
  'webgl_enable_EXT_clip_control',
  'webgl_enable_WEBGL_polygon_mode',
  'emscriptenWebGLGet',
  'computeUnpackAlignedImageSize',
  'colorChannelsInGlTextureFormat',
  'emscriptenWebGLGetTexPixelData',
  'emscriptenWebGLGetUniform',
  'webglGetUniformLocation',
  'webglPrepareUniformLocationsBeforeFirstUse',
  'webglGetLeftBracePos',
  'emscriptenWebGLGetVertexAttrib',
  '__glGetActiveAttribOrUniform',
  'writeGLArray',
  'registerWebGlEventCallback',
  'runAndAbortIfError',
  'ALLOC_NORMAL',
  'ALLOC_STACK',
  'allocate',
  'writeStringToMemory',
  'writeAsciiToMemory',
  'demangle',
  'stackTrace',
  'throwInternalError',
  'whenDependentTypesAreResolved',
  'getTypeName',
  'getFunctionName',
  'getFunctionArgsName',
  'heap32VectorToArray',
  'requireRegisteredType',
  'usesDestructorStack',
  'createJsInvokerSignature',
  'checkArgCount',
  'getRequiredArgCount',
  'createJsInvoker',
  'UnboundTypeError',
  'PureVirtualError',
  'throwUnboundTypeError',
  'ensureOverloadTable',
  'exposePublicSymbol',
  'replacePublicSymbol',
  'createNamedFunction',
  'getBasestPointer',
  'registerInheritedInstance',
  'unregisterInheritedInstance',
  'getInheritedInstance',
  'getInheritedInstanceCount',
  'getLiveInheritedInstances',
  'enumReadValueFromPointer',
  'runDestructors',
  'craftInvokerFunction',
  'embind__requireFunction',
  'genericPointerToWireType',
  'constNoSmartPtrRawPointerToWireType',
  'nonConstNoSmartPtrRawPointerToWireType',
  'init_RegisteredPointer',
  'RegisteredPointer',
  'RegisteredPointer_fromWireType',
  'runDestructor',
  'releaseClassHandle',
  'detachFinalizer',
  'attachFinalizer',
  'makeClassHandle',
  'init_ClassHandle',
  'ClassHandle',
  'throwInstanceAlreadyDeleted',
  'flushPendingDeletes',
  'setDelayFunction',
  'RegisteredClass',
  'shallowCopyInternalPointer',
  'downcastPointer',
  'upcastPointer',
  'validateThis',
  'char_0',
  'char_9',
  'makeLegalFunctionName',
  'getStringOrSymbol',
  'emval_get_global',
  'emval_returnValue',
  'emval_lookupTypes',
  'emval_addMethodCaller',
];
missingLibrarySymbols.forEach(missingLibrarySymbol)

var unexportedSymbols = [
  'run',
  'addRunDependency',
  'removeRunDependency',
  'out',
  'err',
  'callMain',
  'abort',
  'wasmMemory',
  'wasmExports',
  'writeStackCookie',
  'checkStackCookie',
  'convertI32PairToI53Checked',
  'stackSave',
  'stackRestore',
  'stackAlloc',
  'ptrToString',
  'exitJS',
  'abortOnCannotGrowMemory',
  'ENV',
  'ERRNO_CODES',
  'strError',
  'DNS',
  'Protocols',
  'Sockets',
  'timers',
  'warnOnce',
  'readEmAsmArgsArray',
  'jstoi_s',
  'getExecutableName',
  'keepRuntimeAlive',
  'asyncLoad',
  'mmapAlloc',
  'wasmTable',
  'noExitRuntime',
  'addOnPreRun',
  'addOnPostRun',
  'getCFunc',
  'ccall',
  'freeTableIndexes',
  'functionsInTableMap',
  'setValue',
  'getValue',
  'PATH',
  'PATH_FS',
  'UTF8Decoder',
  'UTF8ArrayToString',
  'UTF8ToString',
  'stringToUTF8Array',
  'stringToUTF8',
  'lengthBytesUTF8',
  'intArrayFromString',
  'stringToAscii',
  'UTF16Decoder',
  'UTF16ToString',
  'stringToUTF16',
  'lengthBytesUTF16',
  'UTF32ToString',
  'stringToUTF32',
  'lengthBytesUTF32',
  'stringToNewUTF8',
  'stringToUTF8OnStack',
  'writeArrayToMemory',
  'JSEvents',
  'specialHTMLTargets',
  'findCanvasEventTarget',
  'currentFullscreenStrategy',
  'restoreOldWindowedStyle',
  'UNWIND_CACHE',
  'ExitStatus',
  'getEnvStrings',
  'doReadv',
  'doWritev',
  'initRandomFill',
  'randomFill',
  'emSetImmediate',
  'emClearImmediate_deps',
  'emClearImmediate',
  'promiseMap',
  'uncaughtExceptionCount',
  'exceptionLast',
  'exceptionCaught',
  'ExceptionInfo',
  'Browser',
  'getPreloadedImageData__data',
  'wget',
  'MONTH_DAYS_REGULAR',
  'MONTH_DAYS_LEAP',
  'MONTH_DAYS_REGULAR_CUMULATIVE',
  'MONTH_DAYS_LEAP_CUMULATIVE',
  'SYSCALLS',
  'preloadPlugins',
  'FS_createPreloadedFile',
  'FS_modeStringToFlags',
  'FS_getMode',
  'FS_stdin_getChar_buffer',
  'FS_stdin_getChar',
  'FS_createPath',
  'FS_createDevice',
  'FS_readFile',
  'FS',
  'FS_createDataFile',
  'FS_createLazyFile',
  'MEMFS',
  'TTY',
  'PIPEFS',
  'SOCKFS',
  'tempFixedLengthArray',
  'miniTempWebGLFloatBuffers',
  'miniTempWebGLIntBuffers',
  'GL',
  'AL',
  'GLUT',
  'EGL',
  'GLEW',
  'IDBStore',
  'SDL',
  'SDL_gfx',
  'allocateUTF8',
  'allocateUTF8OnStack',
  'print',
  'printErr',
  'InternalError',
  'BindingError',
  'throwBindingError',
  'registeredTypes',
  'awaitingDependencies',
  'typeDependencies',
  'tupleRegistrations',
  'structRegistrations',
  'sharedRegisterType',
  'embind_charCodes',
  'embind_init_charCodes',
  'readLatin1String',
  'GenericWireTypeSize',
  'EmValType',
  'EmValOptionalType',
  'embindRepr',
  'registeredInstances',
  'registeredPointers',
  'registerType',
  'integerReadValueFromPointer',
  'floatReadValueFromPointer',
  'readPointer',
  'finalizationRegistry',
  'detachFinalizer_deps',
  'deletionQueue',
  'delayFunction',
  'emval_freelist',
  'emval_handles',
  'emval_symbols',
  'init_emval',
  'count_emval_handles',
  'Emval',
  'emval_methodCallers',
  'reflectConstruct',
];
unexportedSymbols.forEach(unexportedRuntimeSymbol);



var calledRun;

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  _emscripten_stack_init();
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  writeStackCookie();
}

function run() {

  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    dependenciesFulfilled = run;
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    assert(!calledRun);
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    Module['onRuntimeInitialized']?.();
    consumedModuleProp('onRuntimeInitialized');

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(() => {
      setTimeout(() => Module['setStatus'](''), 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = (x) => {
    has = true;
  }
  try { // it doesn't matter if it fails
    _fflush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach((name) => {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty?.output?.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc.');
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}
consumedModuleProp('preInit');

run();

// end include: postamble.js

// include: postamble_modularize.js
// In MODULARIZE mode we wrap the generated code in a factory function
// and return either the Module itself, or a promise of the module.
//
// We assign to the `moduleRtn` global here and configure closure to see
// this as and extern so it won't get minified.

moduleRtn = readyPromise;

// Assertion for attempting to access module properties on the incoming
// moduleArg.  In the past we used this object as the prototype of the module
// and assigned properties to it, but now we return a distinct object.  This
// keeps the instance private until it is ready (i.e the promise has been
// resolved).
for (const prop of Object.keys(Module)) {
  if (!(prop in moduleArg)) {
    Object.defineProperty(moduleArg, prop, {
      configurable: true,
      get() {
        abort(`Access to module property ('${prop}') is no longer possible via the module constructor argument; Instead, use the result of the module constructor.`)
      }
    });
  }
}
// end include: postamble_modularize.js



  return moduleRtn;
}
);
})();
if (typeof exports === 'object' && typeof module === 'object') {
  module.exports = geradorZ;
  // This default export looks redundant, but it allows TS to import this
  // commonjs style module.
  module.exports.default = geradorZ;
} else if (typeof define === 'function' && define['amd'])
  define([], () => geradorZ);
